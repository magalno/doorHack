
SAMD21_XPLAINED_PRO_WIFI_SENSOR_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010c9c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00010c9c  00010c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000900  20000000  00010ca4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000007e0  20000900  000115a4  00020900  2**2
                  ALLOC
  4 .stack        00002000  200010e0  00011d84  00020900  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020900  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00020928  2**0
                  CONTENTS, READONLY
  7 .debug_info   0005ba75  00000000  00000000  00020999  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000ab60  00000000  00000000  0007c40e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000105fc  00000000  00000000  00086f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001710  00000000  00000000  00097570  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ff8  00000000  00000000  00098c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002069b  00000000  00000000  00099c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002630a  00000000  00000000  000ba313  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008a852  00000000  00000000  000e061d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004994  00000000  00000000  0016ae70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200030e0 	.word	0x200030e0
       4:	00008b0d 	.word	0x00008b0d
       8:	00008b91 	.word	0x00008b91
       c:	000083ad 	.word	0x000083ad
	...
      2c:	00008b91 	.word	0x00008b91
	...
      38:	00008b91 	.word	0x00008b91
      3c:	000096d9 	.word	0x000096d9
      40:	00008b91 	.word	0x00008b91
      44:	00008b91 	.word	0x00008b91
      48:	00008b91 	.word	0x00008b91
      4c:	00008b91 	.word	0x00008b91
      50:	000066d5 	.word	0x000066d5
      54:	00008b91 	.word	0x00008b91
      58:	00008b91 	.word	0x00008b91
      5c:	00008b91 	.word	0x00008b91
      60:	00008b91 	.word	0x00008b91
      64:	00006d51 	.word	0x00006d51
      68:	00006d65 	.word	0x00006d65
      6c:	00006d79 	.word	0x00006d79
      70:	00006d8d 	.word	0x00006d8d
      74:	00006da1 	.word	0x00006da1
      78:	00006db5 	.word	0x00006db5
      7c:	00008b91 	.word	0x00008b91
      80:	00008b91 	.word	0x00008b91
      84:	00008b91 	.word	0x00008b91
      88:	000089ed 	.word	0x000089ed
      8c:	00008a01 	.word	0x00008a01
      90:	00008a15 	.word	0x00008a15
      94:	00008a29 	.word	0x00008a29
      98:	00008a3d 	.word	0x00008a3d
      9c:	00008b91 	.word	0x00008b91
      a0:	00008b91 	.word	0x00008b91
      a4:	00008b91 	.word	0x00008b91
      a8:	00008b91 	.word	0x00008b91
      ac:	00008b91 	.word	0x00008b91

000000b0 <deregister_tm_clones>:
      b0:	b508      	push	{r3, lr}
      b2:	4b06      	ldr	r3, [pc, #24]	; (cc <deregister_tm_clones+0x1c>)
      b4:	4806      	ldr	r0, [pc, #24]	; (d0 <deregister_tm_clones+0x20>)
      b6:	3303      	adds	r3, #3
      b8:	1a1b      	subs	r3, r3, r0
      ba:	2b06      	cmp	r3, #6
      bc:	d800      	bhi.n	c0 <deregister_tm_clones+0x10>
      be:	bd08      	pop	{r3, pc}
      c0:	4b04      	ldr	r3, [pc, #16]	; (d4 <deregister_tm_clones+0x24>)
      c2:	2b00      	cmp	r3, #0
      c4:	d0fb      	beq.n	be <deregister_tm_clones+0xe>
      c6:	4798      	blx	r3
      c8:	e7f9      	b.n	be <deregister_tm_clones+0xe>
      ca:	46c0      	nop			; (mov r8, r8)
      cc:	00010ca4 	.word	0x00010ca4
      d0:	00010ca4 	.word	0x00010ca4
      d4:	00000000 	.word	0x00000000

000000d8 <register_tm_clones>:
      d8:	b508      	push	{r3, lr}
      da:	4807      	ldr	r0, [pc, #28]	; (f8 <register_tm_clones+0x20>)
      dc:	4b07      	ldr	r3, [pc, #28]	; (fc <register_tm_clones+0x24>)
      de:	1a1b      	subs	r3, r3, r0
      e0:	109b      	asrs	r3, r3, #2
      e2:	0fda      	lsrs	r2, r3, #31
      e4:	18d3      	adds	r3, r2, r3
      e6:	1059      	asrs	r1, r3, #1
      e8:	d100      	bne.n	ec <register_tm_clones+0x14>
      ea:	bd08      	pop	{r3, pc}
      ec:	4a04      	ldr	r2, [pc, #16]	; (100 <register_tm_clones+0x28>)
      ee:	2a00      	cmp	r2, #0
      f0:	d0fb      	beq.n	ea <register_tm_clones+0x12>
      f2:	4790      	blx	r2
      f4:	e7f9      	b.n	ea <register_tm_clones+0x12>
      f6:	46c0      	nop			; (mov r8, r8)
      f8:	00010ca4 	.word	0x00010ca4
      fc:	00010ca4 	.word	0x00010ca4
     100:	00000000 	.word	0x00000000

00000104 <__do_global_dtors_aux>:
     104:	b510      	push	{r4, lr}
     106:	4c07      	ldr	r4, [pc, #28]	; (124 <__do_global_dtors_aux+0x20>)
     108:	7823      	ldrb	r3, [r4, #0]
     10a:	2b00      	cmp	r3, #0
     10c:	d109      	bne.n	122 <__do_global_dtors_aux+0x1e>
     10e:	f7ff ffcf 	bl	b0 <deregister_tm_clones>
     112:	4b05      	ldr	r3, [pc, #20]	; (128 <__do_global_dtors_aux+0x24>)
     114:	2b00      	cmp	r3, #0
     116:	d002      	beq.n	11e <__do_global_dtors_aux+0x1a>
     118:	4804      	ldr	r0, [pc, #16]	; (12c <__do_global_dtors_aux+0x28>)
     11a:	e000      	b.n	11e <__do_global_dtors_aux+0x1a>
     11c:	bf00      	nop
     11e:	2301      	movs	r3, #1
     120:	7023      	strb	r3, [r4, #0]
     122:	bd10      	pop	{r4, pc}
     124:	20000900 	.word	0x20000900
     128:	00000000 	.word	0x00000000
     12c:	00010ca4 	.word	0x00010ca4

00000130 <frame_dummy>:
     130:	b508      	push	{r3, lr}
     132:	4b09      	ldr	r3, [pc, #36]	; (158 <frame_dummy+0x28>)
     134:	2b00      	cmp	r3, #0
     136:	d003      	beq.n	140 <frame_dummy+0x10>
     138:	4808      	ldr	r0, [pc, #32]	; (15c <frame_dummy+0x2c>)
     13a:	4909      	ldr	r1, [pc, #36]	; (160 <frame_dummy+0x30>)
     13c:	e000      	b.n	140 <frame_dummy+0x10>
     13e:	bf00      	nop
     140:	4808      	ldr	r0, [pc, #32]	; (164 <frame_dummy+0x34>)
     142:	6803      	ldr	r3, [r0, #0]
     144:	2b00      	cmp	r3, #0
     146:	d003      	beq.n	150 <frame_dummy+0x20>
     148:	4b07      	ldr	r3, [pc, #28]	; (168 <frame_dummy+0x38>)
     14a:	2b00      	cmp	r3, #0
     14c:	d000      	beq.n	150 <frame_dummy+0x20>
     14e:	4798      	blx	r3
     150:	f7ff ffc2 	bl	d8 <register_tm_clones>
     154:	bd08      	pop	{r3, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	00000000 	.word	0x00000000
     15c:	00010ca4 	.word	0x00010ca4
     160:	20000904 	.word	0x20000904
     164:	00010ca4 	.word	0x00010ca4
     168:	00000000 	.word	0x00000000

0000016c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     16c:	b580      	push	{r7, lr}
     16e:	b082      	sub	sp, #8
     170:	af00      	add	r7, sp, #0
     172:	1c02      	adds	r2, r0, #0
     174:	1dfb      	adds	r3, r7, #7
     176:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     178:	4b06      	ldr	r3, [pc, #24]	; (194 <system_interrupt_enable+0x28>)
     17a:	1dfa      	adds	r2, r7, #7
     17c:	7812      	ldrb	r2, [r2, #0]
     17e:	1c11      	adds	r1, r2, #0
     180:	221f      	movs	r2, #31
     182:	400a      	ands	r2, r1
     184:	2101      	movs	r1, #1
     186:	1c08      	adds	r0, r1, #0
     188:	4090      	lsls	r0, r2
     18a:	1c02      	adds	r2, r0, #0
     18c:	601a      	str	r2, [r3, #0]
}
     18e:	46bd      	mov	sp, r7
     190:	b002      	add	sp, #8
     192:	bd80      	pop	{r7, pc}
     194:	e000e100 	.word	0xe000e100

00000198 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     198:	b580      	push	{r7, lr}
     19a:	b084      	sub	sp, #16
     19c:	af00      	add	r7, sp, #0
     19e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     1a0:	687b      	ldr	r3, [r7, #4]
     1a2:	681b      	ldr	r3, [r3, #0]
     1a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     1a6:	68fb      	ldr	r3, [r7, #12]
     1a8:	69da      	ldr	r2, [r3, #28]
     1aa:	2307      	movs	r3, #7
     1ac:	4013      	ands	r3, r2
     1ae:	1e5a      	subs	r2, r3, #1
     1b0:	4193      	sbcs	r3, r2
     1b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     1b4:	1c18      	adds	r0, r3, #0
     1b6:	46bd      	mov	sp, r7
     1b8:	b004      	add	sp, #16
     1ba:	bd80      	pop	{r7, pc}

000001bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b082      	sub	sp, #8
     1c0:	af00      	add	r7, sp, #0
     1c2:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     1c4:	46c0      	nop			; (mov r8, r8)
     1c6:	687b      	ldr	r3, [r7, #4]
     1c8:	1c18      	adds	r0, r3, #0
     1ca:	4b04      	ldr	r3, [pc, #16]	; (1dc <_i2c_master_wait_for_sync+0x20>)
     1cc:	4798      	blx	r3
     1ce:	1c03      	adds	r3, r0, #0
     1d0:	2b00      	cmp	r3, #0
     1d2:	d1f8      	bne.n	1c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     1d4:	46bd      	mov	sp, r7
     1d6:	b002      	add	sp, #8
     1d8:	bd80      	pop	{r7, pc}
     1da:	46c0      	nop			; (mov r8, r8)
     1dc:	00000199 	.word	0x00000199

000001e0 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
     1e0:	b580      	push	{r7, lr}
     1e2:	b082      	sub	sp, #8
     1e4:	af00      	add	r7, sp, #0
     1e6:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     1e8:	687b      	ldr	r3, [r7, #4]
     1ea:	2264      	movs	r2, #100	; 0x64
     1ec:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     1ee:	687b      	ldr	r3, [r7, #4]
     1f0:	4a19      	ldr	r2, [pc, #100]	; (258 <i2c_master_get_config_defaults+0x78>)
     1f2:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     1f4:	687b      	ldr	r3, [r7, #4]
     1f6:	2200      	movs	r2, #0
     1f8:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     1fa:	687b      	ldr	r3, [r7, #4]
     1fc:	2200      	movs	r2, #0
     1fe:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     200:	687b      	ldr	r3, [r7, #4]
     202:	2200      	movs	r2, #0
     204:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     206:	687b      	ldr	r3, [r7, #4]
     208:	2280      	movs	r2, #128	; 0x80
     20a:	0392      	lsls	r2, r2, #14
     20c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
     20e:	687b      	ldr	r3, [r7, #4]
     210:	2201      	movs	r2, #1
     212:	4252      	negs	r2, r2
     214:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
     216:	687b      	ldr	r3, [r7, #4]
     218:	2201      	movs	r2, #1
     21a:	4252      	negs	r2, r2
     21c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     21e:	687b      	ldr	r3, [r7, #4]
     220:	2200      	movs	r2, #0
     222:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     224:	687b      	ldr	r3, [r7, #4]
     226:	2200      	movs	r2, #0
     228:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
     22a:	687a      	ldr	r2, [r7, #4]
     22c:	2324      	movs	r3, #36	; 0x24
     22e:	2100      	movs	r1, #0
     230:	54d1      	strb	r1, [r2, r3]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     232:	687b      	ldr	r3, [r7, #4]
     234:	2200      	movs	r2, #0
     236:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     238:	687a      	ldr	r2, [r7, #4]
     23a:	232c      	movs	r3, #44	; 0x2c
     23c:	2100      	movs	r1, #0
     23e:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     240:	687a      	ldr	r2, [r7, #4]
     242:	232d      	movs	r3, #45	; 0x2d
     244:	2100      	movs	r1, #0
     246:	54d1      	strb	r1, [r2, r3]
	config->master_scl_low_extend_timeout  = false;
     248:	687a      	ldr	r2, [r7, #4]
     24a:	232e      	movs	r3, #46	; 0x2e
     24c:	2100      	movs	r1, #0
     24e:	54d1      	strb	r1, [r2, r3]
#endif
}
     250:	46bd      	mov	sp, r7
     252:	b002      	add	sp, #8
     254:	bd80      	pop	{r7, pc}
     256:	46c0      	nop			; (mov r8, r8)
     258:	00000d48 	.word	0x00000d48

0000025c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
     25c:	b580      	push	{r7, lr}
     25e:	b084      	sub	sp, #16
     260:	af00      	add	r7, sp, #0
     262:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     264:	687b      	ldr	r3, [r7, #4]
     266:	681b      	ldr	r3, [r3, #0]
     268:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
     26e:	687b      	ldr	r3, [r7, #4]
     270:	1c18      	adds	r0, r3, #0
     272:	4b15      	ldr	r3, [pc, #84]	; (2c8 <i2c_master_enable+0x6c>)
     274:	4798      	blx	r3

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     276:	68bb      	ldr	r3, [r7, #8]
     278:	681b      	ldr	r3, [r3, #0]
     27a:	2202      	movs	r2, #2
     27c:	431a      	orrs	r2, r3
     27e:	68bb      	ldr	r3, [r7, #8]
     280:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     282:	687b      	ldr	r3, [r7, #4]
     284:	681b      	ldr	r3, [r3, #0]
     286:	1c18      	adds	r0, r3, #0
     288:	4b10      	ldr	r3, [pc, #64]	; (2cc <i2c_master_enable+0x70>)
     28a:	4798      	blx	r3
     28c:	1c03      	adds	r3, r0, #0
     28e:	1c18      	adds	r0, r3, #0
     290:	4b0f      	ldr	r3, [pc, #60]	; (2d0 <i2c_master_enable+0x74>)
     292:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     294:	e00c      	b.n	2b0 <i2c_master_enable+0x54>
		timeout_counter++;
     296:	68fb      	ldr	r3, [r7, #12]
     298:	3301      	adds	r3, #1
     29a:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     29c:	687b      	ldr	r3, [r7, #4]
     29e:	88db      	ldrh	r3, [r3, #6]
     2a0:	1c1a      	adds	r2, r3, #0
     2a2:	68fb      	ldr	r3, [r7, #12]
     2a4:	429a      	cmp	r2, r3
     2a6:	d803      	bhi.n	2b0 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     2a8:	68bb      	ldr	r3, [r7, #8]
     2aa:	2210      	movs	r2, #16
     2ac:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
     2ae:	e007      	b.n	2c0 <i2c_master_enable+0x64>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     2b0:	68bb      	ldr	r3, [r7, #8]
     2b2:	699b      	ldr	r3, [r3, #24]
     2b4:	0c1b      	lsrs	r3, r3, #16
     2b6:	b29b      	uxth	r3, r3
     2b8:	1c1a      	adds	r2, r3, #0
     2ba:	2310      	movs	r3, #16
     2bc:	4013      	ands	r3, r2
     2be:	d0ea      	beq.n	296 <i2c_master_enable+0x3a>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
     2c0:	46bd      	mov	sp, r7
     2c2:	b004      	add	sp, #16
     2c4:	bd80      	pop	{r7, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	000001bd 	.word	0x000001bd
     2cc:	00006cfd 	.word	0x00006cfd
     2d0:	0000016d 	.word	0x0000016d

000002d4 <at30tse_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the AT30TSE75X device.
 */
void at30tse_init(void)
{
     2d4:	b580      	push	{r7, lr}
     2d6:	b08c      	sub	sp, #48	; 0x30
     2d8:	af00      	add	r7, sp, #0
    /* Initialize config structure and device instance. */
	struct i2c_master_config conf;
	i2c_master_get_config_defaults(&conf);
     2da:	1c3b      	adds	r3, r7, #0
     2dc:	1c18      	adds	r0, r3, #0
     2de:	4b0d      	ldr	r3, [pc, #52]	; (314 <at30tse_init+0x40>)
     2e0:	4798      	blx	r3

	/* Change buffer timeout to something longer. */
	conf.buffer_timeout = 10000;
     2e2:	1c3b      	adds	r3, r7, #0
     2e4:	4a0c      	ldr	r2, [pc, #48]	; (318 <at30tse_init+0x44>)
     2e6:	82da      	strh	r2, [r3, #22]

	conf.pinmux_pad0 = AT30TSE_PINMUX_PAD0;
     2e8:	1c3b      	adds	r3, r7, #0
     2ea:	4a0c      	ldr	r2, [pc, #48]	; (31c <at30tse_init+0x48>)
     2ec:	61da      	str	r2, [r3, #28]
	conf.pinmux_pad1 = AT30TSE_PINMUX_PAD1;
     2ee:	1c3b      	adds	r3, r7, #0
     2f0:	4a0b      	ldr	r2, [pc, #44]	; (320 <at30tse_init+0x4c>)
     2f2:	621a      	str	r2, [r3, #32]

	/* Initialize and enable device with config. */
	i2c_master_init(&dev_inst_at30tse75x, AT30TSE_SERCOM, &conf);
     2f4:	490b      	ldr	r1, [pc, #44]	; (324 <at30tse_init+0x50>)
     2f6:	4a0c      	ldr	r2, [pc, #48]	; (328 <at30tse_init+0x54>)
     2f8:	1c3b      	adds	r3, r7, #0
     2fa:	1c08      	adds	r0, r1, #0
     2fc:	1c11      	adds	r1, r2, #0
     2fe:	1c1a      	adds	r2, r3, #0
     300:	4b0a      	ldr	r3, [pc, #40]	; (32c <at30tse_init+0x58>)
     302:	4798      	blx	r3
	i2c_master_enable(&dev_inst_at30tse75x);
     304:	4b07      	ldr	r3, [pc, #28]	; (324 <at30tse_init+0x50>)
     306:	1c18      	adds	r0, r3, #0
     308:	4b09      	ldr	r3, [pc, #36]	; (330 <at30tse_init+0x5c>)
     30a:	4798      	blx	r3
}
     30c:	46bd      	mov	sp, r7
     30e:	b00c      	add	sp, #48	; 0x30
     310:	bd80      	pop	{r7, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	000001e1 	.word	0x000001e1
     318:	00002710 	.word	0x00002710
     31c:	00080003 	.word	0x00080003
     320:	00090003 	.word	0x00090003
     324:	20000fa8 	.word	0x20000fa8
     328:	42001000 	.word	0x42001000
     32c:	0000090d 	.word	0x0000090d
     330:	0000025d 	.word	0x0000025d

00000334 <at30tse_read_register>:
 * \param[in] reg_size Register size.
 *
 * \return Register value.
 */
uint16_t at30tse_read_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size)
{
     334:	b580      	push	{r7, lr}
     336:	b08a      	sub	sp, #40	; 0x28
     338:	af00      	add	r7, sp, #0
     33a:	1dfb      	adds	r3, r7, #7
     33c:	7018      	strb	r0, [r3, #0]
     33e:	1dbb      	adds	r3, r7, #6
     340:	7019      	strb	r1, [r3, #0]
     342:	1d7b      	adds	r3, r7, #5
     344:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[2];
	buffer[0] = reg | reg_type;
     346:	1dfa      	adds	r2, r7, #7
     348:	1dbb      	adds	r3, r7, #6
     34a:	7812      	ldrb	r2, [r2, #0]
     34c:	781b      	ldrb	r3, [r3, #0]
     34e:	4313      	orrs	r3, r2
     350:	b2da      	uxtb	r2, r3
     352:	1c3b      	adds	r3, r7, #0
     354:	3324      	adds	r3, #36	; 0x24
     356:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
     358:	1c3b      	adds	r3, r7, #0
     35a:	3324      	adds	r3, #36	; 0x24
     35c:	2200      	movs	r2, #0
     35e:	705a      	strb	r2, [r3, #1]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet write_transfer = {
     360:	1c3b      	adds	r3, r7, #0
     362:	3318      	adds	r3, #24
     364:	224f      	movs	r2, #79	; 0x4f
     366:	801a      	strh	r2, [r3, #0]
     368:	1c3b      	adds	r3, r7, #0
     36a:	3318      	adds	r3, #24
     36c:	2201      	movs	r2, #1
     36e:	805a      	strh	r2, [r3, #2]
     370:	1c3b      	adds	r3, r7, #0
     372:	3318      	adds	r3, #24
     374:	1c3a      	adds	r2, r7, #0
     376:	3224      	adds	r2, #36	; 0x24
     378:	605a      	str	r2, [r3, #4]
     37a:	1c3b      	adds	r3, r7, #0
     37c:	3318      	adds	r3, #24
     37e:	2200      	movs	r2, #0
     380:	721a      	strb	r2, [r3, #8]
     382:	1c3b      	adds	r3, r7, #0
     384:	3318      	adds	r3, #24
     386:	2200      	movs	r2, #0
     388:	725a      	strb	r2, [r3, #9]
     38a:	1c3b      	adds	r3, r7, #0
     38c:	3318      	adds	r3, #24
     38e:	2200      	movs	r2, #0
     390:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Read data */
    struct i2c_master_packet read_transfer = {
     392:	1c3b      	adds	r3, r7, #0
     394:	330c      	adds	r3, #12
     396:	224f      	movs	r2, #79	; 0x4f
     398:	801a      	strh	r2, [r3, #0]
     39a:	1d7b      	adds	r3, r7, #5
     39c:	781b      	ldrb	r3, [r3, #0]
     39e:	b29a      	uxth	r2, r3
     3a0:	1c3b      	adds	r3, r7, #0
     3a2:	330c      	adds	r3, #12
     3a4:	805a      	strh	r2, [r3, #2]
     3a6:	1c3b      	adds	r3, r7, #0
     3a8:	330c      	adds	r3, #12
     3aa:	1c3a      	adds	r2, r7, #0
     3ac:	3224      	adds	r2, #36	; 0x24
     3ae:	605a      	str	r2, [r3, #4]
     3b0:	1c3b      	adds	r3, r7, #0
     3b2:	330c      	adds	r3, #12
     3b4:	2200      	movs	r2, #0
     3b6:	721a      	strb	r2, [r3, #8]
     3b8:	1c3b      	adds	r3, r7, #0
     3ba:	330c      	adds	r3, #12
     3bc:	2200      	movs	r2, #0
     3be:	725a      	strb	r2, [r3, #9]
     3c0:	1c3b      	adds	r3, r7, #0
     3c2:	330c      	adds	r3, #12
     3c4:	2200      	movs	r2, #0
     3c6:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait_no_stop(&dev_inst_at30tse75x, &write_transfer);
     3c8:	4a0e      	ldr	r2, [pc, #56]	; (404 <at30tse_read_register+0xd0>)
     3ca:	1c3b      	adds	r3, r7, #0
     3cc:	3318      	adds	r3, #24
     3ce:	1c10      	adds	r0, r2, #0
     3d0:	1c19      	adds	r1, r3, #0
     3d2:	4b0d      	ldr	r3, [pc, #52]	; (408 <at30tse_read_register+0xd4>)
     3d4:	4798      	blx	r3
    i2c_master_read_packet_wait(&dev_inst_at30tse75x, &read_transfer);
     3d6:	4a0b      	ldr	r2, [pc, #44]	; (404 <at30tse_read_register+0xd0>)
     3d8:	1c3b      	adds	r3, r7, #0
     3da:	330c      	adds	r3, #12
     3dc:	1c10      	adds	r0, r2, #0
     3de:	1c19      	adds	r1, r3, #0
     3e0:	4b0a      	ldr	r3, [pc, #40]	; (40c <at30tse_read_register+0xd8>)
     3e2:	4798      	blx	r3

	return (buffer[0] << 8) | buffer[1];
     3e4:	1c3b      	adds	r3, r7, #0
     3e6:	3324      	adds	r3, #36	; 0x24
     3e8:	781b      	ldrb	r3, [r3, #0]
     3ea:	021b      	lsls	r3, r3, #8
     3ec:	b29a      	uxth	r2, r3
     3ee:	1c3b      	adds	r3, r7, #0
     3f0:	3324      	adds	r3, #36	; 0x24
     3f2:	785b      	ldrb	r3, [r3, #1]
     3f4:	4313      	orrs	r3, r2
     3f6:	b29b      	uxth	r3, r3
     3f8:	b29b      	uxth	r3, r3
}
     3fa:	1c18      	adds	r0, r3, #0
     3fc:	46bd      	mov	sp, r7
     3fe:	b00a      	add	sp, #40	; 0x28
     400:	bd80      	pop	{r7, pc}
     402:	46c0      	nop			; (mov r8, r8)
     404:	20000fa8 	.word	0x20000fa8
     408:	00000f4d 	.word	0x00000f4d
     40c:	00000d9d 	.word	0x00000d9d

00000410 <at30tse_read_temperature>:
 * \brief Reads the temperature value.
 *
 * \return Temperature data.
 */
double at30tse_read_temperature()
{
     410:	b5b0      	push	{r4, r5, r7, lr}
     412:	b086      	sub	sp, #24
     414:	af00      	add	r7, sp, #0
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
     416:	1c3c      	adds	r4, r7, #0
     418:	3416      	adds	r4, #22
     41a:	2000      	movs	r0, #0
     41c:	2100      	movs	r1, #0
     41e:	2202      	movs	r2, #2
     420:	4b5f      	ldr	r3, [pc, #380]	; (5a0 <at30tse_read_temperature+0x190>)
     422:	4798      	blx	r3
     424:	1c03      	adds	r3, r0, #0
     426:	8023      	strh	r3, [r4, #0]
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
     428:	4c54      	ldr	r4, [pc, #336]	; (57c <at30tse_read_temperature+0x16c>)
     42a:	4b53      	ldr	r3, [pc, #332]	; (578 <at30tse_read_temperature+0x168>)
     42c:	60bb      	str	r3, [r7, #8]
     42e:	60fc      	str	r4, [r7, #12]
	int8_t sign = 1;
     430:	1dfb      	adds	r3, r7, #7
     432:	2201      	movs	r2, #1
     434:	701a      	strb	r2, [r3, #0]

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
     436:	1c3b      	adds	r3, r7, #0
     438:	3316      	adds	r3, #22
     43a:	881b      	ldrh	r3, [r3, #0]
     43c:	b21b      	sxth	r3, r3
     43e:	2b00      	cmp	r3, #0
     440:	da0d      	bge.n	45e <at30tse_read_temperature+0x4e>
		sign *= -1;
     442:	1dfb      	adds	r3, r7, #7
     444:	781b      	ldrb	r3, [r3, #0]
     446:	425b      	negs	r3, r3
     448:	b2da      	uxtb	r2, r3
     44a:	1dfb      	adds	r3, r7, #7
     44c:	701a      	strb	r2, [r3, #0]
		data &= ~(1 << 15);
     44e:	1c3b      	adds	r3, r7, #0
     450:	3316      	adds	r3, #22
     452:	1c3a      	adds	r2, r7, #0
     454:	3216      	adds	r2, #22
     456:	8812      	ldrh	r2, [r2, #0]
     458:	0452      	lsls	r2, r2, #17
     45a:	0c52      	lsrs	r2, r2, #17
     45c:	801a      	strh	r2, [r3, #0]
	}

	/* Convert to temperature  */
	switch (resolution){
     45e:	4b51      	ldr	r3, [pc, #324]	; (5a4 <at30tse_read_temperature+0x194>)
     460:	781b      	ldrb	r3, [r3, #0]
     462:	2b01      	cmp	r3, #1
     464:	d026      	beq.n	4b4 <at30tse_read_temperature+0xa4>
     466:	dc02      	bgt.n	46e <at30tse_read_temperature+0x5e>
     468:	2b00      	cmp	r3, #0
     46a:	d005      	beq.n	478 <at30tse_read_temperature+0x68>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
			break;
		default:
			break;
     46c:	e07c      	b.n	568 <at30tse_read_temperature+0x158>
		sign *= -1;
		data &= ~(1 << 15);
	}

	/* Convert to temperature  */
	switch (resolution){
     46e:	2b02      	cmp	r3, #2
     470:	d03e      	beq.n	4f0 <at30tse_read_temperature+0xe0>
     472:	2b03      	cmp	r3, #3
     474:	d05a      	beq.n	52c <at30tse_read_temperature+0x11c>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
			break;
		default:
			break;
     476:	e077      	b.n	568 <at30tse_read_temperature+0x158>
	}

	/* Convert to temperature  */
	switch (resolution){
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
     478:	1c3b      	adds	r3, r7, #0
     47a:	3316      	adds	r3, #22
     47c:	1c3a      	adds	r2, r7, #0
     47e:	3216      	adds	r2, #22
     480:	8812      	ldrh	r2, [r2, #0]
     482:	09d2      	lsrs	r2, r2, #7
     484:	801a      	strh	r2, [r3, #0]
			temperature = data * sign * 0.5;
     486:	1c3b      	adds	r3, r7, #0
     488:	3316      	adds	r3, #22
     48a:	881b      	ldrh	r3, [r3, #0]
     48c:	1dfa      	adds	r2, r7, #7
     48e:	7812      	ldrb	r2, [r2, #0]
     490:	b252      	sxtb	r2, r2
     492:	435a      	muls	r2, r3
     494:	4b44      	ldr	r3, [pc, #272]	; (5a8 <at30tse_read_temperature+0x198>)
     496:	1c10      	adds	r0, r2, #0
     498:	4798      	blx	r3
     49a:	1c03      	adds	r3, r0, #0
     49c:	1c0c      	adds	r4, r1, #0
     49e:	4d43      	ldr	r5, [pc, #268]	; (5ac <at30tse_read_temperature+0x19c>)
     4a0:	1c18      	adds	r0, r3, #0
     4a2:	1c21      	adds	r1, r4, #0
     4a4:	4a36      	ldr	r2, [pc, #216]	; (580 <at30tse_read_temperature+0x170>)
     4a6:	4b37      	ldr	r3, [pc, #220]	; (584 <at30tse_read_temperature+0x174>)
     4a8:	47a8      	blx	r5
     4aa:	1c03      	adds	r3, r0, #0
     4ac:	1c0c      	adds	r4, r1, #0
     4ae:	60bb      	str	r3, [r7, #8]
     4b0:	60fc      	str	r4, [r7, #12]
			break;
     4b2:	e059      	b.n	568 <at30tse_read_temperature+0x158>
		case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
     4b4:	1c3b      	adds	r3, r7, #0
     4b6:	3316      	adds	r3, #22
     4b8:	1c3a      	adds	r2, r7, #0
     4ba:	3216      	adds	r2, #22
     4bc:	8812      	ldrh	r2, [r2, #0]
     4be:	0992      	lsrs	r2, r2, #6
     4c0:	801a      	strh	r2, [r3, #0]
			temperature = data * sign * 0.25;
     4c2:	1c3b      	adds	r3, r7, #0
     4c4:	3316      	adds	r3, #22
     4c6:	881b      	ldrh	r3, [r3, #0]
     4c8:	1dfa      	adds	r2, r7, #7
     4ca:	7812      	ldrb	r2, [r2, #0]
     4cc:	b252      	sxtb	r2, r2
     4ce:	435a      	muls	r2, r3
     4d0:	4b35      	ldr	r3, [pc, #212]	; (5a8 <at30tse_read_temperature+0x198>)
     4d2:	1c10      	adds	r0, r2, #0
     4d4:	4798      	blx	r3
     4d6:	1c03      	adds	r3, r0, #0
     4d8:	1c0c      	adds	r4, r1, #0
     4da:	4d34      	ldr	r5, [pc, #208]	; (5ac <at30tse_read_temperature+0x19c>)
     4dc:	1c18      	adds	r0, r3, #0
     4de:	1c21      	adds	r1, r4, #0
     4e0:	4a29      	ldr	r2, [pc, #164]	; (588 <at30tse_read_temperature+0x178>)
     4e2:	4b2a      	ldr	r3, [pc, #168]	; (58c <at30tse_read_temperature+0x17c>)
     4e4:	47a8      	blx	r5
     4e6:	1c03      	adds	r3, r0, #0
     4e8:	1c0c      	adds	r4, r1, #0
     4ea:	60bb      	str	r3, [r7, #8]
     4ec:	60fc      	str	r4, [r7, #12]
			break;
     4ee:	e03b      	b.n	568 <at30tse_read_temperature+0x158>
		case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
     4f0:	1c3b      	adds	r3, r7, #0
     4f2:	3316      	adds	r3, #22
     4f4:	1c3a      	adds	r2, r7, #0
     4f6:	3216      	adds	r2, #22
     4f8:	8812      	ldrh	r2, [r2, #0]
     4fa:	0952      	lsrs	r2, r2, #5
     4fc:	801a      	strh	r2, [r3, #0]
			temperature = data * sign * 0.125;
     4fe:	1c3b      	adds	r3, r7, #0
     500:	3316      	adds	r3, #22
     502:	881b      	ldrh	r3, [r3, #0]
     504:	1dfa      	adds	r2, r7, #7
     506:	7812      	ldrb	r2, [r2, #0]
     508:	b252      	sxtb	r2, r2
     50a:	435a      	muls	r2, r3
     50c:	4b26      	ldr	r3, [pc, #152]	; (5a8 <at30tse_read_temperature+0x198>)
     50e:	1c10      	adds	r0, r2, #0
     510:	4798      	blx	r3
     512:	1c03      	adds	r3, r0, #0
     514:	1c0c      	adds	r4, r1, #0
     516:	4d25      	ldr	r5, [pc, #148]	; (5ac <at30tse_read_temperature+0x19c>)
     518:	1c18      	adds	r0, r3, #0
     51a:	1c21      	adds	r1, r4, #0
     51c:	4a1c      	ldr	r2, [pc, #112]	; (590 <at30tse_read_temperature+0x180>)
     51e:	4b1d      	ldr	r3, [pc, #116]	; (594 <at30tse_read_temperature+0x184>)
     520:	47a8      	blx	r5
     522:	1c03      	adds	r3, r0, #0
     524:	1c0c      	adds	r4, r1, #0
     526:	60bb      	str	r3, [r7, #8]
     528:	60fc      	str	r4, [r7, #12]
			break;
     52a:	e01d      	b.n	568 <at30tse_read_temperature+0x158>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
     52c:	1c3b      	adds	r3, r7, #0
     52e:	3316      	adds	r3, #22
     530:	1c3a      	adds	r2, r7, #0
     532:	3216      	adds	r2, #22
     534:	8812      	ldrh	r2, [r2, #0]
     536:	0912      	lsrs	r2, r2, #4
     538:	801a      	strh	r2, [r3, #0]
			temperature = data * sign * 0.0625;
     53a:	1c3b      	adds	r3, r7, #0
     53c:	3316      	adds	r3, #22
     53e:	881b      	ldrh	r3, [r3, #0]
     540:	1dfa      	adds	r2, r7, #7
     542:	7812      	ldrb	r2, [r2, #0]
     544:	b252      	sxtb	r2, r2
     546:	435a      	muls	r2, r3
     548:	4b17      	ldr	r3, [pc, #92]	; (5a8 <at30tse_read_temperature+0x198>)
     54a:	1c10      	adds	r0, r2, #0
     54c:	4798      	blx	r3
     54e:	1c03      	adds	r3, r0, #0
     550:	1c0c      	adds	r4, r1, #0
     552:	4d16      	ldr	r5, [pc, #88]	; (5ac <at30tse_read_temperature+0x19c>)
     554:	1c18      	adds	r0, r3, #0
     556:	1c21      	adds	r1, r4, #0
     558:	4a0f      	ldr	r2, [pc, #60]	; (598 <at30tse_read_temperature+0x188>)
     55a:	4b10      	ldr	r3, [pc, #64]	; (59c <at30tse_read_temperature+0x18c>)
     55c:	47a8      	blx	r5
     55e:	1c03      	adds	r3, r0, #0
     560:	1c0c      	adds	r4, r1, #0
     562:	60bb      	str	r3, [r7, #8]
     564:	60fc      	str	r4, [r7, #12]
			break;
     566:	46c0      	nop			; (mov r8, r8)
		default:
			break;
	}
	return temperature;
     568:	68bb      	ldr	r3, [r7, #8]
     56a:	68fc      	ldr	r4, [r7, #12]
}
     56c:	1c18      	adds	r0, r3, #0
     56e:	1c21      	adds	r1, r4, #0
     570:	46bd      	mov	sp, r7
     572:	b006      	add	sp, #24
     574:	bdb0      	pop	{r4, r5, r7, pc}
     576:	46c0      	nop			; (mov r8, r8)
	...
     584:	3fe00000 	.word	0x3fe00000
     588:	00000000 	.word	0x00000000
     58c:	3fd00000 	.word	0x3fd00000
     590:	00000000 	.word	0x00000000
     594:	3fc00000 	.word	0x3fc00000
     598:	00000000 	.word	0x00000000
     59c:	3fb00000 	.word	0x3fb00000
     5a0:	00000335 	.word	0x00000335
     5a4:	2000091c 	.word	0x2000091c
     5a8:	0000a535 	.word	0x0000a535
     5ac:	0000993d 	.word	0x0000993d

000005b0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     5b0:	b580      	push	{r7, lr}
     5b2:	b082      	sub	sp, #8
     5b4:	af00      	add	r7, sp, #0
     5b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	2200      	movs	r2, #0
     5bc:	701a      	strb	r2, [r3, #0]
}
     5be:	46bd      	mov	sp, r7
     5c0:	b002      	add	sp, #8
     5c2:	bd80      	pop	{r7, pc}

000005c4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     5c4:	b580      	push	{r7, lr}
     5c6:	b082      	sub	sp, #8
     5c8:	af00      	add	r7, sp, #0
     5ca:	1c02      	adds	r2, r0, #0
     5cc:	6039      	str	r1, [r7, #0]
     5ce:	1dfb      	adds	r3, r7, #7
     5d0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     5d2:	1dfb      	adds	r3, r7, #7
     5d4:	781b      	ldrb	r3, [r3, #0]
     5d6:	2b01      	cmp	r3, #1
     5d8:	d00a      	beq.n	5f0 <system_apb_clock_set_mask+0x2c>
     5da:	2b02      	cmp	r3, #2
     5dc:	d00f      	beq.n	5fe <system_apb_clock_set_mask+0x3a>
     5de:	2b00      	cmp	r3, #0
     5e0:	d114      	bne.n	60c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     5e2:	4b0e      	ldr	r3, [pc, #56]	; (61c <system_apb_clock_set_mask+0x58>)
     5e4:	4a0d      	ldr	r2, [pc, #52]	; (61c <system_apb_clock_set_mask+0x58>)
     5e6:	6991      	ldr	r1, [r2, #24]
     5e8:	683a      	ldr	r2, [r7, #0]
     5ea:	430a      	orrs	r2, r1
     5ec:	619a      	str	r2, [r3, #24]
			break;
     5ee:	e00f      	b.n	610 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     5f0:	4b0a      	ldr	r3, [pc, #40]	; (61c <system_apb_clock_set_mask+0x58>)
     5f2:	4a0a      	ldr	r2, [pc, #40]	; (61c <system_apb_clock_set_mask+0x58>)
     5f4:	69d1      	ldr	r1, [r2, #28]
     5f6:	683a      	ldr	r2, [r7, #0]
     5f8:	430a      	orrs	r2, r1
     5fa:	61da      	str	r2, [r3, #28]
			break;
     5fc:	e008      	b.n	610 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5fe:	4b07      	ldr	r3, [pc, #28]	; (61c <system_apb_clock_set_mask+0x58>)
     600:	4a06      	ldr	r2, [pc, #24]	; (61c <system_apb_clock_set_mask+0x58>)
     602:	6a11      	ldr	r1, [r2, #32]
     604:	683a      	ldr	r2, [r7, #0]
     606:	430a      	orrs	r2, r1
     608:	621a      	str	r2, [r3, #32]
			break;
     60a:	e001      	b.n	610 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     60c:	2317      	movs	r3, #23
     60e:	e000      	b.n	612 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     610:	2300      	movs	r3, #0
}
     612:	1c18      	adds	r0, r3, #0
     614:	46bd      	mov	sp, r7
     616:	b002      	add	sp, #8
     618:	bd80      	pop	{r7, pc}
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	40000400 	.word	0x40000400

00000620 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     620:	b580      	push	{r7, lr}
     622:	b082      	sub	sp, #8
     624:	af00      	add	r7, sp, #0
     626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     628:	687b      	ldr	r3, [r7, #4]
     62a:	2280      	movs	r2, #128	; 0x80
     62c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     62e:	687b      	ldr	r3, [r7, #4]
     630:	2200      	movs	r2, #0
     632:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     634:	687b      	ldr	r3, [r7, #4]
     636:	2201      	movs	r2, #1
     638:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	2200      	movs	r2, #0
     63e:	70da      	strb	r2, [r3, #3]
}
     640:	46bd      	mov	sp, r7
     642:	b002      	add	sp, #8
     644:	bd80      	pop	{r7, pc}
     646:	46c0      	nop			; (mov r8, r8)

00000648 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     648:	b580      	push	{r7, lr}
     64a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     64c:	4b06      	ldr	r3, [pc, #24]	; (668 <system_is_debugger_present+0x20>)
     64e:	681b      	ldr	r3, [r3, #0]
     650:	021b      	lsls	r3, r3, #8
     652:	0e1b      	lsrs	r3, r3, #24
     654:	b2db      	uxtb	r3, r3
     656:	1c1a      	adds	r2, r3, #0
     658:	2302      	movs	r3, #2
     65a:	4013      	ands	r3, r2
     65c:	1e5a      	subs	r2, r3, #1
     65e:	4193      	sbcs	r3, r2
     660:	b2db      	uxtb	r3, r3
}
     662:	1c18      	adds	r0, r3, #0
     664:	46bd      	mov	sp, r7
     666:	bd80      	pop	{r7, pc}
     668:	41002000 	.word	0x41002000

0000066c <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     66c:	b580      	push	{r7, lr}
     66e:	b084      	sub	sp, #16
     670:	af00      	add	r7, sp, #0
     672:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     674:	687b      	ldr	r3, [r7, #4]
     676:	681b      	ldr	r3, [r3, #0]
     678:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     67a:	68fb      	ldr	r3, [r7, #12]
     67c:	69da      	ldr	r2, [r3, #28]
     67e:	2307      	movs	r3, #7
     680:	4013      	ands	r3, r2
     682:	1e5a      	subs	r2, r3, #1
     684:	4193      	sbcs	r3, r2
     686:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     688:	1c18      	adds	r0, r3, #0
     68a:	46bd      	mov	sp, r7
     68c:	b004      	add	sp, #16
     68e:	bd80      	pop	{r7, pc}

00000690 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     690:	b580      	push	{r7, lr}
     692:	b082      	sub	sp, #8
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     698:	46c0      	nop			; (mov r8, r8)
     69a:	687b      	ldr	r3, [r7, #4]
     69c:	1c18      	adds	r0, r3, #0
     69e:	4b04      	ldr	r3, [pc, #16]	; (6b0 <_i2c_master_wait_for_sync+0x20>)
     6a0:	4798      	blx	r3
     6a2:	1c03      	adds	r3, r0, #0
     6a4:	2b00      	cmp	r3, #0
     6a6:	d1f8      	bne.n	69a <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     6a8:	46bd      	mov	sp, r7
     6aa:	b002      	add	sp, #8
     6ac:	bd80      	pop	{r7, pc}
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	0000066d 	.word	0x0000066d

000006b4 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     6b4:	b590      	push	{r4, r7, lr}
     6b6:	b08d      	sub	sp, #52	; 0x34
     6b8:	af00      	add	r7, sp, #0
     6ba:	6078      	str	r0, [r7, #4]
     6bc:	6039      	str	r1, [r7, #0]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
     6be:	1c3b      	adds	r3, r7, #0
     6c0:	3327      	adds	r3, #39	; 0x27
     6c2:	2200      	movs	r2, #0
     6c4:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	681b      	ldr	r3, [r3, #0]
     6ca:	61bb      	str	r3, [r7, #24]
	Sercom *const sercom_hw = module->hw;
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	681b      	ldr	r3, [r3, #0]
     6d0:	617b      	str	r3, [r7, #20]

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     6d2:	1c3c      	adds	r4, r7, #0
     6d4:	3413      	adds	r4, #19
     6d6:	697b      	ldr	r3, [r7, #20]
     6d8:	1c18      	adds	r0, r3, #0
     6da:	4b85      	ldr	r3, [pc, #532]	; (8f0 <_i2c_master_set_config+0x23c>)
     6dc:	4798      	blx	r3
     6de:	1c03      	adds	r3, r0, #0
     6e0:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     6e2:	1c3b      	adds	r3, r7, #0
     6e4:	3308      	adds	r3, #8
     6e6:	1c18      	adds	r0, r3, #0
     6e8:	4b82      	ldr	r3, [pc, #520]	; (8f4 <_i2c_master_set_config+0x240>)
     6ea:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     6ec:	683b      	ldr	r3, [r7, #0]
     6ee:	69db      	ldr	r3, [r3, #28]
     6f0:	623b      	str	r3, [r7, #32]
	uint32_t pad1 = config->pinmux_pad1;
     6f2:	683b      	ldr	r3, [r7, #0]
     6f4:	6a1b      	ldr	r3, [r3, #32]
     6f6:	61fb      	str	r3, [r7, #28]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     6f8:	6a3b      	ldr	r3, [r7, #32]
     6fa:	2b00      	cmp	r3, #0
     6fc:	d106      	bne.n	70c <_i2c_master_set_config+0x58>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     6fe:	697b      	ldr	r3, [r7, #20]
     700:	1c18      	adds	r0, r3, #0
     702:	2100      	movs	r1, #0
     704:	4b7c      	ldr	r3, [pc, #496]	; (8f8 <_i2c_master_set_config+0x244>)
     706:	4798      	blx	r3
     708:	1c03      	adds	r3, r0, #0
     70a:	623b      	str	r3, [r7, #32]
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     70c:	6a3b      	ldr	r3, [r7, #32]
     70e:	b2da      	uxtb	r2, r3
     710:	1c3b      	adds	r3, r7, #0
     712:	3308      	adds	r3, #8
     714:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     716:	1c3b      	adds	r3, r7, #0
     718:	3308      	adds	r3, #8
     71a:	2202      	movs	r2, #2
     71c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     71e:	6a3b      	ldr	r3, [r7, #32]
     720:	0c1b      	lsrs	r3, r3, #16
     722:	b2da      	uxtb	r2, r3
     724:	1c3b      	adds	r3, r7, #0
     726:	3308      	adds	r3, #8
     728:	1c10      	adds	r0, r2, #0
     72a:	1c19      	adds	r1, r3, #0
     72c:	4b73      	ldr	r3, [pc, #460]	; (8fc <_i2c_master_set_config+0x248>)
     72e:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     730:	69fb      	ldr	r3, [r7, #28]
     732:	2b00      	cmp	r3, #0
     734:	d106      	bne.n	744 <_i2c_master_set_config+0x90>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     736:	697b      	ldr	r3, [r7, #20]
     738:	1c18      	adds	r0, r3, #0
     73a:	2101      	movs	r1, #1
     73c:	4b6e      	ldr	r3, [pc, #440]	; (8f8 <_i2c_master_set_config+0x244>)
     73e:	4798      	blx	r3
     740:	1c03      	adds	r3, r0, #0
     742:	61fb      	str	r3, [r7, #28]
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     744:	69fb      	ldr	r3, [r7, #28]
     746:	b2da      	uxtb	r2, r3
     748:	1c3b      	adds	r3, r7, #0
     74a:	3308      	adds	r3, #8
     74c:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     74e:	1c3b      	adds	r3, r7, #0
     750:	3308      	adds	r3, #8
     752:	2202      	movs	r2, #2
     754:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     756:	69fb      	ldr	r3, [r7, #28]
     758:	0c1b      	lsrs	r3, r3, #16
     75a:	b2da      	uxtb	r2, r3
     75c:	1c3b      	adds	r3, r7, #0
     75e:	3308      	adds	r3, #8
     760:	1c10      	adds	r0, r2, #0
     762:	1c19      	adds	r1, r3, #0
     764:	4b65      	ldr	r3, [pc, #404]	; (8fc <_i2c_master_set_config+0x248>)
     766:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     768:	683b      	ldr	r3, [r7, #0]
     76a:	8a9a      	ldrh	r2, [r3, #20]
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     770:	683b      	ldr	r3, [r7, #0]
     772:	8ada      	ldrh	r2, [r3, #22]
     774:	687b      	ldr	r3, [r7, #4]
     776:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     778:	683b      	ldr	r3, [r7, #0]
     77a:	7e1b      	ldrb	r3, [r3, #24]
     77c:	2b00      	cmp	r3, #0
     77e:	d104      	bne.n	78a <_i2c_master_set_config+0xd6>
     780:	4b5f      	ldr	r3, [pc, #380]	; (900 <_i2c_master_set_config+0x24c>)
     782:	4798      	blx	r3
     784:	1c03      	adds	r3, r0, #0
     786:	2b00      	cmp	r3, #0
     788:	d002      	beq.n	790 <_i2c_master_set_config+0xdc>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     78a:	2380      	movs	r3, #128	; 0x80
     78c:	62fb      	str	r3, [r7, #44]	; 0x2c
     78e:	e001      	b.n	794 <_i2c_master_set_config+0xe0>
	} else {
		tmp_ctrla = 0;
     790:	2300      	movs	r3, #0
     792:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     794:	683b      	ldr	r3, [r7, #0]
     796:	691b      	ldr	r3, [r3, #16]
     798:	2b00      	cmp	r3, #0
     79a:	d004      	beq.n	7a6 <_i2c_master_set_config+0xf2>
		tmp_ctrla |= config->start_hold_time;
     79c:	683b      	ldr	r3, [r7, #0]
     79e:	691b      	ldr	r3, [r3, #16]
     7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     7a2:	4313      	orrs	r3, r2
     7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     7a6:	683b      	ldr	r3, [r7, #0]
     7a8:	689b      	ldr	r3, [r3, #8]
     7aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     7ac:	4313      	orrs	r3, r2
     7ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     7b0:	683a      	ldr	r2, [r7, #0]
     7b2:	2324      	movs	r3, #36	; 0x24
     7b4:	5cd3      	ldrb	r3, [r2, r3]
     7b6:	2b00      	cmp	r3, #0
     7b8:	d004      	beq.n	7c4 <_i2c_master_set_config+0x110>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     7bc:	2280      	movs	r2, #128	; 0x80
     7be:	05d2      	lsls	r2, r2, #23
     7c0:	4313      	orrs	r3, r2
     7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     7c4:	683b      	ldr	r3, [r7, #0]
     7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     7c8:	2b00      	cmp	r3, #0
     7ca:	d004      	beq.n	7d6 <_i2c_master_set_config+0x122>
		tmp_ctrla |= config->inactive_timeout;
     7cc:	683b      	ldr	r3, [r7, #0]
     7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     7d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     7d2:	4313      	orrs	r3, r2
     7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit) {
     7d6:	683a      	ldr	r2, [r7, #0]
     7d8:	232c      	movs	r3, #44	; 0x2c
     7da:	5cd3      	ldrb	r3, [r2, r3]
     7dc:	2b00      	cmp	r3, #0
     7de:	d004      	beq.n	7ea <_i2c_master_set_config+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     7e2:	2280      	movs	r2, #128	; 0x80
     7e4:	0512      	lsls	r2, r2, #20
     7e6:	4313      	orrs	r3, r2
     7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     7ea:	683a      	ldr	r2, [r7, #0]
     7ec:	232d      	movs	r3, #45	; 0x2d
     7ee:	5cd3      	ldrb	r3, [r2, r3]
     7f0:	2b00      	cmp	r3, #0
     7f2:	d004      	beq.n	7fe <_i2c_master_set_config+0x14a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     7f6:	2280      	movs	r2, #128	; 0x80
     7f8:	0412      	lsls	r2, r2, #16
     7fa:	4313      	orrs	r3, r2
     7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     7fe:	683a      	ldr	r2, [r7, #0]
     800:	232e      	movs	r3, #46	; 0x2e
     802:	5cd3      	ldrb	r3, [r2, r3]
     804:	2b00      	cmp	r3, #0
     806:	d004      	beq.n	812 <_i2c_master_set_config+0x15e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     80a:	2280      	movs	r2, #128	; 0x80
     80c:	03d2      	lsls	r2, r2, #15
     80e:	4313      	orrs	r3, r2
     810:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     812:	69bb      	ldr	r3, [r7, #24]
     814:	681a      	ldr	r2, [r3, #0]
     816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     818:	431a      	orrs	r2, r3
     81a:	69bb      	ldr	r3, [r7, #24]
     81c:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     81e:	69bb      	ldr	r3, [r7, #24]
     820:	2280      	movs	r2, #128	; 0x80
     822:	0052      	lsls	r2, r2, #1
     824:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     826:	1c3b      	adds	r3, r7, #0
     828:	3313      	adds	r3, #19
     82a:	781b      	ldrb	r3, [r3, #0]
     82c:	3314      	adds	r3, #20
     82e:	b2db      	uxtb	r3, r3
     830:	1c18      	adds	r0, r3, #0
     832:	4b34      	ldr	r3, [pc, #208]	; (904 <_i2c_master_set_config+0x250>)
     834:	4798      	blx	r3
     836:	1c02      	adds	r2, r0, #0
     838:	683b      	ldr	r3, [r7, #0]
     83a:	681b      	ldr	r3, [r3, #0]
     83c:	21fa      	movs	r1, #250	; 0xfa
     83e:	00c9      	lsls	r1, r1, #3
     840:	434b      	muls	r3, r1
     842:	18d3      	adds	r3, r2, r3
     844:	1e59      	subs	r1, r3, #1
     846:	683b      	ldr	r3, [r7, #0]
     848:	681b      	ldr	r3, [r3, #0]
     84a:	22fa      	movs	r2, #250	; 0xfa
     84c:	00d2      	lsls	r2, r2, #3
     84e:	435a      	muls	r2, r3
     850:	4b2d      	ldr	r3, [pc, #180]	; (908 <_i2c_master_set_config+0x254>)
     852:	1c08      	adds	r0, r1, #0
     854:	1c11      	adds	r1, r2, #0
     856:	4798      	blx	r3
     858:	1c03      	adds	r3, r0, #0
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
     85a:	3b05      	subs	r3, #5

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     85c:	60fb      	str	r3, [r7, #12]
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);

	/* Check that baud rate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     85e:	68fb      	ldr	r3, [r7, #12]
     860:	2bff      	cmp	r3, #255	; 0xff
     862:	dc02      	bgt.n	86a <_i2c_master_set_config+0x1b6>
     864:	68fb      	ldr	r3, [r7, #12]
     866:	2b00      	cmp	r3, #0
     868:	da04      	bge.n	874 <_i2c_master_set_config+0x1c0>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     86a:	1c3b      	adds	r3, r7, #0
     86c:	3327      	adds	r3, #39	; 0x27
     86e:	2240      	movs	r2, #64	; 0x40
     870:	701a      	strb	r2, [r3, #0]
     872:	e025      	b.n	8c0 <_i2c_master_set_config+0x20c>
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     874:	1c3b      	adds	r3, r7, #0
     876:	3313      	adds	r3, #19
     878:	781b      	ldrb	r3, [r3, #0]
     87a:	3314      	adds	r3, #20
     87c:	b2db      	uxtb	r3, r3
     87e:	1c18      	adds	r0, r3, #0
     880:	4b20      	ldr	r3, [pc, #128]	; (904 <_i2c_master_set_config+0x250>)
     882:	4798      	blx	r3
     884:	1c02      	adds	r2, r0, #0
     886:	683b      	ldr	r3, [r7, #0]
     888:	685b      	ldr	r3, [r3, #4]
     88a:	21fa      	movs	r1, #250	; 0xfa
     88c:	00c9      	lsls	r1, r1, #3
     88e:	434b      	muls	r3, r1
     890:	18d3      	adds	r3, r2, r3
     892:	1e59      	subs	r1, r3, #1
     894:	683b      	ldr	r3, [r7, #0]
     896:	685b      	ldr	r3, [r3, #4]
     898:	22fa      	movs	r2, #250	; 0xfa
     89a:	00d2      	lsls	r2, r2, #3
     89c:	435a      	muls	r2, r3
     89e:	4b1a      	ldr	r3, [pc, #104]	; (908 <_i2c_master_set_config+0x254>)
     8a0:	1c08      	adds	r0, r1, #0
     8a2:	1c11      	adds	r1, r2, #0
     8a4:	4798      	blx	r3
     8a6:	1c03      	adds	r3, r0, #0
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
     8a8:	3b01      	subs	r3, #1
	if (tmp_baud > 255 || tmp_baud < 0) {
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     8aa:	62bb      	str	r3, [r7, #40]	; 0x28
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);

		/* Check that baud rate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
     8ae:	2bff      	cmp	r3, #255	; 0xff
     8b0:	dc02      	bgt.n	8b8 <_i2c_master_set_config+0x204>
     8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     8b4:	2b00      	cmp	r3, #0
     8b6:	da03      	bge.n	8c0 <_i2c_master_set_config+0x20c>
			/* Baud rate not supported. */
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8b8:	1c3b      	adds	r3, r7, #0
     8ba:	3327      	adds	r3, #39	; 0x27
     8bc:	2240      	movs	r2, #64	; 0x40
     8be:	701a      	strb	r2, [r3, #0]
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
     8c0:	1c3b      	adds	r3, r7, #0
     8c2:	3327      	adds	r3, #39	; 0x27
     8c4:	781b      	ldrb	r3, [r3, #0]
     8c6:	2b40      	cmp	r3, #64	; 0x40
     8c8:	d00b      	beq.n	8e2 <_i2c_master_set_config+0x22e>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     8ca:	68fa      	ldr	r2, [r7, #12]
     8cc:	23ff      	movs	r3, #255	; 0xff
     8ce:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
     8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
     8d2:	041b      	lsls	r3, r3, #16
     8d4:	1c19      	adds	r1, r3, #0
     8d6:	23ff      	movs	r3, #255	; 0xff
     8d8:	041b      	lsls	r3, r3, #16
     8da:	400b      	ands	r3, r1
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     8dc:	431a      	orrs	r2, r3
     8de:	69bb      	ldr	r3, [r7, #24]
     8e0:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
	}

	return tmp_status_code;
     8e2:	1c3b      	adds	r3, r7, #0
     8e4:	3327      	adds	r3, #39	; 0x27
     8e6:	781b      	ldrb	r3, [r3, #0]
}
     8e8:	1c18      	adds	r0, r3, #0
     8ea:	46bd      	mov	sp, r7
     8ec:	b00d      	add	sp, #52	; 0x34
     8ee:	bd90      	pop	{r4, r7, pc}
     8f0:	00006c45 	.word	0x00006c45
     8f4:	00000621 	.word	0x00000621
     8f8:	00006a75 	.word	0x00006a75
     8fc:	00008355 	.word	0x00008355
     900:	00000649 	.word	0x00000649
     904:	00008199 	.word	0x00008199
     908:	0000976d 	.word	0x0000976d

0000090c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     90c:	b590      	push	{r4, r7, lr}
     90e:	b08b      	sub	sp, #44	; 0x2c
     910:	af00      	add	r7, sp, #0
     912:	60f8      	str	r0, [r7, #12]
     914:	60b9      	str	r1, [r7, #8]
     916:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     918:	68fb      	ldr	r3, [r7, #12]
     91a:	68ba      	ldr	r2, [r7, #8]
     91c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     91e:	68fb      	ldr	r3, [r7, #12]
     920:	681b      	ldr	r3, [r3, #0]
     922:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     924:	68fb      	ldr	r3, [r7, #12]
     926:	681b      	ldr	r3, [r3, #0]
     928:	1c18      	adds	r0, r3, #0
     92a:	4b3b      	ldr	r3, [pc, #236]	; (a18 <i2c_master_init+0x10c>)
     92c:	4798      	blx	r3
     92e:	1c03      	adds	r3, r0, #0
     930:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     932:	6a3b      	ldr	r3, [r7, #32]
     934:	3302      	adds	r3, #2
     936:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     938:	6a3b      	ldr	r3, [r7, #32]
     93a:	3314      	adds	r3, #20
     93c:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     93e:	69fb      	ldr	r3, [r7, #28]
     940:	2201      	movs	r2, #1
     942:	1c11      	adds	r1, r2, #0
     944:	4099      	lsls	r1, r3
     946:	1c0b      	adds	r3, r1, #0
     948:	2002      	movs	r0, #2
     94a:	1c19      	adds	r1, r3, #0
     94c:	4b33      	ldr	r3, [pc, #204]	; (a1c <i2c_master_init+0x110>)
     94e:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     950:	1c3b      	adds	r3, r7, #0
     952:	3314      	adds	r3, #20
     954:	1c18      	adds	r0, r3, #0
     956:	4b32      	ldr	r3, [pc, #200]	; (a20 <i2c_master_init+0x114>)
     958:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	7b1a      	ldrb	r2, [r3, #12]
     95e:	1c3b      	adds	r3, r7, #0
     960:	3314      	adds	r3, #20
     962:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     964:	69bb      	ldr	r3, [r7, #24]
     966:	b2da      	uxtb	r2, r3
     968:	1c3b      	adds	r3, r7, #0
     96a:	3314      	adds	r3, #20
     96c:	1c10      	adds	r0, r2, #0
     96e:	1c19      	adds	r1, r3, #0
     970:	4b2c      	ldr	r3, [pc, #176]	; (a24 <i2c_master_init+0x118>)
     972:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     974:	69bb      	ldr	r3, [r7, #24]
     976:	b2db      	uxtb	r3, r3
     978:	1c18      	adds	r0, r3, #0
     97a:	4b2b      	ldr	r3, [pc, #172]	; (a28 <i2c_master_init+0x11c>)
     97c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     97e:	687b      	ldr	r3, [r7, #4]
     980:	7b1b      	ldrb	r3, [r3, #12]
     982:	1c18      	adds	r0, r3, #0
     984:	2100      	movs	r1, #0
     986:	4b29      	ldr	r3, [pc, #164]	; (a2c <i2c_master_init+0x120>)
     988:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     98c:	681a      	ldr	r2, [r3, #0]
     98e:	2302      	movs	r3, #2
     990:	4013      	ands	r3, r2
     992:	d001      	beq.n	998 <i2c_master_init+0x8c>
		return STATUS_ERR_DENIED;
     994:	231c      	movs	r3, #28
     996:	e03b      	b.n	a10 <i2c_master_init+0x104>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     99a:	681a      	ldr	r2, [r3, #0]
     99c:	2301      	movs	r3, #1
     99e:	4013      	ands	r3, r2
     9a0:	d001      	beq.n	9a6 <i2c_master_init+0x9a>
		return STATUS_BUSY;
     9a2:	2305      	movs	r3, #5
     9a4:	e034      	b.n	a10 <i2c_master_init+0x104>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     9a6:	68fb      	ldr	r3, [r7, #12]
     9a8:	681b      	ldr	r3, [r3, #0]
     9aa:	1c3c      	adds	r4, r7, #0
     9ac:	3417      	adds	r4, #23
     9ae:	1c18      	adds	r0, r3, #0
     9b0:	4b19      	ldr	r3, [pc, #100]	; (a18 <i2c_master_init+0x10c>)
     9b2:	4798      	blx	r3
     9b4:	1c03      	adds	r3, r0, #0
     9b6:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     9b8:	1c3b      	adds	r3, r7, #0
     9ba:	3317      	adds	r3, #23
     9bc:	781a      	ldrb	r2, [r3, #0]
     9be:	4b1c      	ldr	r3, [pc, #112]	; (a30 <i2c_master_init+0x124>)
     9c0:	1c10      	adds	r0, r2, #0
     9c2:	1c19      	adds	r1, r3, #0
     9c4:	4b1b      	ldr	r3, [pc, #108]	; (a34 <i2c_master_init+0x128>)
     9c6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     9c8:	1c3b      	adds	r3, r7, #0
     9ca:	3317      	adds	r3, #23
     9cc:	781a      	ldrb	r2, [r3, #0]
     9ce:	4b1a      	ldr	r3, [pc, #104]	; (a38 <i2c_master_init+0x12c>)
     9d0:	0092      	lsls	r2, r2, #2
     9d2:	68f9      	ldr	r1, [r7, #12]
     9d4:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
     9d6:	68fb      	ldr	r3, [r7, #12]
     9d8:	2200      	movs	r2, #0
     9da:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
     9dc:	68fb      	ldr	r3, [r7, #12]
     9de:	2200      	movs	r2, #0
     9e0:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
     9e2:	68fb      	ldr	r3, [r7, #12]
     9e4:	2200      	movs	r2, #0
     9e6:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
     9e8:	68fb      	ldr	r3, [r7, #12]
     9ea:	2200      	movs	r2, #0
     9ec:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
     9ee:	68fa      	ldr	r2, [r7, #12]
     9f0:	2325      	movs	r3, #37	; 0x25
     9f2:	2100      	movs	r1, #0
     9f4:	54d1      	strb	r1, [r2, r3]
	module->buffer = NULL;
     9f6:	68fb      	ldr	r3, [r7, #12]
     9f8:	2200      	movs	r2, #0
     9fa:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9fe:	2214      	movs	r2, #20
     a00:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
     a02:	68fa      	ldr	r2, [r7, #12]
     a04:	687b      	ldr	r3, [r7, #4]
     a06:	1c10      	adds	r0, r2, #0
     a08:	1c19      	adds	r1, r3, #0
     a0a:	4b0c      	ldr	r3, [pc, #48]	; (a3c <i2c_master_init+0x130>)
     a0c:	4798      	blx	r3
     a0e:	1c03      	adds	r3, r0, #0
}
     a10:	1c18      	adds	r0, r3, #0
     a12:	46bd      	mov	sp, r7
     a14:	b00b      	add	sp, #44	; 0x2c
     a16:	bd90      	pop	{r4, r7, pc}
     a18:	00006c45 	.word	0x00006c45
     a1c:	000005c5 	.word	0x000005c5
     a20:	000005b1 	.word	0x000005b1
     a24:	0000807d 	.word	0x0000807d
     a28:	000080bd 	.word	0x000080bd
     a2c:	000069e9 	.word	0x000069e9
     a30:	000011e9 	.word	0x000011e9
     a34:	00006c91 	.word	0x00006c91
     a38:	200010a4 	.word	0x200010a4
     a3c:	000006b5 	.word	0x000006b5

00000a40 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
     a40:	b580      	push	{r7, lr}
     a42:	b084      	sub	sp, #16
     a44:	af00      	add	r7, sp, #0
     a46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a48:	687b      	ldr	r3, [r7, #4]
     a4a:	681b      	ldr	r3, [r3, #0]
     a4c:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     a4e:	68fb      	ldr	r3, [r7, #12]
     a50:	699b      	ldr	r3, [r3, #24]
     a52:	b2db      	uxtb	r3, r3
     a54:	1c1a      	adds	r2, r3, #0
     a56:	2302      	movs	r3, #2
     a58:	4013      	ands	r3, r2
     a5a:	d00c      	beq.n	a76 <_i2c_master_address_response+0x36>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     a5c:	68fb      	ldr	r3, [r7, #12]
     a5e:	2202      	movs	r2, #2
     a60:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     a62:	68fb      	ldr	r3, [r7, #12]
     a64:	699b      	ldr	r3, [r3, #24]
     a66:	0c1b      	lsrs	r3, r3, #16
     a68:	b29b      	uxth	r3, r3
     a6a:	1c1a      	adds	r2, r3, #0
     a6c:	2302      	movs	r3, #2
     a6e:	4013      	ands	r3, r2
     a70:	d012      	beq.n	a98 <_i2c_master_address_response+0x58>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     a72:	2341      	movs	r3, #65	; 0x41
     a74:	e011      	b.n	a9a <_i2c_master_address_response+0x5a>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     a76:	68fb      	ldr	r3, [r7, #12]
     a78:	699b      	ldr	r3, [r3, #24]
     a7a:	0c1b      	lsrs	r3, r3, #16
     a7c:	b29b      	uxth	r3, r3
     a7e:	1c1a      	adds	r2, r3, #0
     a80:	2304      	movs	r3, #4
     a82:	4013      	ands	r3, r2
     a84:	d008      	beq.n	a98 <_i2c_master_address_response+0x58>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a86:	68fb      	ldr	r3, [r7, #12]
     a88:	685b      	ldr	r3, [r3, #4]
     a8a:	22c0      	movs	r2, #192	; 0xc0
     a8c:	0292      	lsls	r2, r2, #10
     a8e:	431a      	orrs	r2, r3
     a90:	68fb      	ldr	r3, [r7, #12]
     a92:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     a94:	2318      	movs	r3, #24
     a96:	e000      	b.n	a9a <_i2c_master_address_response+0x5a>
	}

	return STATUS_OK;
     a98:	2300      	movs	r3, #0
}
     a9a:	1c18      	adds	r0, r3, #0
     a9c:	46bd      	mov	sp, r7
     a9e:	b004      	add	sp, #16
     aa0:	bd80      	pop	{r7, pc}
     aa2:	46c0      	nop			; (mov r8, r8)

00000aa4 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     aa4:	b580      	push	{r7, lr}
     aa6:	b084      	sub	sp, #16
     aa8:	af00      	add	r7, sp, #0
     aaa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     aac:	687b      	ldr	r3, [r7, #4]
     aae:	681b      	ldr	r3, [r3, #0]
     ab0:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     ab2:	1c3b      	adds	r3, r7, #0
     ab4:	330e      	adds	r3, #14
     ab6:	2200      	movs	r2, #0
     ab8:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     aba:	e00f      	b.n	adc <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     abc:	1c3b      	adds	r3, r7, #0
     abe:	330e      	adds	r3, #14
     ac0:	1c3a      	adds	r2, r7, #0
     ac2:	320e      	adds	r2, #14
     ac4:	8812      	ldrh	r2, [r2, #0]
     ac6:	3201      	adds	r2, #1
     ac8:	801a      	strh	r2, [r3, #0]
     aca:	687b      	ldr	r3, [r7, #4]
     acc:	891b      	ldrh	r3, [r3, #8]
     ace:	1c3a      	adds	r2, r7, #0
     ad0:	320e      	adds	r2, #14
     ad2:	8812      	ldrh	r2, [r2, #0]
     ad4:	429a      	cmp	r2, r3
     ad6:	d301      	bcc.n	adc <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
     ad8:	2312      	movs	r3, #18
     ada:	e00e      	b.n	afa <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     adc:	68bb      	ldr	r3, [r7, #8]
     ade:	699b      	ldr	r3, [r3, #24]
     ae0:	b2db      	uxtb	r3, r3
     ae2:	1c1a      	adds	r2, r3, #0
     ae4:	2301      	movs	r3, #1
     ae6:	4013      	ands	r3, r2
     ae8:	d106      	bne.n	af8 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     aea:	68bb      	ldr	r3, [r7, #8]
     aec:	699b      	ldr	r3, [r3, #24]
     aee:	b2db      	uxtb	r3, r3
     af0:	1c1a      	adds	r2, r3, #0
     af2:	2302      	movs	r3, #2
     af4:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     af6:	d0e1      	beq.n	abc <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     af8:	2300      	movs	r3, #0
}
     afa:	1c18      	adds	r0, r3, #0
     afc:	46bd      	mov	sp, r7
     afe:	b004      	add	sp, #16
     b00:	bd80      	pop	{r7, pc}
     b02:	46c0      	nop			; (mov r8, r8)

00000b04 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen.
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     b04:	b590      	push	{r4, r7, lr}
     b06:	b085      	sub	sp, #20
     b08:	af00      	add	r7, sp, #0
     b0a:	6078      	str	r0, [r7, #4]
     b0c:	1c0a      	adds	r2, r1, #0
     b0e:	1cfb      	adds	r3, r7, #3
     b10:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b12:	687b      	ldr	r3, [r7, #4]
     b14:	681b      	ldr	r3, [r3, #0]
     b16:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     b18:	68fb      	ldr	r3, [r7, #12]
     b1a:	685b      	ldr	r3, [r3, #4]
     b1c:	2280      	movs	r2, #128	; 0x80
     b1e:	02d2      	lsls	r2, r2, #11
     b20:	431a      	orrs	r2, r3
     b22:	68fb      	ldr	r3, [r7, #12]
     b24:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     b26:	1cfb      	adds	r3, r7, #3
     b28:	781a      	ldrb	r2, [r3, #0]
     b2a:	68fb      	ldr	r3, [r7, #12]
     b2c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     b2e:	1c3c      	adds	r4, r7, #0
     b30:	340b      	adds	r4, #11
     b32:	687b      	ldr	r3, [r7, #4]
     b34:	1c18      	adds	r0, r3, #0
     b36:	4b07      	ldr	r3, [pc, #28]	; (b54 <_i2c_master_send_hs_master_code+0x50>)
     b38:	4798      	blx	r3
     b3a:	1c03      	adds	r3, r0, #0
     b3c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     b3e:	68fb      	ldr	r3, [r7, #12]
     b40:	2201      	movs	r2, #1
     b42:	761a      	strb	r2, [r3, #24]

	return tmp_status;
     b44:	1c3b      	adds	r3, r7, #0
     b46:	330b      	adds	r3, #11
     b48:	781b      	ldrb	r3, [r3, #0]
}
     b4a:	1c18      	adds	r0, r3, #0
     b4c:	46bd      	mov	sp, r7
     b4e:	b005      	add	sp, #20
     b50:	bd90      	pop	{r4, r7, pc}
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	00000aa5 	.word	0x00000aa5

00000b58 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     b58:	b590      	push	{r4, r7, lr}
     b5a:	b087      	sub	sp, #28
     b5c:	af00      	add	r7, sp, #0
     b5e:	6078      	str	r0, [r7, #4]
     b60:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b62:	687b      	ldr	r3, [r7, #4]
     b64:	681b      	ldr	r3, [r3, #0]
     b66:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     b68:	1c3b      	adds	r3, r7, #0
     b6a:	3314      	adds	r3, #20
     b6c:	683a      	ldr	r2, [r7, #0]
     b6e:	8852      	ldrh	r2, [r2, #2]
     b70:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
     b72:	1c3b      	adds	r3, r7, #0
     b74:	3312      	adds	r3, #18
     b76:	2200      	movs	r2, #0
     b78:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     b7a:	68fb      	ldr	r3, [r7, #12]
     b7c:	681b      	ldr	r3, [r3, #0]
     b7e:	011b      	lsls	r3, r3, #4
     b80:	0fdb      	lsrs	r3, r3, #31
     b82:	b2db      	uxtb	r3, r3
     b84:	1c1a      	adds	r2, r3, #0
     b86:	1c3b      	adds	r3, r7, #0
     b88:	330b      	adds	r3, #11
     b8a:	1e51      	subs	r1, r2, #1
     b8c:	418a      	sbcs	r2, r1
     b8e:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	7a5b      	ldrb	r3, [r3, #9]
     b94:	2b00      	cmp	r3, #0
     b96:	d006      	beq.n	ba6 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     b98:	683b      	ldr	r3, [r7, #0]
     b9a:	7a9b      	ldrb	r3, [r3, #10]
     b9c:	687a      	ldr	r2, [r7, #4]
     b9e:	1c10      	adds	r0, r2, #0
     ba0:	1c19      	adds	r1, r3, #0
     ba2:	4b79      	ldr	r3, [pc, #484]	; (d88 <_i2c_master_read_packet+0x230>)
     ba4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     ba6:	68fb      	ldr	r3, [r7, #12]
     ba8:	685a      	ldr	r2, [r3, #4]
     baa:	4b78      	ldr	r3, [pc, #480]	; (d8c <_i2c_master_read_packet+0x234>)
     bac:	401a      	ands	r2, r3
     bae:	68fb      	ldr	r3, [r7, #12]
     bb0:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     bb2:	683b      	ldr	r3, [r7, #0]
     bb4:	7a1b      	ldrb	r3, [r3, #8]
     bb6:	2b00      	cmp	r3, #0
     bb8:	d041      	beq.n	c3e <_i2c_master_read_packet+0xe6>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     bba:	683b      	ldr	r3, [r7, #0]
     bbc:	881b      	ldrh	r3, [r3, #0]
     bbe:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     bc0:	683b      	ldr	r3, [r7, #0]
     bc2:	7a5b      	ldrb	r3, [r3, #9]
     bc4:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     bc6:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     bc8:	2280      	movs	r2, #128	; 0x80
     bca:	0212      	lsls	r2, r2, #8
     bcc:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     bce:	68fb      	ldr	r3, [r7, #12]
     bd0:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     bd2:	1c3c      	adds	r4, r7, #0
     bd4:	3417      	adds	r4, #23
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	1c18      	adds	r0, r3, #0
     bda:	4b6d      	ldr	r3, [pc, #436]	; (d90 <_i2c_master_read_packet+0x238>)
     bdc:	4798      	blx	r3
     bde:	1c03      	adds	r3, r0, #0
     be0:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     be2:	68fb      	ldr	r3, [r7, #12]
     be4:	685a      	ldr	r2, [r3, #4]
     be6:	4b69      	ldr	r3, [pc, #420]	; (d8c <_i2c_master_read_packet+0x234>)
     be8:	401a      	ands	r2, r3
     bea:	68fb      	ldr	r3, [r7, #12]
     bec:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     bee:	1c3b      	adds	r3, r7, #0
     bf0:	3317      	adds	r3, #23
     bf2:	781b      	ldrb	r3, [r3, #0]
     bf4:	2b00      	cmp	r3, #0
     bf6:	d107      	bne.n	c08 <_i2c_master_read_packet+0xb0>
			tmp_status = _i2c_master_address_response(module);
     bf8:	1c3c      	adds	r4, r7, #0
     bfa:	3417      	adds	r4, #23
     bfc:	687b      	ldr	r3, [r7, #4]
     bfe:	1c18      	adds	r0, r3, #0
     c00:	4b64      	ldr	r3, [pc, #400]	; (d94 <_i2c_master_read_packet+0x23c>)
     c02:	4798      	blx	r3
     c04:	1c03      	adds	r3, r0, #0
     c06:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
     c08:	1c3b      	adds	r3, r7, #0
     c0a:	3317      	adds	r3, #23
     c0c:	781b      	ldrb	r3, [r3, #0]
     c0e:	2b00      	cmp	r3, #0
     c10:	d111      	bne.n	c36 <_i2c_master_read_packet+0xde>
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     c12:	683b      	ldr	r3, [r7, #0]
     c14:	881b      	ldrh	r3, [r3, #0]
     c16:	0a1b      	lsrs	r3, r3, #8
     c18:	b29b      	uxth	r3, r3
     c1a:	2278      	movs	r2, #120	; 0x78
     c1c:	4313      	orrs	r3, r2
     c1e:	b29b      	uxth	r3, r3
     c20:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c22:	683b      	ldr	r3, [r7, #0]
     c24:	7a5b      	ldrb	r3, [r3, #9]
     c26:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     c28:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c2a:	2201      	movs	r2, #1
     c2c:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     c2e:	1c1a      	adds	r2, r3, #0
     c30:	68fb      	ldr	r3, [r7, #12]
     c32:	625a      	str	r2, [r3, #36]	; 0x24
     c34:	e00f      	b.n	c56 <_i2c_master_read_packet+0xfe>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
     c36:	1c3b      	adds	r3, r7, #0
     c38:	3317      	adds	r3, #23
     c3a:	781b      	ldrb	r3, [r3, #0]
     c3c:	e09f      	b.n	d7e <_i2c_master_read_packet+0x226>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     c3e:	683b      	ldr	r3, [r7, #0]
     c40:	881b      	ldrh	r3, [r3, #0]
     c42:	005b      	lsls	r3, r3, #1
     c44:	2201      	movs	r2, #1
     c46:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     c48:	683b      	ldr	r3, [r7, #0]
     c4a:	7a5b      	ldrb	r3, [r3, #9]
     c4c:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     c4e:	4313      	orrs	r3, r2
     c50:	1c1a      	adds	r2, r3, #0
     c52:	68fb      	ldr	r3, [r7, #12]
     c54:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     c56:	1c3c      	adds	r4, r7, #0
     c58:	3417      	adds	r4, #23
     c5a:	687b      	ldr	r3, [r7, #4]
     c5c:	1c18      	adds	r0, r3, #0
     c5e:	4b4c      	ldr	r3, [pc, #304]	; (d90 <_i2c_master_read_packet+0x238>)
     c60:	4798      	blx	r3
     c62:	1c03      	adds	r3, r0, #0
     c64:	7023      	strb	r3, [r4, #0]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c66:	68fb      	ldr	r3, [r7, #12]
     c68:	685a      	ldr	r2, [r3, #4]
     c6a:	4b48      	ldr	r3, [pc, #288]	; (d8c <_i2c_master_read_packet+0x234>)
     c6c:	401a      	ands	r2, r3
     c6e:	68fb      	ldr	r3, [r7, #12]
     c70:	605a      	str	r2, [r3, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     c72:	1c3b      	adds	r3, r7, #0
     c74:	3317      	adds	r3, #23
     c76:	781b      	ldrb	r3, [r3, #0]
     c78:	2b00      	cmp	r3, #0
     c7a:	d107      	bne.n	c8c <_i2c_master_read_packet+0x134>
		tmp_status = _i2c_master_address_response(module);
     c7c:	1c3c      	adds	r4, r7, #0
     c7e:	3417      	adds	r4, #23
     c80:	687b      	ldr	r3, [r7, #4]
     c82:	1c18      	adds	r0, r3, #0
     c84:	4b43      	ldr	r3, [pc, #268]	; (d94 <_i2c_master_read_packet+0x23c>)
     c86:	4798      	blx	r3
     c88:	1c03      	adds	r3, r0, #0
     c8a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     c8c:	1c3b      	adds	r3, r7, #0
     c8e:	3317      	adds	r3, #23
     c90:	781b      	ldrb	r3, [r3, #0]
     c92:	2b00      	cmp	r3, #0
     c94:	d000      	beq.n	c98 <_i2c_master_read_packet+0x140>
     c96:	e06f      	b.n	d78 <_i2c_master_read_packet+0x220>
		/* Read data buffer. */
		while (tmp_data_length--) {
     c98:	e048      	b.n	d2c <_i2c_master_read_packet+0x1d4>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     c9a:	68fb      	ldr	r3, [r7, #12]
     c9c:	699b      	ldr	r3, [r3, #24]
     c9e:	0c1b      	lsrs	r3, r3, #16
     ca0:	b29b      	uxth	r3, r3
     ca2:	1c1a      	adds	r2, r3, #0
     ca4:	2320      	movs	r3, #32
     ca6:	4013      	ands	r3, r2
     ca8:	d101      	bne.n	cae <_i2c_master_read_packet+0x156>
				return STATUS_ERR_PACKET_COLLISION;
     caa:	2341      	movs	r3, #65	; 0x41
     cac:	e067      	b.n	d7e <_i2c_master_read_packet+0x226>
			}

			if (((!sclsm_flag) && (tmp_data_length == 0)) ||
     cae:	1c3b      	adds	r3, r7, #0
     cb0:	330b      	adds	r3, #11
     cb2:	781b      	ldrb	r3, [r3, #0]
     cb4:	2201      	movs	r2, #1
     cb6:	4053      	eors	r3, r2
     cb8:	b2db      	uxtb	r3, r3
     cba:	2b00      	cmp	r3, #0
     cbc:	d004      	beq.n	cc8 <_i2c_master_read_packet+0x170>
     cbe:	1c3b      	adds	r3, r7, #0
     cc0:	3314      	adds	r3, #20
     cc2:	881b      	ldrh	r3, [r3, #0]
     cc4:	2b00      	cmp	r3, #0
     cc6:	d009      	beq.n	cdc <_i2c_master_read_packet+0x184>
     cc8:	1c3b      	adds	r3, r7, #0
     cca:	330b      	adds	r3, #11
     ccc:	781b      	ldrb	r3, [r3, #0]
     cce:	2b00      	cmp	r3, #0
     cd0:	d00c      	beq.n	cec <_i2c_master_read_packet+0x194>
					((sclsm_flag) && (tmp_data_length == 1))) {
     cd2:	1c3b      	adds	r3, r7, #0
     cd4:	3314      	adds	r3, #20
     cd6:	881b      	ldrh	r3, [r3, #0]
     cd8:	2b01      	cmp	r3, #1
     cda:	d107      	bne.n	cec <_i2c_master_read_packet+0x194>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     cdc:	68fb      	ldr	r3, [r7, #12]
     cde:	685b      	ldr	r3, [r3, #4]
     ce0:	2280      	movs	r2, #128	; 0x80
     ce2:	02d2      	lsls	r2, r2, #11
     ce4:	431a      	orrs	r2, r3
     ce6:	68fb      	ldr	r3, [r7, #12]
     ce8:	605a      	str	r2, [r3, #4]
     cea:	e019      	b.n	d20 <_i2c_master_read_packet+0x1c8>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     cec:	687b      	ldr	r3, [r7, #4]
     cee:	1c18      	adds	r0, r3, #0
     cf0:	4b29      	ldr	r3, [pc, #164]	; (d98 <_i2c_master_read_packet+0x240>)
     cf2:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     cf4:	683b      	ldr	r3, [r7, #0]
     cf6:	685a      	ldr	r2, [r3, #4]
     cf8:	1c3b      	adds	r3, r7, #0
     cfa:	3312      	adds	r3, #18
     cfc:	881b      	ldrh	r3, [r3, #0]
     cfe:	1c39      	adds	r1, r7, #0
     d00:	3112      	adds	r1, #18
     d02:	1c58      	adds	r0, r3, #1
     d04:	8008      	strh	r0, [r1, #0]
     d06:	18d2      	adds	r2, r2, r3
     d08:	68fb      	ldr	r3, [r7, #12]
     d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     d0c:	b2db      	uxtb	r3, r3
     d0e:	7013      	strb	r3, [r2, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     d10:	1c3c      	adds	r4, r7, #0
     d12:	3417      	adds	r4, #23
     d14:	687b      	ldr	r3, [r7, #4]
     d16:	1c18      	adds	r0, r3, #0
     d18:	4b1d      	ldr	r3, [pc, #116]	; (d90 <_i2c_master_read_packet+0x238>)
     d1a:	4798      	blx	r3
     d1c:	1c03      	adds	r3, r0, #0
     d1e:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     d20:	1c3b      	adds	r3, r7, #0
     d22:	3317      	adds	r3, #23
     d24:	781b      	ldrb	r3, [r3, #0]
     d26:	2b00      	cmp	r3, #0
     d28:	d000      	beq.n	d2c <_i2c_master_read_packet+0x1d4>
				break;
     d2a:	e008      	b.n	d3e <_i2c_master_read_packet+0x1e6>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     d2c:	1c3b      	adds	r3, r7, #0
     d2e:	3314      	adds	r3, #20
     d30:	881b      	ldrh	r3, [r3, #0]
     d32:	1c3a      	adds	r2, r7, #0
     d34:	3214      	adds	r2, #20
     d36:	1e59      	subs	r1, r3, #1
     d38:	8011      	strh	r1, [r2, #0]
     d3a:	2b00      	cmp	r3, #0
     d3c:	d1ad      	bne.n	c9a <_i2c_master_read_packet+0x142>
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	7a9b      	ldrb	r3, [r3, #10]
     d42:	2b00      	cmp	r3, #0
     d44:	d00a      	beq.n	d5c <_i2c_master_read_packet+0x204>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	1c18      	adds	r0, r3, #0
     d4a:	4b13      	ldr	r3, [pc, #76]	; (d98 <_i2c_master_read_packet+0x240>)
     d4c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     d4e:	68fb      	ldr	r3, [r7, #12]
     d50:	685b      	ldr	r3, [r3, #4]
     d52:	22c0      	movs	r2, #192	; 0xc0
     d54:	0292      	lsls	r2, r2, #10
     d56:	431a      	orrs	r2, r3
     d58:	68fb      	ldr	r3, [r7, #12]
     d5a:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     d5c:	687b      	ldr	r3, [r7, #4]
     d5e:	1c18      	adds	r0, r3, #0
     d60:	4b0d      	ldr	r3, [pc, #52]	; (d98 <_i2c_master_read_packet+0x240>)
     d62:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     d64:	683b      	ldr	r3, [r7, #0]
     d66:	685a      	ldr	r2, [r3, #4]
     d68:	1c3b      	adds	r3, r7, #0
     d6a:	3312      	adds	r3, #18
     d6c:	881b      	ldrh	r3, [r3, #0]
     d6e:	18d2      	adds	r2, r2, r3
     d70:	68fb      	ldr	r3, [r7, #12]
     d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     d74:	b2db      	uxtb	r3, r3
     d76:	7013      	strb	r3, [r2, #0]
	}

	return tmp_status;
     d78:	1c3b      	adds	r3, r7, #0
     d7a:	3317      	adds	r3, #23
     d7c:	781b      	ldrb	r3, [r3, #0]
}
     d7e:	1c18      	adds	r0, r3, #0
     d80:	46bd      	mov	sp, r7
     d82:	b007      	add	sp, #28
     d84:	bd90      	pop	{r4, r7, pc}
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	00000b05 	.word	0x00000b05
     d8c:	fffbffff 	.word	0xfffbffff
     d90:	00000aa5 	.word	0x00000aa5
     d94:	00000a41 	.word	0x00000a41
     d98:	00000691 	.word	0x00000691

00000d9c <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     d9c:	b580      	push	{r7, lr}
     d9e:	b082      	sub	sp, #8
     da0:	af00      	add	r7, sp, #0
     da2:	6078      	str	r0, [r7, #4]
     da4:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	69db      	ldr	r3, [r3, #28]
     daa:	b29b      	uxth	r3, r3
     dac:	2b00      	cmp	r3, #0
     dae:	d001      	beq.n	db4 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
     db0:	2305      	movs	r3, #5
     db2:	e009      	b.n	dc8 <i2c_master_read_packet_wait+0x2c>
	}
#endif

	module->send_stop = true;
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	2201      	movs	r2, #1
     db8:	729a      	strb	r2, [r3, #10]

	return _i2c_master_read_packet(module, packet);
     dba:	687a      	ldr	r2, [r7, #4]
     dbc:	683b      	ldr	r3, [r7, #0]
     dbe:	1c10      	adds	r0, r2, #0
     dc0:	1c19      	adds	r1, r3, #0
     dc2:	4b03      	ldr	r3, [pc, #12]	; (dd0 <i2c_master_read_packet_wait+0x34>)
     dc4:	4798      	blx	r3
     dc6:	1c03      	adds	r3, r0, #0
}
     dc8:	1c18      	adds	r0, r3, #0
     dca:	46bd      	mov	sp, r7
     dcc:	b002      	add	sp, #8
     dce:	bd80      	pop	{r7, pc}
     dd0:	00000b59 	.word	0x00000b59

00000dd4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     dd4:	b590      	push	{r4, r7, lr}
     dd6:	b087      	sub	sp, #28
     dd8:	af00      	add	r7, sp, #0
     dda:	6078      	str	r0, [r7, #4]
     ddc:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	681b      	ldr	r3, [r3, #0]
     de2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     de4:	1c3b      	adds	r3, r7, #0
     de6:	3314      	adds	r3, #20
     de8:	683a      	ldr	r2, [r7, #0]
     dea:	8852      	ldrh	r2, [r2, #2]
     dec:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	1c18      	adds	r0, r3, #0
     df2:	4b51      	ldr	r3, [pc, #324]	; (f38 <_i2c_master_write_packet+0x164>)
     df4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     df6:	683b      	ldr	r3, [r7, #0]
     df8:	7a5b      	ldrb	r3, [r3, #9]
     dfa:	2b00      	cmp	r3, #0
     dfc:	d006      	beq.n	e0c <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     dfe:	683b      	ldr	r3, [r7, #0]
     e00:	7a9b      	ldrb	r3, [r3, #10]
     e02:	687a      	ldr	r2, [r7, #4]
     e04:	1c10      	adds	r0, r2, #0
     e06:	1c19      	adds	r1, r3, #0
     e08:	4b4c      	ldr	r3, [pc, #304]	; (f3c <_i2c_master_write_packet+0x168>)
     e0a:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     e0c:	68fb      	ldr	r3, [r7, #12]
     e0e:	685a      	ldr	r2, [r3, #4]
     e10:	4b4b      	ldr	r3, [pc, #300]	; (f40 <_i2c_master_write_packet+0x16c>)
     e12:	401a      	ands	r2, r3
     e14:	68fb      	ldr	r3, [r7, #12]
     e16:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     e18:	683b      	ldr	r3, [r7, #0]
     e1a:	7a1b      	ldrb	r3, [r3, #8]
     e1c:	2b00      	cmp	r3, #0
     e1e:	d00c      	beq.n	e3a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     e20:	683b      	ldr	r3, [r7, #0]
     e22:	881b      	ldrh	r3, [r3, #0]
     e24:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     e26:	683b      	ldr	r3, [r7, #0]
     e28:	7a5b      	ldrb	r3, [r3, #9]
     e2a:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     e2c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     e2e:	2280      	movs	r2, #128	; 0x80
     e30:	0212      	lsls	r2, r2, #8
     e32:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     e34:	68fb      	ldr	r3, [r7, #12]
     e36:	625a      	str	r2, [r3, #36]	; 0x24
     e38:	e009      	b.n	e4e <_i2c_master_write_packet+0x7a>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     e3a:	683b      	ldr	r3, [r7, #0]
     e3c:	881b      	ldrh	r3, [r3, #0]
     e3e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     e40:	683b      	ldr	r3, [r7, #0]
     e42:	7a5b      	ldrb	r3, [r3, #9]
     e44:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     e46:	4313      	orrs	r3, r2
     e48:	1c1a      	adds	r2, r3, #0
     e4a:	68fb      	ldr	r3, [r7, #12]
     e4c:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     e4e:	1c3c      	adds	r4, r7, #0
     e50:	3417      	adds	r4, #23
     e52:	687b      	ldr	r3, [r7, #4]
     e54:	1c18      	adds	r0, r3, #0
     e56:	4b3b      	ldr	r3, [pc, #236]	; (f44 <_i2c_master_write_packet+0x170>)
     e58:	4798      	blx	r3
     e5a:	1c03      	adds	r3, r0, #0
     e5c:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     e5e:	1c3b      	adds	r3, r7, #0
     e60:	3317      	adds	r3, #23
     e62:	781b      	ldrb	r3, [r3, #0]
     e64:	2b00      	cmp	r3, #0
     e66:	d107      	bne.n	e78 <_i2c_master_write_packet+0xa4>
		tmp_status = _i2c_master_address_response(module);
     e68:	1c3c      	adds	r4, r7, #0
     e6a:	3417      	adds	r4, #23
     e6c:	687b      	ldr	r3, [r7, #4]
     e6e:	1c18      	adds	r0, r3, #0
     e70:	4b35      	ldr	r3, [pc, #212]	; (f48 <_i2c_master_write_packet+0x174>)
     e72:	4798      	blx	r3
     e74:	1c03      	adds	r3, r0, #0
     e76:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     e78:	1c3b      	adds	r3, r7, #0
     e7a:	3317      	adds	r3, #23
     e7c:	781b      	ldrb	r3, [r3, #0]
     e7e:	2b00      	cmp	r3, #0
     e80:	d153      	bne.n	f2a <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
     e82:	1c3b      	adds	r3, r7, #0
     e84:	3312      	adds	r3, #18
     e86:	2200      	movs	r2, #0
     e88:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
     e8a:	e036      	b.n	efa <_i2c_master_write_packet+0x126>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     e8c:	68fb      	ldr	r3, [r7, #12]
     e8e:	699b      	ldr	r3, [r3, #24]
     e90:	0c1b      	lsrs	r3, r3, #16
     e92:	b29b      	uxth	r3, r3
     e94:	1c1a      	adds	r2, r3, #0
     e96:	2320      	movs	r3, #32
     e98:	4013      	ands	r3, r2
     e9a:	d101      	bne.n	ea0 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
     e9c:	2341      	movs	r3, #65	; 0x41
     e9e:	e047      	b.n	f30 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     ea0:	687b      	ldr	r3, [r7, #4]
     ea2:	1c18      	adds	r0, r3, #0
     ea4:	4b24      	ldr	r3, [pc, #144]	; (f38 <_i2c_master_write_packet+0x164>)
     ea6:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     ea8:	683b      	ldr	r3, [r7, #0]
     eaa:	685a      	ldr	r2, [r3, #4]
     eac:	1c3b      	adds	r3, r7, #0
     eae:	3312      	adds	r3, #18
     eb0:	881b      	ldrh	r3, [r3, #0]
     eb2:	1c39      	adds	r1, r7, #0
     eb4:	3112      	adds	r1, #18
     eb6:	1c58      	adds	r0, r3, #1
     eb8:	8008      	strh	r0, [r1, #0]
     eba:	18d3      	adds	r3, r2, r3
     ebc:	7819      	ldrb	r1, [r3, #0]
     ebe:	68fa      	ldr	r2, [r7, #12]
     ec0:	2328      	movs	r3, #40	; 0x28
     ec2:	54d1      	strb	r1, [r2, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     ec4:	1c3c      	adds	r4, r7, #0
     ec6:	3417      	adds	r4, #23
     ec8:	687b      	ldr	r3, [r7, #4]
     eca:	1c18      	adds	r0, r3, #0
     ecc:	4b1d      	ldr	r3, [pc, #116]	; (f44 <_i2c_master_write_packet+0x170>)
     ece:	4798      	blx	r3
     ed0:	1c03      	adds	r3, r0, #0
     ed2:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     ed4:	1c3b      	adds	r3, r7, #0
     ed6:	3317      	adds	r3, #23
     ed8:	781b      	ldrb	r3, [r3, #0]
     eda:	2b00      	cmp	r3, #0
     edc:	d000      	beq.n	ee0 <_i2c_master_write_packet+0x10c>
				break;
     ede:	e015      	b.n	f0c <_i2c_master_write_packet+0x138>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     ee0:	68fb      	ldr	r3, [r7, #12]
     ee2:	699b      	ldr	r3, [r3, #24]
     ee4:	0c1b      	lsrs	r3, r3, #16
     ee6:	b29b      	uxth	r3, r3
     ee8:	1c1a      	adds	r2, r3, #0
     eea:	2304      	movs	r3, #4
     eec:	4013      	ands	r3, r2
     eee:	d004      	beq.n	efa <_i2c_master_write_packet+0x126>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     ef0:	1c3b      	adds	r3, r7, #0
     ef2:	3317      	adds	r3, #23
     ef4:	221e      	movs	r2, #30
     ef6:	701a      	strb	r2, [r3, #0]
				break;
     ef8:	e008      	b.n	f0c <_i2c_master_write_packet+0x138>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     efa:	1c3b      	adds	r3, r7, #0
     efc:	3314      	adds	r3, #20
     efe:	881b      	ldrh	r3, [r3, #0]
     f00:	1c3a      	adds	r2, r7, #0
     f02:	3214      	adds	r2, #20
     f04:	1e59      	subs	r1, r3, #1
     f06:	8011      	strh	r1, [r2, #0]
     f08:	2b00      	cmp	r3, #0
     f0a:	d1bf      	bne.n	e8c <_i2c_master_write_packet+0xb8>
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
     f0c:	687b      	ldr	r3, [r7, #4]
     f0e:	7a9b      	ldrb	r3, [r3, #10]
     f10:	2b00      	cmp	r3, #0
     f12:	d00a      	beq.n	f2a <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     f14:	687b      	ldr	r3, [r7, #4]
     f16:	1c18      	adds	r0, r3, #0
     f18:	4b07      	ldr	r3, [pc, #28]	; (f38 <_i2c_master_write_packet+0x164>)
     f1a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f1c:	68fb      	ldr	r3, [r7, #12]
     f1e:	685b      	ldr	r3, [r3, #4]
     f20:	22c0      	movs	r2, #192	; 0xc0
     f22:	0292      	lsls	r2, r2, #10
     f24:	431a      	orrs	r2, r3
     f26:	68fb      	ldr	r3, [r7, #12]
     f28:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
     f2a:	1c3b      	adds	r3, r7, #0
     f2c:	3317      	adds	r3, #23
     f2e:	781b      	ldrb	r3, [r3, #0]
}
     f30:	1c18      	adds	r0, r3, #0
     f32:	46bd      	mov	sp, r7
     f34:	b007      	add	sp, #28
     f36:	bd90      	pop	{r4, r7, pc}
     f38:	00000691 	.word	0x00000691
     f3c:	00000b05 	.word	0x00000b05
     f40:	fffbffff 	.word	0xfffbffff
     f44:	00000aa5 	.word	0x00000aa5
     f48:	00000a41 	.word	0x00000a41

00000f4c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     f4c:	b580      	push	{r7, lr}
     f4e:	b082      	sub	sp, #8
     f50:	af00      	add	r7, sp, #0
     f52:	6078      	str	r0, [r7, #4]
     f54:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     f56:	687b      	ldr	r3, [r7, #4]
     f58:	69db      	ldr	r3, [r3, #28]
     f5a:	b29b      	uxth	r3, r3
     f5c:	2b00      	cmp	r3, #0
     f5e:	d001      	beq.n	f64 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
     f60:	2305      	movs	r3, #5
     f62:	e009      	b.n	f78 <i2c_master_write_packet_wait_no_stop+0x2c>
	}
#endif

	module->send_stop = false;
     f64:	687b      	ldr	r3, [r7, #4]
     f66:	2200      	movs	r2, #0
     f68:	729a      	strb	r2, [r3, #10]

	return _i2c_master_write_packet(module, packet);
     f6a:	687a      	ldr	r2, [r7, #4]
     f6c:	683b      	ldr	r3, [r7, #0]
     f6e:	1c10      	adds	r0, r2, #0
     f70:	1c19      	adds	r1, r3, #0
     f72:	4b03      	ldr	r3, [pc, #12]	; (f80 <i2c_master_write_packet_wait_no_stop+0x34>)
     f74:	4798      	blx	r3
     f76:	1c03      	adds	r3, r0, #0
}
     f78:	1c18      	adds	r0, r3, #0
     f7a:	46bd      	mov	sp, r7
     f7c:	b002      	add	sp, #8
     f7e:	bd80      	pop	{r7, pc}
     f80:	00000dd5 	.word	0x00000dd5

00000f84 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     f84:	b580      	push	{r7, lr}
     f86:	b084      	sub	sp, #16
     f88:	af00      	add	r7, sp, #0
     f8a:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     f8c:	687b      	ldr	r3, [r7, #4]
     f8e:	681b      	ldr	r3, [r3, #0]
     f90:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	69da      	ldr	r2, [r3, #28]
     f96:	2307      	movs	r3, #7
     f98:	4013      	ands	r3, r2
     f9a:	1e5a      	subs	r2, r3, #1
     f9c:	4193      	sbcs	r3, r2
     f9e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     fa0:	1c18      	adds	r0, r3, #0
     fa2:	46bd      	mov	sp, r7
     fa4:	b004      	add	sp, #16
     fa6:	bd80      	pop	{r7, pc}

00000fa8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     fa8:	b580      	push	{r7, lr}
     faa:	b082      	sub	sp, #8
     fac:	af00      	add	r7, sp, #0
     fae:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     fb0:	46c0      	nop			; (mov r8, r8)
     fb2:	687b      	ldr	r3, [r7, #4]
     fb4:	1c18      	adds	r0, r3, #0
     fb6:	4b04      	ldr	r3, [pc, #16]	; (fc8 <_i2c_master_wait_for_sync+0x20>)
     fb8:	4798      	blx	r3
     fba:	1c03      	adds	r3, r0, #0
     fbc:	2b00      	cmp	r3, #0
     fbe:	d1f8      	bne.n	fb2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     fc0:	46bd      	mov	sp, r7
     fc2:	b002      	add	sp, #8
     fc4:	bd80      	pop	{r7, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	00000f85 	.word	0x00000f85

00000fcc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     fcc:	b580      	push	{r7, lr}
     fce:	b084      	sub	sp, #16
     fd0:	af00      	add	r7, sp, #0
     fd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     fd4:	687b      	ldr	r3, [r7, #4]
     fd6:	681b      	ldr	r3, [r3, #0]
     fd8:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     fda:	68fb      	ldr	r3, [r7, #12]
     fdc:	681b      	ldr	r3, [r3, #0]
     fde:	011b      	lsls	r3, r3, #4
     fe0:	0fdb      	lsrs	r3, r3, #31
     fe2:	b2db      	uxtb	r3, r3
     fe4:	1c1a      	adds	r2, r3, #0
     fe6:	1c3b      	adds	r3, r7, #0
     fe8:	330b      	adds	r3, #11
     fea:	1e51      	subs	r1, r2, #1
     fec:	418a      	sbcs	r2, r1
     fee:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     ff0:	1c3a      	adds	r2, r7, #0
     ff2:	3208      	adds	r2, #8
     ff4:	687b      	ldr	r3, [r7, #4]
     ff6:	699b      	ldr	r3, [r3, #24]
     ff8:	0c1b      	lsrs	r3, r3, #16
     ffa:	8013      	strh	r3, [r2, #0]
	buffer_index -= module->buffer_remaining;
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	69db      	ldr	r3, [r3, #28]
    1000:	b29a      	uxth	r2, r3
    1002:	1c3b      	adds	r3, r7, #0
    1004:	3308      	adds	r3, #8
    1006:	1c39      	adds	r1, r7, #0
    1008:	3108      	adds	r1, #8
    100a:	8809      	ldrh	r1, [r1, #0]
    100c:	1a8a      	subs	r2, r1, r2
    100e:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1010:	687b      	ldr	r3, [r7, #4]
    1012:	69db      	ldr	r3, [r3, #28]
    1014:	b29b      	uxth	r3, r3
    1016:	3b01      	subs	r3, #1
    1018:	b29a      	uxth	r2, r3
    101a:	687b      	ldr	r3, [r7, #4]
    101c:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    101e:	1c3b      	adds	r3, r7, #0
    1020:	330b      	adds	r3, #11
    1022:	781b      	ldrb	r3, [r3, #0]
    1024:	2b00      	cmp	r3, #0
    1026:	d00c      	beq.n	1042 <_i2c_master_read+0x76>
		if (module->buffer_remaining == 1) {
    1028:	687b      	ldr	r3, [r7, #4]
    102a:	69db      	ldr	r3, [r3, #28]
    102c:	b29b      	uxth	r3, r3
    102e:	2b01      	cmp	r3, #1
    1030:	d113      	bne.n	105a <_i2c_master_read+0x8e>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1032:	68fb      	ldr	r3, [r7, #12]
    1034:	685b      	ldr	r3, [r3, #4]
    1036:	2280      	movs	r2, #128	; 0x80
    1038:	02d2      	lsls	r2, r2, #11
    103a:	431a      	orrs	r2, r3
    103c:	68fb      	ldr	r3, [r7, #12]
    103e:	605a      	str	r2, [r3, #4]
    1040:	e00b      	b.n	105a <_i2c_master_read+0x8e>
		}
	} else {
		if (module->buffer_remaining == 0) {
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	69db      	ldr	r3, [r3, #28]
    1046:	b29b      	uxth	r3, r3
    1048:	2b00      	cmp	r3, #0
    104a:	d106      	bne.n	105a <_i2c_master_read+0x8e>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    104c:	68fb      	ldr	r3, [r7, #12]
    104e:	685b      	ldr	r3, [r3, #4]
    1050:	2280      	movs	r2, #128	; 0x80
    1052:	02d2      	lsls	r2, r2, #11
    1054:	431a      	orrs	r2, r3
    1056:	68fb      	ldr	r3, [r7, #12]
    1058:	605a      	str	r2, [r3, #4]
		}
	}

	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    105a:	687b      	ldr	r3, [r7, #4]
    105c:	1c18      	adds	r0, r3, #0
    105e:	4b11      	ldr	r3, [pc, #68]	; (10a4 <_i2c_master_read+0xd8>)
    1060:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	6a1a      	ldr	r2, [r3, #32]
    1066:	1c3b      	adds	r3, r7, #0
    1068:	3308      	adds	r3, #8
    106a:	881b      	ldrh	r3, [r3, #0]
    106c:	18d2      	adds	r2, r2, r3
    106e:	68fb      	ldr	r3, [r7, #12]
    1070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1072:	b2db      	uxtb	r3, r3
    1074:	7013      	strb	r3, [r2, #0]

	if (module->buffer_remaining == 0) {
    1076:	687b      	ldr	r3, [r7, #4]
    1078:	69db      	ldr	r3, [r3, #28]
    107a:	b29b      	uxth	r3, r3
    107c:	2b00      	cmp	r3, #0
    107e:	d10e      	bne.n	109e <_i2c_master_read+0xd2>
		if (module->send_stop) {
    1080:	687b      	ldr	r3, [r7, #4]
    1082:	7a9b      	ldrb	r3, [r3, #10]
    1084:	2b00      	cmp	r3, #0
    1086:	d00a      	beq.n	109e <_i2c_master_read+0xd2>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1088:	687b      	ldr	r3, [r7, #4]
    108a:	1c18      	adds	r0, r3, #0
    108c:	4b05      	ldr	r3, [pc, #20]	; (10a4 <_i2c_master_read+0xd8>)
    108e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1090:	68fb      	ldr	r3, [r7, #12]
    1092:	685b      	ldr	r3, [r3, #4]
    1094:	22c0      	movs	r2, #192	; 0xc0
    1096:	0292      	lsls	r2, r2, #10
    1098:	431a      	orrs	r2, r3
    109a:	68fb      	ldr	r3, [r7, #12]
    109c:	605a      	str	r2, [r3, #4]
		}
	}
}
    109e:	46bd      	mov	sp, r7
    10a0:	b004      	add	sp, #16
    10a2:	bd80      	pop	{r7, pc}
    10a4:	00000fa9 	.word	0x00000fa9

000010a8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    10a8:	b580      	push	{r7, lr}
    10aa:	b084      	sub	sp, #16
    10ac:	af00      	add	r7, sp, #0
    10ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    10b0:	687b      	ldr	r3, [r7, #4]
    10b2:	681b      	ldr	r3, [r3, #0]
    10b4:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    10b6:	68fb      	ldr	r3, [r7, #12]
    10b8:	699b      	ldr	r3, [r3, #24]
    10ba:	0c1b      	lsrs	r3, r3, #16
    10bc:	b29b      	uxth	r3, r3
    10be:	1c1a      	adds	r2, r3, #0
    10c0:	2304      	movs	r3, #4
    10c2:	4013      	ands	r3, r2
    10c4:	d004      	beq.n	10d0 <_i2c_master_write+0x28>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    10c6:	687a      	ldr	r2, [r7, #4]
    10c8:	2325      	movs	r3, #37	; 0x25
    10ca:	211e      	movs	r1, #30
    10cc:	54d1      	strb	r1, [r2, r3]
		/* Do not write more data */
		return;
    10ce:	e025      	b.n	111c <_i2c_master_write+0x74>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    10d0:	1c3a      	adds	r2, r7, #0
    10d2:	320a      	adds	r2, #10
    10d4:	687b      	ldr	r3, [r7, #4]
    10d6:	699b      	ldr	r3, [r3, #24]
    10d8:	0c1b      	lsrs	r3, r3, #16
    10da:	8013      	strh	r3, [r2, #0]
	buffer_index -= module->buffer_remaining;
    10dc:	687b      	ldr	r3, [r7, #4]
    10de:	69db      	ldr	r3, [r3, #28]
    10e0:	b29a      	uxth	r2, r3
    10e2:	1c3b      	adds	r3, r7, #0
    10e4:	330a      	adds	r3, #10
    10e6:	1c39      	adds	r1, r7, #0
    10e8:	310a      	adds	r1, #10
    10ea:	8809      	ldrh	r1, [r1, #0]
    10ec:	1a8a      	subs	r2, r1, r2
    10ee:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	69db      	ldr	r3, [r3, #28]
    10f4:	b29b      	uxth	r3, r3
    10f6:	3b01      	subs	r3, #1
    10f8:	b29a      	uxth	r2, r3
    10fa:	687b      	ldr	r3, [r7, #4]
    10fc:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    10fe:	687b      	ldr	r3, [r7, #4]
    1100:	1c18      	adds	r0, r3, #0
    1102:	4b08      	ldr	r3, [pc, #32]	; (1124 <_i2c_master_write+0x7c>)
    1104:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1106:	687b      	ldr	r3, [r7, #4]
    1108:	6a1a      	ldr	r2, [r3, #32]
    110a:	1c3b      	adds	r3, r7, #0
    110c:	330a      	adds	r3, #10
    110e:	881b      	ldrh	r3, [r3, #0]
    1110:	18d3      	adds	r3, r2, r3
    1112:	781b      	ldrb	r3, [r3, #0]
    1114:	b2d9      	uxtb	r1, r3
    1116:	68fa      	ldr	r2, [r7, #12]
    1118:	2328      	movs	r3, #40	; 0x28
    111a:	54d1      	strb	r1, [r2, r3]
}
    111c:	46bd      	mov	sp, r7
    111e:	b004      	add	sp, #16
    1120:	bd80      	pop	{r7, pc}
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	00000fa9 	.word	0x00000fa9

00001128 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    1128:	b580      	push	{r7, lr}
    112a:	b084      	sub	sp, #16
    112c:	af00      	add	r7, sp, #0
    112e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1130:	687b      	ldr	r3, [r7, #4]
    1132:	681b      	ldr	r3, [r3, #0]
    1134:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1136:	68fb      	ldr	r3, [r7, #12]
    1138:	699b      	ldr	r3, [r3, #24]
    113a:	b2db      	uxtb	r3, r3
    113c:	1c1a      	adds	r2, r3, #0
    113e:	2301      	movs	r3, #1
    1140:	4013      	ands	r3, r2
    1142:	d00f      	beq.n	1164 <_i2c_master_async_address_response+0x3c>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1144:	68fb      	ldr	r3, [r7, #12]
    1146:	2201      	movs	r2, #1
    1148:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    114a:	68fb      	ldr	r3, [r7, #12]
    114c:	699b      	ldr	r3, [r3, #24]
    114e:	0c1b      	lsrs	r3, r3, #16
    1150:	b29b      	uxth	r3, r3
    1152:	1c1a      	adds	r2, r3, #0
    1154:	2302      	movs	r3, #2
    1156:	4013      	ands	r3, r2
    1158:	d022      	beq.n	11a0 <_i2c_master_async_address_response+0x78>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    115a:	687a      	ldr	r2, [r7, #4]
    115c:	2325      	movs	r3, #37	; 0x25
    115e:	2141      	movs	r1, #65	; 0x41
    1160:	54d1      	strb	r1, [r2, r3]
    1162:	e01d      	b.n	11a0 <_i2c_master_async_address_response+0x78>
		}
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1164:	68fb      	ldr	r3, [r7, #12]
    1166:	699b      	ldr	r3, [r3, #24]
    1168:	0c1b      	lsrs	r3, r3, #16
    116a:	b29b      	uxth	r3, r3
    116c:	1c1a      	adds	r2, r3, #0
    116e:	2304      	movs	r3, #4
    1170:	4013      	ands	r3, r2
    1172:	d015      	beq.n	11a0 <_i2c_master_async_address_response+0x78>
		/* Return bad address value */
		module->status           = STATUS_ERR_BAD_ADDRESS;
    1174:	687a      	ldr	r2, [r7, #4]
    1176:	2325      	movs	r3, #37	; 0x25
    1178:	2118      	movs	r1, #24
    117a:	54d1      	strb	r1, [r2, r3]
		module->buffer_remaining = 0;
    117c:	687b      	ldr	r3, [r7, #4]
    117e:	2200      	movs	r2, #0
    1180:	839a      	strh	r2, [r3, #28]

		if (module->send_stop) {
    1182:	687b      	ldr	r3, [r7, #4]
    1184:	7a9b      	ldrb	r3, [r3, #10]
    1186:	2b00      	cmp	r3, #0
    1188:	d00a      	beq.n	11a0 <_i2c_master_async_address_response+0x78>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    118a:	687b      	ldr	r3, [r7, #4]
    118c:	1c18      	adds	r0, r3, #0
    118e:	4b13      	ldr	r3, [pc, #76]	; (11dc <_i2c_master_async_address_response+0xb4>)
    1190:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1192:	68fb      	ldr	r3, [r7, #12]
    1194:	685b      	ldr	r3, [r3, #4]
    1196:	22c0      	movs	r2, #192	; 0xc0
    1198:	0292      	lsls	r2, r2, #10
    119a:	431a      	orrs	r2, r3
    119c:	68fb      	ldr	r3, [r7, #12]
    119e:	605a      	str	r2, [r3, #4]
		}
	}

	module->buffer_length = module->buffer_remaining;
    11a0:	687b      	ldr	r3, [r7, #4]
    11a2:	69db      	ldr	r3, [r3, #28]
    11a4:	b29a      	uxth	r2, r3
    11a6:	687b      	ldr	r3, [r7, #4]
    11a8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    11ae:	041b      	lsls	r3, r3, #16
    11b0:	0e1b      	lsrs	r3, r3, #24
    11b2:	b2db      	uxtb	r3, r3
    11b4:	2b05      	cmp	r3, #5
    11b6:	d10d      	bne.n	11d4 <_i2c_master_async_address_response+0xac>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    11b8:	687b      	ldr	r3, [r7, #4]
    11ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    11bc:	b2db      	uxtb	r3, r3
    11be:	2b00      	cmp	r3, #0
    11c0:	d104      	bne.n	11cc <_i2c_master_async_address_response+0xa4>
			_i2c_master_write(module);
    11c2:	687b      	ldr	r3, [r7, #4]
    11c4:	1c18      	adds	r0, r3, #0
    11c6:	4b06      	ldr	r3, [pc, #24]	; (11e0 <_i2c_master_async_address_response+0xb8>)
    11c8:	4798      	blx	r3
    11ca:	e003      	b.n	11d4 <_i2c_master_async_address_response+0xac>
		} else {
			_i2c_master_read(module);
    11cc:	687b      	ldr	r3, [r7, #4]
    11ce:	1c18      	adds	r0, r3, #0
    11d0:	4b04      	ldr	r3, [pc, #16]	; (11e4 <_i2c_master_async_address_response+0xbc>)
    11d2:	4798      	blx	r3
		}
	}
}
    11d4:	46bd      	mov	sp, r7
    11d6:	b004      	add	sp, #16
    11d8:	bd80      	pop	{r7, pc}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	00000fa9 	.word	0x00000fa9
    11e0:	000010a9 	.word	0x000010a9
    11e4:	00000fcd 	.word	0x00000fcd

000011e8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    11e8:	b580      	push	{r7, lr}
    11ea:	b086      	sub	sp, #24
    11ec:	af00      	add	r7, sp, #0
    11ee:	1c02      	adds	r2, r0, #0
    11f0:	1dfb      	adds	r3, r7, #7
    11f2:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    11f4:	1dfb      	adds	r3, r7, #7
    11f6:	781a      	ldrb	r2, [r3, #0]
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    11f8:	4b8f      	ldr	r3, [pc, #572]	; (1438 <_i2c_master_interrupt_handler+0x250>)
    11fa:	0092      	lsls	r2, r2, #2
    11fc:	58d3      	ldr	r3, [r2, r3]
    11fe:	617b      	str	r3, [r7, #20]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1200:	697b      	ldr	r3, [r7, #20]
    1202:	681b      	ldr	r3, [r3, #0]
    1204:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1206:	693b      	ldr	r3, [r7, #16]
    1208:	681b      	ldr	r3, [r3, #0]
    120a:	011b      	lsls	r3, r3, #4
    120c:	0fdb      	lsrs	r3, r3, #31
    120e:	b2db      	uxtb	r3, r3
    1210:	1c1a      	adds	r2, r3, #0
    1212:	1c3b      	adds	r3, r7, #0
    1214:	330f      	adds	r3, #15
    1216:	1e51      	subs	r1, r2, #1
    1218:	418a      	sbcs	r2, r1
    121a:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    121c:	1c3a      	adds	r2, r7, #0
    121e:	320e      	adds	r2, #14
    1220:	697b      	ldr	r3, [r7, #20]
    1222:	699b      	ldr	r3, [r3, #24]
    1224:	041b      	lsls	r3, r3, #16
    1226:	0e1b      	lsrs	r3, r3, #24
    1228:	7013      	strb	r3, [r2, #0]
	callback_mask &= module->registered_callback;
    122a:	697b      	ldr	r3, [r7, #20]
    122c:	699b      	ldr	r3, [r3, #24]
    122e:	b2da      	uxtb	r2, r3
    1230:	1c3b      	adds	r3, r7, #0
    1232:	330e      	adds	r3, #14
    1234:	1c39      	adds	r1, r7, #0
    1236:	310e      	adds	r1, #14
    1238:	7809      	ldrb	r1, [r1, #0]
    123a:	400a      	ands	r2, r1
    123c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    123e:	697b      	ldr	r3, [r7, #20]
    1240:	699b      	ldr	r3, [r3, #24]
    1242:	0c1b      	lsrs	r3, r3, #16
    1244:	b29b      	uxth	r3, r3
    1246:	2b00      	cmp	r3, #0
    1248:	d109      	bne.n	125e <_i2c_master_interrupt_handler+0x76>
    124a:	697b      	ldr	r3, [r7, #20]
    124c:	69db      	ldr	r3, [r3, #28]
    124e:	b29b      	uxth	r3, r3
    1250:	2b00      	cmp	r3, #0
    1252:	d004      	beq.n	125e <_i2c_master_interrupt_handler+0x76>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    1254:	697b      	ldr	r3, [r7, #20]
    1256:	1c18      	adds	r0, r3, #0
    1258:	4b78      	ldr	r3, [pc, #480]	; (143c <_i2c_master_interrupt_handler+0x254>)
    125a:	4798      	blx	r3
    125c:	e06f      	b.n	133e <_i2c_master_interrupt_handler+0x156>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    125e:	697b      	ldr	r3, [r7, #20]
    1260:	699b      	ldr	r3, [r3, #24]
    1262:	0c1b      	lsrs	r3, r3, #16
    1264:	b29b      	uxth	r3, r3
    1266:	2b00      	cmp	r3, #0
    1268:	d036      	beq.n	12d8 <_i2c_master_interrupt_handler+0xf0>
    126a:	697b      	ldr	r3, [r7, #20]
    126c:	69db      	ldr	r3, [r3, #28]
    126e:	b29b      	uxth	r3, r3
    1270:	2b00      	cmp	r3, #0
    1272:	d131      	bne.n	12d8 <_i2c_master_interrupt_handler+0xf0>
			(module->status == STATUS_BUSY) &&
    1274:	697b      	ldr	r3, [r7, #20]
    1276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1278:	041b      	lsls	r3, r3, #16
    127a:	0e1b      	lsrs	r3, r3, #24
    127c:	b2db      	uxtb	r3, r3
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    127e:	2b05      	cmp	r3, #5
    1280:	d12a      	bne.n	12d8 <_i2c_master_interrupt_handler+0xf0>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1282:	697b      	ldr	r3, [r7, #20]
    1284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1286:	b2db      	uxtb	r3, r3
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    1288:	2b00      	cmp	r3, #0
    128a:	d125      	bne.n	12d8 <_i2c_master_interrupt_handler+0xf0>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    128c:	693b      	ldr	r3, [r7, #16]
    128e:	2203      	movs	r2, #3
    1290:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1292:	697b      	ldr	r3, [r7, #20]
    1294:	2200      	movs	r2, #0
    1296:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1298:	697a      	ldr	r2, [r7, #20]
    129a:	2325      	movs	r3, #37	; 0x25
    129c:	2100      	movs	r1, #0
    129e:	54d1      	strb	r1, [r2, r3]

		if (module->send_stop) {
    12a0:	697b      	ldr	r3, [r7, #20]
    12a2:	7a9b      	ldrb	r3, [r3, #10]
    12a4:	2b00      	cmp	r3, #0
    12a6:	d00a      	beq.n	12be <_i2c_master_interrupt_handler+0xd6>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    12a8:	697b      	ldr	r3, [r7, #20]
    12aa:	1c18      	adds	r0, r3, #0
    12ac:	4b64      	ldr	r3, [pc, #400]	; (1440 <_i2c_master_interrupt_handler+0x258>)
    12ae:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    12b0:	693b      	ldr	r3, [r7, #16]
    12b2:	685b      	ldr	r3, [r3, #4]
    12b4:	22c0      	movs	r2, #192	; 0xc0
    12b6:	0292      	lsls	r2, r2, #10
    12b8:	431a      	orrs	r2, r3
    12ba:	693b      	ldr	r3, [r7, #16]
    12bc:	605a      	str	r2, [r3, #4]
		}
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    12be:	1c3b      	adds	r3, r7, #0
    12c0:	330e      	adds	r3, #14
    12c2:	781a      	ldrb	r2, [r3, #0]
    12c4:	2301      	movs	r3, #1
    12c6:	4013      	ands	r3, r2
    12c8:	d005      	beq.n	12d6 <_i2c_master_interrupt_handler+0xee>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    12ca:	697b      	ldr	r3, [r7, #20]
    12cc:	68db      	ldr	r3, [r3, #12]
    12ce:	697a      	ldr	r2, [r7, #20]
    12d0:	1c10      	adds	r0, r2, #0
    12d2:	4798      	blx	r3
		if (module->send_stop) {
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    12d4:	e033      	b.n	133e <_i2c_master_interrupt_handler+0x156>
    12d6:	e032      	b.n	133e <_i2c_master_interrupt_handler+0x156>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    12d8:	697b      	ldr	r3, [r7, #20]
    12da:	699b      	ldr	r3, [r3, #24]
    12dc:	0c1b      	lsrs	r3, r3, #16
    12de:	b29b      	uxth	r3, r3
    12e0:	2b00      	cmp	r3, #0
    12e2:	d02c      	beq.n	133e <_i2c_master_interrupt_handler+0x156>
    12e4:	697b      	ldr	r3, [r7, #20]
    12e6:	69db      	ldr	r3, [r3, #28]
    12e8:	b29b      	uxth	r3, r3
    12ea:	2b00      	cmp	r3, #0
    12ec:	d027      	beq.n	133e <_i2c_master_interrupt_handler+0x156>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    12ee:	693b      	ldr	r3, [r7, #16]
    12f0:	699b      	ldr	r3, [r3, #24]
    12f2:	0c1b      	lsrs	r3, r3, #16
    12f4:	b29b      	uxth	r3, r3
    12f6:	1c1a      	adds	r2, r3, #0
    12f8:	2320      	movs	r3, #32
    12fa:	4013      	ands	r3, r2
    12fc:	d111      	bne.n	1322 <_i2c_master_interrupt_handler+0x13a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    12fe:	1c3b      	adds	r3, r7, #0
    1300:	330f      	adds	r3, #15
    1302:	781b      	ldrb	r3, [r3, #0]
    1304:	2201      	movs	r2, #1
    1306:	4053      	eors	r3, r2
    1308:	b2db      	uxtb	r3, r3
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    130a:	2b00      	cmp	r3, #0
    130c:	d104      	bne.n	1318 <_i2c_master_interrupt_handler+0x130>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    130e:	697b      	ldr	r3, [r7, #20]
    1310:	69db      	ldr	r3, [r3, #28]
    1312:	b29b      	uxth	r3, r3
    1314:	2b01      	cmp	r3, #1
    1316:	d004      	beq.n	1322 <_i2c_master_interrupt_handler+0x13a>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1318:	697a      	ldr	r2, [r7, #20]
    131a:	2325      	movs	r3, #37	; 0x25
    131c:	2141      	movs	r1, #65	; 0x41
    131e:	54d1      	strb	r1, [r2, r3]
    1320:	e00d      	b.n	133e <_i2c_master_interrupt_handler+0x156>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1322:	697b      	ldr	r3, [r7, #20]
    1324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1326:	b2db      	uxtb	r3, r3
    1328:	2b00      	cmp	r3, #0
    132a:	d104      	bne.n	1336 <_i2c_master_interrupt_handler+0x14e>
			_i2c_master_write(module);
    132c:	697b      	ldr	r3, [r7, #20]
    132e:	1c18      	adds	r0, r3, #0
    1330:	4b44      	ldr	r3, [pc, #272]	; (1444 <_i2c_master_interrupt_handler+0x25c>)
    1332:	4798      	blx	r3
    1334:	e003      	b.n	133e <_i2c_master_interrupt_handler+0x156>
		} else {
			_i2c_master_read(module);
    1336:	697b      	ldr	r3, [r7, #20]
    1338:	1c18      	adds	r0, r3, #0
    133a:	4b43      	ldr	r3, [pc, #268]	; (1448 <_i2c_master_interrupt_handler+0x260>)
    133c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    133e:	697b      	ldr	r3, [r7, #20]
    1340:	699b      	ldr	r3, [r3, #24]
    1342:	0c1b      	lsrs	r3, r3, #16
    1344:	b29b      	uxth	r3, r3
    1346:	2b00      	cmp	r3, #0
    1348:	d03b      	beq.n	13c2 <_i2c_master_interrupt_handler+0x1da>
    134a:	697b      	ldr	r3, [r7, #20]
    134c:	69db      	ldr	r3, [r3, #28]
    134e:	b29b      	uxth	r3, r3
    1350:	2b00      	cmp	r3, #0
    1352:	d136      	bne.n	13c2 <_i2c_master_interrupt_handler+0x1da>
			(module->status == STATUS_BUSY) &&
    1354:	697b      	ldr	r3, [r7, #20]
    1356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1358:	041b      	lsls	r3, r3, #16
    135a:	0e1b      	lsrs	r3, r3, #24
    135c:	b2db      	uxtb	r3, r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    135e:	2b05      	cmp	r3, #5
    1360:	d12f      	bne.n	13c2 <_i2c_master_interrupt_handler+0x1da>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1362:	697b      	ldr	r3, [r7, #20]
    1364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1366:	b2db      	uxtb	r3, r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    1368:	2b01      	cmp	r3, #1
    136a:	d12a      	bne.n	13c2 <_i2c_master_interrupt_handler+0x1da>
			(module->transfer_direction == I2C_TRANSFER_READ)) {

		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    136c:	693b      	ldr	r3, [r7, #16]
    136e:	2203      	movs	r2, #3
    1370:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1372:	697b      	ldr	r3, [r7, #20]
    1374:	2200      	movs	r2, #0
    1376:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1378:	697a      	ldr	r2, [r7, #20]
    137a:	2325      	movs	r3, #37	; 0x25
    137c:	2100      	movs	r1, #0
    137e:	54d1      	strb	r1, [r2, r3]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1380:	1c3b      	adds	r3, r7, #0
    1382:	330e      	adds	r3, #14
    1384:	781a      	ldrb	r2, [r3, #0]
    1386:	2302      	movs	r3, #2
    1388:	4013      	ands	r3, r2
    138a:	d00a      	beq.n	13a2 <_i2c_master_interrupt_handler+0x1ba>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    138c:	697b      	ldr	r3, [r7, #20]
    138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1390:	b2db      	uxtb	r3, r3
    1392:	2b01      	cmp	r3, #1
    1394:	d105      	bne.n	13a2 <_i2c_master_interrupt_handler+0x1ba>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1396:	697b      	ldr	r3, [r7, #20]
    1398:	691b      	ldr	r3, [r3, #16]
    139a:	697a      	ldr	r2, [r7, #20]
    139c:	1c10      	adds	r0, r2, #0
    139e:	4798      	blx	r3
    13a0:	e00f      	b.n	13c2 <_i2c_master_interrupt_handler+0x1da>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    13a2:	1c3b      	adds	r3, r7, #0
    13a4:	330e      	adds	r3, #14
    13a6:	781a      	ldrb	r2, [r3, #0]
    13a8:	2301      	movs	r3, #1
    13aa:	4013      	ands	r3, r2
    13ac:	d009      	beq.n	13c2 <_i2c_master_interrupt_handler+0x1da>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    13ae:	697b      	ldr	r3, [r7, #20]
    13b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    13b2:	b2db      	uxtb	r3, r3
    13b4:	2b00      	cmp	r3, #0
    13b6:	d104      	bne.n	13c2 <_i2c_master_interrupt_handler+0x1da>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    13b8:	697b      	ldr	r3, [r7, #20]
    13ba:	68db      	ldr	r3, [r3, #12]
    13bc:	697a      	ldr	r2, [r7, #20]
    13be:	1c10      	adds	r0, r2, #0
    13c0:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    13c2:	697b      	ldr	r3, [r7, #20]
    13c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    13c6:	041b      	lsls	r3, r3, #16
    13c8:	0e1b      	lsrs	r3, r3, #24
    13ca:	b2db      	uxtb	r3, r3
    13cc:	2b05      	cmp	r3, #5
    13ce:	d030      	beq.n	1432 <_i2c_master_interrupt_handler+0x24a>
    13d0:	697b      	ldr	r3, [r7, #20]
    13d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    13d4:	041b      	lsls	r3, r3, #16
    13d6:	0e1b      	lsrs	r3, r3, #24
    13d8:	b2db      	uxtb	r3, r3
    13da:	2b00      	cmp	r3, #0
    13dc:	d029      	beq.n	1432 <_i2c_master_interrupt_handler+0x24a>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    13de:	693b      	ldr	r3, [r7, #16]
    13e0:	2203      	movs	r2, #3
    13e2:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    13e4:	697b      	ldr	r3, [r7, #20]
    13e6:	2200      	movs	r2, #0
    13e8:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    13ea:	697b      	ldr	r3, [r7, #20]
    13ec:	2200      	movs	r2, #0
    13ee:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    13f0:	697b      	ldr	r3, [r7, #20]
    13f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    13f4:	041b      	lsls	r3, r3, #16
    13f6:	0e1b      	lsrs	r3, r3, #24
    13f8:	b2db      	uxtb	r3, r3
    13fa:	2b41      	cmp	r3, #65	; 0x41
    13fc:	d00e      	beq.n	141c <_i2c_master_interrupt_handler+0x234>
				module->send_stop) {
    13fe:	697b      	ldr	r3, [r7, #20]
    1400:	7a9b      	ldrb	r3, [r3, #10]

		module->buffer_length = 0;
		module->buffer_remaining = 0;

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1402:	2b00      	cmp	r3, #0
    1404:	d00a      	beq.n	141c <_i2c_master_interrupt_handler+0x234>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
    1406:	697b      	ldr	r3, [r7, #20]
    1408:	1c18      	adds	r0, r3, #0
    140a:	4b0d      	ldr	r3, [pc, #52]	; (1440 <_i2c_master_interrupt_handler+0x258>)
    140c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    140e:	693b      	ldr	r3, [r7, #16]
    1410:	685b      	ldr	r3, [r3, #4]
    1412:	22e0      	movs	r2, #224	; 0xe0
    1414:	02d2      	lsls	r2, r2, #11
    1416:	431a      	orrs	r2, r3
    1418:	693b      	ldr	r3, [r7, #16]
    141a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    141c:	1c3b      	adds	r3, r7, #0
    141e:	330e      	adds	r3, #14
    1420:	781a      	ldrb	r2, [r3, #0]
    1422:	2304      	movs	r3, #4
    1424:	4013      	ands	r3, r2
    1426:	d004      	beq.n	1432 <_i2c_master_interrupt_handler+0x24a>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1428:	697b      	ldr	r3, [r7, #20]
    142a:	695b      	ldr	r3, [r3, #20]
    142c:	697a      	ldr	r2, [r7, #20]
    142e:	1c10      	adds	r0, r2, #0
    1430:	4798      	blx	r3
		}
	}
}
    1432:	46bd      	mov	sp, r7
    1434:	b006      	add	sp, #24
    1436:	bd80      	pop	{r7, pc}
    1438:	200010a4 	.word	0x200010a4
    143c:	00001129 	.word	0x00001129
    1440:	00000fa9 	.word	0x00000fa9
    1444:	000010a9 	.word	0x000010a9
    1448:	00000fcd 	.word	0x00000fcd

0000144c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    144c:	b580      	push	{r7, lr}
    144e:	b082      	sub	sp, #8
    1450:	af00      	add	r7, sp, #0
    1452:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1454:	687b      	ldr	r3, [r7, #4]
    1456:	2280      	movs	r2, #128	; 0x80
    1458:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    145a:	687b      	ldr	r3, [r7, #4]
    145c:	2200      	movs	r2, #0
    145e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1460:	687b      	ldr	r3, [r7, #4]
    1462:	2201      	movs	r2, #1
    1464:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1466:	687b      	ldr	r3, [r7, #4]
    1468:	2200      	movs	r2, #0
    146a:	70da      	strb	r2, [r3, #3]
}
    146c:	46bd      	mov	sp, r7
    146e:	b002      	add	sp, #8
    1470:	bd80      	pop	{r7, pc}
    1472:	46c0      	nop			; (mov r8, r8)

00001474 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1474:	b580      	push	{r7, lr}
    1476:	b084      	sub	sp, #16
    1478:	af00      	add	r7, sp, #0
    147a:	1c02      	adds	r2, r0, #0
    147c:	1dfb      	adds	r3, r7, #7
    147e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1480:	1c3b      	adds	r3, r7, #0
    1482:	330f      	adds	r3, #15
    1484:	1dfa      	adds	r2, r7, #7
    1486:	7812      	ldrb	r2, [r2, #0]
    1488:	09d2      	lsrs	r2, r2, #7
    148a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    148c:	1c3b      	adds	r3, r7, #0
    148e:	330e      	adds	r3, #14
    1490:	1dfa      	adds	r2, r7, #7
    1492:	7812      	ldrb	r2, [r2, #0]
    1494:	0952      	lsrs	r2, r2, #5
    1496:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1498:	4b0d      	ldr	r3, [pc, #52]	; (14d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    149a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    149c:	1c3b      	adds	r3, r7, #0
    149e:	330f      	adds	r3, #15
    14a0:	781b      	ldrb	r3, [r3, #0]
    14a2:	2b00      	cmp	r3, #0
    14a4:	d10e      	bne.n	14c4 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    14a6:	1c3b      	adds	r3, r7, #0
    14a8:	330f      	adds	r3, #15
    14aa:	781b      	ldrb	r3, [r3, #0]
    14ac:	009b      	lsls	r3, r3, #2
    14ae:	2210      	movs	r2, #16
    14b0:	19d2      	adds	r2, r2, r7
    14b2:	18d3      	adds	r3, r2, r3
    14b4:	3b08      	subs	r3, #8
    14b6:	681a      	ldr	r2, [r3, #0]
    14b8:	1c3b      	adds	r3, r7, #0
    14ba:	330e      	adds	r3, #14
    14bc:	781b      	ldrb	r3, [r3, #0]
    14be:	01db      	lsls	r3, r3, #7
    14c0:	18d3      	adds	r3, r2, r3
    14c2:	e000      	b.n	14c6 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    14c4:	2300      	movs	r3, #0
	}
}
    14c6:	1c18      	adds	r0, r3, #0
    14c8:	46bd      	mov	sp, r7
    14ca:	b004      	add	sp, #16
    14cc:	bd80      	pop	{r7, pc}
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	41004400 	.word	0x41004400

000014d4 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    14d4:	b580      	push	{r7, lr}
    14d6:	b086      	sub	sp, #24
    14d8:	af00      	add	r7, sp, #0
    14da:	1c02      	adds	r2, r0, #0
    14dc:	1dfb      	adds	r3, r7, #7
    14de:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    14e0:	1dfb      	adds	r3, r7, #7
    14e2:	781b      	ldrb	r3, [r3, #0]
    14e4:	1c18      	adds	r0, r3, #0
    14e6:	4b19      	ldr	r3, [pc, #100]	; (154c <system_pinmux_pin_get_mux_position+0x78>)
    14e8:	4798      	blx	r3
    14ea:	1c03      	adds	r3, r0, #0
    14ec:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    14ee:	1dfb      	adds	r3, r7, #7
    14f0:	781a      	ldrb	r2, [r3, #0]
    14f2:	231f      	movs	r3, #31
    14f4:	4013      	ands	r3, r2
    14f6:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    14f8:	6979      	ldr	r1, [r7, #20]
    14fa:	2340      	movs	r3, #64	; 0x40
    14fc:	693a      	ldr	r2, [r7, #16]
    14fe:	188a      	adds	r2, r1, r2
    1500:	18d3      	adds	r3, r2, r3
    1502:	781b      	ldrb	r3, [r3, #0]
    1504:	b2db      	uxtb	r3, r3
    1506:	1c1a      	adds	r2, r3, #0
    1508:	2301      	movs	r3, #1
    150a:	4013      	ands	r3, r2
    150c:	d101      	bne.n	1512 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    150e:	2380      	movs	r3, #128	; 0x80
    1510:	e017      	b.n	1542 <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1512:	693b      	ldr	r3, [r7, #16]
    1514:	085a      	lsrs	r2, r3, #1
    1516:	6979      	ldr	r1, [r7, #20]
    1518:	2330      	movs	r3, #48	; 0x30
    151a:	188a      	adds	r2, r1, r2
    151c:	18d3      	adds	r3, r2, r3
    151e:	781b      	ldrb	r3, [r3, #0]
    1520:	b2db      	uxtb	r3, r3
    1522:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    1524:	693a      	ldr	r2, [r7, #16]
    1526:	2301      	movs	r3, #1
    1528:	4013      	ands	r3, r2
    152a:	d005      	beq.n	1538 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    152c:	68fa      	ldr	r2, [r7, #12]
    152e:	23f0      	movs	r3, #240	; 0xf0
    1530:	4013      	ands	r3, r2
    1532:	091b      	lsrs	r3, r3, #4
    1534:	b2db      	uxtb	r3, r3
    1536:	e004      	b.n	1542 <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1538:	68fb      	ldr	r3, [r7, #12]
    153a:	b2da      	uxtb	r2, r3
    153c:	230f      	movs	r3, #15
    153e:	4013      	ands	r3, r2
    1540:	b2db      	uxtb	r3, r3
	}
}
    1542:	1c18      	adds	r0, r3, #0
    1544:	46bd      	mov	sp, r7
    1546:	b006      	add	sp, #24
    1548:	bd80      	pop	{r7, pc}
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	00001475 	.word	0x00001475

00001550 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1550:	b580      	push	{r7, lr}
    1552:	b082      	sub	sp, #8
    1554:	af00      	add	r7, sp, #0
    1556:	1c02      	adds	r2, r0, #0
    1558:	1dfb      	adds	r3, r7, #7
    155a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    155c:	1dfb      	adds	r3, r7, #7
    155e:	781b      	ldrb	r3, [r3, #0]
    1560:	1c18      	adds	r0, r3, #0
    1562:	4b03      	ldr	r3, [pc, #12]	; (1570 <port_get_group_from_gpio_pin+0x20>)
    1564:	4798      	blx	r3
    1566:	1c03      	adds	r3, r0, #0
}
    1568:	1c18      	adds	r0, r3, #0
    156a:	46bd      	mov	sp, r7
    156c:	b002      	add	sp, #8
    156e:	bd80      	pop	{r7, pc}
    1570:	00001475 	.word	0x00001475

00001574 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1574:	b580      	push	{r7, lr}
    1576:	b084      	sub	sp, #16
    1578:	af00      	add	r7, sp, #0
    157a:	1c0a      	adds	r2, r1, #0
    157c:	1dfb      	adds	r3, r7, #7
    157e:	1c01      	adds	r1, r0, #0
    1580:	7019      	strb	r1, [r3, #0]
    1582:	1dbb      	adds	r3, r7, #6
    1584:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1586:	1dfb      	adds	r3, r7, #7
    1588:	781b      	ldrb	r3, [r3, #0]
    158a:	1c18      	adds	r0, r3, #0
    158c:	4b0d      	ldr	r3, [pc, #52]	; (15c4 <port_pin_set_output_level+0x50>)
    158e:	4798      	blx	r3
    1590:	1c03      	adds	r3, r0, #0
    1592:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1594:	1dfb      	adds	r3, r7, #7
    1596:	781a      	ldrb	r2, [r3, #0]
    1598:	231f      	movs	r3, #31
    159a:	4013      	ands	r3, r2
    159c:	2201      	movs	r2, #1
    159e:	1c11      	adds	r1, r2, #0
    15a0:	4099      	lsls	r1, r3
    15a2:	1c0b      	adds	r3, r1, #0
    15a4:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    15a6:	1dbb      	adds	r3, r7, #6
    15a8:	781b      	ldrb	r3, [r3, #0]
    15aa:	2b00      	cmp	r3, #0
    15ac:	d003      	beq.n	15b6 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    15ae:	68fb      	ldr	r3, [r7, #12]
    15b0:	68ba      	ldr	r2, [r7, #8]
    15b2:	619a      	str	r2, [r3, #24]
    15b4:	e002      	b.n	15bc <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    15b6:	68fb      	ldr	r3, [r7, #12]
    15b8:	68ba      	ldr	r2, [r7, #8]
    15ba:	615a      	str	r2, [r3, #20]
	}
}
    15bc:	46bd      	mov	sp, r7
    15be:	b004      	add	sp, #16
    15c0:	bd80      	pop	{r7, pc}
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	00001551 	.word	0x00001551

000015c8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    15c8:	b580      	push	{r7, lr}
    15ca:	b082      	sub	sp, #8
    15cc:	af00      	add	r7, sp, #0
    15ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    15d0:	687b      	ldr	r3, [r7, #4]
    15d2:	2200      	movs	r2, #0
    15d4:	701a      	strb	r2, [r3, #0]
}
    15d6:	46bd      	mov	sp, r7
    15d8:	b002      	add	sp, #8
    15da:	bd80      	pop	{r7, pc}

000015dc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    15dc:	b580      	push	{r7, lr}
    15de:	b082      	sub	sp, #8
    15e0:	af00      	add	r7, sp, #0
    15e2:	1c02      	adds	r2, r0, #0
    15e4:	6039      	str	r1, [r7, #0]
    15e6:	1dfb      	adds	r3, r7, #7
    15e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    15ea:	1dfb      	adds	r3, r7, #7
    15ec:	781b      	ldrb	r3, [r3, #0]
    15ee:	2b01      	cmp	r3, #1
    15f0:	d00a      	beq.n	1608 <system_apb_clock_set_mask+0x2c>
    15f2:	2b02      	cmp	r3, #2
    15f4:	d00f      	beq.n	1616 <system_apb_clock_set_mask+0x3a>
    15f6:	2b00      	cmp	r3, #0
    15f8:	d114      	bne.n	1624 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    15fa:	4b0e      	ldr	r3, [pc, #56]	; (1634 <system_apb_clock_set_mask+0x58>)
    15fc:	4a0d      	ldr	r2, [pc, #52]	; (1634 <system_apb_clock_set_mask+0x58>)
    15fe:	6991      	ldr	r1, [r2, #24]
    1600:	683a      	ldr	r2, [r7, #0]
    1602:	430a      	orrs	r2, r1
    1604:	619a      	str	r2, [r3, #24]
			break;
    1606:	e00f      	b.n	1628 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1608:	4b0a      	ldr	r3, [pc, #40]	; (1634 <system_apb_clock_set_mask+0x58>)
    160a:	4a0a      	ldr	r2, [pc, #40]	; (1634 <system_apb_clock_set_mask+0x58>)
    160c:	69d1      	ldr	r1, [r2, #28]
    160e:	683a      	ldr	r2, [r7, #0]
    1610:	430a      	orrs	r2, r1
    1612:	61da      	str	r2, [r3, #28]
			break;
    1614:	e008      	b.n	1628 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1616:	4b07      	ldr	r3, [pc, #28]	; (1634 <system_apb_clock_set_mask+0x58>)
    1618:	4a06      	ldr	r2, [pc, #24]	; (1634 <system_apb_clock_set_mask+0x58>)
    161a:	6a11      	ldr	r1, [r2, #32]
    161c:	683a      	ldr	r2, [r7, #0]
    161e:	430a      	orrs	r2, r1
    1620:	621a      	str	r2, [r3, #32]
			break;
    1622:	e001      	b.n	1628 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1624:	2317      	movs	r3, #23
    1626:	e000      	b.n	162a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1628:	2300      	movs	r3, #0
}
    162a:	1c18      	adds	r0, r3, #0
    162c:	46bd      	mov	sp, r7
    162e:	b002      	add	sp, #8
    1630:	bd80      	pop	{r7, pc}
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	40000400 	.word	0x40000400

00001638 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1638:	b580      	push	{r7, lr}
    163a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    163c:	4b06      	ldr	r3, [pc, #24]	; (1658 <system_is_debugger_present+0x20>)
    163e:	681b      	ldr	r3, [r3, #0]
    1640:	021b      	lsls	r3, r3, #8
    1642:	0e1b      	lsrs	r3, r3, #24
    1644:	b2db      	uxtb	r3, r3
    1646:	1c1a      	adds	r2, r3, #0
    1648:	2302      	movs	r3, #2
    164a:	4013      	ands	r3, r2
    164c:	1e5a      	subs	r2, r3, #1
    164e:	4193      	sbcs	r3, r2
    1650:	b2db      	uxtb	r3, r3
}
    1652:	1c18      	adds	r0, r3, #0
    1654:	46bd      	mov	sp, r7
    1656:	bd80      	pop	{r7, pc}
    1658:	41002000 	.word	0x41002000

0000165c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    165c:	b580      	push	{r7, lr}
    165e:	b084      	sub	sp, #16
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1664:	687b      	ldr	r3, [r7, #4]
    1666:	681b      	ldr	r3, [r3, #0]
    1668:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    166a:	68fb      	ldr	r3, [r7, #12]
    166c:	699b      	ldr	r3, [r3, #24]
    166e:	b2db      	uxtb	r3, r3
    1670:	1c1a      	adds	r2, r3, #0
    1672:	2301      	movs	r3, #1
    1674:	4013      	ands	r3, r2
    1676:	1e5a      	subs	r2, r3, #1
    1678:	4193      	sbcs	r3, r2
    167a:	b2db      	uxtb	r3, r3
}
    167c:	1c18      	adds	r0, r3, #0
    167e:	46bd      	mov	sp, r7
    1680:	b004      	add	sp, #16
    1682:	bd80      	pop	{r7, pc}

00001684 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    1684:	b580      	push	{r7, lr}
    1686:	b084      	sub	sp, #16
    1688:	af00      	add	r7, sp, #0
    168a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	681b      	ldr	r3, [r3, #0]
    1690:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1692:	68fb      	ldr	r3, [r7, #12]
    1694:	699b      	ldr	r3, [r3, #24]
    1696:	b2db      	uxtb	r3, r3
    1698:	1c1a      	adds	r2, r3, #0
    169a:	2304      	movs	r3, #4
    169c:	4013      	ands	r3, r2
    169e:	1e5a      	subs	r2, r3, #1
    16a0:	4193      	sbcs	r3, r2
    16a2:	b2db      	uxtb	r3, r3
}
    16a4:	1c18      	adds	r0, r3, #0
    16a6:	46bd      	mov	sp, r7
    16a8:	b004      	add	sp, #16
    16aa:	bd80      	pop	{r7, pc}

000016ac <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    16ac:	b580      	push	{r7, lr}
    16ae:	b084      	sub	sp, #16
    16b0:	af00      	add	r7, sp, #0
    16b2:	6078      	str	r0, [r7, #4]
    16b4:	1c0a      	adds	r2, r1, #0
    16b6:	1cbb      	adds	r3, r7, #2
    16b8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    16ba:	687b      	ldr	r3, [r7, #4]
    16bc:	681b      	ldr	r3, [r3, #0]
    16be:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    16c0:	687b      	ldr	r3, [r7, #4]
    16c2:	1c18      	adds	r0, r3, #0
    16c4:	4b0a      	ldr	r3, [pc, #40]	; (16f0 <spi_write+0x44>)
    16c6:	4798      	blx	r3
    16c8:	1c03      	adds	r3, r0, #0
    16ca:	2201      	movs	r2, #1
    16cc:	4053      	eors	r3, r2
    16ce:	b2db      	uxtb	r3, r3
    16d0:	2b00      	cmp	r3, #0
    16d2:	d001      	beq.n	16d8 <spi_write+0x2c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    16d4:	2305      	movs	r3, #5
    16d6:	e006      	b.n	16e6 <spi_write+0x3a>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    16d8:	1cbb      	adds	r3, r7, #2
    16da:	881b      	ldrh	r3, [r3, #0]
    16dc:	05db      	lsls	r3, r3, #23
    16de:	0dda      	lsrs	r2, r3, #23
    16e0:	68fb      	ldr	r3, [r7, #12]
    16e2:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    16e4:	2300      	movs	r3, #0
}
    16e6:	1c18      	adds	r0, r3, #0
    16e8:	46bd      	mov	sp, r7
    16ea:	b004      	add	sp, #16
    16ec:	bd80      	pop	{r7, pc}
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	0000165d 	.word	0x0000165d

000016f4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    16f4:	b580      	push	{r7, lr}
    16f6:	b084      	sub	sp, #16
    16f8:	af00      	add	r7, sp, #0
    16fa:	6078      	str	r0, [r7, #4]
    16fc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    16fe:	687b      	ldr	r3, [r7, #4]
    1700:	681b      	ldr	r3, [r3, #0]
    1702:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1704:	687b      	ldr	r3, [r7, #4]
    1706:	1c18      	adds	r0, r3, #0
    1708:	4b1e      	ldr	r3, [pc, #120]	; (1784 <spi_read+0x90>)
    170a:	4798      	blx	r3
    170c:	1c03      	adds	r3, r0, #0
    170e:	2201      	movs	r2, #1
    1710:	4053      	eors	r3, r2
    1712:	b2db      	uxtb	r3, r3
    1714:	2b00      	cmp	r3, #0
    1716:	d001      	beq.n	171c <spi_read+0x28>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    1718:	2310      	movs	r3, #16
    171a:	e02e      	b.n	177a <spi_read+0x86>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    171c:	1c3b      	adds	r3, r7, #0
    171e:	330f      	adds	r3, #15
    1720:	2200      	movs	r2, #0
    1722:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1724:	68bb      	ldr	r3, [r7, #8]
    1726:	699b      	ldr	r3, [r3, #24]
    1728:	0c1b      	lsrs	r3, r3, #16
    172a:	b29b      	uxth	r3, r3
    172c:	1c1a      	adds	r2, r3, #0
    172e:	2304      	movs	r3, #4
    1730:	4013      	ands	r3, r2
    1732:	d00c      	beq.n	174e <spi_read+0x5a>
		retval = STATUS_ERR_OVERFLOW;
    1734:	1c3b      	adds	r3, r7, #0
    1736:	330f      	adds	r3, #15
    1738:	221e      	movs	r2, #30
    173a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    173c:	68bb      	ldr	r3, [r7, #8]
    173e:	699b      	ldr	r3, [r3, #24]
    1740:	0c1b      	lsrs	r3, r3, #16
    1742:	b29b      	uxth	r3, r3
    1744:	2204      	movs	r2, #4
    1746:	4313      	orrs	r3, r2
    1748:	b29a      	uxth	r2, r3
    174a:	68bb      	ldr	r3, [r7, #8]
    174c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    174e:	687b      	ldr	r3, [r7, #4]
    1750:	799b      	ldrb	r3, [r3, #6]
    1752:	2b01      	cmp	r3, #1
    1754:	d108      	bne.n	1768 <spi_read+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1756:	68bb      	ldr	r3, [r7, #8]
    1758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    175a:	b29b      	uxth	r3, r3
    175c:	05db      	lsls	r3, r3, #23
    175e:	0ddb      	lsrs	r3, r3, #23
    1760:	b29a      	uxth	r2, r3
    1762:	683b      	ldr	r3, [r7, #0]
    1764:	801a      	strh	r2, [r3, #0]
    1766:	e005      	b.n	1774 <spi_read+0x80>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1768:	68bb      	ldr	r3, [r7, #8]
    176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    176c:	b2db      	uxtb	r3, r3
    176e:	1c1a      	adds	r2, r3, #0
    1770:	683b      	ldr	r3, [r7, #0]
    1772:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    1774:	1c3b      	adds	r3, r7, #0
    1776:	330f      	adds	r3, #15
    1778:	781b      	ldrb	r3, [r3, #0]
}
    177a:	1c18      	adds	r0, r3, #0
    177c:	46bd      	mov	sp, r7
    177e:	b004      	add	sp, #16
    1780:	bd80      	pop	{r7, pc}
    1782:	46c0      	nop			; (mov r8, r8)
    1784:	00001685 	.word	0x00001685

00001788 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    1788:	b590      	push	{r4, r7, lr}
    178a:	b093      	sub	sp, #76	; 0x4c
    178c:	af00      	add	r7, sp, #0
    178e:	6078      	str	r0, [r7, #4]
    1790:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1792:	687b      	ldr	r3, [r7, #4]
    1794:	681b      	ldr	r3, [r3, #0]
    1796:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    1798:	687b      	ldr	r3, [r7, #4]
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    179e:	1c3b      	adds	r3, r7, #0
    17a0:	331c      	adds	r3, #28
    17a2:	1c18      	adds	r0, r3, #0
    17a4:	4b82      	ldr	r3, [pc, #520]	; (19b0 <_spi_set_config+0x228>)
    17a6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    17a8:	1c3b      	adds	r3, r7, #0
    17aa:	331c      	adds	r3, #28
    17ac:	2200      	movs	r2, #0
    17ae:	705a      	strb	r2, [r3, #1]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    17b0:	683b      	ldr	r3, [r7, #0]
    17b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    17b4:	1c3b      	adds	r3, r7, #0
    17b6:	330c      	adds	r3, #12
    17b8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    17ba:	683b      	ldr	r3, [r7, #0]
    17bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    17be:	1c3b      	adds	r3, r7, #0
    17c0:	330c      	adds	r3, #12
    17c2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    17c8:	1c3b      	adds	r3, r7, #0
    17ca:	330c      	adds	r3, #12
    17cc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    17ce:	683b      	ldr	r3, [r7, #0]
    17d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    17d2:	1c3b      	adds	r3, r7, #0
    17d4:	330c      	adds	r3, #12
    17d6:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    17d8:	1c3b      	adds	r3, r7, #0
    17da:	3347      	adds	r3, #71	; 0x47
    17dc:	2200      	movs	r2, #0
    17de:	701a      	strb	r2, [r3, #0]
    17e0:	e02c      	b.n	183c <_spi_set_config+0xb4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    17e2:	1c3b      	adds	r3, r7, #0
    17e4:	3347      	adds	r3, #71	; 0x47
    17e6:	781a      	ldrb	r2, [r3, #0]
    17e8:	1c3b      	adds	r3, r7, #0
    17ea:	330c      	adds	r3, #12
    17ec:	0092      	lsls	r2, r2, #2
    17ee:	58d3      	ldr	r3, [r2, r3]
    17f0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    17f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    17f4:	2b00      	cmp	r3, #0
    17f6:	d109      	bne.n	180c <_spi_set_config+0x84>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    17f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    17fa:	1c3b      	adds	r3, r7, #0
    17fc:	3347      	adds	r3, #71	; 0x47
    17fe:	781b      	ldrb	r3, [r3, #0]
    1800:	1c10      	adds	r0, r2, #0
    1802:	1c19      	adds	r1, r3, #0
    1804:	4b6b      	ldr	r3, [pc, #428]	; (19b4 <_spi_set_config+0x22c>)
    1806:	4798      	blx	r3
    1808:	1c03      	adds	r3, r0, #0
    180a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    180c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    180e:	3301      	adds	r3, #1
    1810:	d00d      	beq.n	182e <_spi_set_config+0xa6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1814:	b2da      	uxtb	r2, r3
    1816:	1c3b      	adds	r3, r7, #0
    1818:	331c      	adds	r3, #28
    181a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    181c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    181e:	0c1b      	lsrs	r3, r3, #16
    1820:	b2da      	uxtb	r2, r3
    1822:	1c3b      	adds	r3, r7, #0
    1824:	331c      	adds	r3, #28
    1826:	1c10      	adds	r0, r2, #0
    1828:	1c19      	adds	r1, r3, #0
    182a:	4b63      	ldr	r3, [pc, #396]	; (19b8 <_spi_set_config+0x230>)
    182c:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    182e:	1c3b      	adds	r3, r7, #0
    1830:	3347      	adds	r3, #71	; 0x47
    1832:	781a      	ldrb	r2, [r3, #0]
    1834:	1c3b      	adds	r3, r7, #0
    1836:	3347      	adds	r3, #71	; 0x47
    1838:	3201      	adds	r2, #1
    183a:	701a      	strb	r2, [r3, #0]
    183c:	1c3b      	adds	r3, r7, #0
    183e:	3347      	adds	r3, #71	; 0x47
    1840:	781b      	ldrb	r3, [r3, #0]
    1842:	2b03      	cmp	r3, #3
    1844:	d9cd      	bls.n	17e2 <_spi_set_config+0x5a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    1846:	683b      	ldr	r3, [r7, #0]
    1848:	781a      	ldrb	r2, [r3, #0]
    184a:	687b      	ldr	r3, [r7, #4]
    184c:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    184e:	683b      	ldr	r3, [r7, #0]
    1850:	7c1a      	ldrb	r2, [r3, #16]
    1852:	687b      	ldr	r3, [r7, #4]
    1854:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    1856:	683b      	ldr	r3, [r7, #0]
    1858:	7c9a      	ldrb	r2, [r3, #18]
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    185e:	683b      	ldr	r3, [r7, #0]
    1860:	7d1a      	ldrb	r2, [r3, #20]
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1866:	1c3b      	adds	r3, r7, #0
    1868:	330a      	adds	r3, #10
    186a:	2200      	movs	r2, #0
    186c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    186e:	2300      	movs	r3, #0
    1870:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    1872:	2300      	movs	r3, #0
    1874:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    1876:	683b      	ldr	r3, [r7, #0]
    1878:	781b      	ldrb	r3, [r3, #0]
    187a:	2b01      	cmp	r3, #1
    187c:	d12b      	bne.n	18d6 <_spi_set_config+0x14e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    187e:	687b      	ldr	r3, [r7, #4]
    1880:	681b      	ldr	r3, [r3, #0]
    1882:	1c18      	adds	r0, r3, #0
    1884:	4b4d      	ldr	r3, [pc, #308]	; (19bc <_spi_set_config+0x234>)
    1886:	4798      	blx	r3
    1888:	1c03      	adds	r3, r0, #0
    188a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    188e:	3314      	adds	r3, #20
    1890:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1892:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1894:	b2db      	uxtb	r3, r3
    1896:	1c18      	adds	r0, r3, #0
    1898:	4b49      	ldr	r3, [pc, #292]	; (19c0 <_spi_set_config+0x238>)
    189a:	4798      	blx	r3
    189c:	1c03      	adds	r3, r0, #0
    189e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    18a0:	683b      	ldr	r3, [r7, #0]
    18a2:	6999      	ldr	r1, [r3, #24]
    18a4:	1c3c      	adds	r4, r7, #0
    18a6:	3423      	adds	r4, #35	; 0x23
    18a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    18aa:	1c3b      	adds	r3, r7, #0
    18ac:	330a      	adds	r3, #10
    18ae:	1c08      	adds	r0, r1, #0
    18b0:	1c11      	adds	r1, r2, #0
    18b2:	1c1a      	adds	r2, r3, #0
    18b4:	4b43      	ldr	r3, [pc, #268]	; (19c4 <_spi_set_config+0x23c>)
    18b6:	4798      	blx	r3
    18b8:	1c03      	adds	r3, r0, #0
    18ba:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    18bc:	1c3b      	adds	r3, r7, #0
    18be:	3323      	adds	r3, #35	; 0x23
    18c0:	781b      	ldrb	r3, [r3, #0]
    18c2:	2b00      	cmp	r3, #0
    18c4:	d001      	beq.n	18ca <_spi_set_config+0x142>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    18c6:	2317      	movs	r3, #23
    18c8:	e06d      	b.n	19a6 <_spi_set_config+0x21e>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    18ca:	1c3b      	adds	r3, r7, #0
    18cc:	330a      	adds	r3, #10
    18ce:	881b      	ldrh	r3, [r3, #0]
    18d0:	b2da      	uxtb	r2, r3
    18d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18d4:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    18d6:	683b      	ldr	r3, [r7, #0]
    18d8:	781b      	ldrb	r3, [r3, #0]
    18da:	2b00      	cmp	r3, #0
    18dc:	d11a      	bne.n	1914 <_spi_set_config+0x18c>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    18de:	683b      	ldr	r3, [r7, #0]
    18e0:	699b      	ldr	r3, [r3, #24]
    18e2:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    18e4:	683b      	ldr	r3, [r7, #0]
    18e6:	8b9b      	ldrh	r3, [r3, #28]
    18e8:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    18ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    18ee:	683b      	ldr	r3, [r7, #0]
    18f0:	7f9b      	ldrb	r3, [r3, #30]
    18f2:	1c19      	adds	r1, r3, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    18f4:	683b      	ldr	r3, [r7, #0]
    18f6:	7fdb      	ldrb	r3, [r3, #31]
    18f8:	041b      	lsls	r3, r3, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    18fa:	430b      	orrs	r3, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    18fc:	431a      	orrs	r2, r3
    18fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1900:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    1902:	683a      	ldr	r2, [r7, #0]
    1904:	2320      	movs	r3, #32
    1906:	5cd3      	ldrb	r3, [r2, r3]
    1908:	2b00      	cmp	r3, #0
    190a:	d003      	beq.n	1914 <_spi_set_config+0x18c>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    190c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    190e:	2240      	movs	r2, #64	; 0x40
    1910:	4313      	orrs	r3, r2
    1912:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	685b      	ldr	r3, [r3, #4]
    1918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    191a:	4313      	orrs	r3, r2
    191c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    191e:	683b      	ldr	r3, [r7, #0]
    1920:	689b      	ldr	r3, [r3, #8]
    1922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1924:	4313      	orrs	r3, r2
    1926:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set mux setting */
	ctrla |= config->mux_setting;
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	68db      	ldr	r3, [r3, #12]
    192c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    192e:	4313      	orrs	r3, r2
    1930:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1932:	683b      	ldr	r3, [r7, #0]
    1934:	7c1b      	ldrb	r3, [r3, #16]
    1936:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1938:	4313      	orrs	r3, r2
    193a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    193c:	683b      	ldr	r3, [r7, #0]
    193e:	7c5b      	ldrb	r3, [r3, #17]
    1940:	2b00      	cmp	r3, #0
    1942:	d104      	bne.n	194e <_spi_set_config+0x1c6>
    1944:	4b20      	ldr	r3, [pc, #128]	; (19c8 <_spi_set_config+0x240>)
    1946:	4798      	blx	r3
    1948:	1c03      	adds	r3, r0, #0
    194a:	2b00      	cmp	r3, #0
    194c:	d003      	beq.n	1956 <_spi_set_config+0x1ce>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    194e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1950:	2280      	movs	r2, #128	; 0x80
    1952:	4313      	orrs	r3, r2
    1954:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    1956:	683b      	ldr	r3, [r7, #0]
    1958:	7c9b      	ldrb	r3, [r3, #18]
    195a:	2b00      	cmp	r3, #0
    195c:	d004      	beq.n	1968 <_spi_set_config+0x1e0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    195e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1960:	2280      	movs	r2, #128	; 0x80
    1962:	0292      	lsls	r2, r2, #10
    1964:	4313      	orrs	r3, r2
    1966:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1968:	683b      	ldr	r3, [r7, #0]
    196a:	7cdb      	ldrb	r3, [r3, #19]
    196c:	2b00      	cmp	r3, #0
    196e:	d004      	beq.n	197a <_spi_set_config+0x1f2>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1972:	2280      	movs	r2, #128	; 0x80
    1974:	0092      	lsls	r2, r2, #2
    1976:	4313      	orrs	r3, r2
    1978:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    197a:	683b      	ldr	r3, [r7, #0]
    197c:	7d1b      	ldrb	r3, [r3, #20]
    197e:	2b00      	cmp	r3, #0
    1980:	d004      	beq.n	198c <_spi_set_config+0x204>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1984:	2280      	movs	r2, #128	; 0x80
    1986:	0192      	lsls	r2, r2, #6
    1988:	4313      	orrs	r3, r2
    198a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    198c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    198e:	681a      	ldr	r2, [r3, #0]
    1990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1992:	431a      	orrs	r2, r3
    1994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1996:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    199a:	685a      	ldr	r2, [r3, #4]
    199c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    199e:	431a      	orrs	r2, r3
    19a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    19a2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    19a4:	2300      	movs	r3, #0
}
    19a6:	1c18      	adds	r0, r3, #0
    19a8:	46bd      	mov	sp, r7
    19aa:	b013      	add	sp, #76	; 0x4c
    19ac:	bd90      	pop	{r4, r7, pc}
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	0000144d 	.word	0x0000144d
    19b4:	00006a75 	.word	0x00006a75
    19b8:	00008355 	.word	0x00008355
    19bc:	00006c45 	.word	0x00006c45
    19c0:	00008199 	.word	0x00008199
    19c4:	000067d9 	.word	0x000067d9
    19c8:	00001639 	.word	0x00001639

000019cc <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    19cc:	b590      	push	{r4, r7, lr}
    19ce:	b091      	sub	sp, #68	; 0x44
    19d0:	af00      	add	r7, sp, #0
    19d2:	6078      	str	r0, [r7, #4]
    19d4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    19d6:	687b      	ldr	r3, [r7, #4]
    19d8:	681b      	ldr	r3, [r3, #0]
    19da:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    19dc:	687b      	ldr	r3, [r7, #4]
    19de:	681b      	ldr	r3, [r3, #0]
    19e0:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    19e2:	683b      	ldr	r3, [r7, #0]
    19e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    19e6:	1c3b      	adds	r3, r7, #0
    19e8:	330c      	adds	r3, #12
    19ea:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    19ec:	683b      	ldr	r3, [r7, #0]
    19ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    19f0:	1c3b      	adds	r3, r7, #0
    19f2:	330c      	adds	r3, #12
    19f4:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    19f6:	683b      	ldr	r3, [r7, #0]
    19f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    19fa:	1c3b      	adds	r3, r7, #0
    19fc:	330c      	adds	r3, #12
    19fe:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    1a00:	683b      	ldr	r3, [r7, #0]
    1a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    1a04:	1c3b      	adds	r3, r7, #0
    1a06:	330c      	adds	r3, #12
    1a08:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1a0a:	1c3b      	adds	r3, r7, #0
    1a0c:	333f      	adds	r3, #63	; 0x3f
    1a0e:	2200      	movs	r2, #0
    1a10:	701a      	strb	r2, [r3, #0]
    1a12:	e030      	b.n	1a76 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1a14:	1c3b      	adds	r3, r7, #0
    1a16:	333f      	adds	r3, #63	; 0x3f
    1a18:	781a      	ldrb	r2, [r3, #0]
    1a1a:	1c3b      	adds	r3, r7, #0
    1a1c:	330c      	adds	r3, #12
    1a1e:	0092      	lsls	r2, r2, #2
    1a20:	58d3      	ldr	r3, [r2, r3]
    1a22:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    1a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a26:	2b00      	cmp	r3, #0
    1a28:	d109      	bne.n	1a3e <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1a2c:	1c3b      	adds	r3, r7, #0
    1a2e:	333f      	adds	r3, #63	; 0x3f
    1a30:	781b      	ldrb	r3, [r3, #0]
    1a32:	1c10      	adds	r0, r2, #0
    1a34:	1c19      	adds	r1, r3, #0
    1a36:	4b6d      	ldr	r3, [pc, #436]	; (1bec <_spi_check_config+0x220>)
    1a38:	4798      	blx	r3
    1a3a:	1c03      	adds	r3, r0, #0
    1a3c:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    1a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a40:	3301      	adds	r3, #1
    1a42:	d100      	bne.n	1a46 <_spi_check_config+0x7a>
			continue;
    1a44:	e010      	b.n	1a68 <_spi_check_config+0x9c>
		}

		if ((current_pinmux & 0xFFFF) !=
    1a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a48:	041b      	lsls	r3, r3, #16
    1a4a:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a4e:	0c1b      	lsrs	r3, r3, #16
    1a50:	b2db      	uxtb	r3, r3
    1a52:	1c18      	adds	r0, r3, #0
    1a54:	4b66      	ldr	r3, [pc, #408]	; (1bf0 <_spi_check_config+0x224>)
    1a56:	4798      	blx	r3
    1a58:	1c03      	adds	r3, r0, #0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    1a5a:	429c      	cmp	r4, r3
    1a5c:	d004      	beq.n	1a68 <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    1a5e:	687b      	ldr	r3, [r7, #4]
    1a60:	2200      	movs	r2, #0
    1a62:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    1a64:	231c      	movs	r3, #28
    1a66:	e0bd      	b.n	1be4 <_spi_check_config+0x218>
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1a68:	1c3b      	adds	r3, r7, #0
    1a6a:	333f      	adds	r3, #63	; 0x3f
    1a6c:	781a      	ldrb	r2, [r3, #0]
    1a6e:	1c3b      	adds	r3, r7, #0
    1a70:	333f      	adds	r3, #63	; 0x3f
    1a72:	3201      	adds	r2, #1
    1a74:	701a      	strb	r2, [r3, #0]
    1a76:	1c3b      	adds	r3, r7, #0
    1a78:	333f      	adds	r3, #63	; 0x3f
    1a7a:	781b      	ldrb	r3, [r3, #0]
    1a7c:	2b03      	cmp	r3, #3
    1a7e:	d9c9      	bls.n	1a14 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1a80:	2013      	movs	r0, #19
    1a82:	4b5c      	ldr	r3, [pc, #368]	; (1bf4 <_spi_check_config+0x228>)
    1a84:	4798      	blx	r3
    1a86:	1c03      	adds	r3, r0, #0
    1a88:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    1a8a:	2300      	movs	r3, #0
    1a8c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    1a8e:	2300      	movs	r3, #0
    1a90:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
    1a92:	2300      	movs	r3, #0
    1a94:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    1a96:	683b      	ldr	r3, [r7, #0]
    1a98:	781b      	ldrb	r3, [r3, #0]
    1a9a:	2b01      	cmp	r3, #1
    1a9c:	d123      	bne.n	1ae6 <_spi_check_config+0x11a>
		enum status_code error_code = _sercom_get_sync_baud_val(
    1a9e:	683b      	ldr	r3, [r7, #0]
    1aa0:	6999      	ldr	r1, [r3, #24]
    1aa2:	1c3c      	adds	r4, r7, #0
    1aa4:	341f      	adds	r4, #31
    1aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1aa8:	1c3b      	adds	r3, r7, #0
    1aaa:	330a      	adds	r3, #10
    1aac:	1c08      	adds	r0, r1, #0
    1aae:	1c11      	adds	r1, r2, #0
    1ab0:	1c1a      	adds	r2, r3, #0
    1ab2:	4b51      	ldr	r3, [pc, #324]	; (1bf8 <_spi_check_config+0x22c>)
    1ab4:	4798      	blx	r3
    1ab6:	1c03      	adds	r3, r0, #0
    1ab8:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    1aba:	1c3b      	adds	r3, r7, #0
    1abc:	331f      	adds	r3, #31
    1abe:	781b      	ldrb	r3, [r3, #0]
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d001      	beq.n	1ac8 <_spi_check_config+0xfc>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1ac4:	2317      	movs	r3, #23
    1ac6:	e08d      	b.n	1be4 <_spi_check_config+0x218>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1aca:	68db      	ldr	r3, [r3, #12]
    1acc:	b2da      	uxtb	r2, r3
    1ace:	1c3b      	adds	r3, r7, #0
    1ad0:	330a      	adds	r3, #10
    1ad2:	881b      	ldrh	r3, [r3, #0]
    1ad4:	b2db      	uxtb	r3, r3
    1ad6:	429a      	cmp	r2, r3
    1ad8:	d001      	beq.n	1ade <_spi_check_config+0x112>
			return STATUS_ERR_DENIED;
    1ada:	231c      	movs	r3, #28
    1adc:	e082      	b.n	1be4 <_spi_check_config+0x218>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    1ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ae0:	220c      	movs	r2, #12
    1ae2:	4313      	orrs	r3, r2
    1ae4:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1ae6:	683b      	ldr	r3, [r7, #0]
    1ae8:	781b      	ldrb	r3, [r3, #0]
    1aea:	2b00      	cmp	r3, #0
    1aec:	d127      	bne.n	1b3e <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    1aee:	683b      	ldr	r3, [r7, #0]
    1af0:	699b      	ldr	r3, [r3, #24]
    1af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1af4:	4313      	orrs	r3, r2
    1af6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    1af8:	683b      	ldr	r3, [r7, #0]
    1afa:	8b9b      	ldrh	r3, [r3, #28]
    1afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1afe:	4313      	orrs	r3, r2
    1b00:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1b02:	683b      	ldr	r3, [r7, #0]
    1b04:	7f9b      	ldrb	r3, [r3, #30]
    1b06:	1c1a      	adds	r2, r3, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1b08:	683b      	ldr	r3, [r7, #0]
    1b0a:	7fdb      	ldrb	r3, [r3, #31]
    1b0c:	041b      	lsls	r3, r3, #16

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1b0e:	4313      	orrs	r3, r2
    1b10:	6a3a      	ldr	r2, [r7, #32]
    1b12:	4313      	orrs	r3, r2
    1b14:	623b      	str	r3, [r7, #32]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    1b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b18:	681a      	ldr	r2, [r3, #0]
    1b1a:	6a3b      	ldr	r3, [r7, #32]
    1b1c:	429a      	cmp	r2, r3
    1b1e:	d001      	beq.n	1b24 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
    1b20:	231c      	movs	r3, #28
    1b22:	e05f      	b.n	1be4 <_spi_check_config+0x218>
		}

		if (config->mode_specific.slave.preload_enable) {
    1b24:	683a      	ldr	r2, [r7, #0]
    1b26:	2320      	movs	r3, #32
    1b28:	5cd3      	ldrb	r3, [r2, r3]
    1b2a:	2b00      	cmp	r3, #0
    1b2c:	d003      	beq.n	1b36 <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1b30:	2240      	movs	r2, #64	; 0x40
    1b32:	4313      	orrs	r3, r2
    1b34:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_SLAVE;
    1b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b38:	2208      	movs	r2, #8
    1b3a:	4313      	orrs	r3, r2
    1b3c:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    1b3e:	683b      	ldr	r3, [r7, #0]
    1b40:	685b      	ldr	r3, [r3, #4]
    1b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1b44:	4313      	orrs	r3, r2
    1b46:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    1b48:	683b      	ldr	r3, [r7, #0]
    1b4a:	689b      	ldr	r3, [r3, #8]
    1b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1b4e:	4313      	orrs	r3, r2
    1b50:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set mux setting */
	ctrla |= config->mux_setting;
    1b52:	683b      	ldr	r3, [r7, #0]
    1b54:	68db      	ldr	r3, [r3, #12]
    1b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1b58:	4313      	orrs	r3, r2
    1b5a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1b5c:	683b      	ldr	r3, [r7, #0]
    1b5e:	7c1b      	ldrb	r3, [r3, #16]
    1b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1b62:	4313      	orrs	r3, r2
    1b64:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    1b66:	683b      	ldr	r3, [r7, #0]
    1b68:	7c5b      	ldrb	r3, [r3, #17]
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d003      	beq.n	1b76 <_spi_check_config+0x1aa>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b70:	2280      	movs	r2, #128	; 0x80
    1b72:	4313      	orrs	r3, r2
    1b74:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    1b76:	683b      	ldr	r3, [r7, #0]
    1b78:	7c9b      	ldrb	r3, [r3, #18]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d004      	beq.n	1b88 <_spi_check_config+0x1bc>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1b80:	2280      	movs	r2, #128	; 0x80
    1b82:	0292      	lsls	r2, r2, #10
    1b84:	4313      	orrs	r3, r2
    1b86:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1b88:	683b      	ldr	r3, [r7, #0]
    1b8a:	7cdb      	ldrb	r3, [r3, #19]
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	d004      	beq.n	1b9a <_spi_check_config+0x1ce>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1b92:	2280      	movs	r2, #128	; 0x80
    1b94:	0092      	lsls	r2, r2, #2
    1b96:	4313      	orrs	r3, r2
    1b98:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1b9a:	683b      	ldr	r3, [r7, #0]
    1b9c:	7d1b      	ldrb	r3, [r3, #20]
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d004      	beq.n	1bac <_spi_check_config+0x1e0>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1ba4:	2280      	movs	r2, #128	; 0x80
    1ba6:	0192      	lsls	r2, r2, #6
    1ba8:	4313      	orrs	r3, r2
    1baa:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1bae:	2202      	movs	r2, #2
    1bb0:	4313      	orrs	r3, r2
    1bb2:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1bb6:	681a      	ldr	r2, [r3, #0]
    1bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1bba:	429a      	cmp	r2, r3
    1bbc:	d10e      	bne.n	1bdc <_spi_check_config+0x210>
			spi_module->CTRLB.reg == ctrlb) {
    1bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1bc0:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1bc4:	429a      	cmp	r2, r3
    1bc6:	d109      	bne.n	1bdc <_spi_check_config+0x210>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    1bc8:	683b      	ldr	r3, [r7, #0]
    1bca:	781a      	ldrb	r2, [r3, #0]
    1bcc:	687b      	ldr	r3, [r7, #4]
    1bce:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    1bd0:	683b      	ldr	r3, [r7, #0]
    1bd2:	7c1a      	ldrb	r2, [r3, #16]
    1bd4:	687b      	ldr	r3, [r7, #4]
    1bd6:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    1bd8:	2300      	movs	r3, #0
    1bda:	e003      	b.n	1be4 <_spi_check_config+0x218>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    1bdc:	687b      	ldr	r3, [r7, #4]
    1bde:	2200      	movs	r2, #0
    1be0:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    1be2:	231c      	movs	r3, #28
}
    1be4:	1c18      	adds	r0, r3, #0
    1be6:	46bd      	mov	sp, r7
    1be8:	b011      	add	sp, #68	; 0x44
    1bea:	bd90      	pop	{r4, r7, pc}
    1bec:	00006a75 	.word	0x00006a75
    1bf0:	000014d5 	.word	0x000014d5
    1bf4:	00008199 	.word	0x00008199
    1bf8:	000067d9 	.word	0x000067d9

00001bfc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1bfc:	b580      	push	{r7, lr}
    1bfe:	b08a      	sub	sp, #40	; 0x28
    1c00:	af00      	add	r7, sp, #0
    1c02:	60f8      	str	r0, [r7, #12]
    1c04:	60b9      	str	r1, [r7, #8]
    1c06:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1c08:	68fb      	ldr	r3, [r7, #12]
    1c0a:	68ba      	ldr	r2, [r7, #8]
    1c0c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1c0e:	68fb      	ldr	r3, [r7, #12]
    1c10:	681b      	ldr	r3, [r3, #0]
    1c12:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c16:	681a      	ldr	r2, [r3, #0]
    1c18:	2302      	movs	r3, #2
    1c1a:	4013      	ands	r3, r2
    1c1c:	d007      	beq.n	1c2e <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    1c1e:	68fa      	ldr	r2, [r7, #12]
    1c20:	687b      	ldr	r3, [r7, #4]
    1c22:	1c10      	adds	r0, r2, #0
    1c24:	1c19      	adds	r1, r3, #0
    1c26:	4b2f      	ldr	r3, [pc, #188]	; (1ce4 <spi_init+0xe8>)
    1c28:	4798      	blx	r3
    1c2a:	1c03      	adds	r3, r0, #0
    1c2c:	e056      	b.n	1cdc <spi_init+0xe0>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c30:	681a      	ldr	r2, [r3, #0]
    1c32:	2301      	movs	r3, #1
    1c34:	4013      	ands	r3, r2
    1c36:	d001      	beq.n	1c3c <spi_init+0x40>
		return STATUS_BUSY;
    1c38:	2305      	movs	r3, #5
    1c3a:	e04f      	b.n	1cdc <spi_init+0xe0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1c3c:	68fb      	ldr	r3, [r7, #12]
    1c3e:	681b      	ldr	r3, [r3, #0]
    1c40:	1c18      	adds	r0, r3, #0
    1c42:	4b29      	ldr	r3, [pc, #164]	; (1ce8 <spi_init+0xec>)
    1c44:	4798      	blx	r3
    1c46:	1c03      	adds	r3, r0, #0
    1c48:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1c4a:	6a3b      	ldr	r3, [r7, #32]
    1c4c:	3302      	adds	r3, #2
    1c4e:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1c50:	6a3b      	ldr	r3, [r7, #32]
    1c52:	3314      	adds	r3, #20
    1c54:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1c56:	69fb      	ldr	r3, [r7, #28]
    1c58:	2201      	movs	r2, #1
    1c5a:	1c11      	adds	r1, r2, #0
    1c5c:	4099      	lsls	r1, r3
    1c5e:	1c0b      	adds	r3, r1, #0
    1c60:	2002      	movs	r0, #2
    1c62:	1c19      	adds	r1, r3, #0
    1c64:	4b21      	ldr	r3, [pc, #132]	; (1cec <spi_init+0xf0>)
    1c66:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1c68:	1c3b      	adds	r3, r7, #0
    1c6a:	3314      	adds	r3, #20
    1c6c:	1c18      	adds	r0, r3, #0
    1c6e:	4b20      	ldr	r3, [pc, #128]	; (1cf0 <spi_init+0xf4>)
    1c70:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1c72:	687a      	ldr	r2, [r7, #4]
    1c74:	2324      	movs	r3, #36	; 0x24
    1c76:	5cd2      	ldrb	r2, [r2, r3]
    1c78:	1c3b      	adds	r3, r7, #0
    1c7a:	3314      	adds	r3, #20
    1c7c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1c7e:	69bb      	ldr	r3, [r7, #24]
    1c80:	b2da      	uxtb	r2, r3
    1c82:	1c3b      	adds	r3, r7, #0
    1c84:	3314      	adds	r3, #20
    1c86:	1c10      	adds	r0, r2, #0
    1c88:	1c19      	adds	r1, r3, #0
    1c8a:	4b1a      	ldr	r3, [pc, #104]	; (1cf4 <spi_init+0xf8>)
    1c8c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1c8e:	69bb      	ldr	r3, [r7, #24]
    1c90:	b2db      	uxtb	r3, r3
    1c92:	1c18      	adds	r0, r3, #0
    1c94:	4b18      	ldr	r3, [pc, #96]	; (1cf8 <spi_init+0xfc>)
    1c96:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1c98:	687a      	ldr	r2, [r7, #4]
    1c9a:	2324      	movs	r3, #36	; 0x24
    1c9c:	5cd3      	ldrb	r3, [r2, r3]
    1c9e:	1c18      	adds	r0, r3, #0
    1ca0:	2100      	movs	r1, #0
    1ca2:	4b16      	ldr	r3, [pc, #88]	; (1cfc <spi_init+0x100>)
    1ca4:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1ca6:	687b      	ldr	r3, [r7, #4]
    1ca8:	781b      	ldrb	r3, [r3, #0]
    1caa:	2b01      	cmp	r3, #1
    1cac:	d105      	bne.n	1cba <spi_init+0xbe>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    1cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1cb0:	681b      	ldr	r3, [r3, #0]
    1cb2:	220c      	movs	r2, #12
    1cb4:	431a      	orrs	r2, r3
    1cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1cb8:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1cba:	687b      	ldr	r3, [r7, #4]
    1cbc:	781b      	ldrb	r3, [r3, #0]
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d105      	bne.n	1cce <spi_init+0xd2>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_SLAVE;
    1cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	2208      	movs	r2, #8
    1cc8:	431a      	orrs	r2, r3
    1cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ccc:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    1cce:	68fa      	ldr	r2, [r7, #12]
    1cd0:	687b      	ldr	r3, [r7, #4]
    1cd2:	1c10      	adds	r0, r2, #0
    1cd4:	1c19      	adds	r1, r3, #0
    1cd6:	4b0a      	ldr	r3, [pc, #40]	; (1d00 <spi_init+0x104>)
    1cd8:	4798      	blx	r3
    1cda:	1c03      	adds	r3, r0, #0
}
    1cdc:	1c18      	adds	r0, r3, #0
    1cde:	46bd      	mov	sp, r7
    1ce0:	b00a      	add	sp, #40	; 0x28
    1ce2:	bd80      	pop	{r7, pc}
    1ce4:	000019cd 	.word	0x000019cd
    1ce8:	00006c45 	.word	0x00006c45
    1cec:	000015dd 	.word	0x000015dd
    1cf0:	000015c9 	.word	0x000015c9
    1cf4:	0000807d 	.word	0x0000807d
    1cf8:	000080bd 	.word	0x000080bd
    1cfc:	000069e9 	.word	0x000069e9
    1d00:	00001789 	.word	0x00001789

00001d04 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1d04:	b580      	push	{r7, lr}
    1d06:	b086      	sub	sp, #24
    1d08:	af00      	add	r7, sp, #0
    1d0a:	60f8      	str	r0, [r7, #12]
    1d0c:	60b9      	str	r1, [r7, #8]
    1d0e:	1dfb      	adds	r3, r7, #7
    1d10:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1d12:	68fb      	ldr	r3, [r7, #12]
    1d14:	795b      	ldrb	r3, [r3, #5]
    1d16:	2b01      	cmp	r3, #1
    1d18:	d001      	beq.n	1d1e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    1d1a:	2315      	movs	r3, #21
    1d1c:	e059      	b.n	1dd2 <spi_select_slave+0xce>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1d1e:	68fb      	ldr	r3, [r7, #12]
    1d20:	7a1b      	ldrb	r3, [r3, #8]
    1d22:	2201      	movs	r2, #1
    1d24:	4053      	eors	r3, r2
    1d26:	b2db      	uxtb	r3, r3
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d051      	beq.n	1dd0 <spi_select_slave+0xcc>
#  endif
	{
		if (select) {
    1d2c:	1dfb      	adds	r3, r7, #7
    1d2e:	781b      	ldrb	r3, [r3, #0]
    1d30:	2b00      	cmp	r3, #0
    1d32:	d047      	beq.n	1dc4 <spi_select_slave+0xc0>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    1d34:	68bb      	ldr	r3, [r7, #8]
    1d36:	785b      	ldrb	r3, [r3, #1]
    1d38:	2b00      	cmp	r3, #0
    1d3a:	d03c      	beq.n	1db6 <spi_select_slave+0xb2>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    1d3c:	68fb      	ldr	r3, [r7, #12]
    1d3e:	1c18      	adds	r0, r3, #0
    1d40:	4b26      	ldr	r3, [pc, #152]	; (1ddc <spi_select_slave+0xd8>)
    1d42:	4798      	blx	r3
    1d44:	1c03      	adds	r3, r0, #0
    1d46:	2201      	movs	r2, #1
    1d48:	4053      	eors	r3, r2
    1d4a:	b2db      	uxtb	r3, r3
    1d4c:	2b00      	cmp	r3, #0
    1d4e:	d007      	beq.n	1d60 <spi_select_slave+0x5c>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    1d50:	68bb      	ldr	r3, [r7, #8]
    1d52:	781b      	ldrb	r3, [r3, #0]
    1d54:	1c18      	adds	r0, r3, #0
    1d56:	2101      	movs	r1, #1
    1d58:	4b21      	ldr	r3, [pc, #132]	; (1de0 <spi_select_slave+0xdc>)
    1d5a:	4798      	blx	r3
					return STATUS_BUSY;
    1d5c:	2305      	movs	r3, #5
    1d5e:	e038      	b.n	1dd2 <spi_select_slave+0xce>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1d60:	68bb      	ldr	r3, [r7, #8]
    1d62:	781b      	ldrb	r3, [r3, #0]
    1d64:	1c18      	adds	r0, r3, #0
    1d66:	2100      	movs	r1, #0
    1d68:	4b1d      	ldr	r3, [pc, #116]	; (1de0 <spi_select_slave+0xdc>)
    1d6a:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    1d6c:	68bb      	ldr	r3, [r7, #8]
    1d6e:	789b      	ldrb	r3, [r3, #2]
    1d70:	68fa      	ldr	r2, [r7, #12]
    1d72:	1c10      	adds	r0, r2, #0
    1d74:	1c19      	adds	r1, r3, #0
    1d76:	4b1b      	ldr	r3, [pc, #108]	; (1de4 <spi_select_slave+0xe0>)
    1d78:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    1d7a:	68fb      	ldr	r3, [r7, #12]
    1d7c:	79db      	ldrb	r3, [r3, #7]
    1d7e:	2201      	movs	r2, #1
    1d80:	4053      	eors	r3, r2
    1d82:	b2db      	uxtb	r3, r3
    1d84:	2b00      	cmp	r3, #0
    1d86:	d023      	beq.n	1dd0 <spi_select_slave+0xcc>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    1d88:	46c0      	nop			; (mov r8, r8)
    1d8a:	68fb      	ldr	r3, [r7, #12]
    1d8c:	1c18      	adds	r0, r3, #0
    1d8e:	4b16      	ldr	r3, [pc, #88]	; (1de8 <spi_select_slave+0xe4>)
    1d90:	4798      	blx	r3
    1d92:	1c03      	adds	r3, r0, #0
    1d94:	2201      	movs	r2, #1
    1d96:	4053      	eors	r3, r2
    1d98:	b2db      	uxtb	r3, r3
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d1f5      	bne.n	1d8a <spi_select_slave+0x86>
					}
					uint16_t flush = 0;
    1d9e:	1c3b      	adds	r3, r7, #0
    1da0:	3316      	adds	r3, #22
    1da2:	2200      	movs	r2, #0
    1da4:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    1da6:	68fa      	ldr	r2, [r7, #12]
    1da8:	1c3b      	adds	r3, r7, #0
    1daa:	3316      	adds	r3, #22
    1dac:	1c10      	adds	r0, r2, #0
    1dae:	1c19      	adds	r1, r3, #0
    1db0:	4b0e      	ldr	r3, [pc, #56]	; (1dec <spi_select_slave+0xe8>)
    1db2:	4798      	blx	r3
    1db4:	e00c      	b.n	1dd0 <spi_select_slave+0xcc>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1db6:	68bb      	ldr	r3, [r7, #8]
    1db8:	781b      	ldrb	r3, [r3, #0]
    1dba:	1c18      	adds	r0, r3, #0
    1dbc:	2100      	movs	r1, #0
    1dbe:	4b08      	ldr	r3, [pc, #32]	; (1de0 <spi_select_slave+0xdc>)
    1dc0:	4798      	blx	r3
    1dc2:	e005      	b.n	1dd0 <spi_select_slave+0xcc>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    1dc4:	68bb      	ldr	r3, [r7, #8]
    1dc6:	781b      	ldrb	r3, [r3, #0]
    1dc8:	1c18      	adds	r0, r3, #0
    1dca:	2101      	movs	r1, #1
    1dcc:	4b04      	ldr	r3, [pc, #16]	; (1de0 <spi_select_slave+0xdc>)
    1dce:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    1dd0:	2300      	movs	r3, #0
}
    1dd2:	1c18      	adds	r0, r3, #0
    1dd4:	46bd      	mov	sp, r7
    1dd6:	b006      	add	sp, #24
    1dd8:	bd80      	pop	{r7, pc}
    1dda:	46c0      	nop			; (mov r8, r8)
    1ddc:	0000165d 	.word	0x0000165d
    1de0:	00001575 	.word	0x00001575
    1de4:	000016ad 	.word	0x000016ad
    1de8:	00001685 	.word	0x00001685
    1dec:	000016f5 	.word	0x000016f5

00001df0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1df0:	b580      	push	{r7, lr}
    1df2:	b084      	sub	sp, #16
    1df4:	af00      	add	r7, sp, #0
    1df6:	1c02      	adds	r2, r0, #0
    1df8:	1dfb      	adds	r3, r7, #7
    1dfa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1dfc:	1c3b      	adds	r3, r7, #0
    1dfe:	330f      	adds	r3, #15
    1e00:	1dfa      	adds	r2, r7, #7
    1e02:	7812      	ldrb	r2, [r2, #0]
    1e04:	09d2      	lsrs	r2, r2, #7
    1e06:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1e08:	1c3b      	adds	r3, r7, #0
    1e0a:	330e      	adds	r3, #14
    1e0c:	1dfa      	adds	r2, r7, #7
    1e0e:	7812      	ldrb	r2, [r2, #0]
    1e10:	0952      	lsrs	r2, r2, #5
    1e12:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1e14:	4b0d      	ldr	r3, [pc, #52]	; (1e4c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1e16:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1e18:	1c3b      	adds	r3, r7, #0
    1e1a:	330f      	adds	r3, #15
    1e1c:	781b      	ldrb	r3, [r3, #0]
    1e1e:	2b00      	cmp	r3, #0
    1e20:	d10e      	bne.n	1e40 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    1e22:	1c3b      	adds	r3, r7, #0
    1e24:	330f      	adds	r3, #15
    1e26:	781b      	ldrb	r3, [r3, #0]
    1e28:	009b      	lsls	r3, r3, #2
    1e2a:	2210      	movs	r2, #16
    1e2c:	19d2      	adds	r2, r2, r7
    1e2e:	18d3      	adds	r3, r2, r3
    1e30:	3b08      	subs	r3, #8
    1e32:	681a      	ldr	r2, [r3, #0]
    1e34:	1c3b      	adds	r3, r7, #0
    1e36:	330e      	adds	r3, #14
    1e38:	781b      	ldrb	r3, [r3, #0]
    1e3a:	01db      	lsls	r3, r3, #7
    1e3c:	18d3      	adds	r3, r2, r3
    1e3e:	e000      	b.n	1e42 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    1e40:	2300      	movs	r3, #0
	}
}
    1e42:	1c18      	adds	r0, r3, #0
    1e44:	46bd      	mov	sp, r7
    1e46:	b004      	add	sp, #16
    1e48:	bd80      	pop	{r7, pc}
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	41004400 	.word	0x41004400

00001e50 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1e50:	b580      	push	{r7, lr}
    1e52:	b082      	sub	sp, #8
    1e54:	af00      	add	r7, sp, #0
    1e56:	1c02      	adds	r2, r0, #0
    1e58:	1dfb      	adds	r3, r7, #7
    1e5a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e5c:	4b06      	ldr	r3, [pc, #24]	; (1e78 <system_interrupt_enable+0x28>)
    1e5e:	1dfa      	adds	r2, r7, #7
    1e60:	7812      	ldrb	r2, [r2, #0]
    1e62:	1c11      	adds	r1, r2, #0
    1e64:	221f      	movs	r2, #31
    1e66:	400a      	ands	r2, r1
    1e68:	2101      	movs	r1, #1
    1e6a:	1c08      	adds	r0, r1, #0
    1e6c:	4090      	lsls	r0, r2
    1e6e:	1c02      	adds	r2, r0, #0
    1e70:	601a      	str	r2, [r3, #0]
}
    1e72:	46bd      	mov	sp, r7
    1e74:	b002      	add	sp, #8
    1e76:	bd80      	pop	{r7, pc}
    1e78:	e000e100 	.word	0xe000e100

00001e7c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1e7c:	b580      	push	{r7, lr}
    1e7e:	b082      	sub	sp, #8
    1e80:	af00      	add	r7, sp, #0
    1e82:	1c02      	adds	r2, r0, #0
    1e84:	1dfb      	adds	r3, r7, #7
    1e86:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1e88:	1dfb      	adds	r3, r7, #7
    1e8a:	781b      	ldrb	r3, [r3, #0]
    1e8c:	1c18      	adds	r0, r3, #0
    1e8e:	4b03      	ldr	r3, [pc, #12]	; (1e9c <port_get_group_from_gpio_pin+0x20>)
    1e90:	4798      	blx	r3
    1e92:	1c03      	adds	r3, r0, #0
}
    1e94:	1c18      	adds	r0, r3, #0
    1e96:	46bd      	mov	sp, r7
    1e98:	b002      	add	sp, #8
    1e9a:	bd80      	pop	{r7, pc}
    1e9c:	00001df1 	.word	0x00001df1

00001ea0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1ea0:	b580      	push	{r7, lr}
    1ea2:	b082      	sub	sp, #8
    1ea4:	af00      	add	r7, sp, #0
    1ea6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	2200      	movs	r2, #0
    1eac:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1eae:	687b      	ldr	r3, [r7, #4]
    1eb0:	2201      	movs	r2, #1
    1eb2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	2200      	movs	r2, #0
    1eb8:	709a      	strb	r2, [r3, #2]
}
    1eba:	46bd      	mov	sp, r7
    1ebc:	b002      	add	sp, #8
    1ebe:	bd80      	pop	{r7, pc}

00001ec0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1ec0:	b580      	push	{r7, lr}
    1ec2:	b084      	sub	sp, #16
    1ec4:	af00      	add	r7, sp, #0
    1ec6:	1c0a      	adds	r2, r1, #0
    1ec8:	1dfb      	adds	r3, r7, #7
    1eca:	1c01      	adds	r1, r0, #0
    1ecc:	7019      	strb	r1, [r3, #0]
    1ece:	1dbb      	adds	r3, r7, #6
    1ed0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1ed2:	1dfb      	adds	r3, r7, #7
    1ed4:	781b      	ldrb	r3, [r3, #0]
    1ed6:	1c18      	adds	r0, r3, #0
    1ed8:	4b0d      	ldr	r3, [pc, #52]	; (1f10 <port_pin_set_output_level+0x50>)
    1eda:	4798      	blx	r3
    1edc:	1c03      	adds	r3, r0, #0
    1ede:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1ee0:	1dfb      	adds	r3, r7, #7
    1ee2:	781a      	ldrb	r2, [r3, #0]
    1ee4:	231f      	movs	r3, #31
    1ee6:	4013      	ands	r3, r2
    1ee8:	2201      	movs	r2, #1
    1eea:	1c11      	adds	r1, r2, #0
    1eec:	4099      	lsls	r1, r3
    1eee:	1c0b      	adds	r3, r1, #0
    1ef0:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1ef2:	1dbb      	adds	r3, r7, #6
    1ef4:	781b      	ldrb	r3, [r3, #0]
    1ef6:	2b00      	cmp	r3, #0
    1ef8:	d003      	beq.n	1f02 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    1efa:	68fb      	ldr	r3, [r7, #12]
    1efc:	68ba      	ldr	r2, [r7, #8]
    1efe:	619a      	str	r2, [r3, #24]
    1f00:	e002      	b.n	1f08 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1f02:	68fb      	ldr	r3, [r7, #12]
    1f04:	68ba      	ldr	r2, [r7, #8]
    1f06:	615a      	str	r2, [r3, #20]
	}
}
    1f08:	46bd      	mov	sp, r7
    1f0a:	b004      	add	sp, #16
    1f0c:	bd80      	pop	{r7, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	00001e7d 	.word	0x00001e7d

00001f14 <tc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    1f14:	b580      	push	{r7, lr}
    1f16:	b084      	sub	sp, #16
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f1c:	687b      	ldr	r3, [r7, #4]
    1f1e:	681b      	ldr	r3, [r3, #0]
    1f20:	60fb      	str	r3, [r7, #12]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f22:	68fb      	ldr	r3, [r7, #12]
    1f24:	89db      	ldrh	r3, [r3, #14]
    1f26:	041b      	lsls	r3, r3, #16
    1f28:	0e1b      	lsrs	r3, r3, #24
    1f2a:	b2db      	uxtb	r3, r3
    1f2c:	1c1a      	adds	r2, r3, #0
    1f2e:	2380      	movs	r3, #128	; 0x80
    1f30:	4013      	ands	r3, r2
    1f32:	1e5a      	subs	r2, r3, #1
    1f34:	4193      	sbcs	r3, r2
    1f36:	b2db      	uxtb	r3, r3
}
    1f38:	1c18      	adds	r0, r3, #0
    1f3a:	46bd      	mov	sp, r7
    1f3c:	b004      	add	sp, #16
    1f3e:	bd80      	pop	{r7, pc}

00001f40 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    1f40:	b580      	push	{r7, lr}
    1f42:	b082      	sub	sp, #8
    1f44:	af00      	add	r7, sp, #0
    1f46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1f48:	687b      	ldr	r3, [r7, #4]
    1f4a:	2200      	movs	r2, #0
    1f4c:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    1f4e:	687b      	ldr	r3, [r7, #4]
    1f50:	2200      	movs	r2, #0
    1f52:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    1f54:	687b      	ldr	r3, [r7, #4]
    1f56:	2200      	movs	r2, #0
    1f58:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	2200      	movs	r2, #0
    1f5e:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1f60:	687b      	ldr	r3, [r7, #4]
    1f62:	2200      	movs	r2, #0
    1f64:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    1f66:	687b      	ldr	r3, [r7, #4]
    1f68:	2200      	movs	r2, #0
    1f6a:	705a      	strb	r2, [r3, #1]

	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1f6c:	687b      	ldr	r3, [r7, #4]
    1f6e:	2200      	movs	r2, #0
    1f70:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1f72:	687b      	ldr	r3, [r7, #4]
    1f74:	2200      	movs	r2, #0
    1f76:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	2200      	movs	r2, #0
    1f7c:	731a      	strb	r2, [r3, #12]

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	2200      	movs	r2, #0
    1f82:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    1f84:	687b      	ldr	r3, [r7, #4]
    1f86:	2200      	movs	r2, #0
    1f88:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1f8a:	687b      	ldr	r3, [r7, #4]
    1f8c:	2200      	movs	r2, #0
    1f8e:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1f90:	687b      	ldr	r3, [r7, #4]
    1f92:	2200      	movs	r2, #0
    1f94:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1f96:	687b      	ldr	r3, [r7, #4]
    1f98:	2200      	movs	r2, #0
    1f9a:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1f9c:	687b      	ldr	r3, [r7, #4]
    1f9e:	2200      	movs	r2, #0
    1fa0:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1fa2:	687b      	ldr	r3, [r7, #4]
    1fa4:	2200      	movs	r2, #0
    1fa6:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1fa8:	687b      	ldr	r3, [r7, #4]
    1faa:	2200      	movs	r2, #0
    1fac:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1fae:	687b      	ldr	r3, [r7, #4]
    1fb0:	2200      	movs	r2, #0
    1fb2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1fb4:	687b      	ldr	r3, [r7, #4]
    1fb6:	2200      	movs	r2, #0
    1fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1fba:	687b      	ldr	r3, [r7, #4]
    1fbc:	2200      	movs	r2, #0
    1fbe:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    1fc0:	46bd      	mov	sp, r7
    1fc2:	b002      	add	sp, #8
    1fc4:	bd80      	pop	{r7, pc}
    1fc6:	46c0      	nop			; (mov r8, r8)

00001fc8 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    1fc8:	b580      	push	{r7, lr}
    1fca:	b084      	sub	sp, #16
    1fcc:	af00      	add	r7, sp, #0
    1fce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1fd0:	687b      	ldr	r3, [r7, #4]
    1fd2:	681b      	ldr	r3, [r3, #0]
    1fd4:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	1c18      	adds	r0, r3, #0
    1fdc:	4b07      	ldr	r3, [pc, #28]	; (1ffc <tc_enable+0x34>)
    1fde:	4798      	blx	r3
    1fe0:	1c03      	adds	r3, r0, #0
    1fe2:	2b00      	cmp	r3, #0
    1fe4:	d1f8      	bne.n	1fd8 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1fe6:	68fb      	ldr	r3, [r7, #12]
    1fe8:	881b      	ldrh	r3, [r3, #0]
    1fea:	b29b      	uxth	r3, r3
    1fec:	2202      	movs	r2, #2
    1fee:	4313      	orrs	r3, r2
    1ff0:	b29a      	uxth	r2, r3
    1ff2:	68fb      	ldr	r3, [r7, #12]
    1ff4:	801a      	strh	r2, [r3, #0]
}
    1ff6:	46bd      	mov	sp, r7
    1ff8:	b004      	add	sp, #16
    1ffa:	bd80      	pop	{r7, pc}
    1ffc:	00001f15 	.word	0x00001f15

00002000 <tc_stop_counter>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_stop_counter(
		const struct tc_module *const module_inst)
{
    2000:	b580      	push	{r7, lr}
    2002:	b084      	sub	sp, #16
    2004:	af00      	add	r7, sp, #0
    2006:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2008:	687b      	ldr	r3, [r7, #4]
    200a:	681b      	ldr	r3, [r3, #0]
    200c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    200e:	46c0      	nop			; (mov r8, r8)
    2010:	687b      	ldr	r3, [r7, #4]
    2012:	1c18      	adds	r0, r3, #0
    2014:	4b05      	ldr	r3, [pc, #20]	; (202c <STACK_SIZE+0x2c>)
    2016:	4798      	blx	r3
    2018:	1c03      	adds	r3, r0, #0
    201a:	2b00      	cmp	r3, #0
    201c:	d1f8      	bne.n	2010 <tc_stop_counter+0x10>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(2);
    201e:	68fb      	ldr	r3, [r7, #12]
    2020:	2280      	movs	r2, #128	; 0x80
    2022:	715a      	strb	r2, [r3, #5]
}
    2024:	46bd      	mov	sp, r7
    2026:	b004      	add	sp, #16
    2028:	bd80      	pop	{r7, pc}
    202a:	46c0      	nop			; (mov r8, r8)
    202c:	00001f15 	.word	0x00001f15

00002030 <tc_start_counter>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_start_counter(
		const struct tc_module *const module_inst)
{
    2030:	b580      	push	{r7, lr}
    2032:	b084      	sub	sp, #16
    2034:	af00      	add	r7, sp, #0
    2036:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2038:	687b      	ldr	r3, [r7, #4]
    203a:	681b      	ldr	r3, [r3, #0]
    203c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	687b      	ldr	r3, [r7, #4]
    2042:	1c18      	adds	r0, r3, #0
    2044:	4b0a      	ldr	r3, [pc, #40]	; (2070 <tc_start_counter+0x40>)
    2046:	4798      	blx	r3
    2048:	1c03      	adds	r3, r0, #0
    204a:	2b00      	cmp	r3, #0
    204c:	d1f8      	bne.n	2040 <tc_start_counter+0x10>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    204e:	68fb      	ldr	r3, [r7, #12]
    2050:	2200      	movs	r2, #0
    2052:	711a      	strb	r2, [r3, #4]

	while (tc_is_syncing(module_inst)) {
    2054:	46c0      	nop			; (mov r8, r8)
    2056:	687b      	ldr	r3, [r7, #4]
    2058:	1c18      	adds	r0, r3, #0
    205a:	4b05      	ldr	r3, [pc, #20]	; (2070 <tc_start_counter+0x40>)
    205c:	4798      	blx	r3
    205e:	1c03      	adds	r3, r0, #0
    2060:	2b00      	cmp	r3, #0
    2062:	d1f8      	bne.n	2056 <tc_start_counter+0x26>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(1);
    2064:	68fb      	ldr	r3, [r7, #12]
    2066:	2240      	movs	r2, #64	; 0x40
    2068:	715a      	strb	r2, [r3, #5]
}
    206a:	46bd      	mov	sp, r7
    206c:	b004      	add	sp, #16
    206e:	bd80      	pop	{r7, pc}
    2070:	00001f15 	.word	0x00001f15

00002074 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    2074:	b580      	push	{r7, lr}
    2076:	b082      	sub	sp, #8
    2078:	af00      	add	r7, sp, #0
    207a:	6078      	str	r0, [r7, #4]
	static uint8_t tc_interrupt_vectors[TC_INST_NUM] =
		{
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    207c:	4a04      	ldr	r2, [pc, #16]	; (2090 <_tc_interrupt_get_interrupt_vector+0x1c>)
    207e:	687b      	ldr	r3, [r7, #4]
    2080:	18d3      	adds	r3, r2, r3
    2082:	781b      	ldrb	r3, [r3, #0]
    2084:	b2db      	uxtb	r3, r3
    2086:	b25b      	sxtb	r3, r3
}
    2088:	1c18      	adds	r0, r3, #0
    208a:	46bd      	mov	sp, r7
    208c:	b002      	add	sp, #8
    208e:	bd80      	pop	{r7, pc}
    2090:	20000000 	.word	0x20000000

00002094 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    2094:	b580      	push	{r7, lr}
    2096:	b082      	sub	sp, #8
    2098:	af00      	add	r7, sp, #0
    209a:	6078      	str	r0, [r7, #4]
    209c:	1c0a      	adds	r2, r1, #0
    209e:	1cfb      	adds	r3, r7, #3
    20a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    20a2:	687b      	ldr	r3, [r7, #4]
    20a4:	681b      	ldr	r3, [r3, #0]
    20a6:	1c18      	adds	r0, r3, #0
    20a8:	4b22      	ldr	r3, [pc, #136]	; (2134 <tc_enable_callback+0xa0>)
    20aa:	4798      	blx	r3
    20ac:	1c03      	adds	r3, r0, #0
    20ae:	1c18      	adds	r0, r3, #0
    20b0:	4b21      	ldr	r3, [pc, #132]	; (2138 <tc_enable_callback+0xa4>)
    20b2:	4798      	blx	r3
    20b4:	1c03      	adds	r3, r0, #0
    20b6:	1c18      	adds	r0, r3, #0
    20b8:	4b20      	ldr	r3, [pc, #128]	; (213c <tc_enable_callback+0xa8>)
    20ba:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    20bc:	1cfb      	adds	r3, r7, #3
    20be:	781b      	ldrb	r3, [r3, #0]
    20c0:	2b02      	cmp	r3, #2
    20c2:	d10b      	bne.n	20dc <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    20c4:	687b      	ldr	r3, [r7, #4]
    20c6:	7e5b      	ldrb	r3, [r3, #25]
    20c8:	2210      	movs	r2, #16
    20ca:	4313      	orrs	r3, r2
    20cc:	b2da      	uxtb	r2, r3
    20ce:	687b      	ldr	r3, [r7, #4]
    20d0:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    20d2:	687b      	ldr	r3, [r7, #4]
    20d4:	681b      	ldr	r3, [r3, #0]
    20d6:	2210      	movs	r2, #16
    20d8:	735a      	strb	r2, [r3, #13]
    20da:	e028      	b.n	212e <tc_enable_callback+0x9a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    20dc:	1cfb      	adds	r3, r7, #3
    20de:	781b      	ldrb	r3, [r3, #0]
    20e0:	2b03      	cmp	r3, #3
    20e2:	d10b      	bne.n	20fc <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	7e5b      	ldrb	r3, [r3, #25]
    20e8:	2220      	movs	r2, #32
    20ea:	4313      	orrs	r3, r2
    20ec:	b2da      	uxtb	r2, r3
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    20f2:	687b      	ldr	r3, [r7, #4]
    20f4:	681b      	ldr	r3, [r3, #0]
    20f6:	2220      	movs	r2, #32
    20f8:	735a      	strb	r2, [r3, #13]
    20fa:	e018      	b.n	212e <tc_enable_callback+0x9a>
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    20fc:	687b      	ldr	r3, [r7, #4]
    20fe:	7e5b      	ldrb	r3, [r3, #25]
    2100:	b2da      	uxtb	r2, r3
    2102:	1cfb      	adds	r3, r7, #3
    2104:	781b      	ldrb	r3, [r3, #0]
    2106:	2101      	movs	r1, #1
    2108:	1c08      	adds	r0, r1, #0
    210a:	4098      	lsls	r0, r3
    210c:	1c03      	adds	r3, r0, #0
    210e:	b2db      	uxtb	r3, r3
    2110:	4313      	orrs	r3, r2
    2112:	b2db      	uxtb	r3, r3
    2114:	b2da      	uxtb	r2, r3
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    211a:	687b      	ldr	r3, [r7, #4]
    211c:	681b      	ldr	r3, [r3, #0]
    211e:	1cfa      	adds	r2, r7, #3
    2120:	7812      	ldrb	r2, [r2, #0]
    2122:	2101      	movs	r1, #1
    2124:	1c08      	adds	r0, r1, #0
    2126:	4090      	lsls	r0, r2
    2128:	1c02      	adds	r2, r0, #0
    212a:	b2d2      	uxtb	r2, r2
    212c:	735a      	strb	r2, [r3, #13]
	}
}
    212e:	46bd      	mov	sp, r7
    2130:	b002      	add	sp, #8
    2132:	bd80      	pop	{r7, pc}
    2134:	000084a1 	.word	0x000084a1
    2138:	00002075 	.word	0x00002075
    213c:	00001e51 	.word	0x00001e51

00002140 <door_init>:
 */ 

#include "door.h"
#include <asf.h>

void door_init(void){
    2140:	b580      	push	{r7, lr}
    2142:	b082      	sub	sp, #8
    2144:	af00      	add	r7, sp, #0
	/*Set driving pins as outputs*/
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2146:	1d3b      	adds	r3, r7, #4
    2148:	1c18      	adds	r0, r3, #0
    214a:	4b0a      	ldr	r3, [pc, #40]	; (2174 <door_init+0x34>)
    214c:	4798      	blx	r3
	
	/* Set turret motor controller pins as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    214e:	1d3b      	adds	r3, r7, #4
    2150:	2201      	movs	r2, #1
    2152:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(DOOR_PIN, &pin_conf);
    2154:	1d3b      	adds	r3, r7, #4
    2156:	2037      	movs	r0, #55	; 0x37
    2158:	1c19      	adds	r1, r3, #0
    215a:	4b07      	ldr	r3, [pc, #28]	; (2178 <door_init+0x38>)
    215c:	4798      	blx	r3
	
	port_pin_set_output_level(DOOR_PIN, false);
    215e:	2037      	movs	r0, #55	; 0x37
    2160:	2100      	movs	r1, #0
    2162:	4b06      	ldr	r3, [pc, #24]	; (217c <door_init+0x3c>)
    2164:	4798      	blx	r3

	door_timer_configure();
    2166:	4b06      	ldr	r3, [pc, #24]	; (2180 <door_init+0x40>)
    2168:	4798      	blx	r3
	door_timer_configure_callbacks();
    216a:	4b06      	ldr	r3, [pc, #24]	; (2184 <door_init+0x44>)
    216c:	4798      	blx	r3
}
    216e:	46bd      	mov	sp, r7
    2170:	b002      	add	sp, #8
    2172:	bd80      	pop	{r7, pc}
    2174:	00001ea1 	.word	0x00001ea1
    2178:	00006769 	.word	0x00006769
    217c:	00001ec1 	.word	0x00001ec1
    2180:	000021c5 	.word	0x000021c5
    2184:	00002235 	.word	0x00002235

00002188 <door_timer_timeout>:

/* Callback function for door_open_timer */
void door_timer_timeout(struct tc_module *const module_inst)
{
    2188:	b580      	push	{r7, lr}
    218a:	b082      	sub	sp, #8
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
	/* Stop pushing button */
	port_pin_set_output_level(DOOR_PIN, false);
    2190:	2037      	movs	r0, #55	; 0x37
    2192:	2100      	movs	r1, #0
    2194:	4b04      	ldr	r3, [pc, #16]	; (21a8 <door_timer_timeout+0x20>)
    2196:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, true);
    2198:	203e      	movs	r0, #62	; 0x3e
    219a:	2101      	movs	r1, #1
    219c:	4b02      	ldr	r3, [pc, #8]	; (21a8 <door_timer_timeout+0x20>)
    219e:	4798      	blx	r3
}
    21a0:	46bd      	mov	sp, r7
    21a2:	b002      	add	sp, #8
    21a4:	bd80      	pop	{r7, pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	00001ec1 	.word	0x00001ec1

000021ac <door_timer_start>:

/* wrapper for tc_start_counter */
void door_timer_start(void){
    21ac:	b580      	push	{r7, lr}
    21ae:	af00      	add	r7, sp, #0
	tc_start_counter(&door_open_timer);
    21b0:	4b02      	ldr	r3, [pc, #8]	; (21bc <door_timer_start+0x10>)
    21b2:	1c18      	adds	r0, r3, #0
    21b4:	4b02      	ldr	r3, [pc, #8]	; (21c0 <door_timer_start+0x14>)
    21b6:	4798      	blx	r3
}
    21b8:	46bd      	mov	sp, r7
    21ba:	bd80      	pop	{r7, pc}
    21bc:	20000fd0 	.word	0x20000fd0
    21c0:	00002031 	.word	0x00002031

000021c4 <door_timer_configure>:


void door_timer_configure(void)
{
    21c4:	b580      	push	{r7, lr}
    21c6:	b08e      	sub	sp, #56	; 0x38
    21c8:	af00      	add	r7, sp, #0
	struct tc_config config_timer;
	tc_get_config_defaults(&config_timer);
    21ca:	1d3b      	adds	r3, r7, #4
    21cc:	1c18      	adds	r0, r3, #0
    21ce:	4b13      	ldr	r3, [pc, #76]	; (221c <door_timer_configure+0x58>)
    21d0:	4798      	blx	r3
	
	/* Timer will start once for each fire command, and complete 2 sec later */
	config_timer.oneshot				= true;
    21d2:	1d3b      	adds	r3, r7, #4
    21d4:	2201      	movs	r2, #1
    21d6:	735a      	strb	r2, [r3, #13]
	config_timer.counter_size			= TC_COUNTER_SIZE_8BIT;
    21d8:	1d3b      	adds	r3, r7, #4
    21da:	2204      	movs	r2, #4
    21dc:	709a      	strb	r2, [r3, #2]
	config_timer.clock_source			= GCLK_GENERATOR_4;
    21de:	1d3b      	adds	r3, r7, #4
    21e0:	2204      	movs	r2, #4
    21e2:	701a      	strb	r2, [r3, #0]
	config_timer.clock_prescaler		= TC_CLOCK_PRESCALER_DIV1024;
    21e4:	1d3b      	adds	r3, r7, #4
    21e6:	22e0      	movs	r2, #224	; 0xe0
    21e8:	00d2      	lsls	r2, r2, #3
    21ea:	809a      	strh	r2, [r3, #4]
	config_timer.counter_8_bit.period	= 122;	// 1 sec
    21ec:	1d3a      	adds	r2, r7, #4
    21ee:	2329      	movs	r3, #41	; 0x29
    21f0:	217a      	movs	r1, #122	; 0x7a
    21f2:	54d1      	strb	r1, [r2, r3]
	
	tc_init(&door_open_timer, TC4, &config_timer);
    21f4:	490a      	ldr	r1, [pc, #40]	; (2220 <door_timer_configure+0x5c>)
    21f6:	4a0b      	ldr	r2, [pc, #44]	; (2224 <door_timer_configure+0x60>)
    21f8:	1d3b      	adds	r3, r7, #4
    21fa:	1c08      	adds	r0, r1, #0
    21fc:	1c11      	adds	r1, r2, #0
    21fe:	1c1a      	adds	r2, r3, #0
    2200:	4b09      	ldr	r3, [pc, #36]	; (2228 <door_timer_configure+0x64>)
    2202:	4798      	blx	r3
	
	/* Start the timer */
	tc_enable(&door_open_timer);
    2204:	4b06      	ldr	r3, [pc, #24]	; (2220 <door_timer_configure+0x5c>)
    2206:	1c18      	adds	r0, r3, #0
    2208:	4b08      	ldr	r3, [pc, #32]	; (222c <door_timer_configure+0x68>)
    220a:	4798      	blx	r3
	tc_stop_counter(&door_open_timer);
    220c:	4b04      	ldr	r3, [pc, #16]	; (2220 <door_timer_configure+0x5c>)
    220e:	1c18      	adds	r0, r3, #0
    2210:	4b07      	ldr	r3, [pc, #28]	; (2230 <door_timer_configure+0x6c>)
    2212:	4798      	blx	r3
}
    2214:	46bd      	mov	sp, r7
    2216:	b00e      	add	sp, #56	; 0x38
    2218:	bd80      	pop	{r7, pc}
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	00001f41 	.word	0x00001f41
    2220:	20000fd0 	.word	0x20000fd0
    2224:	42003000 	.word	0x42003000
    2228:	000084ed 	.word	0x000084ed
    222c:	00001fc9 	.word	0x00001fc9
    2230:	00002001 	.word	0x00002001

00002234 <door_timer_configure_callbacks>:

void door_timer_configure_callbacks(void)
{
    2234:	b580      	push	{r7, lr}
    2236:	af00      	add	r7, sp, #0
	tc_register_callback(&door_open_timer, door_timer_timeout, TC_CALLBACK_OVERFLOW);
    2238:	4a06      	ldr	r2, [pc, #24]	; (2254 <door_timer_configure_callbacks+0x20>)
    223a:	4b07      	ldr	r3, [pc, #28]	; (2258 <door_timer_configure_callbacks+0x24>)
    223c:	1c10      	adds	r0, r2, #0
    223e:	1c19      	adds	r1, r3, #0
    2240:	2200      	movs	r2, #0
    2242:	4b06      	ldr	r3, [pc, #24]	; (225c <door_timer_configure_callbacks+0x28>)
    2244:	4798      	blx	r3
	tc_enable_callback(&door_open_timer, TC_CALLBACK_OVERFLOW);
    2246:	4b03      	ldr	r3, [pc, #12]	; (2254 <door_timer_configure_callbacks+0x20>)
    2248:	1c18      	adds	r0, r3, #0
    224a:	2100      	movs	r1, #0
    224c:	4b04      	ldr	r3, [pc, #16]	; (2260 <door_timer_configure_callbacks+0x2c>)
    224e:	4798      	blx	r3
}
    2250:	46bd      	mov	sp, r7
    2252:	bd80      	pop	{r7, pc}
    2254:	20000fd0 	.word	0x20000fd0
    2258:	00002189 	.word	0x00002189
    225c:	00008979 	.word	0x00008979
    2260:	00002095 	.word	0x00002095

00002264 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2264:	b580      	push	{r7, lr}
    2266:	b084      	sub	sp, #16
    2268:	af00      	add	r7, sp, #0
    226a:	1c02      	adds	r2, r0, #0
    226c:	1dfb      	adds	r3, r7, #7
    226e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2270:	1c3b      	adds	r3, r7, #0
    2272:	330f      	adds	r3, #15
    2274:	1dfa      	adds	r2, r7, #7
    2276:	7812      	ldrb	r2, [r2, #0]
    2278:	09d2      	lsrs	r2, r2, #7
    227a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    227c:	1c3b      	adds	r3, r7, #0
    227e:	330e      	adds	r3, #14
    2280:	1dfa      	adds	r2, r7, #7
    2282:	7812      	ldrb	r2, [r2, #0]
    2284:	0952      	lsrs	r2, r2, #5
    2286:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2288:	4b0d      	ldr	r3, [pc, #52]	; (22c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    228a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    228c:	1c3b      	adds	r3, r7, #0
    228e:	330f      	adds	r3, #15
    2290:	781b      	ldrb	r3, [r3, #0]
    2292:	2b00      	cmp	r3, #0
    2294:	d10e      	bne.n	22b4 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    2296:	1c3b      	adds	r3, r7, #0
    2298:	330f      	adds	r3, #15
    229a:	781b      	ldrb	r3, [r3, #0]
    229c:	009b      	lsls	r3, r3, #2
    229e:	2210      	movs	r2, #16
    22a0:	19d2      	adds	r2, r2, r7
    22a2:	18d3      	adds	r3, r2, r3
    22a4:	3b08      	subs	r3, #8
    22a6:	681a      	ldr	r2, [r3, #0]
    22a8:	1c3b      	adds	r3, r7, #0
    22aa:	330e      	adds	r3, #14
    22ac:	781b      	ldrb	r3, [r3, #0]
    22ae:	01db      	lsls	r3, r3, #7
    22b0:	18d3      	adds	r3, r2, r3
    22b2:	e000      	b.n	22b6 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    22b4:	2300      	movs	r3, #0
	}
}
    22b6:	1c18      	adds	r0, r3, #0
    22b8:	46bd      	mov	sp, r7
    22ba:	b004      	add	sp, #16
    22bc:	bd80      	pop	{r7, pc}
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	41004400 	.word	0x41004400

000022c4 <system_interrupt_enable_global>:
 * \brief Enables global interrupts
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    22c4:	b580      	push	{r7, lr}
    22c6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    22c8:	4b03      	ldr	r3, [pc, #12]	; (22d8 <system_interrupt_enable_global+0x14>)
    22ca:	2201      	movs	r2, #1
    22cc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    22ce:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    22d2:	b662      	cpsie	i
}
    22d4:	46bd      	mov	sp, r7
    22d6:	bd80      	pop	{r7, pc}
    22d8:	20000018 	.word	0x20000018

000022dc <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    22dc:	b580      	push	{r7, lr}
    22de:	b082      	sub	sp, #8
    22e0:	af00      	add	r7, sp, #0
    22e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    22e4:	687b      	ldr	r3, [r7, #4]
    22e6:	2200      	movs	r2, #0
    22e8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    22ea:	687b      	ldr	r3, [r7, #4]
    22ec:	2200      	movs	r2, #0
    22ee:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    22f0:	687b      	ldr	r3, [r7, #4]
    22f2:	2201      	movs	r2, #1
    22f4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    22f6:	687b      	ldr	r3, [r7, #4]
    22f8:	2201      	movs	r2, #1
    22fa:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    22fc:	687b      	ldr	r3, [r7, #4]
    22fe:	2200      	movs	r2, #0
    2300:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    2302:	687b      	ldr	r3, [r7, #4]
    2304:	2202      	movs	r2, #2
    2306:	72da      	strb	r2, [r3, #11]
}
    2308:	46bd      	mov	sp, r7
    230a:	b002      	add	sp, #8
    230c:	bd80      	pop	{r7, pc}
    230e:	46c0      	nop			; (mov r8, r8)

00002310 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2310:	b580      	push	{r7, lr}
    2312:	b082      	sub	sp, #8
    2314:	af00      	add	r7, sp, #0
    2316:	1c02      	adds	r2, r0, #0
    2318:	1dfb      	adds	r3, r7, #7
    231a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    231c:	1dfb      	adds	r3, r7, #7
    231e:	781b      	ldrb	r3, [r3, #0]
    2320:	1c18      	adds	r0, r3, #0
    2322:	4b03      	ldr	r3, [pc, #12]	; (2330 <port_get_group_from_gpio_pin+0x20>)
    2324:	4798      	blx	r3
    2326:	1c03      	adds	r3, r0, #0
}
    2328:	1c18      	adds	r0, r3, #0
    232a:	46bd      	mov	sp, r7
    232c:	b002      	add	sp, #8
    232e:	bd80      	pop	{r7, pc}
    2330:	00002265 	.word	0x00002265

00002334 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    2334:	b580      	push	{r7, lr}
    2336:	b082      	sub	sp, #8
    2338:	af00      	add	r7, sp, #0
    233a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    233c:	687b      	ldr	r3, [r7, #4]
    233e:	2200      	movs	r2, #0
    2340:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2342:	687b      	ldr	r3, [r7, #4]
    2344:	2201      	movs	r2, #1
    2346:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2348:	687b      	ldr	r3, [r7, #4]
    234a:	2200      	movs	r2, #0
    234c:	709a      	strb	r2, [r3, #2]
}
    234e:	46bd      	mov	sp, r7
    2350:	b002      	add	sp, #8
    2352:	bd80      	pop	{r7, pc}

00002354 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2354:	b580      	push	{r7, lr}
    2356:	b084      	sub	sp, #16
    2358:	af00      	add	r7, sp, #0
    235a:	1c0a      	adds	r2, r1, #0
    235c:	1dfb      	adds	r3, r7, #7
    235e:	1c01      	adds	r1, r0, #0
    2360:	7019      	strb	r1, [r3, #0]
    2362:	1dbb      	adds	r3, r7, #6
    2364:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2366:	1dfb      	adds	r3, r7, #7
    2368:	781b      	ldrb	r3, [r3, #0]
    236a:	1c18      	adds	r0, r3, #0
    236c:	4b0d      	ldr	r3, [pc, #52]	; (23a4 <port_pin_set_output_level+0x50>)
    236e:	4798      	blx	r3
    2370:	1c03      	adds	r3, r0, #0
    2372:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2374:	1dfb      	adds	r3, r7, #7
    2376:	781a      	ldrb	r2, [r3, #0]
    2378:	231f      	movs	r3, #31
    237a:	4013      	ands	r3, r2
    237c:	2201      	movs	r2, #1
    237e:	1c11      	adds	r1, r2, #0
    2380:	4099      	lsls	r1, r3
    2382:	1c0b      	adds	r3, r1, #0
    2384:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2386:	1dbb      	adds	r3, r7, #6
    2388:	781b      	ldrb	r3, [r3, #0]
    238a:	2b00      	cmp	r3, #0
    238c:	d003      	beq.n	2396 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    238e:	68fb      	ldr	r3, [r7, #12]
    2390:	68ba      	ldr	r2, [r7, #8]
    2392:	619a      	str	r2, [r3, #24]
    2394:	e002      	b.n	239c <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2396:	68fb      	ldr	r3, [r7, #12]
    2398:	68ba      	ldr	r2, [r7, #8]
    239a:	615a      	str	r2, [r3, #20]
	}
}
    239c:	46bd      	mov	sp, r7
    239e:	b004      	add	sp, #16
    23a0:	bd80      	pop	{r7, pc}
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	00002311 	.word	0x00002311

000023a8 <chip_isr>:
#include "asf.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    23a8:	b580      	push	{r7, lr}
    23aa:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    23ac:	4b04      	ldr	r3, [pc, #16]	; (23c0 <chip_isr+0x18>)
    23ae:	681b      	ldr	r3, [r3, #0]
    23b0:	2b00      	cmp	r3, #0
    23b2:	d002      	beq.n	23ba <chip_isr+0x12>
		gpfIsr();
    23b4:	4b02      	ldr	r3, [pc, #8]	; (23c0 <chip_isr+0x18>)
    23b6:	681b      	ldr	r3, [r3, #0]
    23b8:	4798      	blx	r3
	}
}
    23ba:	46bd      	mov	sp, r7
    23bc:	bd80      	pop	{r7, pc}
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	20000920 	.word	0x20000920

000023c4 <init_chip_pins>:

static void init_chip_pins(void)
{
    23c4:	b580      	push	{r7, lr}
    23c6:	b082      	sub	sp, #8
    23c8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	
	port_get_config_defaults(&pin_conf);
    23ca:	1d3b      	adds	r3, r7, #4
    23cc:	1c18      	adds	r0, r3, #0
    23ce:	4b0b      	ldr	r3, [pc, #44]	; (23fc <init_chip_pins+0x38>)
    23d0:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    23d2:	1d3b      	adds	r3, r7, #4
    23d4:	2201      	movs	r2, #1
    23d6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WIFI_M2M_RESET_PIN, &pin_conf);
    23d8:	1d3b      	adds	r3, r7, #4
    23da:	2026      	movs	r0, #38	; 0x26
    23dc:	1c19      	adds	r1, r3, #0
    23de:	4b08      	ldr	r3, [pc, #32]	; (2400 <init_chip_pins+0x3c>)
    23e0:	4798      	blx	r3
	port_pin_set_config(CONF_WIFI_M2M_CHIP_ENABLE_PIN, &pin_conf);
    23e2:	1d3b      	adds	r3, r7, #4
    23e4:	2025      	movs	r0, #37	; 0x25
    23e6:	1c19      	adds	r1, r3, #0
    23e8:	4b05      	ldr	r3, [pc, #20]	; (2400 <init_chip_pins+0x3c>)
    23ea:	4798      	blx	r3
	port_pin_set_config(CONF_WIFI_M2M_WAKE_PIN, &pin_conf);
    23ec:	1d3b      	adds	r3, r7, #4
    23ee:	2027      	movs	r0, #39	; 0x27
    23f0:	1c19      	adds	r1, r3, #0
    23f2:	4b03      	ldr	r3, [pc, #12]	; (2400 <init_chip_pins+0x3c>)
    23f4:	4798      	blx	r3
}
    23f6:	46bd      	mov	sp, r7
    23f8:	b002      	add	sp, #8
    23fa:	bd80      	pop	{r7, pc}
    23fc:	00002335 	.word	0x00002335
    2400:	00006769 	.word	0x00006769

00002404 <nm_bsp_init>:
*	@author	M.S.M
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bsp_init(void)
{
    2404:	b580      	push	{r7, lr}
    2406:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    2408:	4b06      	ldr	r3, [pc, #24]	; (2424 <nm_bsp_init+0x20>)
    240a:	2200      	movs	r2, #0
    240c:	601a      	str	r2, [r3, #0]

	init_chip_pins();
    240e:	4b06      	ldr	r3, [pc, #24]	; (2428 <nm_bsp_init+0x24>)
    2410:	4798      	blx	r3
	
	nm_bsp_reset();
    2412:	4b06      	ldr	r3, [pc, #24]	; (242c <nm_bsp_init+0x28>)
    2414:	4798      	blx	r3
	
	system_interrupt_enable_global();
    2416:	4b06      	ldr	r3, [pc, #24]	; (2430 <nm_bsp_init+0x2c>)
    2418:	4798      	blx	r3

	return M2M_SUCCESS;
    241a:	2300      	movs	r3, #0
    241c:	b25b      	sxtb	r3, r3
}
    241e:	1c18      	adds	r0, r3, #0
    2420:	46bd      	mov	sp, r7
    2422:	bd80      	pop	{r7, pc}
    2424:	20000920 	.word	0x20000920
    2428:	000023c5 	.word	0x000023c5
    242c:	00002435 	.word	0x00002435
    2430:	000022c5 	.word	0x000022c5

00002434 <nm_bsp_reset>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bsp_reset(void)
{
    2434:	b580      	push	{r7, lr}
    2436:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, false);
    2438:	2025      	movs	r0, #37	; 0x25
    243a:	2100      	movs	r1, #0
    243c:	4b0a      	ldr	r3, [pc, #40]	; (2468 <nm_bsp_reset+0x34>)
    243e:	4798      	blx	r3
	port_pin_set_output_level(CONF_WIFI_M2M_RESET_PIN, false);
    2440:	2026      	movs	r0, #38	; 0x26
    2442:	2100      	movs	r1, #0
    2444:	4b08      	ldr	r3, [pc, #32]	; (2468 <nm_bsp_reset+0x34>)
    2446:	4798      	blx	r3
	//nm_bsp_sleep(1);
	port_pin_set_output_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, true);
    2448:	2025      	movs	r0, #37	; 0x25
    244a:	2101      	movs	r1, #1
    244c:	4b06      	ldr	r3, [pc, #24]	; (2468 <nm_bsp_reset+0x34>)
    244e:	4798      	blx	r3
	nm_bsp_sleep(1);
    2450:	2001      	movs	r0, #1
    2452:	4b06      	ldr	r3, [pc, #24]	; (246c <nm_bsp_reset+0x38>)
    2454:	4798      	blx	r3
	port_pin_set_output_level(CONF_WIFI_M2M_RESET_PIN, true);
    2456:	2026      	movs	r0, #38	; 0x26
    2458:	2101      	movs	r1, #1
    245a:	4b03      	ldr	r3, [pc, #12]	; (2468 <nm_bsp_reset+0x34>)
    245c:	4798      	blx	r3
	
	return M2M_SUCCESS;
    245e:	2300      	movs	r3, #0
    2460:	b25b      	sxtb	r3, r3
}
    2462:	1c18      	adds	r0, r3, #0
    2464:	46bd      	mov	sp, r7
    2466:	bd80      	pop	{r7, pc}
    2468:	00002355 	.word	0x00002355
    246c:	00002471 	.word	0x00002471

00002470 <nm_bsp_sleep>:
*	@author	M.S.M
*	@date	28 OCT 2013
*	@version	1.0
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    2470:	b580      	push	{r7, lr}
    2472:	b082      	sub	sp, #8
    2474:	af00      	add	r7, sp, #0
    2476:	6078      	str	r0, [r7, #4]
	while(u32TimeMsec--) {
    2478:	e002      	b.n	2480 <nm_bsp_sleep+0x10>
		delay_ms(1);
    247a:	2001      	movs	r0, #1
    247c:	4b04      	ldr	r3, [pc, #16]	; (2490 <nm_bsp_sleep+0x20>)
    247e:	4798      	blx	r3
*	@date	28 OCT 2013
*	@version	1.0
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
    2480:	687b      	ldr	r3, [r7, #4]
    2482:	1e5a      	subs	r2, r3, #1
    2484:	607a      	str	r2, [r7, #4]
    2486:	2b00      	cmp	r3, #0
    2488:	d1f7      	bne.n	247a <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
    248a:	46bd      	mov	sp, r7
    248c:	b002      	add	sp, #8
    248e:	bd80      	pop	{r7, pc}
    2490:	00005f89 	.word	0x00005f89

00002494 <nm_bsp_register_isr>:
*	@date	28 OCT 2013
*	@sa		tpfNmBspIsr
*	@version	1.0
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    2494:	b580      	push	{r7, lr}
    2496:	b086      	sub	sp, #24
    2498:	af00      	add	r7, sp, #0
    249a:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;
		
	gpfIsr = pfIsr;
    249c:	4b15      	ldr	r3, [pc, #84]	; (24f4 <nm_bsp_register_isr+0x60>)
    249e:	687a      	ldr	r2, [r7, #4]
    24a0:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    24a2:	1c3b      	adds	r3, r7, #0
    24a4:	330c      	adds	r3, #12
    24a6:	1c18      	adds	r0, r3, #0
    24a8:	4b13      	ldr	r3, [pc, #76]	; (24f8 <nm_bsp_register_isr+0x64>)
    24aa:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WIFI_M2M_INT_PIN;
    24ac:	1c3b      	adds	r3, r7, #0
    24ae:	330c      	adds	r3, #12
    24b0:	2224      	movs	r2, #36	; 0x24
    24b2:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WIFI_M2M_INT_MUX;
    24b4:	1c3b      	adds	r3, r7, #0
    24b6:	330c      	adds	r3, #12
    24b8:	2200      	movs	r2, #0
    24ba:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    24bc:	1c3b      	adds	r3, r7, #0
    24be:	330c      	adds	r3, #12
    24c0:	2201      	movs	r2, #1
    24c2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    24c4:	1c3b      	adds	r3, r7, #0
    24c6:	330c      	adds	r3, #12
    24c8:	2202      	movs	r2, #2
    24ca:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WIFI_M2M_INT_EIC, &config_extint_chan);
    24cc:	1c3b      	adds	r3, r7, #0
    24ce:	330c      	adds	r3, #12
    24d0:	2004      	movs	r0, #4
    24d2:	1c19      	adds	r1, r3, #0
    24d4:	4b09      	ldr	r3, [pc, #36]	; (24fc <nm_bsp_register_isr+0x68>)
    24d6:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WIFI_M2M_INT_EIC,
    24d8:	4b09      	ldr	r3, [pc, #36]	; (2500 <nm_bsp_register_isr+0x6c>)
    24da:	1c18      	adds	r0, r3, #0
    24dc:	2104      	movs	r1, #4
    24de:	2200      	movs	r2, #0
    24e0:	4b08      	ldr	r3, [pc, #32]	; (2504 <nm_bsp_register_isr+0x70>)
    24e2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WIFI_M2M_INT_EIC,
    24e4:	2004      	movs	r0, #4
    24e6:	2100      	movs	r1, #0
    24e8:	4b07      	ldr	r3, [pc, #28]	; (2508 <nm_bsp_register_isr+0x74>)
    24ea:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    24ec:	46bd      	mov	sp, r7
    24ee:	b006      	add	sp, #24
    24f0:	bd80      	pop	{r7, pc}
    24f2:	46c0      	nop			; (mov r8, r8)
    24f4:	20000920 	.word	0x20000920
    24f8:	000022dd 	.word	0x000022dd
    24fc:	0000641d 	.word	0x0000641d
    2500:	000023a9 	.word	0x000023a9
    2504:	000065e9 	.word	0x000065e9
    2508:	00006645 	.word	0x00006645

0000250c <nm_bsp_interrupt_ctrl>:
*	@author	M.S.M
*	@date	28 OCT 2013
*	@version	1.0
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    250c:	b580      	push	{r7, lr}
    250e:	b082      	sub	sp, #8
    2510:	af00      	add	r7, sp, #0
    2512:	1c02      	adds	r2, r0, #0
    2514:	1dfb      	adds	r3, r7, #7
    2516:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    2518:	1dfb      	adds	r3, r7, #7
    251a:	781b      	ldrb	r3, [r3, #0]
    251c:	2b00      	cmp	r3, #0
    251e:	d004      	beq.n	252a <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WIFI_M2M_INT_EIC,
    2520:	2004      	movs	r0, #4
    2522:	2100      	movs	r1, #0
    2524:	4b04      	ldr	r3, [pc, #16]	; (2538 <nm_bsp_interrupt_ctrl+0x2c>)
    2526:	4798      	blx	r3
    2528:	e003      	b.n	2532 <nm_bsp_interrupt_ctrl+0x26>
				EXTINT_CALLBACK_TYPE_DETECT);
	}
	else {
		extint_chan_disable_callback(CONF_WIFI_M2M_INT_EIC,
    252a:	2004      	movs	r0, #4
    252c:	2100      	movs	r1, #0
    252e:	4b03      	ldr	r3, [pc, #12]	; (253c <nm_bsp_interrupt_ctrl+0x30>)
    2530:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    2532:	46bd      	mov	sp, r7
    2534:	b002      	add	sp, #8
    2536:	bd80      	pop	{r7, pc}
    2538:	00006645 	.word	0x00006645
    253c:	0000668d 	.word	0x0000668d

00002540 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2540:	b580      	push	{r7, lr}
    2542:	b084      	sub	sp, #16
    2544:	af00      	add	r7, sp, #0
    2546:	1c02      	adds	r2, r0, #0
    2548:	1dfb      	adds	r3, r7, #7
    254a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    254c:	1c3b      	adds	r3, r7, #0
    254e:	330f      	adds	r3, #15
    2550:	1dfa      	adds	r2, r7, #7
    2552:	7812      	ldrb	r2, [r2, #0]
    2554:	09d2      	lsrs	r2, r2, #7
    2556:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2558:	1c3b      	adds	r3, r7, #0
    255a:	330e      	adds	r3, #14
    255c:	1dfa      	adds	r2, r7, #7
    255e:	7812      	ldrb	r2, [r2, #0]
    2560:	0952      	lsrs	r2, r2, #5
    2562:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2564:	4b0d      	ldr	r3, [pc, #52]	; (259c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2566:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2568:	1c3b      	adds	r3, r7, #0
    256a:	330f      	adds	r3, #15
    256c:	781b      	ldrb	r3, [r3, #0]
    256e:	2b00      	cmp	r3, #0
    2570:	d10e      	bne.n	2590 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    2572:	1c3b      	adds	r3, r7, #0
    2574:	330f      	adds	r3, #15
    2576:	781b      	ldrb	r3, [r3, #0]
    2578:	009b      	lsls	r3, r3, #2
    257a:	2210      	movs	r2, #16
    257c:	19d2      	adds	r2, r2, r7
    257e:	18d3      	adds	r3, r2, r3
    2580:	3b08      	subs	r3, #8
    2582:	681a      	ldr	r2, [r3, #0]
    2584:	1c3b      	adds	r3, r7, #0
    2586:	330e      	adds	r3, #14
    2588:	781b      	ldrb	r3, [r3, #0]
    258a:	01db      	lsls	r3, r3, #7
    258c:	18d3      	adds	r3, r2, r3
    258e:	e000      	b.n	2592 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    2590:	2300      	movs	r3, #0
	}
}
    2592:	1c18      	adds	r0, r3, #0
    2594:	46bd      	mov	sp, r7
    2596:	b004      	add	sp, #16
    2598:	bd80      	pop	{r7, pc}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	41004400 	.word	0x41004400

000025a0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    25a0:	b580      	push	{r7, lr}
    25a2:	b082      	sub	sp, #8
    25a4:	af00      	add	r7, sp, #0
    25a6:	1c02      	adds	r2, r0, #0
    25a8:	1dfb      	adds	r3, r7, #7
    25aa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    25ac:	1dfb      	adds	r3, r7, #7
    25ae:	781b      	ldrb	r3, [r3, #0]
    25b0:	1c18      	adds	r0, r3, #0
    25b2:	4b03      	ldr	r3, [pc, #12]	; (25c0 <port_get_group_from_gpio_pin+0x20>)
    25b4:	4798      	blx	r3
    25b6:	1c03      	adds	r3, r0, #0
}
    25b8:	1c18      	adds	r0, r3, #0
    25ba:	46bd      	mov	sp, r7
    25bc:	b002      	add	sp, #8
    25be:	bd80      	pop	{r7, pc}
    25c0:	00002541 	.word	0x00002541

000025c4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    25c4:	b580      	push	{r7, lr}
    25c6:	b082      	sub	sp, #8
    25c8:	af00      	add	r7, sp, #0
    25ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    25cc:	687b      	ldr	r3, [r7, #4]
    25ce:	2200      	movs	r2, #0
    25d0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    25d2:	687b      	ldr	r3, [r7, #4]
    25d4:	2201      	movs	r2, #1
    25d6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    25d8:	687b      	ldr	r3, [r7, #4]
    25da:	2200      	movs	r2, #0
    25dc:	709a      	strb	r2, [r3, #2]
}
    25de:	46bd      	mov	sp, r7
    25e0:	b002      	add	sp, #8
    25e2:	bd80      	pop	{r7, pc}

000025e4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    25e4:	b580      	push	{r7, lr}
    25e6:	b084      	sub	sp, #16
    25e8:	af00      	add	r7, sp, #0
    25ea:	1c0a      	adds	r2, r1, #0
    25ec:	1dfb      	adds	r3, r7, #7
    25ee:	1c01      	adds	r1, r0, #0
    25f0:	7019      	strb	r1, [r3, #0]
    25f2:	1dbb      	adds	r3, r7, #6
    25f4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    25f6:	1dfb      	adds	r3, r7, #7
    25f8:	781b      	ldrb	r3, [r3, #0]
    25fa:	1c18      	adds	r0, r3, #0
    25fc:	4b0d      	ldr	r3, [pc, #52]	; (2634 <port_pin_set_output_level+0x50>)
    25fe:	4798      	blx	r3
    2600:	1c03      	adds	r3, r0, #0
    2602:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2604:	1dfb      	adds	r3, r7, #7
    2606:	781a      	ldrb	r2, [r3, #0]
    2608:	231f      	movs	r3, #31
    260a:	4013      	ands	r3, r2
    260c:	2201      	movs	r2, #1
    260e:	1c11      	adds	r1, r2, #0
    2610:	4099      	lsls	r1, r3
    2612:	1c0b      	adds	r3, r1, #0
    2614:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2616:	1dbb      	adds	r3, r7, #6
    2618:	781b      	ldrb	r3, [r3, #0]
    261a:	2b00      	cmp	r3, #0
    261c:	d003      	beq.n	2626 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    261e:	68fb      	ldr	r3, [r7, #12]
    2620:	68ba      	ldr	r2, [r7, #8]
    2622:	619a      	str	r2, [r3, #24]
    2624:	e002      	b.n	262c <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2626:	68fb      	ldr	r3, [r7, #12]
    2628:	68ba      	ldr	r2, [r7, #8]
    262a:	615a      	str	r2, [r3, #20]
	}
}
    262c:	46bd      	mov	sp, r7
    262e:	b004      	add	sp, #16
    2630:	bd80      	pop	{r7, pc}
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	000025a1 	.word	0x000025a1

00002638 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    2638:	b580      	push	{r7, lr}
    263a:	b084      	sub	sp, #16
    263c:	af00      	add	r7, sp, #0
    263e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2640:	687b      	ldr	r3, [r7, #4]
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2646:	68fb      	ldr	r3, [r7, #12]
    2648:	69db      	ldr	r3, [r3, #28]
    264a:	1e5a      	subs	r2, r3, #1
    264c:	4193      	sbcs	r3, r2
    264e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2650:	1c18      	adds	r0, r3, #0
    2652:	46bd      	mov	sp, r7
    2654:	b004      	add	sp, #16
    2656:	bd80      	pop	{r7, pc}

00002658 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2658:	b580      	push	{r7, lr}
    265a:	b082      	sub	sp, #8
    265c:	af00      	add	r7, sp, #0
    265e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2660:	687b      	ldr	r3, [r7, #4]
    2662:	2201      	movs	r2, #1
    2664:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2666:	687b      	ldr	r3, [r7, #4]
    2668:	2200      	movs	r2, #0
    266a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    266c:	687b      	ldr	r3, [r7, #4]
    266e:	2200      	movs	r2, #0
    2670:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    2672:	687b      	ldr	r3, [r7, #4]
    2674:	22c0      	movs	r2, #192	; 0xc0
    2676:	0392      	lsls	r2, r2, #14
    2678:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    267a:	687b      	ldr	r3, [r7, #4]
    267c:	2200      	movs	r2, #0
    267e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    2680:	687b      	ldr	r3, [r7, #4]
    2682:	2200      	movs	r2, #0
    2684:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    2686:	687b      	ldr	r3, [r7, #4]
    2688:	2201      	movs	r2, #1
    268a:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    268c:	687b      	ldr	r3, [r7, #4]
    268e:	2201      	movs	r2, #1
    2690:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    2692:	687b      	ldr	r3, [r7, #4]
    2694:	2200      	movs	r2, #0
    2696:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2698:	687a      	ldr	r2, [r7, #4]
    269a:	2324      	movs	r3, #36	; 0x24
    269c:	2100      	movs	r1, #0
    269e:	54d1      	strb	r1, [r2, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    26a0:	687b      	ldr	r3, [r7, #4]
    26a2:	3318      	adds	r3, #24
    26a4:	1c18      	adds	r0, r3, #0
    26a6:	2100      	movs	r1, #0
    26a8:	220c      	movs	r2, #12
    26aa:	4b0a      	ldr	r3, [pc, #40]	; (26d4 <spi_get_config_defaults+0x7c>)
    26ac:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    26ae:	687b      	ldr	r3, [r7, #4]
    26b0:	4a09      	ldr	r2, [pc, #36]	; (26d8 <spi_get_config_defaults+0x80>)
    26b2:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    26b4:	687b      	ldr	r3, [r7, #4]
    26b6:	2200      	movs	r2, #0
    26b8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    26ba:	687b      	ldr	r3, [r7, #4]
    26bc:	2200      	movs	r2, #0
    26be:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    26c0:	687b      	ldr	r3, [r7, #4]
    26c2:	2200      	movs	r2, #0
    26c4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    26c6:	687b      	ldr	r3, [r7, #4]
    26c8:	2200      	movs	r2, #0
    26ca:	635a      	str	r2, [r3, #52]	; 0x34

};
    26cc:	46bd      	mov	sp, r7
    26ce:	b002      	add	sp, #8
    26d0:	bd80      	pop	{r7, pc}
    26d2:	46c0      	nop			; (mov r8, r8)
    26d4:	0000b087 	.word	0x0000b087
    26d8:	000186a0 	.word	0x000186a0

000026dc <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    26dc:	b580      	push	{r7, lr}
    26de:	b082      	sub	sp, #8
    26e0:	af00      	add	r7, sp, #0
    26e2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	220a      	movs	r2, #10
    26e8:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    26ea:	687b      	ldr	r3, [r7, #4]
    26ec:	2200      	movs	r2, #0
    26ee:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	2200      	movs	r2, #0
    26f4:	709a      	strb	r2, [r3, #2]
}
    26f6:	46bd      	mov	sp, r7
    26f8:	b002      	add	sp, #8
    26fa:	bd80      	pop	{r7, pc}

000026fc <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
    26fc:	b580      	push	{r7, lr}
    26fe:	b084      	sub	sp, #16
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
    2704:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2706:	683b      	ldr	r3, [r7, #0]
    2708:	781a      	ldrb	r2, [r3, #0]
    270a:	687b      	ldr	r3, [r7, #4]
    270c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    270e:	683b      	ldr	r3, [r7, #0]
    2710:	785a      	ldrb	r2, [r3, #1]
    2712:	687b      	ldr	r3, [r7, #4]
    2714:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    2716:	683b      	ldr	r3, [r7, #0]
    2718:	789a      	ldrb	r2, [r3, #2]
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    271e:	1c3b      	adds	r3, r7, #0
    2720:	330c      	adds	r3, #12
    2722:	1c18      	adds	r0, r3, #0
    2724:	4b0b      	ldr	r3, [pc, #44]	; (2754 <spi_attach_slave+0x58>)
    2726:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2728:	1c3b      	adds	r3, r7, #0
    272a:	330c      	adds	r3, #12
    272c:	2201      	movs	r2, #1
    272e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2730:	687b      	ldr	r3, [r7, #4]
    2732:	781a      	ldrb	r2, [r3, #0]
    2734:	1c3b      	adds	r3, r7, #0
    2736:	330c      	adds	r3, #12
    2738:	1c10      	adds	r0, r2, #0
    273a:	1c19      	adds	r1, r3, #0
    273c:	4b06      	ldr	r3, [pc, #24]	; (2758 <spi_attach_slave+0x5c>)
    273e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2740:	687b      	ldr	r3, [r7, #4]
    2742:	781b      	ldrb	r3, [r3, #0]
    2744:	1c18      	adds	r0, r3, #0
    2746:	2101      	movs	r1, #1
    2748:	4b04      	ldr	r3, [pc, #16]	; (275c <spi_attach_slave+0x60>)
    274a:	4798      	blx	r3
}
    274c:	46bd      	mov	sp, r7
    274e:	b004      	add	sp, #16
    2750:	bd80      	pop	{r7, pc}
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	000025c5 	.word	0x000025c5
    2758:	00006769 	.word	0x00006769
    275c:	000025e5 	.word	0x000025e5

00002760 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2760:	b580      	push	{r7, lr}
    2762:	b084      	sub	sp, #16
    2764:	af00      	add	r7, sp, #0
    2766:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2768:	687b      	ldr	r3, [r7, #4]
    276a:	681b      	ldr	r3, [r3, #0]
    276c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    276e:	46c0      	nop			; (mov r8, r8)
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	1c18      	adds	r0, r3, #0
    2774:	4b06      	ldr	r3, [pc, #24]	; (2790 <spi_enable+0x30>)
    2776:	4798      	blx	r3
    2778:	1c03      	adds	r3, r0, #0
    277a:	2b00      	cmp	r3, #0
    277c:	d1f8      	bne.n	2770 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    277e:	68fb      	ldr	r3, [r7, #12]
    2780:	681b      	ldr	r3, [r3, #0]
    2782:	2202      	movs	r2, #2
    2784:	431a      	orrs	r2, r3
    2786:	68fb      	ldr	r3, [r7, #12]
    2788:	601a      	str	r2, [r3, #0]
}
    278a:	46bd      	mov	sp, r7
    278c:	b004      	add	sp, #16
    278e:	bd80      	pop	{r7, pc}
    2790:	00002639 	.word	0x00002639

00002794 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    2794:	b580      	push	{r7, lr}
    2796:	b084      	sub	sp, #16
    2798:	af00      	add	r7, sp, #0
    279a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    279c:	687b      	ldr	r3, [r7, #4]
    279e:	681b      	ldr	r3, [r3, #0]
    27a0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    27a2:	68fb      	ldr	r3, [r7, #12]
    27a4:	699b      	ldr	r3, [r3, #24]
    27a6:	b2db      	uxtb	r3, r3
    27a8:	1c1a      	adds	r2, r3, #0
    27aa:	2302      	movs	r3, #2
    27ac:	4013      	ands	r3, r2
    27ae:	1e5a      	subs	r2, r3, #1
    27b0:	4193      	sbcs	r3, r2
    27b2:	b2db      	uxtb	r3, r3
}
    27b4:	1c18      	adds	r0, r3, #0
    27b6:	46bd      	mov	sp, r7
    27b8:	b004      	add	sp, #16
    27ba:	bd80      	pop	{r7, pc}

000027bc <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    27bc:	b580      	push	{r7, lr}
    27be:	b084      	sub	sp, #16
    27c0:	af00      	add	r7, sp, #0
    27c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	681b      	ldr	r3, [r3, #0]
    27c8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    27ca:	68fb      	ldr	r3, [r7, #12]
    27cc:	699b      	ldr	r3, [r3, #24]
    27ce:	b2db      	uxtb	r3, r3
    27d0:	1c1a      	adds	r2, r3, #0
    27d2:	2301      	movs	r3, #1
    27d4:	4013      	ands	r3, r2
    27d6:	1e5a      	subs	r2, r3, #1
    27d8:	4193      	sbcs	r3, r2
    27da:	b2db      	uxtb	r3, r3
}
    27dc:	1c18      	adds	r0, r3, #0
    27de:	46bd      	mov	sp, r7
    27e0:	b004      	add	sp, #16
    27e2:	bd80      	pop	{r7, pc}

000027e4 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    27e4:	b580      	push	{r7, lr}
    27e6:	b084      	sub	sp, #16
    27e8:	af00      	add	r7, sp, #0
    27ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    27ec:	687b      	ldr	r3, [r7, #4]
    27ee:	681b      	ldr	r3, [r3, #0]
    27f0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    27f2:	68fb      	ldr	r3, [r7, #12]
    27f4:	699b      	ldr	r3, [r3, #24]
    27f6:	b2db      	uxtb	r3, r3
    27f8:	1c1a      	adds	r2, r3, #0
    27fa:	2304      	movs	r3, #4
    27fc:	4013      	ands	r3, r2
    27fe:	1e5a      	subs	r2, r3, #1
    2800:	4193      	sbcs	r3, r2
    2802:	b2db      	uxtb	r3, r3
}
    2804:	1c18      	adds	r0, r3, #0
    2806:	46bd      	mov	sp, r7
    2808:	b004      	add	sp, #16
    280a:	bd80      	pop	{r7, pc}

0000280c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    280c:	b580      	push	{r7, lr}
    280e:	b084      	sub	sp, #16
    2810:	af00      	add	r7, sp, #0
    2812:	6078      	str	r0, [r7, #4]
    2814:	1c0a      	adds	r2, r1, #0
    2816:	1cbb      	adds	r3, r7, #2
    2818:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    281a:	687b      	ldr	r3, [r7, #4]
    281c:	681b      	ldr	r3, [r3, #0]
    281e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	1c18      	adds	r0, r3, #0
    2824:	4b0a      	ldr	r3, [pc, #40]	; (2850 <spi_write+0x44>)
    2826:	4798      	blx	r3
    2828:	1c03      	adds	r3, r0, #0
    282a:	2201      	movs	r2, #1
    282c:	4053      	eors	r3, r2
    282e:	b2db      	uxtb	r3, r3
    2830:	2b00      	cmp	r3, #0
    2832:	d001      	beq.n	2838 <spi_write+0x2c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    2834:	2305      	movs	r3, #5
    2836:	e006      	b.n	2846 <spi_write+0x3a>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2838:	1cbb      	adds	r3, r7, #2
    283a:	881b      	ldrh	r3, [r3, #0]
    283c:	05db      	lsls	r3, r3, #23
    283e:	0dda      	lsrs	r2, r3, #23
    2840:	68fb      	ldr	r3, [r7, #12]
    2842:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    2844:	2300      	movs	r3, #0
}
    2846:	1c18      	adds	r0, r3, #0
    2848:	46bd      	mov	sp, r7
    284a:	b004      	add	sp, #16
    284c:	bd80      	pop	{r7, pc}
    284e:	46c0      	nop			; (mov r8, r8)
    2850:	000027bd 	.word	0x000027bd

00002854 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    2854:	b580      	push	{r7, lr}
    2856:	b084      	sub	sp, #16
    2858:	af00      	add	r7, sp, #0
    285a:	6078      	str	r0, [r7, #4]
    285c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    285e:	687b      	ldr	r3, [r7, #4]
    2860:	681b      	ldr	r3, [r3, #0]
    2862:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2864:	687b      	ldr	r3, [r7, #4]
    2866:	1c18      	adds	r0, r3, #0
    2868:	4b1e      	ldr	r3, [pc, #120]	; (28e4 <spi_read+0x90>)
    286a:	4798      	blx	r3
    286c:	1c03      	adds	r3, r0, #0
    286e:	2201      	movs	r2, #1
    2870:	4053      	eors	r3, r2
    2872:	b2db      	uxtb	r3, r3
    2874:	2b00      	cmp	r3, #0
    2876:	d001      	beq.n	287c <spi_read+0x28>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    2878:	2310      	movs	r3, #16
    287a:	e02e      	b.n	28da <spi_read+0x86>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    287c:	1c3b      	adds	r3, r7, #0
    287e:	330f      	adds	r3, #15
    2880:	2200      	movs	r2, #0
    2882:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2884:	68bb      	ldr	r3, [r7, #8]
    2886:	699b      	ldr	r3, [r3, #24]
    2888:	0c1b      	lsrs	r3, r3, #16
    288a:	b29b      	uxth	r3, r3
    288c:	1c1a      	adds	r2, r3, #0
    288e:	2304      	movs	r3, #4
    2890:	4013      	ands	r3, r2
    2892:	d00c      	beq.n	28ae <spi_read+0x5a>
		retval = STATUS_ERR_OVERFLOW;
    2894:	1c3b      	adds	r3, r7, #0
    2896:	330f      	adds	r3, #15
    2898:	221e      	movs	r2, #30
    289a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    289c:	68bb      	ldr	r3, [r7, #8]
    289e:	699b      	ldr	r3, [r3, #24]
    28a0:	0c1b      	lsrs	r3, r3, #16
    28a2:	b29b      	uxth	r3, r3
    28a4:	2204      	movs	r2, #4
    28a6:	4313      	orrs	r3, r2
    28a8:	b29a      	uxth	r2, r3
    28aa:	68bb      	ldr	r3, [r7, #8]
    28ac:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    28ae:	687b      	ldr	r3, [r7, #4]
    28b0:	799b      	ldrb	r3, [r3, #6]
    28b2:	2b01      	cmp	r3, #1
    28b4:	d108      	bne.n	28c8 <spi_read+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    28b6:	68bb      	ldr	r3, [r7, #8]
    28b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    28ba:	b29b      	uxth	r3, r3
    28bc:	05db      	lsls	r3, r3, #23
    28be:	0ddb      	lsrs	r3, r3, #23
    28c0:	b29a      	uxth	r2, r3
    28c2:	683b      	ldr	r3, [r7, #0]
    28c4:	801a      	strh	r2, [r3, #0]
    28c6:	e005      	b.n	28d4 <spi_read+0x80>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    28c8:	68bb      	ldr	r3, [r7, #8]
    28ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    28cc:	b2db      	uxtb	r3, r3
    28ce:	1c1a      	adds	r2, r3, #0
    28d0:	683b      	ldr	r3, [r7, #0]
    28d2:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    28d4:	1c3b      	adds	r3, r7, #0
    28d6:	330f      	adds	r3, #15
    28d8:	781b      	ldrb	r3, [r3, #0]
}
    28da:	1c18      	adds	r0, r3, #0
    28dc:	46bd      	mov	sp, r7
    28de:	b004      	add	sp, #16
    28e0:	bd80      	pop	{r7, pc}
    28e2:	46c0      	nop			; (mov r8, r8)
    28e4:	000027e5 	.word	0x000027e5

000028e8 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    28e8:	b580      	push	{r7, lr}
    28ea:	b086      	sub	sp, #24
    28ec:	af00      	add	r7, sp, #0
    28ee:	60f8      	str	r0, [r7, #12]
    28f0:	60b9      	str	r1, [r7, #8]
    28f2:	1dbb      	adds	r3, r7, #6
    28f4:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    28f6:	1c3b      	adds	r3, r7, #0
    28f8:	3313      	adds	r3, #19
    28fa:	2200      	movs	r2, #0
    28fc:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    28fe:	1c3b      	adds	r3, r7, #0
    2900:	3317      	adds	r3, #23
    2902:	2200      	movs	r2, #0
    2904:	701a      	strb	r2, [r3, #0]
    2906:	1c3b      	adds	r3, r7, #0
    2908:	3316      	adds	r3, #22
    290a:	2200      	movs	r2, #0
    290c:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    290e:	1c3b      	adds	r3, r7, #0
    2910:	3314      	adds	r3, #20
    2912:	2200      	movs	r2, #0
    2914:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    2916:	1c3b      	adds	r3, r7, #0
    2918:	3310      	adds	r3, #16
    291a:	2200      	movs	r2, #0
    291c:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
    291e:	68fb      	ldr	r3, [r7, #12]
    2920:	2b00      	cmp	r3, #0
    2922:	d107      	bne.n	2934 <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
    2924:	1c3b      	adds	r3, r7, #0
    2926:	3313      	adds	r3, #19
    2928:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    292a:	1c3b      	adds	r3, r7, #0
    292c:	3317      	adds	r3, #23
    292e:	2201      	movs	r2, #1
    2930:	701a      	strb	r2, [r3, #0]
    2932:	e00c      	b.n	294e <spi_rw+0x66>
	}
	else if(!pu8Miso) {
    2934:	68bb      	ldr	r3, [r7, #8]
    2936:	2b00      	cmp	r3, #0
    2938:	d107      	bne.n	294a <spi_rw+0x62>
		pu8Miso = &u8Dummy;
    293a:	1c3b      	adds	r3, r7, #0
    293c:	3313      	adds	r3, #19
    293e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    2940:	1c3b      	adds	r3, r7, #0
    2942:	3316      	adds	r3, #22
    2944:	2201      	movs	r2, #1
    2946:	701a      	strb	r2, [r3, #0]
    2948:	e001      	b.n	294e <spi_rw+0x66>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    294a:	23fa      	movs	r3, #250	; 0xfa
    294c:	e06b      	b.n	2a26 <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
    294e:	4a38      	ldr	r2, [pc, #224]	; (2a30 <spi_rw+0x148>)
    2950:	4b38      	ldr	r3, [pc, #224]	; (2a34 <spi_rw+0x14c>)
    2952:	1c10      	adds	r0, r2, #0
    2954:	1c19      	adds	r1, r3, #0
    2956:	2201      	movs	r2, #1
    2958:	4b37      	ldr	r3, [pc, #220]	; (2a38 <spi_rw+0x150>)
    295a:	4798      	blx	r3

	while (u16Sz) {
    295c:	e04c      	b.n	29f8 <spi_rw+0x110>
		txd_data = *pu8Mosi;
    295e:	68fb      	ldr	r3, [r7, #12]
    2960:	781a      	ldrb	r2, [r3, #0]
    2962:	1c3b      	adds	r3, r7, #0
    2964:	3314      	adds	r3, #20
    2966:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    2968:	46c0      	nop			; (mov r8, r8)
    296a:	4b31      	ldr	r3, [pc, #196]	; (2a30 <spi_rw+0x148>)
    296c:	1c18      	adds	r0, r3, #0
    296e:	4b33      	ldr	r3, [pc, #204]	; (2a3c <spi_rw+0x154>)
    2970:	4798      	blx	r3
    2972:	1c03      	adds	r3, r0, #0
    2974:	2201      	movs	r2, #1
    2976:	4053      	eors	r3, r2
    2978:	b2db      	uxtb	r3, r3
    297a:	2b00      	cmp	r3, #0
    297c:	d1f5      	bne.n	296a <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    297e:	46c0      	nop			; (mov r8, r8)
    2980:	4a2b      	ldr	r2, [pc, #172]	; (2a30 <spi_rw+0x148>)
    2982:	1c3b      	adds	r3, r7, #0
    2984:	3314      	adds	r3, #20
    2986:	881b      	ldrh	r3, [r3, #0]
    2988:	1c10      	adds	r0, r2, #0
    298a:	1c19      	adds	r1, r3, #0
    298c:	4b2c      	ldr	r3, [pc, #176]	; (2a40 <spi_rw+0x158>)
    298e:	4798      	blx	r3
    2990:	1c03      	adds	r3, r0, #0
    2992:	2b00      	cmp	r3, #0
    2994:	d1f4      	bne.n	2980 <spi_rw+0x98>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	4b25      	ldr	r3, [pc, #148]	; (2a30 <spi_rw+0x148>)
    299a:	1c18      	adds	r0, r3, #0
    299c:	4b29      	ldr	r3, [pc, #164]	; (2a44 <spi_rw+0x15c>)
    299e:	4798      	blx	r3
    29a0:	1c03      	adds	r3, r0, #0
    29a2:	2201      	movs	r2, #1
    29a4:	4053      	eors	r3, r2
    29a6:	b2db      	uxtb	r3, r3
    29a8:	2b00      	cmp	r3, #0
    29aa:	d1f5      	bne.n	2998 <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    29ac:	46c0      	nop			; (mov r8, r8)
    29ae:	4a20      	ldr	r2, [pc, #128]	; (2a30 <spi_rw+0x148>)
    29b0:	1c3b      	adds	r3, r7, #0
    29b2:	3310      	adds	r3, #16
    29b4:	1c10      	adds	r0, r2, #0
    29b6:	1c19      	adds	r1, r3, #0
    29b8:	4b23      	ldr	r3, [pc, #140]	; (2a48 <spi_rw+0x160>)
    29ba:	4798      	blx	r3
    29bc:	1c03      	adds	r3, r0, #0
    29be:	2b00      	cmp	r3, #0
    29c0:	d1f5      	bne.n	29ae <spi_rw+0xc6>
			;
		*pu8Miso = rxd_data;
    29c2:	1c3b      	adds	r3, r7, #0
    29c4:	3310      	adds	r3, #16
    29c6:	881b      	ldrh	r3, [r3, #0]
    29c8:	b2da      	uxtb	r2, r3
    29ca:	68bb      	ldr	r3, [r7, #8]
    29cc:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    29ce:	1dbb      	adds	r3, r7, #6
    29d0:	881a      	ldrh	r2, [r3, #0]
    29d2:	1dbb      	adds	r3, r7, #6
    29d4:	3a01      	subs	r2, #1
    29d6:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    29d8:	1c3b      	adds	r3, r7, #0
    29da:	3316      	adds	r3, #22
    29dc:	781b      	ldrb	r3, [r3, #0]
    29de:	2b00      	cmp	r3, #0
    29e0:	d102      	bne.n	29e8 <spi_rw+0x100>
			pu8Miso++;
    29e2:	68bb      	ldr	r3, [r7, #8]
    29e4:	3301      	adds	r3, #1
    29e6:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    29e8:	1c3b      	adds	r3, r7, #0
    29ea:	3317      	adds	r3, #23
    29ec:	781b      	ldrb	r3, [r3, #0]
    29ee:	2b00      	cmp	r3, #0
    29f0:	d102      	bne.n	29f8 <spi_rw+0x110>
			pu8Mosi++;
    29f2:	68fb      	ldr	r3, [r7, #12]
    29f4:	3301      	adds	r3, #1
    29f6:	60fb      	str	r3, [r7, #12]
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    29f8:	1dbb      	adds	r3, r7, #6
    29fa:	881b      	ldrh	r3, [r3, #0]
    29fc:	2b00      	cmp	r3, #0
    29fe:	d1ae      	bne.n	295e <spi_rw+0x76>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    2a00:	46c0      	nop			; (mov r8, r8)
    2a02:	4b0b      	ldr	r3, [pc, #44]	; (2a30 <spi_rw+0x148>)
    2a04:	1c18      	adds	r0, r3, #0
    2a06:	4b11      	ldr	r3, [pc, #68]	; (2a4c <spi_rw+0x164>)
    2a08:	4798      	blx	r3
    2a0a:	1c03      	adds	r3, r0, #0
    2a0c:	2201      	movs	r2, #1
    2a0e:	4053      	eors	r3, r2
    2a10:	b2db      	uxtb	r3, r3
    2a12:	2b00      	cmp	r3, #0
    2a14:	d1f5      	bne.n	2a02 <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
    2a16:	4a06      	ldr	r2, [pc, #24]	; (2a30 <spi_rw+0x148>)
    2a18:	4b06      	ldr	r3, [pc, #24]	; (2a34 <spi_rw+0x14c>)
    2a1a:	1c10      	adds	r0, r2, #0
    2a1c:	1c19      	adds	r1, r3, #0
    2a1e:	2200      	movs	r2, #0
    2a20:	4b05      	ldr	r3, [pc, #20]	; (2a38 <spi_rw+0x150>)
    2a22:	4798      	blx	r3

	return M2M_SUCCESS;
    2a24:	2300      	movs	r3, #0
    2a26:	b25b      	sxtb	r3, r3
}
    2a28:	1c18      	adds	r0, r3, #0
    2a2a:	46bd      	mov	sp, r7
    2a2c:	b006      	add	sp, #24
    2a2e:	bd80      	pop	{r7, pc}
    2a30:	20000ff0 	.word	0x20000ff0
    2a34:	20000fec 	.word	0x20000fec
    2a38:	00001d05 	.word	0x00001d05
    2a3c:	000027bd 	.word	0x000027bd
    2a40:	0000280d 	.word	0x0000280d
    2a44:	000027e5 	.word	0x000027e5
    2a48:	00002855 	.word	0x00002855
    2a4c:	00002795 	.word	0x00002795

00002a50 <nm_bus_init>:
*	@author	M.S.M
*	@date	28 oct 2013
*	@version	1.0
*/
sint8 nm_bus_init(void)
{
    2a50:	b580      	push	{r7, lr}
    2a52:	b090      	sub	sp, #64	; 0x40
    2a54:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    2a56:	1c3b      	adds	r3, r7, #0
    2a58:	333f      	adds	r3, #63	; 0x3f
    2a5a:	2200      	movs	r2, #0
    2a5c:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    2a5e:	1c3b      	adds	r3, r7, #0
    2a60:	1c18      	adds	r0, r3, #0
    2a62:	4b1f      	ldr	r3, [pc, #124]	; (2ae0 <nm_bus_init+0x90>)
    2a64:	4798      	blx	r3
	slave_config.ss_pin = CONF_WIFI_M2M_SPI_CS_PIN;
    2a66:	1c3b      	adds	r3, r7, #0
    2a68:	2205      	movs	r2, #5
    2a6a:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    2a6c:	4a1d      	ldr	r2, [pc, #116]	; (2ae4 <nm_bus_init+0x94>)
    2a6e:	1c3b      	adds	r3, r7, #0
    2a70:	1c10      	adds	r0, r2, #0
    2a72:	1c19      	adds	r1, r3, #0
    2a74:	4b1c      	ldr	r3, [pc, #112]	; (2ae8 <nm_bus_init+0x98>)
    2a76:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    2a78:	1d3b      	adds	r3, r7, #4
    2a7a:	1c18      	adds	r0, r3, #0
    2a7c:	4b1b      	ldr	r3, [pc, #108]	; (2aec <nm_bus_init+0x9c>)
    2a7e:	4798      	blx	r3
	config.mux_setting = CONF_WIFI_M2M_SPI_SERCOM_MUX;
    2a80:	1d3b      	adds	r3, r7, #4
    2a82:	2280      	movs	r2, #128	; 0x80
    2a84:	0252      	lsls	r2, r2, #9
    2a86:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WIFI_M2M_SPI_PINMUX_PAD0;
    2a88:	1d3b      	adds	r3, r7, #4
    2a8a:	4a19      	ldr	r2, [pc, #100]	; (2af0 <nm_bus_init+0xa0>)
    2a8c:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WIFI_M2M_SPI_PINMUX_PAD1;
    2a8e:	1d3b      	adds	r3, r7, #4
    2a90:	2201      	movs	r2, #1
    2a92:	4252      	negs	r2, r2
    2a94:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WIFI_M2M_SPI_PINMUX_PAD2;
    2a96:	1d3b      	adds	r3, r7, #4
    2a98:	4a16      	ldr	r2, [pc, #88]	; (2af4 <nm_bus_init+0xa4>)
    2a9a:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WIFI_M2M_SPI_PINMUX_PAD3;
    2a9c:	1d3b      	adds	r3, r7, #4
    2a9e:	4a16      	ldr	r2, [pc, #88]	; (2af8 <nm_bus_init+0xa8>)
    2aa0:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    2aa2:	1d3b      	adds	r3, r7, #4
    2aa4:	2200      	movs	r2, #0
    2aa6:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WIFI_M2M_SPI_BAUDRATE;
    2aa8:	1d3b      	adds	r3, r7, #4
    2aaa:	4a14      	ldr	r2, [pc, #80]	; (2afc <nm_bus_init+0xac>)
    2aac:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WIFI_M2M_SPI_MODULE, &config) != STATUS_OK) {
    2aae:	4914      	ldr	r1, [pc, #80]	; (2b00 <nm_bus_init+0xb0>)
    2ab0:	4a14      	ldr	r2, [pc, #80]	; (2b04 <nm_bus_init+0xb4>)
    2ab2:	1d3b      	adds	r3, r7, #4
    2ab4:	1c08      	adds	r0, r1, #0
    2ab6:	1c11      	adds	r1, r2, #0
    2ab8:	1c1a      	adds	r2, r3, #0
    2aba:	4b13      	ldr	r3, [pc, #76]	; (2b08 <nm_bus_init+0xb8>)
    2abc:	4798      	blx	r3
    2abe:	1c03      	adds	r3, r0, #0
    2ac0:	2b00      	cmp	r3, #0
    2ac2:	d001      	beq.n	2ac8 <nm_bus_init+0x78>
		return M2M_ERR_BUS_FAIL;
    2ac4:	23fa      	movs	r3, #250	; 0xfa
    2ac6:	e006      	b.n	2ad6 <nm_bus_init+0x86>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    2ac8:	4b0d      	ldr	r3, [pc, #52]	; (2b00 <nm_bus_init+0xb0>)
    2aca:	1c18      	adds	r0, r3, #0
    2acc:	4b0f      	ldr	r3, [pc, #60]	; (2b0c <nm_bus_init+0xbc>)
    2ace:	4798      	blx	r3

#endif
	return result;
    2ad0:	1c3b      	adds	r3, r7, #0
    2ad2:	333f      	adds	r3, #63	; 0x3f
    2ad4:	781b      	ldrb	r3, [r3, #0]
    2ad6:	b25b      	sxtb	r3, r3
}
    2ad8:	1c18      	adds	r0, r3, #0
    2ada:	46bd      	mov	sp, r7
    2adc:	b010      	add	sp, #64	; 0x40
    2ade:	bd80      	pop	{r7, pc}
    2ae0:	000026dd 	.word	0x000026dd
    2ae4:	20000fec 	.word	0x20000fec
    2ae8:	000026fd 	.word	0x000026fd
    2aec:	00002659 	.word	0x00002659
    2af0:	00040003 	.word	0x00040003
    2af4:	00060003 	.word	0x00060003
    2af8:	00070003 	.word	0x00070003
    2afc:	003d0900 	.word	0x003d0900
    2b00:	20000ff0 	.word	0x20000ff0
    2b04:	42000800 	.word	0x42000800
    2b08:	00001bfd 	.word	0x00001bfd
    2b0c:	00002761 	.word	0x00002761

00002b10 <nm_bus_ioctl>:
*	@date	28 oct 2013
*	@note	For SPI only, it's important to be able to send/receive at the same time
*	@version	1.0
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    2b10:	b590      	push	{r4, r7, lr}
    2b12:	b085      	sub	sp, #20
    2b14:	af00      	add	r7, sp, #0
    2b16:	1c02      	adds	r2, r0, #0
    2b18:	6039      	str	r1, [r7, #0]
    2b1a:	1dfb      	adds	r3, r7, #7
    2b1c:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    2b1e:	1c3b      	adds	r3, r7, #0
    2b20:	330f      	adds	r3, #15
    2b22:	2200      	movs	r2, #0
    2b24:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    2b26:	1dfb      	adds	r3, r7, #7
    2b28:	781b      	ldrb	r3, [r3, #0]
    2b2a:	2b03      	cmp	r3, #3
    2b2c:	d111      	bne.n	2b52 <nm_bus_ioctl+0x42>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    2b2e:	683b      	ldr	r3, [r7, #0]
    2b30:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    2b32:	68bb      	ldr	r3, [r7, #8]
    2b34:	6819      	ldr	r1, [r3, #0]
    2b36:	68bb      	ldr	r3, [r7, #8]
    2b38:	685a      	ldr	r2, [r3, #4]
    2b3a:	68bb      	ldr	r3, [r7, #8]
    2b3c:	891b      	ldrh	r3, [r3, #8]
    2b3e:	1c3c      	adds	r4, r7, #0
    2b40:	340f      	adds	r4, #15
    2b42:	1c08      	adds	r0, r1, #0
    2b44:	1c11      	adds	r1, r2, #0
    2b46:	1c1a      	adds	r2, r3, #0
    2b48:	4b08      	ldr	r3, [pc, #32]	; (2b6c <nm_bus_ioctl+0x5c>)
    2b4a:	4798      	blx	r3
    2b4c:	1c03      	adds	r3, r0, #0
    2b4e:	7023      	strb	r3, [r4, #0]
		}
		break;
    2b50:	e004      	b.n	2b5c <nm_bus_ioctl+0x4c>
#endif
		default:
			s8Ret = -1;
    2b52:	1c3b      	adds	r3, r7, #0
    2b54:	330f      	adds	r3, #15
    2b56:	22ff      	movs	r2, #255	; 0xff
    2b58:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
			break;
    2b5a:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    2b5c:	1c3b      	adds	r3, r7, #0
    2b5e:	330f      	adds	r3, #15
    2b60:	781b      	ldrb	r3, [r3, #0]
    2b62:	b25b      	sxtb	r3, r3
}
    2b64:	1c18      	adds	r0, r3, #0
    2b66:	46bd      	mov	sp, r7
    2b68:	b005      	add	sp, #20
    2b6a:	bd90      	pop	{r4, r7, pc}
    2b6c:	000028e9 	.word	0x000028e9

00002b70 <nm_bus_deinit>:
*	@author	M.S.M
*	@date	28 oct 2013
*	@version	1.0
*/
void nm_bus_deinit(void)
{
    2b70:	b580      	push	{r7, lr}
    2b72:	af00      	add	r7, sp, #0
}
    2b74:	46bd      	mov	sp, r7
    2b76:	bd80      	pop	{r7, pc}

00002b78 <m2m_memcpy>:
 *
 */
#include "common\include\nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    2b78:	b580      	push	{r7, lr}
    2b7a:	b084      	sub	sp, #16
    2b7c:	af00      	add	r7, sp, #0
    2b7e:	60f8      	str	r0, [r7, #12]
    2b80:	60b9      	str	r1, [r7, #8]
    2b82:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    2b84:	687b      	ldr	r3, [r7, #4]
    2b86:	2b00      	cmp	r3, #0
    2b88:	d100      	bne.n	2b8c <m2m_memcpy+0x14>
    2b8a:	e00f      	b.n	2bac <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    2b8c:	68bb      	ldr	r3, [r7, #8]
    2b8e:	781a      	ldrb	r2, [r3, #0]
    2b90:	68fb      	ldr	r3, [r7, #12]
    2b92:	701a      	strb	r2, [r3, #0]
		pDst++;
    2b94:	68fb      	ldr	r3, [r7, #12]
    2b96:	3301      	adds	r3, #1
    2b98:	60fb      	str	r3, [r7, #12]
		pSrc++;
    2b9a:	68bb      	ldr	r3, [r7, #8]
    2b9c:	3301      	adds	r3, #1
    2b9e:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    2ba0:	687b      	ldr	r3, [r7, #4]
    2ba2:	3b01      	subs	r3, #1
    2ba4:	607b      	str	r3, [r7, #4]
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d1ef      	bne.n	2b8c <m2m_memcpy+0x14>
}
    2bac:	46bd      	mov	sp, r7
    2bae:	b004      	add	sp, #16
    2bb0:	bd80      	pop	{r7, pc}
    2bb2:	46c0      	nop			; (mov r8, r8)

00002bb4 <m2m_memset>:

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    2bb4:	b580      	push	{r7, lr}
    2bb6:	b084      	sub	sp, #16
    2bb8:	af00      	add	r7, sp, #0
    2bba:	60f8      	str	r0, [r7, #12]
    2bbc:	607a      	str	r2, [r7, #4]
    2bbe:	1c3b      	adds	r3, r7, #0
    2bc0:	330b      	adds	r3, #11
    2bc2:	1c0a      	adds	r2, r1, #0
    2bc4:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    2bc6:	687b      	ldr	r3, [r7, #4]
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d100      	bne.n	2bce <m2m_memset+0x1a>
    2bcc:	e00d      	b.n	2bea <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    2bce:	68fb      	ldr	r3, [r7, #12]
    2bd0:	1c3a      	adds	r2, r7, #0
    2bd2:	320b      	adds	r2, #11
    2bd4:	7812      	ldrb	r2, [r2, #0]
    2bd6:	701a      	strb	r2, [r3, #0]
		pBuf++;
    2bd8:	68fb      	ldr	r3, [r7, #12]
    2bda:	3301      	adds	r3, #1
    2bdc:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	3b01      	subs	r3, #1
    2be2:	607b      	str	r3, [r7, #4]
    2be4:	687b      	ldr	r3, [r7, #4]
    2be6:	2b00      	cmp	r3, #0
    2be8:	d1f1      	bne.n	2bce <m2m_memset+0x1a>
}
    2bea:	46bd      	mov	sp, r7
    2bec:	b004      	add	sp, #16
    2bee:	bd80      	pop	{r7, pc}

00002bf0 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    2bf0:	b580      	push	{r7, lr}
    2bf2:	b084      	sub	sp, #16
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    2bf8:	1c3b      	adds	r3, r7, #0
    2bfa:	330e      	adds	r3, #14
    2bfc:	2200      	movs	r2, #0
    2bfe:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    2c00:	e009      	b.n	2c16 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    2c02:	1c3b      	adds	r3, r7, #0
    2c04:	330e      	adds	r3, #14
    2c06:	881a      	ldrh	r2, [r3, #0]
    2c08:	1c3b      	adds	r3, r7, #0
    2c0a:	330e      	adds	r3, #14
    2c0c:	3201      	adds	r2, #1
    2c0e:	801a      	strh	r2, [r3, #0]
		pcStr++;
    2c10:	687b      	ldr	r3, [r7, #4]
    2c12:	3301      	adds	r3, #1
    2c14:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	781b      	ldrb	r3, [r3, #0]
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	d1f1      	bne.n	2c02 <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    2c1e:	1c3b      	adds	r3, r7, #0
    2c20:	330e      	adds	r3, #14
    2c22:	881b      	ldrh	r3, [r3, #0]
}
    2c24:	1c18      	adds	r0, r3, #0
    2c26:	46bd      	mov	sp, r7
    2c28:	b004      	add	sp, #16
    2c2a:	bd80      	pop	{r7, pc}

00002c2c <isr>:

tpfSetWiFiCallBack pfWifiCb = NULL;	/*!< pointer to wifi call back function */
tpfSetIPCallBack pfIpCb = NULL;		/*!< pointer to Socket call back function */

static void isr(void)
{
    2c2c:	b580      	push	{r7, lr}
    2c2e:	af00      	add	r7, sp, #0
	gu8Interrupt++;
    2c30:	4b04      	ldr	r3, [pc, #16]	; (2c44 <isr+0x18>)
    2c32:	781b      	ldrb	r3, [r3, #0]
    2c34:	b2db      	uxtb	r3, r3
    2c36:	3301      	adds	r3, #1
    2c38:	b2da      	uxtb	r2, r3
    2c3a:	4b02      	ldr	r3, [pc, #8]	; (2c44 <isr+0x18>)
    2c3c:	701a      	strb	r2, [r3, #0]
}
    2c3e:	46bd      	mov	sp, r7
    2c40:	bd80      	pop	{r7, pc}
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	20000927 	.word	0x20000927

00002c48 <hif_chip_wake>:

void hif_chip_wake(void)
{
    2c48:	b580      	push	{r7, lr}
    2c4a:	af00      	add	r7, sp, #0
	//if(gu8ChipSleep == HIF_SLEEP)
	{
		if(gu8ChipMode == M2M_PS_MANUAL)
    2c4c:	4b05      	ldr	r3, [pc, #20]	; (2c64 <hif_chip_wake+0x1c>)
    2c4e:	781b      	ldrb	r3, [r3, #0]
    2c50:	b2db      	uxtb	r3, r3
    2c52:	2b04      	cmp	r3, #4
    2c54:	d001      	beq.n	2c5a <hif_chip_wake+0x12>
		{
#if CONF_WIFI_PS_MODE == WIFI_PS_MODE_STATIC_PS
			enable_rf_blocks();
#endif
		}
		else if(gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)
    2c56:	4b03      	ldr	r3, [pc, #12]	; (2c64 <hif_chip_wake+0x1c>)
    2c58:	781b      	ldrb	r3, [r3, #0]
#endif
		}
		else
		{
		}
		gu8ChipSleep = HIF_WAKE;
    2c5a:	4b03      	ldr	r3, [pc, #12]	; (2c68 <hif_chip_wake+0x20>)
    2c5c:	2201      	movs	r2, #1
    2c5e:	701a      	strb	r2, [r3, #0]
	}
}
    2c60:	46bd      	mov	sp, r7
    2c62:	bd80      	pop	{r7, pc}
    2c64:	20000924 	.word	0x20000924
    2c68:	20000925 	.word	0x20000925

00002c6c <hif_set_sleep_mode>:

void hif_set_sleep_mode(uint8 u8Pstype)
{
    2c6c:	b580      	push	{r7, lr}
    2c6e:	b082      	sub	sp, #8
    2c70:	af00      	add	r7, sp, #0
    2c72:	1c02      	adds	r2, r0, #0
    2c74:	1dfb      	adds	r3, r7, #7
    2c76:	701a      	strb	r2, [r3, #0]
	gu8ChipMode = u8Pstype;
    2c78:	4b03      	ldr	r3, [pc, #12]	; (2c88 <hif_set_sleep_mode+0x1c>)
    2c7a:	1dfa      	adds	r2, r7, #7
    2c7c:	7812      	ldrb	r2, [r2, #0]
    2c7e:	701a      	strb	r2, [r3, #0]
}
    2c80:	46bd      	mov	sp, r7
    2c82:	b002      	add	sp, #8
    2c84:	bd80      	pop	{r7, pc}
    2c86:	46c0      	nop			; (mov r8, r8)
    2c88:	20000924 	.word	0x20000924

00002c8c <hif_chip_sleep>:
uint8 hif_get_sleep_mode(void)
{
	return gu8ChipMode;
}
void hif_chip_sleep(void)
{
    2c8c:	b580      	push	{r7, lr}
    2c8e:	af00      	add	r7, sp, #0
	//if(gu8ChipSleep == HIF_WAKE)
	{
		if(gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)
    2c90:	4b03      	ldr	r3, [pc, #12]	; (2ca0 <hif_chip_sleep+0x14>)
    2c92:	781b      	ldrb	r3, [r3, #0]
#endif
		}
		else
		{
		}
		gu8ChipSleep = HIF_SLEEP;
    2c94:	4b03      	ldr	r3, [pc, #12]	; (2ca4 <hif_chip_sleep+0x18>)
    2c96:	2200      	movs	r2, #0
    2c98:	701a      	strb	r2, [r3, #0]
	}
}
    2c9a:	46bd      	mov	sp, r7
    2c9c:	bd80      	pop	{r7, pc}
    2c9e:	46c0      	nop			; (mov r8, r8)
    2ca0:	20000924 	.word	0x20000924
    2ca4:	20000925 	.word	0x20000925

00002ca8 <hif_set_rx_done>:

void hif_set_rx_done(void)
{
    2ca8:	b580      	push	{r7, lr}
    2caa:	b082      	sub	sp, #8
    2cac:	af00      	add	r7, sp, #0
	uint32 reg;
#ifdef EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    2cae:	2001      	movs	r0, #1
    2cb0:	4b0c      	ldr	r3, [pc, #48]	; (2ce4 <hif_set_rx_done+0x3c>)
    2cb2:	4798      	blx	r3
#endif
	/*Clearing RX interrupt*/
	reg = nm_read_reg(WIFI_HOST_RCV_CTRL_0);		
    2cb4:	4b0c      	ldr	r3, [pc, #48]	; (2ce8 <hif_set_rx_done+0x40>)
    2cb6:	1c18      	adds	r0, r3, #0
    2cb8:	4b0c      	ldr	r3, [pc, #48]	; (2cec <hif_set_rx_done+0x44>)
    2cba:	4798      	blx	r3
    2cbc:	1c03      	adds	r3, r0, #0
    2cbe:	607b      	str	r3, [r7, #4]
	reg &= ~0x1;
    2cc0:	687b      	ldr	r3, [r7, #4]
    2cc2:	2201      	movs	r2, #1
    2cc4:	4393      	bics	r3, r2
    2cc6:	607b      	str	r3, [r7, #4]

	/* Set RX Done */
	reg |= (1<<1);		
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	2202      	movs	r2, #2
    2ccc:	4313      	orrs	r3, r2
    2cce:	607b      	str	r3, [r7, #4]
	nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    2cd0:	4a05      	ldr	r2, [pc, #20]	; (2ce8 <hif_set_rx_done+0x40>)
    2cd2:	687b      	ldr	r3, [r7, #4]
    2cd4:	1c10      	adds	r0, r2, #0
    2cd6:	1c19      	adds	r1, r3, #0
    2cd8:	4b05      	ldr	r3, [pc, #20]	; (2cf0 <hif_set_rx_done+0x48>)
    2cda:	4798      	blx	r3
#ifdef LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
	
}
    2cdc:	46bd      	mov	sp, r7
    2cde:	b002      	add	sp, #8
    2ce0:	bd80      	pop	{r7, pc}
    2ce2:	46c0      	nop			; (mov r8, r8)
    2ce4:	0000250d 	.word	0x0000250d
    2ce8:	00001070 	.word	0x00001070
    2cec:	00004085 	.word	0x00004085
    2cf0:	000040c9 	.word	0x000040c9

00002cf4 <hif_init>:


sint8 hif_init(void * arg)
{
    2cf4:	b580      	push	{r7, lr}
    2cf6:	b082      	sub	sp, #8
    2cf8:	af00      	add	r7, sp, #0
    2cfa:	6078      	str	r0, [r7, #4]
	pfWifiCb = NULL;
    2cfc:	4b0c      	ldr	r3, [pc, #48]	; (2d30 <hif_init+0x3c>)
    2cfe:	2200      	movs	r2, #0
    2d00:	601a      	str	r2, [r3, #0]
	pfIpCb = NULL;
    2d02:	4b0c      	ldr	r3, [pc, #48]	; (2d34 <hif_init+0x40>)
    2d04:	2200      	movs	r2, #0
    2d06:	601a      	str	r2, [r3, #0]
	
	gu8ChipSleep = HIF_WAKE;
    2d08:	4b0b      	ldr	r3, [pc, #44]	; (2d38 <hif_init+0x44>)
    2d0a:	2201      	movs	r2, #1
    2d0c:	701a      	strb	r2, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
    2d0e:	4b0b      	ldr	r3, [pc, #44]	; (2d3c <hif_init+0x48>)
    2d10:	2200      	movs	r2, #0
    2d12:	701a      	strb	r2, [r3, #0]

	gu8Interrupt = 0;
    2d14:	4b0a      	ldr	r3, [pc, #40]	; (2d40 <hif_init+0x4c>)
    2d16:	2200      	movs	r2, #0
    2d18:	701a      	strb	r2, [r3, #0]
	nm_bsp_register_isr(isr);
    2d1a:	4b0a      	ldr	r3, [pc, #40]	; (2d44 <hif_init+0x50>)
    2d1c:	1c18      	adds	r0, r3, #0
    2d1e:	4b0a      	ldr	r3, [pc, #40]	; (2d48 <hif_init+0x54>)
    2d20:	4798      	blx	r3
	
	return M2M_SUCCESS;
    2d22:	2300      	movs	r3, #0
    2d24:	b25b      	sxtb	r3, r3
}
    2d26:	1c18      	adds	r0, r3, #0
    2d28:	46bd      	mov	sp, r7
    2d2a:	b002      	add	sp, #8
    2d2c:	bd80      	pop	{r7, pc}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	20000928 	.word	0x20000928
    2d34:	2000092c 	.word	0x2000092c
    2d38:	20000925 	.word	0x20000925
    2d3c:	20000924 	.word	0x20000924
    2d40:	20000927 	.word	0x20000927
    2d44:	00002c2d 	.word	0x00002c2d
    2d48:	00002495 	.word	0x00002495

00002d4c <hif_deinit>:
sint8 hif_deinit(void * arg)
{
    2d4c:	b580      	push	{r7, lr}
    2d4e:	b082      	sub	sp, #8
    2d50:	af00      	add	r7, sp, #0
    2d52:	6078      	str	r0, [r7, #4]
			M2M_DBG("failed to stop power save\n");
			break;
		}
	}
#endif
	hif_chip_wake();
    2d54:	4b03      	ldr	r3, [pc, #12]	; (2d64 <hif_deinit+0x18>)
    2d56:	4798      	blx	r3
	
	return M2M_SUCCESS;
    2d58:	2300      	movs	r3, #0
    2d5a:	b25b      	sxtb	r3, r3
}
    2d5c:	1c18      	adds	r0, r3, #0
    2d5e:	46bd      	mov	sp, r7
    2d60:	b002      	add	sp, #8
    2d62:	bd80      	pop	{r7, pc}
    2d64:	00002c49 	.word	0x00002c49

00002d68 <hif_send>:
*	@return	M2M_SUCCESS in case of success and -ve error code in case of failure
*	@version	1.0
*/ 
sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    2d68:	b580      	push	{r7, lr}
    2d6a:	b08a      	sub	sp, #40	; 0x28
    2d6c:	af00      	add	r7, sp, #0
    2d6e:	603a      	str	r2, [r7, #0]
    2d70:	1c1a      	adds	r2, r3, #0
    2d72:	1dfb      	adds	r3, r7, #7
    2d74:	7018      	strb	r0, [r3, #0]
    2d76:	1dbb      	adds	r3, r7, #6
    2d78:	7019      	strb	r1, [r3, #0]
    2d7a:	1d3b      	adds	r3, r7, #4
    2d7c:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    2d7e:	1c3b      	adds	r3, r7, #0
    2d80:	3327      	adds	r3, #39	; 0x27
    2d82:	22ff      	movs	r2, #255	; 0xff
    2d84:	701a      	strb	r2, [r3, #0]
	tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    2d86:	1dbb      	adds	r3, r7, #6
    2d88:	781a      	ldrb	r2, [r3, #0]
    2d8a:	237f      	movs	r3, #127	; 0x7f
    2d8c:	4013      	ands	r3, r2
    2d8e:	b2da      	uxtb	r2, r3
    2d90:	1c3b      	adds	r3, r7, #0
    2d92:	3318      	adds	r3, #24
    2d94:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    2d96:	1c3b      	adds	r3, r7, #0
    2d98:	3318      	adds	r3, #24
    2d9a:	1dfa      	adds	r2, r7, #7
    2d9c:	7812      	ldrb	r2, [r2, #0]
    2d9e:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    2da0:	1c3b      	adds	r3, r7, #0
    2da2:	3318      	adds	r3, #24
    2da4:	2204      	movs	r2, #4
    2da6:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    2da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2daa:	2b00      	cmp	r3, #0
    2dac:	d010      	beq.n	2dd0 <hif_send+0x68>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    2dae:	1c3b      	adds	r3, r7, #0
    2db0:	3318      	adds	r3, #24
    2db2:	885a      	ldrh	r2, [r3, #2]
    2db4:	1c39      	adds	r1, r7, #0
    2db6:	3138      	adds	r1, #56	; 0x38
    2db8:	1c3b      	adds	r3, r7, #0
    2dba:	3334      	adds	r3, #52	; 0x34
    2dbc:	8809      	ldrh	r1, [r1, #0]
    2dbe:	881b      	ldrh	r3, [r3, #0]
    2dc0:	18cb      	adds	r3, r1, r3
    2dc2:	b29b      	uxth	r3, r3
    2dc4:	18d3      	adds	r3, r2, r3
    2dc6:	b29a      	uxth	r2, r3
    2dc8:	1c3b      	adds	r3, r7, #0
    2dca:	3318      	adds	r3, #24
    2dcc:	805a      	strh	r2, [r3, #2]
    2dce:	e009      	b.n	2de4 <hif_send+0x7c>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    2dd0:	1c3b      	adds	r3, r7, #0
    2dd2:	3318      	adds	r3, #24
    2dd4:	885a      	ldrh	r2, [r3, #2]
    2dd6:	1d3b      	adds	r3, r7, #4
    2dd8:	881b      	ldrh	r3, [r3, #0]
    2dda:	18d3      	adds	r3, r2, r3
    2ddc:	b29a      	uxth	r2, r3
    2dde:	1c3b      	adds	r3, r7, #0
    2de0:	3318      	adds	r3, #24
    2de2:	805a      	strh	r2, [r3, #2]
	}
	hif_chip_wake();
    2de4:	4b7b      	ldr	r3, [pc, #492]	; (2fd4 <hif_send+0x26c>)
    2de6:	4798      	blx	r3
	{
		volatile uint32 reg, dma_addr;
		uint16 cnt = 0;
    2de8:	1c3b      	adds	r3, r7, #0
    2dea:	3324      	adds	r3, #36	; 0x24
    2dec:	2200      	movs	r2, #0
    2dee:	801a      	strh	r2, [r3, #0]
		uint8	u8PadSize;

		nm_write_reg(0x150014, 0x1);	
    2df0:	4b79      	ldr	r3, [pc, #484]	; (2fd8 <hif_send+0x270>)
    2df2:	1c18      	adds	r0, r3, #0
    2df4:	2101      	movs	r1, #1
    2df6:	4b79      	ldr	r3, [pc, #484]	; (2fdc <hif_send+0x274>)
    2df8:	4798      	blx	r3
		u8PadSize = 0;	
    2dfa:	1c3b      	adds	r3, r7, #0
    2dfc:	3323      	adds	r3, #35	; 0x23
    2dfe:	2200      	movs	r2, #0
    2e00:	701a      	strb	r2, [r3, #0]

		if (strHif.u16Length & 0x3) 
    2e02:	1c3b      	adds	r3, r7, #0
    2e04:	3318      	adds	r3, #24
    2e06:	885b      	ldrh	r3, [r3, #2]
    2e08:	1c1a      	adds	r2, r3, #0
    2e0a:	2303      	movs	r3, #3
    2e0c:	4013      	ands	r3, r2
    2e0e:	d00b      	beq.n	2e28 <hif_send+0xc0>
		{
			u8PadSize = 4 - (strHif.u16Length % 4);
    2e10:	1c3b      	adds	r3, r7, #0
    2e12:	3318      	adds	r3, #24
    2e14:	885b      	ldrh	r3, [r3, #2]
    2e16:	b2da      	uxtb	r2, r3
    2e18:	2303      	movs	r3, #3
    2e1a:	4013      	ands	r3, r2
    2e1c:	b2da      	uxtb	r2, r3
    2e1e:	1c3b      	adds	r3, r7, #0
    2e20:	3323      	adds	r3, #35	; 0x23
    2e22:	2104      	movs	r1, #4
    2e24:	1a8a      	subs	r2, r1, r2
    2e26:	701a      	strb	r2, [r3, #0]
		}
		reg = 0UL;
    2e28:	2300      	movs	r3, #0
    2e2a:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    2e2c:	1dfb      	adds	r3, r7, #7
    2e2e:	781a      	ldrb	r2, [r3, #0]
    2e30:	697b      	ldr	r3, [r7, #20]
    2e32:	4313      	orrs	r3, r2
    2e34:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    2e36:	1dbb      	adds	r3, r7, #6
    2e38:	781b      	ldrb	r3, [r3, #0]
    2e3a:	021a      	lsls	r2, r3, #8
    2e3c:	697b      	ldr	r3, [r7, #20]
    2e3e:	4313      	orrs	r3, r2
    2e40:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    2e42:	1c3b      	adds	r3, r7, #0
    2e44:	3318      	adds	r3, #24
    2e46:	885b      	ldrh	r3, [r3, #2]
    2e48:	041a      	lsls	r2, r3, #16
    2e4a:	697b      	ldr	r3, [r7, #20]
    2e4c:	4313      	orrs	r3, r2
    2e4e:	617b      	str	r3, [r7, #20]
		nm_write_reg(0x108c,reg);
    2e50:	697b      	ldr	r3, [r7, #20]
    2e52:	4a63      	ldr	r2, [pc, #396]	; (2fe0 <hif_send+0x278>)
    2e54:	1c10      	adds	r0, r2, #0
    2e56:	1c19      	adds	r1, r3, #0
    2e58:	4b60      	ldr	r3, [pc, #384]	; (2fdc <hif_send+0x274>)
    2e5a:	4798      	blx	r3
		reg = 0;
    2e5c:	2300      	movs	r3, #0
    2e5e:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
    2e60:	697b      	ldr	r3, [r7, #20]
    2e62:	2202      	movs	r2, #2
    2e64:	4313      	orrs	r3, r2
    2e66:	617b      	str	r3, [r7, #20]
		nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    2e68:	697b      	ldr	r3, [r7, #20]
    2e6a:	4a5e      	ldr	r2, [pc, #376]	; (2fe4 <hif_send+0x27c>)
    2e6c:	1c10      	adds	r0, r2, #0
    2e6e:	1c19      	adds	r1, r3, #0
    2e70:	4b5a      	ldr	r3, [pc, #360]	; (2fdc <hif_send+0x274>)
    2e72:	4798      	blx	r3
		dma_addr = 0;
    2e74:	2300      	movs	r3, #0
    2e76:	613b      	str	r3, [r7, #16]

		nm_bsp_interrupt_ctrl(0);
    2e78:	2000      	movs	r0, #0
    2e7a:	4b5b      	ldr	r3, [pc, #364]	; (2fe8 <hif_send+0x280>)
    2e7c:	4798      	blx	r3

		for(cnt = 0; cnt < 1000; cnt ++)
    2e7e:	1c3b      	adds	r3, r7, #0
    2e80:	3324      	adds	r3, #36	; 0x24
    2e82:	2200      	movs	r2, #0
    2e84:	801a      	strh	r2, [r3, #0]
    2e86:	e01b      	b.n	2ec0 <hif_send+0x158>
		{			
			reg = nm_read_reg(WIFI_HOST_RCV_CTRL_2);		
    2e88:	4b56      	ldr	r3, [pc, #344]	; (2fe4 <hif_send+0x27c>)
    2e8a:	1c18      	adds	r0, r3, #0
    2e8c:	4b57      	ldr	r3, [pc, #348]	; (2fec <hif_send+0x284>)
    2e8e:	4798      	blx	r3
    2e90:	1c03      	adds	r3, r0, #0
    2e92:	617b      	str	r3, [r7, #20]
			if (!(reg & 0x2))
    2e94:	697a      	ldr	r2, [r7, #20]
    2e96:	2302      	movs	r3, #2
    2e98:	4013      	ands	r3, r2
    2e9a:	d10a      	bne.n	2eb2 <hif_send+0x14a>
			{
				dma_addr = nm_read_reg(0x150400);
    2e9c:	4b54      	ldr	r3, [pc, #336]	; (2ff0 <hif_send+0x288>)
    2e9e:	1c18      	adds	r0, r3, #0
    2ea0:	4b52      	ldr	r3, [pc, #328]	; (2fec <hif_send+0x284>)
    2ea2:	4798      	blx	r3
    2ea4:	1c03      	adds	r3, r0, #0
    2ea6:	613b      	str	r3, [r7, #16]
				ret = M2M_SUCCESS;
    2ea8:	1c3b      	adds	r3, r7, #0
    2eaa:	3327      	adds	r3, #39	; 0x27
    2eac:	2200      	movs	r2, #0
    2eae:	701a      	strb	r2, [r3, #0]
				break;
    2eb0:	e00c      	b.n	2ecc <hif_send+0x164>
		nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		dma_addr = 0;

		nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    2eb2:	1c3b      	adds	r3, r7, #0
    2eb4:	3324      	adds	r3, #36	; 0x24
    2eb6:	881a      	ldrh	r2, [r3, #0]
    2eb8:	1c3b      	adds	r3, r7, #0
    2eba:	3324      	adds	r3, #36	; 0x24
    2ebc:	3201      	adds	r2, #1
    2ebe:	801a      	strh	r2, [r3, #0]
    2ec0:	1c3b      	adds	r3, r7, #0
    2ec2:	3324      	adds	r3, #36	; 0x24
    2ec4:	881a      	ldrh	r2, [r3, #0]
    2ec6:	4b4b      	ldr	r3, [pc, #300]	; (2ff4 <hif_send+0x28c>)
    2ec8:	429a      	cmp	r2, r3
    2eca:	d9dd      	bls.n	2e88 <hif_send+0x120>
				dma_addr = nm_read_reg(0x150400);
				ret = M2M_SUCCESS;
				break;
			} 
		}
		nm_bsp_interrupt_ctrl(1);
    2ecc:	2001      	movs	r0, #1
    2ece:	4b46      	ldr	r3, [pc, #280]	; (2fe8 <hif_send+0x280>)
    2ed0:	4798      	blx	r3

		if (dma_addr != 0) 
    2ed2:	693b      	ldr	r3, [r7, #16]
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d069      	beq.n	2fac <hif_send+0x244>
		{
			uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    2ed8:	693b      	ldr	r3, [r7, #16]
    2eda:	61fb      	str	r3, [r7, #28]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    2edc:	1c3b      	adds	r3, r7, #0
    2ede:	3318      	adds	r3, #24
    2ee0:	885a      	ldrh	r2, [r3, #2]
    2ee2:	1c3b      	adds	r3, r7, #0
    2ee4:	3318      	adds	r3, #24
    2ee6:	805a      	strh	r2, [r3, #2]
			nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    2ee8:	69fa      	ldr	r2, [r7, #28]
    2eea:	1c3b      	adds	r3, r7, #0
    2eec:	3318      	adds	r3, #24
    2eee:	1c10      	adds	r0, r2, #0
    2ef0:	1c19      	adds	r1, r3, #0
    2ef2:	2204      	movs	r2, #4
    2ef4:	4b40      	ldr	r3, [pc, #256]	; (2ff8 <hif_send+0x290>)
    2ef6:	4798      	blx	r3
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    2ef8:	69fb      	ldr	r3, [r7, #28]
    2efa:	3304      	adds	r3, #4
    2efc:	61fb      	str	r3, [r7, #28]
			if(pu8CtrlBuf != NULL)
    2efe:	683b      	ldr	r3, [r7, #0]
    2f00:	2b00      	cmp	r3, #0
    2f02:	d00d      	beq.n	2f20 <hif_send+0x1b8>
			{
				nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    2f04:	69f9      	ldr	r1, [r7, #28]
    2f06:	683a      	ldr	r2, [r7, #0]
    2f08:	1d3b      	adds	r3, r7, #4
    2f0a:	881b      	ldrh	r3, [r3, #0]
    2f0c:	1c08      	adds	r0, r1, #0
    2f0e:	1c11      	adds	r1, r2, #0
    2f10:	1c1a      	adds	r2, r3, #0
    2f12:	4b39      	ldr	r3, [pc, #228]	; (2ff8 <hif_send+0x290>)
    2f14:	4798      	blx	r3
				u32CurrAddr += u16CtrlBufSize;
    2f16:	1d3b      	adds	r3, r7, #4
    2f18:	881b      	ldrh	r3, [r3, #0]
    2f1a:	69fa      	ldr	r2, [r7, #28]
    2f1c:	18d3      	adds	r3, r2, r3
    2f1e:	61fb      	str	r3, [r7, #28]
			}
			if(pu8DataBuf != NULL)
    2f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2f22:	2b00      	cmp	r3, #0
    2f24:	d018      	beq.n	2f58 <hif_send+0x1f0>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    2f26:	1c3b      	adds	r3, r7, #0
    2f28:	3338      	adds	r3, #56	; 0x38
    2f2a:	881a      	ldrh	r2, [r3, #0]
    2f2c:	1d3b      	adds	r3, r7, #4
    2f2e:	881b      	ldrh	r3, [r3, #0]
    2f30:	1ad3      	subs	r3, r2, r3
    2f32:	69fa      	ldr	r2, [r7, #28]
    2f34:	18d3      	adds	r3, r2, r3
    2f36:	61fb      	str	r3, [r7, #28]
				nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    2f38:	69f9      	ldr	r1, [r7, #28]
    2f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2f3c:	1c3b      	adds	r3, r7, #0
    2f3e:	3334      	adds	r3, #52	; 0x34
    2f40:	881b      	ldrh	r3, [r3, #0]
    2f42:	1c08      	adds	r0, r1, #0
    2f44:	1c11      	adds	r1, r2, #0
    2f46:	1c1a      	adds	r2, r3, #0
    2f48:	4b2b      	ldr	r3, [pc, #172]	; (2ff8 <hif_send+0x290>)
    2f4a:	4798      	blx	r3
				u32CurrAddr += u16DataSize;
    2f4c:	1c3b      	adds	r3, r7, #0
    2f4e:	3334      	adds	r3, #52	; 0x34
    2f50:	881b      	ldrh	r3, [r3, #0]
    2f52:	69fa      	ldr	r2, [r7, #28]
    2f54:	18d3      	adds	r3, r2, r3
    2f56:	61fb      	str	r3, [r7, #28]
			}
			if(u8PadSize)
    2f58:	1c3b      	adds	r3, r7, #0
    2f5a:	3323      	adds	r3, #35	; 0x23
    2f5c:	781b      	ldrb	r3, [r3, #0]
    2f5e:	2b00      	cmp	r3, #0
    2f60:	d012      	beq.n	2f88 <hif_send+0x220>
			{
				uint8	au8PadBuf[4];
				m2m_memset(au8PadBuf, 0, sizeof(au8PadBuf));
    2f62:	1c3b      	adds	r3, r7, #0
    2f64:	330c      	adds	r3, #12
    2f66:	1c18      	adds	r0, r3, #0
    2f68:	2100      	movs	r1, #0
    2f6a:	2204      	movs	r2, #4
    2f6c:	4b23      	ldr	r3, [pc, #140]	; (2ffc <hif_send+0x294>)
    2f6e:	4798      	blx	r3
				nm_write_block(u32CurrAddr, au8PadBuf, u8PadSize);
    2f70:	1c3b      	adds	r3, r7, #0
    2f72:	3323      	adds	r3, #35	; 0x23
    2f74:	781b      	ldrb	r3, [r3, #0]
    2f76:	b29b      	uxth	r3, r3
    2f78:	69f9      	ldr	r1, [r7, #28]
    2f7a:	1c3a      	adds	r2, r7, #0
    2f7c:	320c      	adds	r2, #12
    2f7e:	1c08      	adds	r0, r1, #0
    2f80:	1c11      	adds	r1, r2, #0
    2f82:	1c1a      	adds	r2, r3, #0
    2f84:	4b1c      	ldr	r3, [pc, #112]	; (2ff8 <hif_send+0x290>)
    2f86:	4798      	blx	r3
			}
			reg = dma_addr << 2;
    2f88:	693b      	ldr	r3, [r7, #16]
    2f8a:	009b      	lsls	r3, r3, #2
    2f8c:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
    2f8e:	697b      	ldr	r3, [r7, #20]
    2f90:	2202      	movs	r2, #2
    2f92:	4313      	orrs	r3, r2
    2f94:	617b      	str	r3, [r7, #20]
			nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    2f96:	697b      	ldr	r3, [r7, #20]
    2f98:	4a19      	ldr	r2, [pc, #100]	; (3000 <hif_send+0x298>)
    2f9a:	1c10      	adds	r0, r2, #0
    2f9c:	1c19      	adds	r1, r3, #0
    2f9e:	4b0f      	ldr	r3, [pc, #60]	; (2fdc <hif_send+0x274>)
    2fa0:	4798      	blx	r3
			ret =  M2M_SUCCESS;
    2fa2:	1c3b      	adds	r3, r7, #0
    2fa4:	3327      	adds	r3, #39	; 0x27
    2fa6:	2200      	movs	r2, #0
    2fa8:	701a      	strb	r2, [r3, #0]
    2faa:	e003      	b.n	2fb4 <hif_send+0x24c>
		}
		else
		{
			ret =  M2M_ERR_MEM_ALLOC;
    2fac:	1c3b      	adds	r3, r7, #0
    2fae:	3327      	adds	r3, #39	; 0x27
    2fb0:	22fd      	movs	r2, #253	; 0xfd
    2fb2:	701a      	strb	r2, [r3, #0]
		}

	}
#ifndef WIN32
	if(gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)
    2fb4:	4b13      	ldr	r3, [pc, #76]	; (3004 <hif_send+0x29c>)
    2fb6:	781b      	ldrb	r3, [r3, #0]
    2fb8:	b2db      	uxtb	r3, r3
    2fba:	2b03      	cmp	r3, #3
    2fbc:	d101      	bne.n	2fc2 <hif_send+0x25a>
	{
		hif_chip_sleep();
    2fbe:	4b12      	ldr	r3, [pc, #72]	; (3008 <hif_send+0x2a0>)
    2fc0:	4798      	blx	r3
	}
#endif
	return ret;
    2fc2:	1c3b      	adds	r3, r7, #0
    2fc4:	3327      	adds	r3, #39	; 0x27
    2fc6:	781b      	ldrb	r3, [r3, #0]
    2fc8:	b25b      	sxtb	r3, r3
}
    2fca:	1c18      	adds	r0, r3, #0
    2fcc:	46bd      	mov	sp, r7
    2fce:	b00a      	add	sp, #40	; 0x28
    2fd0:	bd80      	pop	{r7, pc}
    2fd2:	46c0      	nop			; (mov r8, r8)
    2fd4:	00002c49 	.word	0x00002c49
    2fd8:	00150014 	.word	0x00150014
    2fdc:	000040c9 	.word	0x000040c9
    2fe0:	0000108c 	.word	0x0000108c
    2fe4:	00001078 	.word	0x00001078
    2fe8:	0000250d 	.word	0x0000250d
    2fec:	00004085 	.word	0x00004085
    2ff0:	00150400 	.word	0x00150400
    2ff4:	000003e7 	.word	0x000003e7
    2ff8:	00004231 	.word	0x00004231
    2ffc:	00002bb5 	.word	0x00002bb5
    3000:	0000106c 	.word	0x0000106c
    3004:	20000924 	.word	0x20000924
    3008:	00002c8d 	.word	0x00002c8d

0000300c <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/ 
static sint8 hif_isr(void)
{
    300c:	b590      	push	{r4, r7, lr}
    300e:	b085      	sub	sp, #20
    3010:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    3012:	1c3b      	adds	r3, r7, #0
    3014:	330f      	adds	r3, #15
    3016:	2200      	movs	r2, #0
    3018:	701a      	strb	r2, [r3, #0]
	uint32 reg;

	tstrHifHdr strHif;

	/* validate if the bus is up or not by checking the chip id  */
	if((nm_read_reg(0x1000) & 0xfffff000) !=  0x100000) goto ERR1;
    301a:	2380      	movs	r3, #128	; 0x80
    301c:	015b      	lsls	r3, r3, #5
    301e:	1c18      	adds	r0, r3, #0
    3020:	4b69      	ldr	r3, [pc, #420]	; (31c8 <hif_isr+0x1bc>)
    3022:	4798      	blx	r3
    3024:	1c03      	adds	r3, r0, #0
    3026:	0b1b      	lsrs	r3, r3, #12
    3028:	031a      	lsls	r2, r3, #12
    302a:	2380      	movs	r3, #128	; 0x80
    302c:	035b      	lsls	r3, r3, #13
    302e:	429a      	cmp	r2, r3
    3030:	d000      	beq.n	3034 <hif_isr+0x28>
    3032:	e0c1      	b.n	31b8 <hif_isr+0x1ac>


	ret = nm_read_reg_with_ret(0x1070, &reg);
    3034:	1c3c      	adds	r4, r7, #0
    3036:	340f      	adds	r4, #15
    3038:	4a64      	ldr	r2, [pc, #400]	; (31cc <hif_isr+0x1c0>)
    303a:	1c3b      	adds	r3, r7, #0
    303c:	3308      	adds	r3, #8
    303e:	1c10      	adds	r0, r2, #0
    3040:	1c19      	adds	r1, r3, #0
    3042:	4b63      	ldr	r3, [pc, #396]	; (31d0 <hif_isr+0x1c4>)
    3044:	4798      	blx	r3
    3046:	1c03      	adds	r3, r0, #0
    3048:	7023      	strb	r3, [r4, #0]

	if(M2M_SUCCESS == ret)
    304a:	1c3b      	adds	r3, r7, #0
    304c:	330f      	adds	r3, #15
    304e:	781b      	ldrb	r3, [r3, #0]
    3050:	b25b      	sxtb	r3, r3
    3052:	2b00      	cmp	r3, #0
    3054:	d000      	beq.n	3058 <hif_isr+0x4c>
    3056:	e0af      	b.n	31b8 <hif_isr+0x1ac>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    3058:	68ba      	ldr	r2, [r7, #8]
    305a:	2301      	movs	r3, #1
    305c:	4013      	ands	r3, r2
    305e:	d100      	bne.n	3062 <hif_isr+0x56>
    3060:	e0aa      	b.n	31b8 <hif_isr+0x1ac>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    3062:	2000      	movs	r0, #0
    3064:	4b5b      	ldr	r3, [pc, #364]	; (31d4 <hif_isr+0x1c8>)
    3066:	4798      	blx	r3

			/* read the rx size */	
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    3068:	1c3c      	adds	r4, r7, #0
    306a:	340f      	adds	r4, #15
    306c:	4a57      	ldr	r2, [pc, #348]	; (31cc <hif_isr+0x1c0>)
    306e:	1c3b      	adds	r3, r7, #0
    3070:	3308      	adds	r3, #8
    3072:	1c10      	adds	r0, r2, #0
    3074:	1c19      	adds	r1, r3, #0
    3076:	4b56      	ldr	r3, [pc, #344]	; (31d0 <hif_isr+0x1c4>)
    3078:	4798      	blx	r3
    307a:	1c03      	adds	r3, r0, #0
    307c:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret)
    307e:	1c3b      	adds	r3, r7, #0
    3080:	330f      	adds	r3, #15
    3082:	781b      	ldrb	r3, [r3, #0]
    3084:	b25b      	sxtb	r3, r3
    3086:	2b00      	cmp	r3, #0
    3088:	d003      	beq.n	3092 <hif_isr+0x86>
			{
				M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_0 bus fail\n");
				nm_bsp_interrupt_ctrl(1);
    308a:	2001      	movs	r0, #1
    308c:	4b51      	ldr	r3, [pc, #324]	; (31d4 <hif_isr+0x1c8>)
    308e:	4798      	blx	r3
				goto ERR1;
    3090:	e092      	b.n	31b8 <hif_isr+0x1ac>
			}
			gu8HifSizeDone = 0;
    3092:	4b51      	ldr	r3, [pc, #324]	; (31d8 <hif_isr+0x1cc>)
    3094:	2200      	movs	r2, #0
    3096:	701a      	strb	r2, [r3, #0]
			size = (uint16)((reg >> 2) & 0xfff);	
    3098:	68bb      	ldr	r3, [r7, #8]
    309a:	089b      	lsrs	r3, r3, #2
    309c:	b29a      	uxth	r2, r3
    309e:	1c3b      	adds	r3, r7, #0
    30a0:	330c      	adds	r3, #12
    30a2:	0512      	lsls	r2, r2, #20
    30a4:	0d12      	lsrs	r2, r2, #20
    30a6:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    30a8:	1c3b      	adds	r3, r7, #0
    30aa:	330c      	adds	r3, #12
    30ac:	881b      	ldrh	r3, [r3, #0]
    30ae:	2b00      	cmp	r3, #0
    30b0:	d100      	bne.n	30b4 <hif_isr+0xa8>
    30b2:	e07a      	b.n	31aa <hif_isr+0x19e>
				uint32 address = 0;
    30b4:	2300      	movs	r3, #0
    30b6:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    30b8:	1c3c      	adds	r4, r7, #0
    30ba:	340f      	adds	r4, #15
    30bc:	4a47      	ldr	r2, [pc, #284]	; (31dc <hif_isr+0x1d0>)
    30be:	1c3b      	adds	r3, r7, #0
    30c0:	1c10      	adds	r0, r2, #0
    30c2:	1c19      	adds	r1, r3, #0
    30c4:	4b42      	ldr	r3, [pc, #264]	; (31d0 <hif_isr+0x1c4>)
    30c6:	4798      	blx	r3
    30c8:	1c03      	adds	r3, r0, #0
    30ca:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    30cc:	1c3b      	adds	r3, r7, #0
    30ce:	330f      	adds	r3, #15
    30d0:	781b      	ldrb	r3, [r3, #0]
    30d2:	b25b      	sxtb	r3, r3
    30d4:	2b00      	cmp	r3, #0
    30d6:	d003      	beq.n	30e0 <hif_isr+0xd4>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    30d8:	2001      	movs	r0, #1
    30da:	4b3e      	ldr	r3, [pc, #248]	; (31d4 <hif_isr+0x1c8>)
    30dc:	4798      	blx	r3
					goto ERR1;
    30de:	e06b      	b.n	31b8 <hif_isr+0x1ac>
				}	
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    30e0:	683a      	ldr	r2, [r7, #0]
    30e2:	1c3c      	adds	r4, r7, #0
    30e4:	340f      	adds	r4, #15
    30e6:	1d3b      	adds	r3, r7, #4
    30e8:	1c10      	adds	r0, r2, #0
    30ea:	1c19      	adds	r1, r3, #0
    30ec:	2204      	movs	r2, #4
    30ee:	4b3c      	ldr	r3, [pc, #240]	; (31e0 <hif_isr+0x1d4>)
    30f0:	4798      	blx	r3
    30f2:	1c03      	adds	r3, r0, #0
    30f4:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    30f6:	1d3b      	adds	r3, r7, #4
    30f8:	885a      	ldrh	r2, [r3, #2]
    30fa:	1d3b      	adds	r3, r7, #4
    30fc:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    30fe:	1c3b      	adds	r3, r7, #0
    3100:	330f      	adds	r3, #15
    3102:	781b      	ldrb	r3, [r3, #0]
    3104:	b25b      	sxtb	r3, r3
    3106:	2b00      	cmp	r3, #0
    3108:	d003      	beq.n	3112 <hif_isr+0x106>
				{
					M2M_ERR("(hif) address bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    310a:	2001      	movs	r0, #1
    310c:	4b31      	ldr	r3, [pc, #196]	; (31d4 <hif_isr+0x1c8>)
    310e:	4798      	blx	r3
					goto ERR1;
    3110:	e052      	b.n	31b8 <hif_isr+0x1ac>
				}
				if(strHif.u16Length != size)
    3112:	1d3b      	adds	r3, r7, #4
    3114:	885b      	ldrh	r3, [r3, #2]
    3116:	1c3a      	adds	r2, r7, #0
    3118:	320c      	adds	r2, #12
    311a:	8812      	ldrh	r2, [r2, #0]
    311c:	429a      	cmp	r2, r3
    311e:	d010      	beq.n	3142 <hif_isr+0x136>
				{
					if((size - strHif.u16Length) > 4)
    3120:	1c3b      	adds	r3, r7, #0
    3122:	330c      	adds	r3, #12
    3124:	881a      	ldrh	r2, [r3, #0]
    3126:	1d3b      	adds	r3, r7, #4
    3128:	885b      	ldrh	r3, [r3, #2]
    312a:	1ad3      	subs	r3, r2, r3
    312c:	2b04      	cmp	r3, #4
    312e:	dd08      	ble.n	3142 <hif_isr+0x136>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    3130:	2001      	movs	r0, #1
    3132:	4b28      	ldr	r3, [pc, #160]	; (31d4 <hif_isr+0x1c8>)
    3134:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    3136:	1c3b      	adds	r3, r7, #0
    3138:	330f      	adds	r3, #15
    313a:	22fa      	movs	r2, #250	; 0xfa
    313c:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	e03a      	b.n	31b8 <hif_isr+0x1ac>
					}
				}

				if(M2M_REQ_GRP_WIFI == strHif.u8Gid)
    3142:	1d3b      	adds	r3, r7, #4
    3144:	781b      	ldrb	r3, [r3, #0]
    3146:	2b01      	cmp	r3, #1
    3148:	d111      	bne.n	316e <hif_isr+0x162>
				{
					if(pfWifiCb)
    314a:	4b26      	ldr	r3, [pc, #152]	; (31e4 <hif_isr+0x1d8>)
    314c:	681b      	ldr	r3, [r3, #0]
    314e:	2b00      	cmp	r3, #0
    3150:	d022      	beq.n	3198 <hif_isr+0x18c>
						pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET, strHif.u8Gid);
    3152:	4b24      	ldr	r3, [pc, #144]	; (31e4 <hif_isr+0x1d8>)
    3154:	681c      	ldr	r4, [r3, #0]
    3156:	1d3b      	adds	r3, r7, #4
    3158:	7858      	ldrb	r0, [r3, #1]
    315a:	1d3b      	adds	r3, r7, #4
    315c:	885b      	ldrh	r3, [r3, #2]
    315e:	3b04      	subs	r3, #4
    3160:	b299      	uxth	r1, r3
    3162:	683b      	ldr	r3, [r7, #0]
    3164:	1d1a      	adds	r2, r3, #4
    3166:	1d3b      	adds	r3, r7, #4
    3168:	781b      	ldrb	r3, [r3, #0]
    316a:	47a0      	blx	r4
    316c:	e014      	b.n	3198 <hif_isr+0x18c>
					
				} 
				else if(M2M_REQ_GRP_IP == strHif.u8Gid)
    316e:	1d3b      	adds	r3, r7, #4
    3170:	781b      	ldrb	r3, [r3, #0]
    3172:	2b02      	cmp	r3, #2
    3174:	d110      	bne.n	3198 <hif_isr+0x18c>
				{
					if(pfIpCb) 
    3176:	4b1c      	ldr	r3, [pc, #112]	; (31e8 <hif_isr+0x1dc>)
    3178:	681b      	ldr	r3, [r3, #0]
    317a:	2b00      	cmp	r3, #0
    317c:	d00c      	beq.n	3198 <hif_isr+0x18c>
						pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET, strHif.u8Gid);
    317e:	4b1a      	ldr	r3, [pc, #104]	; (31e8 <hif_isr+0x1dc>)
    3180:	681c      	ldr	r4, [r3, #0]
    3182:	1d3b      	adds	r3, r7, #4
    3184:	7858      	ldrb	r0, [r3, #1]
    3186:	1d3b      	adds	r3, r7, #4
    3188:	885b      	ldrh	r3, [r3, #2]
    318a:	3b04      	subs	r3, #4
    318c:	b299      	uxth	r1, r3
    318e:	683b      	ldr	r3, [r7, #0]
    3190:	1d1a      	adds	r2, r3, #4
    3192:	1d3b      	adds	r3, r7, #4
    3194:	781b      	ldrb	r3, [r3, #0]
    3196:	47a0      	blx	r4
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
				}
				#ifndef ENABLE_UNO_BOARD
				if(!gu8HifSizeDone)
    3198:	4b0f      	ldr	r3, [pc, #60]	; (31d8 <hif_isr+0x1cc>)
    319a:	781b      	ldrb	r3, [r3, #0]
    319c:	b2db      	uxtb	r3, r3
    319e:	2b00      	cmp	r3, #0
    31a0:	d102      	bne.n	31a8 <hif_isr+0x19c>
				{
					hif_set_rx_done();
    31a2:	4b12      	ldr	r3, [pc, #72]	; (31ec <hif_isr+0x1e0>)
    31a4:	4798      	blx	r3
    31a6:	e007      	b.n	31b8 <hif_isr+0x1ac>
    31a8:	e006      	b.n	31b8 <hif_isr+0x1ac>
				}
				#endif
			}
			else
			{
				ret = M2M_ERR_BUS_FAIL;
    31aa:	1c3b      	adds	r3, r7, #0
    31ac:	330f      	adds	r3, #15
    31ae:	22fa      	movs	r2, #250	; 0xfa
    31b0:	701a      	strb	r2, [r3, #0]
				hif_set_rx_done();
    31b2:	4b0e      	ldr	r3, [pc, #56]	; (31ec <hif_isr+0x1e0>)
    31b4:	4798      	blx	r3
    31b6:	e7ff      	b.n	31b8 <hif_isr+0x1ac>
		M2M_ERR("(hif) bus error\n");
	}

ERR1:

	return ret;
    31b8:	1c3b      	adds	r3, r7, #0
    31ba:	330f      	adds	r3, #15
    31bc:	781b      	ldrb	r3, [r3, #0]
    31be:	b25b      	sxtb	r3, r3
}
    31c0:	1c18      	adds	r0, r3, #0
    31c2:	46bd      	mov	sp, r7
    31c4:	b005      	add	sp, #20
    31c6:	bd90      	pop	{r4, r7, pc}
    31c8:	00004085 	.word	0x00004085
    31cc:	00001070 	.word	0x00001070
    31d0:	000040a5 	.word	0x000040a5
    31d4:	0000250d 	.word	0x0000250d
    31d8:	20000926 	.word	0x20000926
    31dc:	00001084 	.word	0x00001084
    31e0:	0000411d 	.word	0x0000411d
    31e4:	20000928 	.word	0x20000928
    31e8:	2000092c 	.word	0x2000092c
    31ec:	00002ca9 	.word	0x00002ca9

000031f0 <hif_handle_isr>:
*   @author		M.S.M
*   @date		27 MARCH 2013
*	@version	1.0
*/
sint8 hif_handle_isr(void)
{
    31f0:	b590      	push	{r4, r7, lr}
    31f2:	b083      	sub	sp, #12
    31f4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    31f6:	1dfb      	adds	r3, r7, #7
    31f8:	2200      	movs	r2, #0
    31fa:	701a      	strb	r2, [r3, #0]
	
	while (gu8Interrupt) {
    31fc:	e011      	b.n	3222 <hif_handle_isr+0x32>
		ret = hif_isr(); 
    31fe:	1dfc      	adds	r4, r7, #7
    3200:	4b0e      	ldr	r3, [pc, #56]	; (323c <hif_handle_isr+0x4c>)
    3202:	4798      	blx	r3
    3204:	1c03      	adds	r3, r0, #0
    3206:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    3208:	1dfb      	adds	r3, r7, #7
    320a:	781b      	ldrb	r3, [r3, #0]
    320c:	b25b      	sxtb	r3, r3
    320e:	2b00      	cmp	r3, #0
    3210:	d000      	beq.n	3214 <hif_handle_isr+0x24>
			break;
    3212:	e00b      	b.n	322c <hif_handle_isr+0x3c>
		}		
		gu8Interrupt--;
    3214:	4b0a      	ldr	r3, [pc, #40]	; (3240 <hif_handle_isr+0x50>)
    3216:	781b      	ldrb	r3, [r3, #0]
    3218:	b2db      	uxtb	r3, r3
    321a:	3b01      	subs	r3, #1
    321c:	b2da      	uxtb	r2, r3
    321e:	4b08      	ldr	r3, [pc, #32]	; (3240 <hif_handle_isr+0x50>)
    3220:	701a      	strb	r2, [r3, #0]
*/
sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;
	
	while (gu8Interrupt) {
    3222:	4b07      	ldr	r3, [pc, #28]	; (3240 <hif_handle_isr+0x50>)
    3224:	781b      	ldrb	r3, [r3, #0]
    3226:	b2db      	uxtb	r3, r3
    3228:	2b00      	cmp	r3, #0
    322a:	d1e8      	bne.n	31fe <hif_handle_isr+0xe>
		if(ret != M2M_SUCCESS) {
			break;
		}		
		gu8Interrupt--;
	}
	return ret;
    322c:	1dfb      	adds	r3, r7, #7
    322e:	781b      	ldrb	r3, [r3, #0]
    3230:	b25b      	sxtb	r3, r3
}
    3232:	1c18      	adds	r0, r3, #0
    3234:	46bd      	mov	sp, r7
    3236:	b003      	add	sp, #12
    3238:	bd90      	pop	{r4, r7, pc}
    323a:	46c0      	nop			; (mov r8, r8)
    323c:	0000300d 	.word	0x0000300d
    3240:	20000927 	.word	0x20000927

00003244 <hif_receive>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/ 
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz)
{
    3244:	b580      	push	{r7, lr}
    3246:	b088      	sub	sp, #32
    3248:	af00      	add	r7, sp, #0
    324a:	60f8      	str	r0, [r7, #12]
    324c:	60b9      	str	r1, [r7, #8]
    324e:	1dbb      	adds	r3, r7, #6
    3250:	801a      	strh	r2, [r3, #0]
	uint32 address, reg;
	uint16 size;

	reg = nm_read_reg(WIFI_HOST_RCV_CTRL_0);	
    3252:	4b1d      	ldr	r3, [pc, #116]	; (32c8 <hif_receive+0x84>)
    3254:	1c18      	adds	r0, r3, #0
    3256:	4b1d      	ldr	r3, [pc, #116]	; (32cc <hif_receive+0x88>)
    3258:	4798      	blx	r3
    325a:	1c03      	adds	r3, r0, #0
    325c:	61fb      	str	r3, [r7, #28]

	if(reg & 0x1)
    325e:	69fa      	ldr	r2, [r7, #28]
    3260:	2301      	movs	r3, #1
    3262:	4013      	ands	r3, r2
    3264:	d028      	beq.n	32b8 <hif_receive+0x74>
	{
		size = (uint16)((reg >> 2) & 0xfff);	
    3266:	69fb      	ldr	r3, [r7, #28]
    3268:	089b      	lsrs	r3, r3, #2
    326a:	b29a      	uxth	r2, r3
    326c:	1c3b      	adds	r3, r7, #0
    326e:	331a      	adds	r3, #26
    3270:	0512      	lsls	r2, r2, #20
    3272:	0d12      	lsrs	r2, r2, #20
    3274:	801a      	strh	r2, [r3, #0]
		address = nm_read_reg(WIFI_HOST_RCV_CTRL_1);
    3276:	4b16      	ldr	r3, [pc, #88]	; (32d0 <hif_receive+0x8c>)
    3278:	1c18      	adds	r0, r3, #0
    327a:	4b14      	ldr	r3, [pc, #80]	; (32cc <hif_receive+0x88>)
    327c:	4798      	blx	r3
    327e:	1c03      	adds	r3, r0, #0
    3280:	617b      	str	r3, [r7, #20]

		/* Receive the payload */
		nm_read_block(u32Addr, pu8Buf, u16Sz);
    3282:	68f9      	ldr	r1, [r7, #12]
    3284:	68ba      	ldr	r2, [r7, #8]
    3286:	1dbb      	adds	r3, r7, #6
    3288:	881b      	ldrh	r3, [r3, #0]
    328a:	1c08      	adds	r0, r1, #0
    328c:	1c11      	adds	r1, r2, #0
    328e:	1c1a      	adds	r2, r3, #0
    3290:	4b10      	ldr	r3, [pc, #64]	; (32d4 <hif_receive+0x90>)
    3292:	4798      	blx	r3

		/* check if this is the last packet */
		if(((address+size) - (u32Addr+u16Sz)) < 4)
    3294:	1c3b      	adds	r3, r7, #0
    3296:	331a      	adds	r3, #26
    3298:	881a      	ldrh	r2, [r3, #0]
    329a:	697b      	ldr	r3, [r7, #20]
    329c:	18d2      	adds	r2, r2, r3
    329e:	1dbb      	adds	r3, r7, #6
    32a0:	8819      	ldrh	r1, [r3, #0]
    32a2:	68fb      	ldr	r3, [r7, #12]
    32a4:	18cb      	adds	r3, r1, r3
    32a6:	1ad3      	subs	r3, r2, r3
    32a8:	2b03      	cmp	r3, #3
    32aa:	d807      	bhi.n	32bc <hif_receive+0x78>
		{
			gu8HifSizeDone = 1;
    32ac:	4b0a      	ldr	r3, [pc, #40]	; (32d8 <hif_receive+0x94>)
    32ae:	2201      	movs	r2, #1
    32b0:	701a      	strb	r2, [r3, #0]
			/* set RX done */
			hif_set_rx_done();
    32b2:	4b0a      	ldr	r3, [pc, #40]	; (32dc <hif_receive+0x98>)
    32b4:	4798      	blx	r3
    32b6:	e001      	b.n	32bc <hif_receive+0x78>
		}
	}
	else
	{
		M2M_ERR("receive called without RX flag\n");
		return M2M_ERR_RCV;
    32b8:	23fe      	movs	r3, #254	; 0xfe
    32ba:	e000      	b.n	32be <hif_receive+0x7a>
	}

	return M2M_SUCCESS;
    32bc:	2300      	movs	r3, #0
    32be:	b25b      	sxtb	r3, r3
}
    32c0:	1c18      	adds	r0, r3, #0
    32c2:	46bd      	mov	sp, r7
    32c4:	b008      	add	sp, #32
    32c6:	bd80      	pop	{r7, pc}
    32c8:	00001070 	.word	0x00001070
    32cc:	00004085 	.word	0x00004085
    32d0:	00001084 	.word	0x00001084
    32d4:	0000411d 	.word	0x0000411d
    32d8:	20000926 	.word	0x20000926
    32dc:	00002ca9 	.word	0x00002ca9

000032e0 <hif_register_wifi_cb>:
*   @author		Awad A. Bekhet
*   @date		23 June 2014
*	@version	1.0
*/
void hif_register_wifi_cb(tpfSetWiFiCallBack fn)
{
    32e0:	b580      	push	{r7, lr}
    32e2:	b082      	sub	sp, #8
    32e4:	af00      	add	r7, sp, #0
    32e6:	6078      	str	r0, [r7, #4]
	pfWifiCb = fn;
    32e8:	4b02      	ldr	r3, [pc, #8]	; (32f4 <hif_register_wifi_cb+0x14>)
    32ea:	687a      	ldr	r2, [r7, #4]
    32ec:	601a      	str	r2, [r3, #0]
}
    32ee:	46bd      	mov	sp, r7
    32f0:	b002      	add	sp, #8
    32f2:	bd80      	pop	{r7, pc}
    32f4:	20000928 	.word	0x20000928

000032f8 <hif_register_ip_cb>:
*   @author		Awad A. Bekhet
*   @date		23 June 2014
*	@version	1.0
*/
void hif_register_ip_cb(tpfSetIPCallBack fn)
{
    32f8:	b580      	push	{r7, lr}
    32fa:	b082      	sub	sp, #8
    32fc:	af00      	add	r7, sp, #0
    32fe:	6078      	str	r0, [r7, #4]
	pfIpCb = fn;
    3300:	4b02      	ldr	r3, [pc, #8]	; (330c <hif_register_ip_cb+0x14>)
    3302:	687a      	ldr	r2, [r7, #4]
    3304:	601a      	str	r2, [r3, #0]
}
    3306:	46bd      	mov	sp, r7
    3308:	b002      	add	sp, #8
    330a:	bd80      	pop	{r7, pc}
    330c:	2000092c 	.word	0x2000092c

00003310 <m2m_wifi_cb>:
*	@author		
*	@date		
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr, uint8 grp)
{
    3310:	b580      	push	{r7, lr}
    3312:	b0a2      	sub	sp, #136	; 0x88
    3314:	af00      	add	r7, sp, #0
    3316:	603a      	str	r2, [r7, #0]
    3318:	1c1a      	adds	r2, r3, #0
    331a:	1dfb      	adds	r3, r7, #7
    331c:	7018      	strb	r0, [r3, #0]
    331e:	1d3b      	adds	r3, r7, #4
    3320:	8019      	strh	r1, [r3, #0]
    3322:	1dbb      	adds	r3, r7, #6
    3324:	701a      	strb	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    3326:	1dfb      	adds	r3, r7, #7
    3328:	781b      	ldrb	r3, [r3, #0]
    332a:	2b2a      	cmp	r3, #42	; 0x2a
    332c:	d117      	bne.n	335e <m2m_wifi_cb+0x4e>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged)) == M2M_SUCCESS)
    332e:	683a      	ldr	r2, [r7, #0]
    3330:	1c3b      	adds	r3, r7, #0
    3332:	337c      	adds	r3, #124	; 0x7c
    3334:	1c10      	adds	r0, r2, #0
    3336:	1c19      	adds	r1, r3, #0
    3338:	2204      	movs	r2, #4
    333a:	4ba5      	ldr	r3, [pc, #660]	; (35d0 <m2m_wifi_cb+0x2c0>)
    333c:	4798      	blx	r3
    333e:	1c03      	adds	r3, r0, #0
    3340:	2b00      	cmp	r3, #0
    3342:	d10b      	bne.n	335c <m2m_wifi_cb+0x4c>
		{
			if (gpfAppWifiCb)
    3344:	4ba3      	ldr	r3, [pc, #652]	; (35d4 <m2m_wifi_cb+0x2c4>)
    3346:	681b      	ldr	r3, [r3, #0]
    3348:	2b00      	cmp	r3, #0
    334a:	d007      	beq.n	335c <m2m_wifi_cb+0x4c>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    334c:	4ba1      	ldr	r3, [pc, #644]	; (35d4 <m2m_wifi_cb+0x2c4>)
    334e:	681b      	ldr	r3, [r3, #0]
    3350:	1c3a      	adds	r2, r7, #0
    3352:	327c      	adds	r2, #124	; 0x7c
    3354:	202a      	movs	r0, #42	; 0x2a
    3356:	1c11      	adds	r1, r2, #0
    3358:	4798      	blx	r3
    335a:	e136      	b.n	35ca <m2m_wifi_cb+0x2ba>
    335c:	e135      	b.n	35ca <m2m_wifi_cb+0x2ba>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    335e:	1dfb      	adds	r3, r7, #7
    3360:	781b      	ldrb	r3, [r3, #0]
    3362:	2b07      	cmp	r3, #7
    3364:	d100      	bne.n	3368 <m2m_wifi_cb+0x58>
    3366:	e130      	b.n	35ca <m2m_wifi_cb+0x2ba>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    3368:	1dfb      	adds	r3, r7, #7
    336a:	781b      	ldrb	r3, [r3, #0]
    336c:	2b35      	cmp	r3, #53	; 0x35
    336e:	d118      	bne.n	33a2 <m2m_wifi_cb+0x92>
	{
		if (hif_receive(u32Addr, rx_buf, 4) == M2M_SUCCESS)
    3370:	683a      	ldr	r2, [r7, #0]
    3372:	1c3b      	adds	r3, r7, #0
    3374:	3380      	adds	r3, #128	; 0x80
    3376:	1c10      	adds	r0, r2, #0
    3378:	1c19      	adds	r1, r3, #0
    337a:	2204      	movs	r2, #4
    337c:	4b94      	ldr	r3, [pc, #592]	; (35d0 <m2m_wifi_cb+0x2c0>)
    337e:	4798      	blx	r3
    3380:	1c03      	adds	r3, r0, #0
    3382:	2b00      	cmp	r3, #0
    3384:	d000      	beq.n	3388 <m2m_wifi_cb+0x78>
    3386:	e120      	b.n	35ca <m2m_wifi_cb+0x2ba>
		{
			if (gpfAppWifiCb)
    3388:	4b92      	ldr	r3, [pc, #584]	; (35d4 <m2m_wifi_cb+0x2c4>)
    338a:	681b      	ldr	r3, [r3, #0]
    338c:	2b00      	cmp	r3, #0
    338e:	d100      	bne.n	3392 <m2m_wifi_cb+0x82>
    3390:	e11b      	b.n	35ca <m2m_wifi_cb+0x2ba>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, rx_buf);
    3392:	4b90      	ldr	r3, [pc, #576]	; (35d4 <m2m_wifi_cb+0x2c4>)
    3394:	681b      	ldr	r3, [r3, #0]
    3396:	1c3a      	adds	r2, r7, #0
    3398:	3280      	adds	r2, #128	; 0x80
    339a:	2035      	movs	r0, #53	; 0x35
    339c:	1c11      	adds	r1, r2, #0
    339e:	4798      	blx	r3
    33a0:	e113      	b.n	35ca <m2m_wifi_cb+0x2ba>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    33a2:	1dfb      	adds	r3, r7, #7
    33a4:	781b      	ldrb	r3, [r3, #0]
    33a6:	2b32      	cmp	r3, #50	; 0x32
    33a8:	d11e      	bne.n	33e8 <m2m_wifi_cb+0xd8>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    33aa:	1c3b      	adds	r3, r7, #0
    33ac:	330c      	adds	r3, #12
    33ae:	1c18      	adds	r0, r3, #0
    33b0:	2100      	movs	r1, #0
    33b2:	2264      	movs	r2, #100	; 0x64
    33b4:	4b88      	ldr	r3, [pc, #544]	; (35d8 <m2m_wifi_cb+0x2c8>)
    33b6:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo)) == M2M_SUCCESS)
    33b8:	683a      	ldr	r2, [r7, #0]
    33ba:	1c3b      	adds	r3, r7, #0
    33bc:	330c      	adds	r3, #12
    33be:	1c10      	adds	r0, r2, #0
    33c0:	1c19      	adds	r1, r3, #0
    33c2:	2264      	movs	r2, #100	; 0x64
    33c4:	4b82      	ldr	r3, [pc, #520]	; (35d0 <m2m_wifi_cb+0x2c0>)
    33c6:	4798      	blx	r3
    33c8:	1c03      	adds	r3, r0, #0
    33ca:	2b00      	cmp	r3, #0
    33cc:	d10b      	bne.n	33e6 <m2m_wifi_cb+0xd6>
		{
			if (gpfAppWifiCb)
    33ce:	4b81      	ldr	r3, [pc, #516]	; (35d4 <m2m_wifi_cb+0x2c4>)
    33d0:	681b      	ldr	r3, [r3, #0]
    33d2:	2b00      	cmp	r3, #0
    33d4:	d007      	beq.n	33e6 <m2m_wifi_cb+0xd6>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    33d6:	4b7f      	ldr	r3, [pc, #508]	; (35d4 <m2m_wifi_cb+0x2c4>)
    33d8:	681b      	ldr	r3, [r3, #0]
    33da:	1c3a      	adds	r2, r7, #0
    33dc:	320c      	adds	r2, #12
    33de:	2032      	movs	r0, #50	; 0x32
    33e0:	1c11      	adds	r1, r2, #0
    33e2:	4798      	blx	r3
    33e4:	e0f1      	b.n	35ca <m2m_wifi_cb+0x2ba>
    33e6:	e0f0      	b.n	35ca <m2m_wifi_cb+0x2ba>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_P2P)
    33e8:	1dfb      	adds	r3, r7, #7
    33ea:	781b      	ldrb	r3, [r3, #0]
    33ec:	2b48      	cmp	r3, #72	; 0x48
    33ee:	d11e      	bne.n	342e <m2m_wifi_cb+0x11e>
	{
		tstrM2MP2pResp strP2p;
		m2m_memset((uint8*)&strP2p,0,sizeof(tstrM2MP2pResp));
    33f0:	1c3b      	adds	r3, r7, #0
    33f2:	3378      	adds	r3, #120	; 0x78
    33f4:	1c18      	adds	r0, r3, #0
    33f6:	2100      	movs	r1, #0
    33f8:	2204      	movs	r2, #4
    33fa:	4b77      	ldr	r3, [pc, #476]	; (35d8 <m2m_wifi_cb+0x2c8>)
    33fc:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strP2p,sizeof(tstrM2MP2pResp)) == M2M_SUCCESS)
    33fe:	683a      	ldr	r2, [r7, #0]
    3400:	1c3b      	adds	r3, r7, #0
    3402:	3378      	adds	r3, #120	; 0x78
    3404:	1c10      	adds	r0, r2, #0
    3406:	1c19      	adds	r1, r3, #0
    3408:	2204      	movs	r2, #4
    340a:	4b71      	ldr	r3, [pc, #452]	; (35d0 <m2m_wifi_cb+0x2c0>)
    340c:	4798      	blx	r3
    340e:	1c03      	adds	r3, r0, #0
    3410:	2b00      	cmp	r3, #0
    3412:	d10b      	bne.n	342c <m2m_wifi_cb+0x11c>
		{
			if (gpfAppWifiCb)
    3414:	4b6f      	ldr	r3, [pc, #444]	; (35d4 <m2m_wifi_cb+0x2c4>)
    3416:	681b      	ldr	r3, [r3, #0]
    3418:	2b00      	cmp	r3, #0
    341a:	d007      	beq.n	342c <m2m_wifi_cb+0x11c>
				gpfAppWifiCb(M2M_WIFI_RESP_P2P, &strP2p);
    341c:	4b6d      	ldr	r3, [pc, #436]	; (35d4 <m2m_wifi_cb+0x2c4>)
    341e:	681b      	ldr	r3, [r3, #0]
    3420:	1c3a      	adds	r2, r7, #0
    3422:	3278      	adds	r2, #120	; 0x78
    3424:	2048      	movs	r0, #72	; 0x48
    3426:	1c11      	adds	r1, r2, #0
    3428:	4798      	blx	r3
    342a:	e0ce      	b.n	35ca <m2m_wifi_cb+0x2ba>
    342c:	e0cd      	b.n	35ca <m2m_wifi_cb+0x2ba>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_AP)
    342e:	1dfb      	adds	r3, r7, #7
    3430:	781b      	ldrb	r3, [r3, #0]
    3432:	2b5c      	cmp	r3, #92	; 0x5c
    3434:	d11e      	bne.n	3474 <m2m_wifi_cb+0x164>
	{
		tstrM2MAPResp strAp;
		m2m_memset((uint8*)&strAp,0,sizeof(tstrM2MAPResp));
    3436:	1c3b      	adds	r3, r7, #0
    3438:	3374      	adds	r3, #116	; 0x74
    343a:	1c18      	adds	r0, r3, #0
    343c:	2100      	movs	r1, #0
    343e:	2204      	movs	r2, #4
    3440:	4b65      	ldr	r3, [pc, #404]	; (35d8 <m2m_wifi_cb+0x2c8>)
    3442:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strAp,sizeof(tstrM2MAPResp)) == M2M_SUCCESS)
    3444:	683a      	ldr	r2, [r7, #0]
    3446:	1c3b      	adds	r3, r7, #0
    3448:	3374      	adds	r3, #116	; 0x74
    344a:	1c10      	adds	r0, r2, #0
    344c:	1c19      	adds	r1, r3, #0
    344e:	2204      	movs	r2, #4
    3450:	4b5f      	ldr	r3, [pc, #380]	; (35d0 <m2m_wifi_cb+0x2c0>)
    3452:	4798      	blx	r3
    3454:	1c03      	adds	r3, r0, #0
    3456:	2b00      	cmp	r3, #0
    3458:	d10b      	bne.n	3472 <m2m_wifi_cb+0x162>
		{
			if (gpfAppWifiCb)
    345a:	4b5e      	ldr	r3, [pc, #376]	; (35d4 <m2m_wifi_cb+0x2c4>)
    345c:	681b      	ldr	r3, [r3, #0]
    345e:	2b00      	cmp	r3, #0
    3460:	d007      	beq.n	3472 <m2m_wifi_cb+0x162>
				gpfAppWifiCb(M2M_WIFI_RESP_AP, &strAp);
    3462:	4b5c      	ldr	r3, [pc, #368]	; (35d4 <m2m_wifi_cb+0x2c4>)
    3464:	681b      	ldr	r3, [r3, #0]
    3466:	1c3a      	adds	r2, r7, #0
    3468:	3274      	adds	r2, #116	; 0x74
    346a:	205c      	movs	r0, #92	; 0x5c
    346c:	1c11      	adds	r1, r2, #0
    346e:	4798      	blx	r3
    3470:	e0ab      	b.n	35ca <m2m_wifi_cb+0x2ba>
    3472:	e0aa      	b.n	35ca <m2m_wifi_cb+0x2ba>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    3474:	1dfb      	adds	r3, r7, #7
    3476:	781b      	ldrb	r3, [r3, #0]
    3478:	2b37      	cmp	r3, #55	; 0x37
    347a:	d116      	bne.n	34aa <m2m_wifi_cb+0x19a>
	{
		if(hif_receive(u32Addr, rx_buf, 4) == M2M_SUCCESS)
    347c:	683a      	ldr	r2, [r7, #0]
    347e:	1c3b      	adds	r3, r7, #0
    3480:	3380      	adds	r3, #128	; 0x80
    3482:	1c10      	adds	r0, r2, #0
    3484:	1c19      	adds	r1, r3, #0
    3486:	2204      	movs	r2, #4
    3488:	4b51      	ldr	r3, [pc, #324]	; (35d0 <m2m_wifi_cb+0x2c0>)
    348a:	4798      	blx	r3
    348c:	1c03      	adds	r3, r0, #0
    348e:	2b00      	cmp	r3, #0
    3490:	d000      	beq.n	3494 <m2m_wifi_cb+0x184>
    3492:	e09a      	b.n	35ca <m2m_wifi_cb+0x2ba>
		{
			M2M_DBG("Conflicted IP\"%u.%u.%u.%u\"\n", rx_buf[0], rx_buf[1],rx_buf[2], rx_buf[3]);
			if (gpfAppWifiCb)
    3494:	4b4f      	ldr	r3, [pc, #316]	; (35d4 <m2m_wifi_cb+0x2c4>)
    3496:	681b      	ldr	r3, [r3, #0]
    3498:	2b00      	cmp	r3, #0
    349a:	d100      	bne.n	349e <m2m_wifi_cb+0x18e>
    349c:	e095      	b.n	35ca <m2m_wifi_cb+0x2ba>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    349e:	4b4d      	ldr	r3, [pc, #308]	; (35d4 <m2m_wifi_cb+0x2c4>)
    34a0:	681b      	ldr	r3, [r3, #0]
    34a2:	2037      	movs	r0, #55	; 0x37
    34a4:	2100      	movs	r1, #0
    34a6:	4798      	blx	r3
    34a8:	e08f      	b.n	35ca <m2m_wifi_cb+0x2ba>
	
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    34aa:	1dfb      	adds	r3, r7, #7
    34ac:	781b      	ldrb	r3, [r3, #0]
    34ae:	2b2f      	cmp	r3, #47	; 0x2f
    34b0:	d11f      	bne.n	34f2 <m2m_wifi_cb+0x1e2>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    34b2:	4b4a      	ldr	r3, [pc, #296]	; (35dc <m2m_wifi_cb+0x2cc>)
    34b4:	2200      	movs	r2, #0
    34b6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone)) == M2M_SUCCESS)
    34b8:	683a      	ldr	r2, [r7, #0]
    34ba:	1c3b      	adds	r3, r7, #0
    34bc:	3370      	adds	r3, #112	; 0x70
    34be:	1c10      	adds	r0, r2, #0
    34c0:	1c19      	adds	r1, r3, #0
    34c2:	2204      	movs	r2, #4
    34c4:	4b42      	ldr	r3, [pc, #264]	; (35d0 <m2m_wifi_cb+0x2c0>)
    34c6:	4798      	blx	r3
    34c8:	1c03      	adds	r3, r0, #0
    34ca:	2b00      	cmp	r3, #0
    34cc:	d110      	bne.n	34f0 <m2m_wifi_cb+0x1e0>
		{
			gu8ChNum = strState.u8NumofCh;
    34ce:	1c3b      	adds	r3, r7, #0
    34d0:	3370      	adds	r3, #112	; 0x70
    34d2:	781a      	ldrb	r2, [r3, #0]
    34d4:	4b42      	ldr	r3, [pc, #264]	; (35e0 <m2m_wifi_cb+0x2d0>)
    34d6:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    34d8:	4b3e      	ldr	r3, [pc, #248]	; (35d4 <m2m_wifi_cb+0x2c4>)
    34da:	681b      	ldr	r3, [r3, #0]
    34dc:	2b00      	cmp	r3, #0
    34de:	d007      	beq.n	34f0 <m2m_wifi_cb+0x1e0>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    34e0:	4b3c      	ldr	r3, [pc, #240]	; (35d4 <m2m_wifi_cb+0x2c4>)
    34e2:	681b      	ldr	r3, [r3, #0]
    34e4:	1c3a      	adds	r2, r7, #0
    34e6:	3270      	adds	r2, #112	; 0x70
    34e8:	202f      	movs	r0, #47	; 0x2f
    34ea:	1c11      	adds	r1, r2, #0
    34ec:	4798      	blx	r3
    34ee:	e06c      	b.n	35ca <m2m_wifi_cb+0x2ba>
    34f0:	e06b      	b.n	35ca <m2m_wifi_cb+0x2ba>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    34f2:	1dfb      	adds	r3, r7, #7
    34f4:	781b      	ldrb	r3, [r3, #0]
    34f6:	2b31      	cmp	r3, #49	; 0x31
    34f8:	d117      	bne.n	352a <m2m_wifi_cb+0x21a>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult)) == M2M_SUCCESS)
    34fa:	683a      	ldr	r2, [r7, #0]
    34fc:	1c3b      	adds	r3, r7, #0
    34fe:	330c      	adds	r3, #12
    3500:	1c10      	adds	r0, r2, #0
    3502:	1c19      	adds	r1, r3, #0
    3504:	222c      	movs	r2, #44	; 0x2c
    3506:	4b32      	ldr	r3, [pc, #200]	; (35d0 <m2m_wifi_cb+0x2c0>)
    3508:	4798      	blx	r3
    350a:	1c03      	adds	r3, r0, #0
    350c:	2b00      	cmp	r3, #0
    350e:	d10b      	bne.n	3528 <m2m_wifi_cb+0x218>
		{
			if (gpfAppWifiCb)
    3510:	4b30      	ldr	r3, [pc, #192]	; (35d4 <m2m_wifi_cb+0x2c4>)
    3512:	681b      	ldr	r3, [r3, #0]
    3514:	2b00      	cmp	r3, #0
    3516:	d007      	beq.n	3528 <m2m_wifi_cb+0x218>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    3518:	4b2e      	ldr	r3, [pc, #184]	; (35d4 <m2m_wifi_cb+0x2c4>)
    351a:	681b      	ldr	r3, [r3, #0]
    351c:	1c3a      	adds	r2, r7, #0
    351e:	320c      	adds	r2, #12
    3520:	2031      	movs	r0, #49	; 0x31
    3522:	1c11      	adds	r1, r2, #0
    3524:	4798      	blx	r3
    3526:	e050      	b.n	35ca <m2m_wifi_cb+0x2ba>
    3528:	e04f      	b.n	35ca <m2m_wifi_cb+0x2ba>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    352a:	1dfb      	adds	r3, r7, #7
    352c:	781b      	ldrb	r3, [r3, #0]
    352e:	2b04      	cmp	r3, #4
    3530:	d116      	bne.n	3560 <m2m_wifi_cb+0x250>
	{
		if (hif_receive(u32Addr, rx_buf, 4) == M2M_SUCCESS)
    3532:	683a      	ldr	r2, [r7, #0]
    3534:	1c3b      	adds	r3, r7, #0
    3536:	3380      	adds	r3, #128	; 0x80
    3538:	1c10      	adds	r0, r2, #0
    353a:	1c19      	adds	r1, r3, #0
    353c:	2204      	movs	r2, #4
    353e:	4b24      	ldr	r3, [pc, #144]	; (35d0 <m2m_wifi_cb+0x2c0>)
    3540:	4798      	blx	r3
    3542:	1c03      	adds	r3, r0, #0
    3544:	2b00      	cmp	r3, #0
    3546:	d140      	bne.n	35ca <m2m_wifi_cb+0x2ba>
		{
			if (gpfAppWifiCb)
    3548:	4b22      	ldr	r3, [pc, #136]	; (35d4 <m2m_wifi_cb+0x2c4>)
    354a:	681b      	ldr	r3, [r3, #0]
    354c:	2b00      	cmp	r3, #0
    354e:	d03c      	beq.n	35ca <m2m_wifi_cb+0x2ba>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    3550:	4b20      	ldr	r3, [pc, #128]	; (35d4 <m2m_wifi_cb+0x2c4>)
    3552:	681b      	ldr	r3, [r3, #0]
    3554:	1c3a      	adds	r2, r7, #0
    3556:	3280      	adds	r2, #128	; 0x80
    3558:	2004      	movs	r0, #4
    355a:	1c11      	adds	r1, r2, #0
    355c:	4798      	blx	r3
    355e:	e034      	b.n	35ca <m2m_wifi_cb+0x2ba>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    3560:	1dfb      	adds	r3, r7, #7
    3562:	781b      	ldrb	r3, [r3, #0]
    3564:	2b15      	cmp	r3, #21
    3566:	d116      	bne.n	3596 <m2m_wifi_cb+0x286>
	{
		if (hif_receive(u32Addr, rx_buf, 4) == M2M_SUCCESS)
    3568:	683a      	ldr	r2, [r7, #0]
    356a:	1c3b      	adds	r3, r7, #0
    356c:	3380      	adds	r3, #128	; 0x80
    356e:	1c10      	adds	r0, r2, #0
    3570:	1c19      	adds	r1, r3, #0
    3572:	2204      	movs	r2, #4
    3574:	4b16      	ldr	r3, [pc, #88]	; (35d0 <m2m_wifi_cb+0x2c0>)
    3576:	4798      	blx	r3
    3578:	1c03      	adds	r3, r0, #0
    357a:	2b00      	cmp	r3, #0
    357c:	d125      	bne.n	35ca <m2m_wifi_cb+0x2ba>
		{
			if (gpfAppWifiCb)
    357e:	4b15      	ldr	r3, [pc, #84]	; (35d4 <m2m_wifi_cb+0x2c4>)
    3580:	681b      	ldr	r3, [r3, #0]
    3582:	2b00      	cmp	r3, #0
    3584:	d021      	beq.n	35ca <m2m_wifi_cb+0x2ba>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    3586:	4b13      	ldr	r3, [pc, #76]	; (35d4 <m2m_wifi_cb+0x2c4>)
    3588:	681b      	ldr	r3, [r3, #0]
    358a:	1c3a      	adds	r2, r7, #0
    358c:	3280      	adds	r2, #128	; 0x80
    358e:	2015      	movs	r0, #21
    3590:	1c11      	adds	r1, r2, #0
    3592:	4798      	blx	r3
    3594:	e019      	b.n	35ca <m2m_wifi_cb+0x2ba>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CONNTION_STATE)
    3596:	1dfb      	adds	r3, r7, #7
    3598:	781b      	ldrb	r3, [r3, #0]
    359a:	2b2b      	cmp	r3, #43	; 0x2b
    359c:	d115      	bne.n	35ca <m2m_wifi_cb+0x2ba>
	{
		if(hif_receive(u32Addr, rx_buf, 4) == M2M_SUCCESS)
    359e:	683a      	ldr	r2, [r7, #0]
    35a0:	1c3b      	adds	r3, r7, #0
    35a2:	3380      	adds	r3, #128	; 0x80
    35a4:	1c10      	adds	r0, r2, #0
    35a6:	1c19      	adds	r1, r3, #0
    35a8:	2204      	movs	r2, #4
    35aa:	4b09      	ldr	r3, [pc, #36]	; (35d0 <m2m_wifi_cb+0x2c0>)
    35ac:	4798      	blx	r3
    35ae:	1c03      	adds	r3, r0, #0
    35b0:	2b00      	cmp	r3, #0
    35b2:	d10a      	bne.n	35ca <m2m_wifi_cb+0x2ba>
		{
			if (gpfAppWifiCb)
    35b4:	4b07      	ldr	r3, [pc, #28]	; (35d4 <m2m_wifi_cb+0x2c4>)
    35b6:	681b      	ldr	r3, [r3, #0]
    35b8:	2b00      	cmp	r3, #0
    35ba:	d006      	beq.n	35ca <m2m_wifi_cb+0x2ba>
				gpfAppWifiCb(M2M_WIFI_RESP_CONNTION_STATE, rx_buf);
    35bc:	4b05      	ldr	r3, [pc, #20]	; (35d4 <m2m_wifi_cb+0x2c4>)
    35be:	681b      	ldr	r3, [r3, #0]
    35c0:	1c3a      	adds	r2, r7, #0
    35c2:	3280      	adds	r2, #128	; 0x80
    35c4:	202b      	movs	r0, #43	; 0x2b
    35c6:	1c11      	adds	r1, r2, #0
    35c8:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    35ca:	46bd      	mov	sp, r7
    35cc:	b022      	add	sp, #136	; 0x88
    35ce:	bd80      	pop	{r7, pc}
    35d0:	00003245 	.word	0x00003245
    35d4:	20000934 	.word	0x20000934
    35d8:	00002bb5 	.word	0x00002bb5
    35dc:	20000931 	.word	0x20000931
    35e0:	20000930 	.word	0x20000930

000035e4 <m2m_wifi_init>:


sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    35e4:	b590      	push	{r4, r7, lr}
    35e6:	b085      	sub	sp, #20
    35e8:	af00      	add	r7, sp, #0
    35ea:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    35ec:	1c3b      	adds	r3, r7, #0
    35ee:	330f      	adds	r3, #15
    35f0:	2200      	movs	r2, #0
    35f2:	701a      	strb	r2, [r3, #0]
	
	gpfAppWifiCb = param->pfAppWifiCb;
    35f4:	687b      	ldr	r3, [r7, #4]
    35f6:	681a      	ldr	r2, [r3, #0]
    35f8:	4b23      	ldr	r3, [pc, #140]	; (3688 <m2m_wifi_init+0xa4>)
    35fa:	601a      	str	r2, [r3, #0]
	gu8scanInProgress = 0;
    35fc:	4b23      	ldr	r3, [pc, #140]	; (368c <m2m_wifi_init+0xa8>)
    35fe:	2200      	movs	r2, #0
    3600:	701a      	strb	r2, [r3, #0]
	
	/* Apply device specific initialization. */
	ret = nm_drv_init(NULL);
    3602:	1c3c      	adds	r4, r7, #0
    3604:	340f      	adds	r4, #15
    3606:	2000      	movs	r0, #0
    3608:	4b21      	ldr	r3, [pc, #132]	; (3690 <m2m_wifi_init+0xac>)
    360a:	4798      	blx	r3
    360c:	1c03      	adds	r3, r0, #0
    360e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    3610:	1c3b      	adds	r3, r7, #0
    3612:	330f      	adds	r3, #15
    3614:	781b      	ldrb	r3, [r3, #0]
    3616:	b25b      	sxtb	r3, r3
    3618:	2b00      	cmp	r3, #0
    361a:	d000      	beq.n	361e <m2m_wifi_init+0x3a>
    361c:	e02b      	b.n	3676 <m2m_wifi_init+0x92>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    361e:	1c3c      	adds	r4, r7, #0
    3620:	340f      	adds	r4, #15
    3622:	2000      	movs	r0, #0
    3624:	4b1b      	ldr	r3, [pc, #108]	; (3694 <m2m_wifi_init+0xb0>)
    3626:	4798      	blx	r3
    3628:	1c03      	adds	r3, r0, #0
    362a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    362c:	1c3b      	adds	r3, r7, #0
    362e:	330f      	adds	r3, #15
    3630:	781b      	ldrb	r3, [r3, #0]
    3632:	b25b      	sxtb	r3, r3
    3634:	2b00      	cmp	r3, #0
    3636:	d000      	beq.n	363a <m2m_wifi_init+0x56>
    3638:	e01a      	b.n	3670 <m2m_wifi_init+0x8c>
	
	hif_register_wifi_cb(m2m_wifi_cb);
    363a:	4b17      	ldr	r3, [pc, #92]	; (3698 <m2m_wifi_init+0xb4>)
    363c:	1c18      	adds	r0, r3, #0
    363e:	4b17      	ldr	r3, [pc, #92]	; (369c <m2m_wifi_init+0xb8>)
    3640:	4798      	blx	r3
	}
#elif CONF_WIFI_PS_MODE == WIFI_PS_MODE_STATIC_PS
	m2m_wifi_set_sleep_mode(M2M_PS_MANUAL, 1);
	if(ret != M2M_SUCCESS) 	goto _EXIT2;	
#elif CONF_WIFI_PS_MODE == WIFI_PS_MODE_NONE
	ret = m2m_wifi_set_sleep_mode(M2M_NO_PS, 1);
    3642:	1c3c      	adds	r4, r7, #0
    3644:	340f      	adds	r4, #15
    3646:	2000      	movs	r0, #0
    3648:	2101      	movs	r1, #1
    364a:	4b15      	ldr	r3, [pc, #84]	; (36a0 <m2m_wifi_init+0xbc>)
    364c:	4798      	blx	r3
    364e:	1c03      	adds	r3, r0, #0
    3650:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT2;	
    3652:	1c3b      	adds	r3, r7, #0
    3654:	330f      	adds	r3, #15
    3656:	781b      	ldrb	r3, [r3, #0]
    3658:	b25b      	sxtb	r3, r3
    365a:	2b00      	cmp	r3, #0
    365c:	d004      	beq.n	3668 <m2m_wifi_init+0x84>
    365e:	46c0      	nop			; (mov r8, r8)
#endif

	return ret;

_EXIT2:
	hif_deinit(NULL);
    3660:	2000      	movs	r0, #0
    3662:	4b10      	ldr	r3, [pc, #64]	; (36a4 <m2m_wifi_init+0xc0>)
    3664:	4798      	blx	r3
    3666:	e003      	b.n	3670 <m2m_wifi_init+0x8c>
	if(ret != M2M_SUCCESS) 	goto _EXIT2;	
#else
#error "Please select proper value for CONF_WIFI_PS_MODE"
#endif

	return ret;
    3668:	1c3b      	adds	r3, r7, #0
    366a:	330f      	adds	r3, #15
    366c:	781b      	ldrb	r3, [r3, #0]
    366e:	e005      	b.n	367c <m2m_wifi_init+0x98>

_EXIT2:
	hif_deinit(NULL);
_EXIT1:
	nm_drv_deinit(NULL);
    3670:	2000      	movs	r0, #0
    3672:	4b0d      	ldr	r3, [pc, #52]	; (36a8 <m2m_wifi_init+0xc4>)
    3674:	4798      	blx	r3
_EXIT0:
	return ret;
    3676:	1c3b      	adds	r3, r7, #0
    3678:	330f      	adds	r3, #15
    367a:	781b      	ldrb	r3, [r3, #0]
    367c:	b25b      	sxtb	r3, r3
}
    367e:	1c18      	adds	r0, r3, #0
    3680:	46bd      	mov	sp, r7
    3682:	b005      	add	sp, #20
    3684:	bd90      	pop	{r4, r7, pc}
    3686:	46c0      	nop			; (mov r8, r8)
    3688:	20000934 	.word	0x20000934
    368c:	20000931 	.word	0x20000931
    3690:	000044d1 	.word	0x000044d1
    3694:	00002cf5 	.word	0x00002cf5
    3698:	00003311 	.word	0x00003311
    369c:	000032e1 	.word	0x000032e1
    36a0:	0000393d 	.word	0x0000393d
    36a4:	00002d4d 	.word	0x00002d4d
    36a8:	00004611 	.word	0x00004611

000036ac <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    36ac:	b580      	push	{r7, lr}
    36ae:	b082      	sub	sp, #8
    36b0:	af00      	add	r7, sp, #0
    36b2:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    36b4:	4b03      	ldr	r3, [pc, #12]	; (36c4 <m2m_wifi_handle_events+0x18>)
    36b6:	4798      	blx	r3
    36b8:	1c03      	adds	r3, r0, #0
}
    36ba:	1c18      	adds	r0, r3, #0
    36bc:	46bd      	mov	sp, r7
    36be:	b002      	add	sp, #8
    36c0:	bd80      	pop	{r7, pc}
    36c2:	46c0      	nop			; (mov r8, r8)
    36c4:	000031f1 	.word	0x000031f1

000036c8 <m2m_wifi_connect>:

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    36c8:	b5b0      	push	{r4, r5, r7, lr}
    36ca:	b0a8      	sub	sp, #160	; 0xa0
    36cc:	af04      	add	r7, sp, #16
    36ce:	60f8      	str	r0, [r7, #12]
    36d0:	607b      	str	r3, [r7, #4]
    36d2:	1c3b      	adds	r3, r7, #0
    36d4:	330b      	adds	r3, #11
    36d6:	7019      	strb	r1, [r3, #0]
    36d8:	1c3b      	adds	r3, r7, #0
    36da:	330a      	adds	r3, #10
    36dc:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    36de:	1c3b      	adds	r3, r7, #0
    36e0:	338f      	adds	r3, #143	; 0x8f
    36e2:	2200      	movs	r2, #0
    36e4:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    36e6:	1c3b      	adds	r3, r7, #0
    36e8:	330a      	adds	r3, #10
    36ea:	781b      	ldrb	r3, [r3, #0]
    36ec:	2b01      	cmp	r3, #1
    36ee:	d015      	beq.n	371c <m2m_wifi_connect+0x54>
	{
		if((pvAuthInfo == NULL)||(m2m_strlen(pvAuthInfo)<=0)||(m2m_strlen(pvAuthInfo)>=M2M_MAX_PSK_LEN))
    36f0:	687b      	ldr	r3, [r7, #4]
    36f2:	2b00      	cmp	r3, #0
    36f4:	d00d      	beq.n	3712 <m2m_wifi_connect+0x4a>
    36f6:	687b      	ldr	r3, [r7, #4]
    36f8:	1c18      	adds	r0, r3, #0
    36fa:	4b82      	ldr	r3, [pc, #520]	; (3904 <m2m_wifi_connect+0x23c>)
    36fc:	4798      	blx	r3
    36fe:	1c03      	adds	r3, r0, #0
    3700:	2b00      	cmp	r3, #0
    3702:	d006      	beq.n	3712 <m2m_wifi_connect+0x4a>
    3704:	687b      	ldr	r3, [r7, #4]
    3706:	1c18      	adds	r0, r3, #0
    3708:	4b7e      	ldr	r3, [pc, #504]	; (3904 <m2m_wifi_connect+0x23c>)
    370a:	4798      	blx	r3
    370c:	1c03      	adds	r3, r0, #0
    370e:	2b40      	cmp	r3, #64	; 0x40
    3710:	d904      	bls.n	371c <m2m_wifi_connect+0x54>
		{
			M2M_ERR("PSK LEN INVALID\n");
			ret = M2M_ERR_FAIL;
    3712:	1c3b      	adds	r3, r7, #0
    3714:	338f      	adds	r3, #143	; 0x8f
    3716:	22f4      	movs	r2, #244	; 0xf4
    3718:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    371a:	e0ea      	b.n	38f2 <m2m_wifi_connect+0x22a>
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    371c:	1c3b      	adds	r3, r7, #0
    371e:	330b      	adds	r3, #11
    3720:	781b      	ldrb	r3, [r3, #0]
    3722:	2b00      	cmp	r3, #0
    3724:	d004      	beq.n	3730 <m2m_wifi_connect+0x68>
    3726:	1c3b      	adds	r3, r7, #0
    3728:	330b      	adds	r3, #11
    372a:	781b      	ldrb	r3, [r3, #0]
    372c:	2b20      	cmp	r3, #32
    372e:	d904      	bls.n	373a <m2m_wifi_connect+0x72>
	{
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
    3730:	1c3b      	adds	r3, r7, #0
    3732:	338f      	adds	r3, #143	; 0x8f
    3734:	22f4      	movs	r2, #244	; 0xf4
    3736:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    3738:	e0db      	b.n	38f2 <m2m_wifi_connect+0x22a>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    373a:	1c3b      	adds	r3, r7, #0
    373c:	33a0      	adds	r3, #160	; 0xa0
    373e:	881b      	ldrh	r3, [r3, #0]
    3740:	2b0d      	cmp	r3, #13
    3742:	d909      	bls.n	3758 <m2m_wifi_connect+0x90>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    3744:	1c3b      	adds	r3, r7, #0
    3746:	33a0      	adds	r3, #160	; 0xa0
    3748:	881b      	ldrh	r3, [r3, #0]
    374a:	2bff      	cmp	r3, #255	; 0xff
    374c:	d004      	beq.n	3758 <m2m_wifi_connect+0x90>
		{
			M2M_ERR("CH INVALID\n");
			ret = M2M_ERR_FAIL;
    374e:	1c3b      	adds	r3, r7, #0
    3750:	338f      	adds	r3, #143	; 0x8f
    3752:	22f4      	movs	r2, #244	; 0xf4
    3754:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3756:	e0cc      	b.n	38f2 <m2m_wifi_connect+0x22a>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    3758:	1c3b      	adds	r3, r7, #0
    375a:	330b      	adds	r3, #11
    375c:	781b      	ldrb	r3, [r3, #0]
    375e:	1c3a      	adds	r2, r7, #0
    3760:	3214      	adds	r2, #20
    3762:	1c11      	adds	r1, r2, #0
    3764:	3146      	adds	r1, #70	; 0x46
    3766:	68fa      	ldr	r2, [r7, #12]
    3768:	1c08      	adds	r0, r1, #0
    376a:	1c11      	adds	r1, r2, #0
    376c:	1c1a      	adds	r2, r3, #0
    376e:	4b66      	ldr	r3, [pc, #408]	; (3908 <m2m_wifi_connect+0x240>)
    3770:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    3772:	1c3b      	adds	r3, r7, #0
    3774:	330b      	adds	r3, #11
    3776:	781a      	ldrb	r2, [r3, #0]
    3778:	1c39      	adds	r1, r7, #0
    377a:	3114      	adds	r1, #20
    377c:	2340      	movs	r3, #64	; 0x40
    377e:	188a      	adds	r2, r1, r2
    3780:	18d3      	adds	r3, r2, r3
    3782:	2200      	movs	r2, #0
    3784:	719a      	strb	r2, [r3, #6]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    3786:	1c3a      	adds	r2, r7, #0
    3788:	3214      	adds	r2, #20
    378a:	1c39      	adds	r1, r7, #0
    378c:	31a0      	adds	r1, #160	; 0xa0
    378e:	2344      	movs	r3, #68	; 0x44
    3790:	8809      	ldrh	r1, [r1, #0]
    3792:	52d1      	strh	r1, [r2, r3]

	pstrAuthInfo = &strConnect.strSec;
    3794:	1c3b      	adds	r3, r7, #0
    3796:	3314      	adds	r3, #20
    3798:	2088      	movs	r0, #136	; 0x88
    379a:	19c0      	adds	r0, r0, r7
    379c:	6003      	str	r3, [r0, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    379e:	2188      	movs	r1, #136	; 0x88
    37a0:	19c9      	adds	r1, r1, r7
    37a2:	680a      	ldr	r2, [r1, #0]
    37a4:	1c39      	adds	r1, r7, #0
    37a6:	310a      	adds	r1, #10
    37a8:	2341      	movs	r3, #65	; 0x41
    37aa:	7809      	ldrb	r1, [r1, #0]
    37ac:	54d1      	strb	r1, [r2, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    37ae:	1c3b      	adds	r3, r7, #0
    37b0:	330a      	adds	r3, #10
    37b2:	781b      	ldrb	r3, [r3, #0]
    37b4:	2b03      	cmp	r3, #3
    37b6:	d155      	bne.n	3864 <m2m_wifi_connect+0x19c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    37b8:	687b      	ldr	r3, [r7, #4]
    37ba:	2284      	movs	r2, #132	; 0x84
    37bc:	19d2      	adds	r2, r2, r7
    37be:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    37c0:	2088      	movs	r0, #136	; 0x88
    37c2:	19c0      	adds	r0, r0, r7
    37c4:	6803      	ldr	r3, [r0, #0]
    37c6:	2180      	movs	r1, #128	; 0x80
    37c8:	19c9      	adds	r1, r1, r7
    37ca:	600b      	str	r3, [r1, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    37cc:	2284      	movs	r2, #132	; 0x84
    37ce:	19d2      	adds	r2, r2, r7
    37d0:	6813      	ldr	r3, [r2, #0]
    37d2:	781b      	ldrb	r3, [r3, #0]
    37d4:	3b01      	subs	r3, #1
    37d6:	b2da      	uxtb	r2, r3
    37d8:	2080      	movs	r0, #128	; 0x80
    37da:	19c0      	adds	r0, r0, r7
    37dc:	6803      	ldr	r3, [r0, #0]
    37de:	701a      	strb	r2, [r3, #0]
		
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    37e0:	2180      	movs	r1, #128	; 0x80
    37e2:	19c9      	adds	r1, r1, r7
    37e4:	680b      	ldr	r3, [r1, #0]
    37e6:	781b      	ldrb	r3, [r3, #0]
    37e8:	2b03      	cmp	r3, #3
    37ea:	d904      	bls.n	37f6 <m2m_wifi_connect+0x12e>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
			ret = M2M_ERR_FAIL;
    37ec:	1c3b      	adds	r3, r7, #0
    37ee:	338f      	adds	r3, #143	; 0x8f
    37f0:	22f4      	movs	r2, #244	; 0xf4
    37f2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    37f4:	e07d      	b.n	38f2 <m2m_wifi_connect+0x22a>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    37f6:	2284      	movs	r2, #132	; 0x84
    37f8:	19d2      	adds	r2, r2, r7
    37fa:	6813      	ldr	r3, [r2, #0]
    37fc:	785b      	ldrb	r3, [r3, #1]
    37fe:	3b01      	subs	r3, #1
    3800:	b2da      	uxtb	r2, r3
    3802:	2080      	movs	r0, #128	; 0x80
    3804:	19c0      	adds	r0, r0, r7
    3806:	6803      	ldr	r3, [r0, #0]
    3808:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    380a:	2180      	movs	r1, #128	; 0x80
    380c:	19c9      	adds	r1, r1, r7
    380e:	680b      	ldr	r3, [r1, #0]
    3810:	785b      	ldrb	r3, [r3, #1]
    3812:	2b0a      	cmp	r3, #10
    3814:	d00a      	beq.n	382c <m2m_wifi_connect+0x164>
    3816:	2280      	movs	r2, #128	; 0x80
    3818:	19d2      	adds	r2, r2, r7
    381a:	6813      	ldr	r3, [r2, #0]
    381c:	785b      	ldrb	r3, [r3, #1]
    381e:	2b1a      	cmp	r3, #26
    3820:	d004      	beq.n	382c <m2m_wifi_connect+0x164>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
			ret = M2M_ERR_FAIL;
    3822:	1c3b      	adds	r3, r7, #0
    3824:	338f      	adds	r3, #143	; 0x8f
    3826:	22f4      	movs	r2, #244	; 0xf4
    3828:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    382a:	e062      	b.n	38f2 <m2m_wifi_connect+0x22a>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    382c:	2080      	movs	r0, #128	; 0x80
    382e:	19c0      	adds	r0, r0, r7
    3830:	6803      	ldr	r3, [r0, #0]
    3832:	1c99      	adds	r1, r3, #2
    3834:	2284      	movs	r2, #132	; 0x84
    3836:	19d2      	adds	r2, r2, r7
    3838:	6813      	ldr	r3, [r2, #0]
    383a:	1c9a      	adds	r2, r3, #2
    383c:	2084      	movs	r0, #132	; 0x84
    383e:	19c0      	adds	r0, r0, r7
    3840:	6803      	ldr	r3, [r0, #0]
    3842:	785b      	ldrb	r3, [r3, #1]
    3844:	1c08      	adds	r0, r1, #0
    3846:	1c11      	adds	r1, r2, #0
    3848:	1c1a      	adds	r2, r3, #0
    384a:	4b2f      	ldr	r3, [pc, #188]	; (3908 <m2m_wifi_connect+0x240>)
    384c:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;		
    384e:	2184      	movs	r1, #132	; 0x84
    3850:	19c9      	adds	r1, r1, r7
    3852:	680b      	ldr	r3, [r1, #0]
    3854:	785b      	ldrb	r3, [r3, #1]
    3856:	2080      	movs	r0, #128	; 0x80
    3858:	19c0      	adds	r0, r0, r7
    385a:	6802      	ldr	r2, [r0, #0]
    385c:	18d3      	adds	r3, r2, r3
    385e:	2200      	movs	r2, #0
    3860:	709a      	strb	r2, [r3, #2]
    3862:	e034      	b.n	38ce <m2m_wifi_connect+0x206>
	
	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    3864:	1c3b      	adds	r3, r7, #0
    3866:	330a      	adds	r3, #10
    3868:	781b      	ldrb	r3, [r3, #0]
    386a:	2b02      	cmp	r3, #2
    386c:	d116      	bne.n	389c <m2m_wifi_connect+0x1d4>
	{
		uint8	u8KeyLen = m2m_strlen((uint8*)pvAuthInfo) + 1;
    386e:	687b      	ldr	r3, [r7, #4]
    3870:	1c18      	adds	r0, r3, #0
    3872:	4b24      	ldr	r3, [pc, #144]	; (3904 <m2m_wifi_connect+0x23c>)
    3874:	4798      	blx	r3
    3876:	1c03      	adds	r3, r0, #0
    3878:	b2da      	uxtb	r2, r3
    387a:	1c3b      	adds	r3, r7, #0
    387c:	337f      	adds	r3, #127	; 0x7f
    387e:	3201      	adds	r2, #1
    3880:	701a      	strb	r2, [r3, #0]
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u8KeyLen);
    3882:	2288      	movs	r2, #136	; 0x88
    3884:	19d2      	adds	r2, r2, r7
    3886:	6811      	ldr	r1, [r2, #0]
    3888:	1c3b      	adds	r3, r7, #0
    388a:	337f      	adds	r3, #127	; 0x7f
    388c:	781b      	ldrb	r3, [r3, #0]
    388e:	687a      	ldr	r2, [r7, #4]
    3890:	1c08      	adds	r0, r1, #0
    3892:	1c11      	adds	r1, r2, #0
    3894:	1c1a      	adds	r2, r3, #0
    3896:	4b1c      	ldr	r3, [pc, #112]	; (3908 <m2m_wifi_connect+0x240>)
    3898:	4798      	blx	r3
    389a:	e018      	b.n	38ce <m2m_wifi_connect+0x206>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    389c:	1c3b      	adds	r3, r7, #0
    389e:	330a      	adds	r3, #10
    38a0:	781b      	ldrb	r3, [r3, #0]
    38a2:	2b04      	cmp	r3, #4
    38a4:	d109      	bne.n	38ba <m2m_wifi_connect+0x1f2>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    38a6:	2388      	movs	r3, #136	; 0x88
    38a8:	19db      	adds	r3, r3, r7
    38aa:	681a      	ldr	r2, [r3, #0]
    38ac:	687b      	ldr	r3, [r7, #4]
    38ae:	1c10      	adds	r0, r2, #0
    38b0:	1c19      	adds	r1, r3, #0
    38b2:	223e      	movs	r2, #62	; 0x3e
    38b4:	4b14      	ldr	r3, [pc, #80]	; (3908 <m2m_wifi_connect+0x240>)
    38b6:	4798      	blx	r3
    38b8:	e009      	b.n	38ce <m2m_wifi_connect+0x206>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    38ba:	1c3b      	adds	r3, r7, #0
    38bc:	330a      	adds	r3, #10
    38be:	781b      	ldrb	r3, [r3, #0]
    38c0:	2b01      	cmp	r3, #1
    38c2:	d004      	beq.n	38ce <m2m_wifi_connect+0x206>

	}
	else
	{
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
    38c4:	1c3b      	adds	r3, r7, #0
    38c6:	338f      	adds	r3, #143	; 0x8f
    38c8:	22f4      	movs	r2, #244	; 0xf4
    38ca:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    38cc:	e011      	b.n	38f2 <m2m_wifi_connect+0x22a>
	}

	ret = hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    38ce:	1c3c      	adds	r4, r7, #0
    38d0:	348f      	adds	r4, #143	; 0x8f
    38d2:	1c3b      	adds	r3, r7, #0
    38d4:	3314      	adds	r3, #20
    38d6:	2200      	movs	r2, #0
    38d8:	9200      	str	r2, [sp, #0]
    38da:	2200      	movs	r2, #0
    38dc:	9201      	str	r2, [sp, #4]
    38de:	2200      	movs	r2, #0
    38e0:	9202      	str	r2, [sp, #8]
    38e2:	2001      	movs	r0, #1
    38e4:	2128      	movs	r1, #40	; 0x28
    38e6:	1c1a      	adds	r2, r3, #0
    38e8:	2368      	movs	r3, #104	; 0x68
    38ea:	4d08      	ldr	r5, [pc, #32]	; (390c <m2m_wifi_connect+0x244>)
    38ec:	47a8      	blx	r5
    38ee:	1c03      	adds	r3, r0, #0
    38f0:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    38f2:	1c3b      	adds	r3, r7, #0
    38f4:	338f      	adds	r3, #143	; 0x8f
    38f6:	781b      	ldrb	r3, [r3, #0]
    38f8:	b25b      	sxtb	r3, r3
}
    38fa:	1c18      	adds	r0, r3, #0
    38fc:	46bd      	mov	sp, r7
    38fe:	b024      	add	sp, #144	; 0x90
    3900:	bdb0      	pop	{r4, r5, r7, pc}
    3902:	46c0      	nop			; (mov r8, r8)
    3904:	00002bf1 	.word	0x00002bf1
    3908:	00002b79 	.word	0x00002b79
    390c:	00002d69 	.word	0x00002d69

00003910 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GRP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    3910:	b590      	push	{r4, r7, lr}
    3912:	b085      	sub	sp, #20
    3914:	af04      	add	r7, sp, #16
	return hif_send(M2M_REQ_GRP_IP, M2M_IP_REQ_DHCP_CLIENT_CONF, NULL, 0, NULL, 0, 0);
    3916:	2300      	movs	r3, #0
    3918:	9300      	str	r3, [sp, #0]
    391a:	2300      	movs	r3, #0
    391c:	9301      	str	r3, [sp, #4]
    391e:	2300      	movs	r3, #0
    3920:	9302      	str	r3, [sp, #8]
    3922:	2002      	movs	r0, #2
    3924:	2104      	movs	r1, #4
    3926:	2200      	movs	r2, #0
    3928:	2300      	movs	r3, #0
    392a:	4c03      	ldr	r4, [pc, #12]	; (3938 <m2m_wifi_request_dhcp_client+0x28>)
    392c:	47a0      	blx	r4
    392e:	1c03      	adds	r3, r0, #0
}
    3930:	1c18      	adds	r0, r3, #0
    3932:	46bd      	mov	sp, r7
    3934:	b001      	add	sp, #4
    3936:	bd90      	pop	{r4, r7, pc}
    3938:	00002d69 	.word	0x00002d69

0000393c <m2m_wifi_set_sleep_mode>:
uint8 m2m_wifi_get_sleep_mode(void)
{
	return hif_get_sleep_mode();
}
sint8 m2m_wifi_set_sleep_mode(uint8 PsTyp, uint8 BcastEn)
{
    393c:	b5b0      	push	{r4, r5, r7, lr}
    393e:	b088      	sub	sp, #32
    3940:	af04      	add	r7, sp, #16
    3942:	1c0a      	adds	r2, r1, #0
    3944:	1dfb      	adds	r3, r7, #7
    3946:	1c01      	adds	r1, r0, #0
    3948:	7019      	strb	r1, [r3, #0]
    394a:	1dbb      	adds	r3, r7, #6
    394c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    394e:	1c3b      	adds	r3, r7, #0
    3950:	330f      	adds	r3, #15
    3952:	2200      	movs	r2, #0
    3954:	701a      	strb	r2, [r3, #0]
	M2M_INFO("POWER SAVE %d\n",PsTyp);
	if(PsTyp != M2M_PS_MANUAL)
    3956:	1dfb      	adds	r3, r7, #7
    3958:	781b      	ldrb	r3, [r3, #0]
    395a:	2b04      	cmp	r3, #4
    395c:	d01b      	beq.n	3996 <m2m_wifi_set_sleep_mode+0x5a>
	{
		tstrM2mPsType strPs;
		strPs.u8PsType = PsTyp;
    395e:	1c3b      	adds	r3, r7, #0
    3960:	3308      	adds	r3, #8
    3962:	1dfa      	adds	r2, r7, #7
    3964:	7812      	ldrb	r2, [r2, #0]
    3966:	701a      	strb	r2, [r3, #0]
		strPs.u8BcastEn = BcastEn;
    3968:	1c3b      	adds	r3, r7, #0
    396a:	3308      	adds	r3, #8
    396c:	1dba      	adds	r2, r7, #6
    396e:	7812      	ldrb	r2, [r2, #0]
    3970:	705a      	strb	r2, [r3, #1]
		ret = hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_SLEEP, (uint8*) &strPs,sizeof(tstrM2mPsType), NULL, 0, 0);
    3972:	1c3c      	adds	r4, r7, #0
    3974:	340f      	adds	r4, #15
    3976:	1c3b      	adds	r3, r7, #0
    3978:	3308      	adds	r3, #8
    397a:	2200      	movs	r2, #0
    397c:	9200      	str	r2, [sp, #0]
    397e:	2200      	movs	r2, #0
    3980:	9201      	str	r2, [sp, #4]
    3982:	2200      	movs	r2, #0
    3984:	9202      	str	r2, [sp, #8]
    3986:	2001      	movs	r0, #1
    3988:	212c      	movs	r1, #44	; 0x2c
    398a:	1c1a      	adds	r2, r3, #0
    398c:	2304      	movs	r3, #4
    398e:	4d08      	ldr	r5, [pc, #32]	; (39b0 <m2m_wifi_set_sleep_mode+0x74>)
    3990:	47a8      	blx	r5
    3992:	1c03      	adds	r3, r0, #0
    3994:	7023      	strb	r3, [r4, #0]
	}
	hif_set_sleep_mode(PsTyp);
    3996:	1dfb      	adds	r3, r7, #7
    3998:	781b      	ldrb	r3, [r3, #0]
    399a:	1c18      	adds	r0, r3, #0
    399c:	4b05      	ldr	r3, [pc, #20]	; (39b4 <m2m_wifi_set_sleep_mode+0x78>)
    399e:	4798      	blx	r3
	return ret;
    39a0:	1c3b      	adds	r3, r7, #0
    39a2:	330f      	adds	r3, #15
    39a4:	781b      	ldrb	r3, [r3, #0]
    39a6:	b25b      	sxtb	r3, r3
}
    39a8:	1c18      	adds	r0, r3, #0
    39aa:	46bd      	mov	sp, r7
    39ac:	b004      	add	sp, #16
    39ae:	bdb0      	pop	{r4, r5, r7, pc}
    39b0:	00002d69 	.word	0x00002d69
    39b4:	00002c6d 	.word	0x00002c6d

000039b8 <chip_idle>:
#define M2M_DISABLE_PS        0xD0UL

extern uint32 probe_spi_flash(void);

void chip_idle(void)
{
    39b8:	b580      	push	{r7, lr}
    39ba:	b082      	sub	sp, #8
    39bc:	af00      	add	r7, sp, #0
	uint32 reg =0;
    39be:	2300      	movs	r3, #0
    39c0:	607b      	str	r3, [r7, #4]
	nm_read_reg_with_ret(0x1, &reg);
    39c2:	1d3b      	adds	r3, r7, #4
    39c4:	2001      	movs	r0, #1
    39c6:	1c19      	adds	r1, r3, #0
    39c8:	4b08      	ldr	r3, [pc, #32]	; (39ec <chip_idle+0x34>)
    39ca:	4798      	blx	r3
	if(reg&0x2)
    39cc:	687a      	ldr	r2, [r7, #4]
    39ce:	2302      	movs	r3, #2
    39d0:	4013      	ands	r3, r2
    39d2:	d008      	beq.n	39e6 <chip_idle+0x2e>
	{
		reg &=~(1 << 1);
    39d4:	687b      	ldr	r3, [r7, #4]
    39d6:	2202      	movs	r2, #2
    39d8:	4393      	bics	r3, r2
    39da:	607b      	str	r3, [r7, #4]
		nm_write_reg(0x1, reg);
    39dc:	687b      	ldr	r3, [r7, #4]
    39de:	2001      	movs	r0, #1
    39e0:	1c19      	adds	r1, r3, #0
    39e2:	4b03      	ldr	r3, [pc, #12]	; (39f0 <chip_idle+0x38>)
    39e4:	4798      	blx	r3
	}
}
    39e6:	46bd      	mov	sp, r7
    39e8:	b002      	add	sp, #8
    39ea:	bd80      	pop	{r7, pc}
    39ec:	000040a5 	.word	0x000040a5
    39f0:	000040c9 	.word	0x000040c9

000039f4 <enable_rf_blocks>:

void enable_rf_blocks(void)
{
    39f4:	b580      	push	{r7, lr}
    39f6:	af00      	add	r7, sp, #0
	nm_write_reg(0x6, 0xdb);
    39f8:	2006      	movs	r0, #6
    39fa:	21db      	movs	r1, #219	; 0xdb
    39fc:	4b10      	ldr	r3, [pc, #64]	; (3a40 <enable_rf_blocks+0x4c>)
    39fe:	4798      	blx	r3
	nm_write_reg(0x7, 0x6);
    3a00:	2007      	movs	r0, #7
    3a02:	2106      	movs	r1, #6
    3a04:	4b0e      	ldr	r3, [pc, #56]	; (3a40 <enable_rf_blocks+0x4c>)
    3a06:	4798      	blx	r3
	nm_bsp_sleep(10);
    3a08:	200a      	movs	r0, #10
    3a0a:	4b0e      	ldr	r3, [pc, #56]	; (3a44 <enable_rf_blocks+0x50>)
    3a0c:	4798      	blx	r3
	nm_write_reg(0x1480, 0);
    3a0e:	23a4      	movs	r3, #164	; 0xa4
    3a10:	015b      	lsls	r3, r3, #5
    3a12:	1c18      	adds	r0, r3, #0
    3a14:	2100      	movs	r1, #0
    3a16:	4b0a      	ldr	r3, [pc, #40]	; (3a40 <enable_rf_blocks+0x4c>)
    3a18:	4798      	blx	r3
	nm_write_reg(0x1484, 0);
    3a1a:	4b0b      	ldr	r3, [pc, #44]	; (3a48 <enable_rf_blocks+0x54>)
    3a1c:	1c18      	adds	r0, r3, #0
    3a1e:	2100      	movs	r1, #0
    3a20:	4b07      	ldr	r3, [pc, #28]	; (3a40 <enable_rf_blocks+0x4c>)
    3a22:	4798      	blx	r3
	nm_bsp_sleep(10);
    3a24:	200a      	movs	r0, #10
    3a26:	4b07      	ldr	r3, [pc, #28]	; (3a44 <enable_rf_blocks+0x50>)
    3a28:	4798      	blx	r3

	nm_write_reg(0x6, 0x0);
    3a2a:	2006      	movs	r0, #6
    3a2c:	2100      	movs	r1, #0
    3a2e:	4b04      	ldr	r3, [pc, #16]	; (3a40 <enable_rf_blocks+0x4c>)
    3a30:	4798      	blx	r3
	nm_write_reg(0x7, 0x0);
    3a32:	2007      	movs	r0, #7
    3a34:	2100      	movs	r1, #0
    3a36:	4b02      	ldr	r3, [pc, #8]	; (3a40 <enable_rf_blocks+0x4c>)
    3a38:	4798      	blx	r3
}
    3a3a:	46bd      	mov	sp, r7
    3a3c:	bd80      	pop	{r7, pc}
    3a3e:	46c0      	nop			; (mov r8, r8)
    3a40:	000040c9 	.word	0x000040c9
    3a44:	00002471 	.word	0x00002471
    3a48:	00001484 	.word	0x00001484

00003a4c <enable_interrupts>:

sint8 enable_interrupts(void) 
{
    3a4c:	b590      	push	{r4, r7, lr}
    3a4e:	b083      	sub	sp, #12
    3a50:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    3a52:	1dfc      	adds	r4, r7, #7
    3a54:	4a28      	ldr	r2, [pc, #160]	; (3af8 <enable_interrupts+0xac>)
    3a56:	1c3b      	adds	r3, r7, #0
    3a58:	1c10      	adds	r0, r2, #0
    3a5a:	1c19      	adds	r1, r3, #0
    3a5c:	4b27      	ldr	r3, [pc, #156]	; (3afc <enable_interrupts+0xb0>)
    3a5e:	4798      	blx	r3
    3a60:	1c03      	adds	r3, r0, #0
    3a62:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3a64:	1dfb      	adds	r3, r7, #7
    3a66:	781b      	ldrb	r3, [r3, #0]
    3a68:	b25b      	sxtb	r3, r3
    3a6a:	2b00      	cmp	r3, #0
    3a6c:	d001      	beq.n	3a72 <enable_interrupts+0x26>
		return M2M_ERR_BUS_FAIL;
    3a6e:	23fa      	movs	r3, #250	; 0xfa
    3a70:	e03c      	b.n	3aec <enable_interrupts+0xa0>
	}
	reg |= ((uint32) 1 << 8);
    3a72:	683b      	ldr	r3, [r7, #0]
    3a74:	2280      	movs	r2, #128	; 0x80
    3a76:	0052      	lsls	r2, r2, #1
    3a78:	4313      	orrs	r3, r2
    3a7a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    3a7c:	683b      	ldr	r3, [r7, #0]
    3a7e:	1dfc      	adds	r4, r7, #7
    3a80:	4a1d      	ldr	r2, [pc, #116]	; (3af8 <enable_interrupts+0xac>)
    3a82:	1c10      	adds	r0, r2, #0
    3a84:	1c19      	adds	r1, r3, #0
    3a86:	4b1e      	ldr	r3, [pc, #120]	; (3b00 <enable_interrupts+0xb4>)
    3a88:	4798      	blx	r3
    3a8a:	1c03      	adds	r3, r0, #0
    3a8c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3a8e:	1dfb      	adds	r3, r7, #7
    3a90:	781b      	ldrb	r3, [r3, #0]
    3a92:	b25b      	sxtb	r3, r3
    3a94:	2b00      	cmp	r3, #0
    3a96:	d001      	beq.n	3a9c <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
    3a98:	23fa      	movs	r3, #250	; 0xfa
    3a9a:	e027      	b.n	3aec <enable_interrupts+0xa0>
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    3a9c:	1dfc      	adds	r4, r7, #7
    3a9e:	23d0      	movs	r3, #208	; 0xd0
    3aa0:	015a      	lsls	r2, r3, #5
    3aa2:	1c3b      	adds	r3, r7, #0
    3aa4:	1c10      	adds	r0, r2, #0
    3aa6:	1c19      	adds	r1, r3, #0
    3aa8:	4b14      	ldr	r3, [pc, #80]	; (3afc <enable_interrupts+0xb0>)
    3aaa:	4798      	blx	r3
    3aac:	1c03      	adds	r3, r0, #0
    3aae:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3ab0:	1dfb      	adds	r3, r7, #7
    3ab2:	781b      	ldrb	r3, [r3, #0]
    3ab4:	b25b      	sxtb	r3, r3
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d001      	beq.n	3abe <enable_interrupts+0x72>
		return M2M_ERR_BUS_FAIL;
    3aba:	23fa      	movs	r3, #250	; 0xfa
    3abc:	e016      	b.n	3aec <enable_interrupts+0xa0>
	}
	reg |= ((uint32) 1 << 16);
    3abe:	683b      	ldr	r3, [r7, #0]
    3ac0:	2280      	movs	r2, #128	; 0x80
    3ac2:	0252      	lsls	r2, r2, #9
    3ac4:	4313      	orrs	r3, r2
    3ac6:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    3ac8:	683b      	ldr	r3, [r7, #0]
    3aca:	1dfc      	adds	r4, r7, #7
    3acc:	22d0      	movs	r2, #208	; 0xd0
    3ace:	0152      	lsls	r2, r2, #5
    3ad0:	1c10      	adds	r0, r2, #0
    3ad2:	1c19      	adds	r1, r3, #0
    3ad4:	4b0a      	ldr	r3, [pc, #40]	; (3b00 <enable_interrupts+0xb4>)
    3ad6:	4798      	blx	r3
    3ad8:	1c03      	adds	r3, r0, #0
    3ada:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3adc:	1dfb      	adds	r3, r7, #7
    3ade:	781b      	ldrb	r3, [r3, #0]
    3ae0:	b25b      	sxtb	r3, r3
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d001      	beq.n	3aea <enable_interrupts+0x9e>
		return M2M_ERR_BUS_FAIL;
    3ae6:	23fa      	movs	r3, #250	; 0xfa
    3ae8:	e000      	b.n	3aec <enable_interrupts+0xa0>
	}
	return M2M_SUCCESS;
    3aea:	2300      	movs	r3, #0
    3aec:	b25b      	sxtb	r3, r3
}
    3aee:	1c18      	adds	r0, r3, #0
    3af0:	46bd      	mov	sp, r7
    3af2:	b003      	add	sp, #12
    3af4:	bd90      	pop	{r4, r7, pc}
    3af6:	46c0      	nop			; (mov r8, r8)
    3af8:	00001408 	.word	0x00001408
    3afc:	000040a5 	.word	0x000040a5
    3b00:	000040c9 	.word	0x000040c9

00003b04 <cpu_start>:

sint8 cpu_start(void) {
    3b04:	b590      	push	{r4, r7, lr}
    3b06:	b083      	sub	sp, #12
    3b08:	af00      	add	r7, sp, #0
	sint8 ret;

	/**
	reset regs 
	*/
	nm_write_reg(BOOTROM_REG,0);
    3b0a:	4b3d      	ldr	r3, [pc, #244]	; (3c00 <cpu_start+0xfc>)
    3b0c:	1c18      	adds	r0, r3, #0
    3b0e:	2100      	movs	r1, #0
    3b10:	4b3c      	ldr	r3, [pc, #240]	; (3c04 <cpu_start+0x100>)
    3b12:	4798      	blx	r3
	nm_write_reg(STATE_REG,0);
    3b14:	4b3c      	ldr	r3, [pc, #240]	; (3c08 <cpu_start+0x104>)
    3b16:	1c18      	adds	r0, r3, #0
    3b18:	2100      	movs	r1, #0
    3b1a:	4b3a      	ldr	r3, [pc, #232]	; (3c04 <cpu_start+0x100>)
    3b1c:	4798      	blx	r3
	nm_write_reg(NMI_REV_REG,0);
    3b1e:	4b3b      	ldr	r3, [pc, #236]	; (3c0c <cpu_start+0x108>)
    3b20:	1c18      	adds	r0, r3, #0
    3b22:	2100      	movs	r1, #0
    3b24:	4b37      	ldr	r3, [pc, #220]	; (3c04 <cpu_start+0x100>)
    3b26:	4798      	blx	r3
	
	/**
	Go...
	**/
	ret = nm_read_reg_with_ret(0x1118, &reg);
    3b28:	1dfc      	adds	r4, r7, #7
    3b2a:	4a39      	ldr	r2, [pc, #228]	; (3c10 <cpu_start+0x10c>)
    3b2c:	1c3b      	adds	r3, r7, #0
    3b2e:	1c10      	adds	r0, r2, #0
    3b30:	1c19      	adds	r1, r3, #0
    3b32:	4b38      	ldr	r3, [pc, #224]	; (3c14 <cpu_start+0x110>)
    3b34:	4798      	blx	r3
    3b36:	1c03      	adds	r3, r0, #0
    3b38:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3b3a:	1dfb      	adds	r3, r7, #7
    3b3c:	781b      	ldrb	r3, [r3, #0]
    3b3e:	b25b      	sxtb	r3, r3
    3b40:	2b00      	cmp	r3, #0
    3b42:	d002      	beq.n	3b4a <cpu_start+0x46>
		ret = M2M_ERR_BUS_FAIL;
    3b44:	1dfb      	adds	r3, r7, #7
    3b46:	22fa      	movs	r2, #250	; 0xfa
    3b48:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi start]: fail read reg 0x1118 ...\n");
	}
	reg |= (1 << 0);
    3b4a:	683b      	ldr	r3, [r7, #0]
    3b4c:	2201      	movs	r2, #1
    3b4e:	4313      	orrs	r3, r2
    3b50:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(0x1118, reg);
    3b52:	683b      	ldr	r3, [r7, #0]
    3b54:	1dfc      	adds	r4, r7, #7
    3b56:	4a2e      	ldr	r2, [pc, #184]	; (3c10 <cpu_start+0x10c>)
    3b58:	1c10      	adds	r0, r2, #0
    3b5a:	1c19      	adds	r1, r3, #0
    3b5c:	4b29      	ldr	r3, [pc, #164]	; (3c04 <cpu_start+0x100>)
    3b5e:	4798      	blx	r3
    3b60:	1c03      	adds	r3, r0, #0
    3b62:	7023      	strb	r3, [r4, #0]
	ret = nm_write_reg(0x150014, 0x1);
    3b64:	1dfc      	adds	r4, r7, #7
    3b66:	4b2c      	ldr	r3, [pc, #176]	; (3c18 <cpu_start+0x114>)
    3b68:	1c18      	adds	r0, r3, #0
    3b6a:	2101      	movs	r1, #1
    3b6c:	4b25      	ldr	r3, [pc, #148]	; (3c04 <cpu_start+0x100>)
    3b6e:	4798      	blx	r3
    3b70:	1c03      	adds	r3, r0, #0
    3b72:	7023      	strb	r3, [r4, #0]
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    3b74:	23a0      	movs	r3, #160	; 0xa0
    3b76:	015a      	lsls	r2, r3, #5
    3b78:	1c3b      	adds	r3, r7, #0
    3b7a:	1c10      	adds	r0, r2, #0
    3b7c:	1c19      	adds	r1, r3, #0
    3b7e:	4b25      	ldr	r3, [pc, #148]	; (3c14 <cpu_start+0x110>)
    3b80:	4798      	blx	r3
    3b82:	1c03      	adds	r3, r0, #0
    3b84:	b2da      	uxtb	r2, r3
    3b86:	1dfb      	adds	r3, r7, #7
    3b88:	781b      	ldrb	r3, [r3, #0]
    3b8a:	18d3      	adds	r3, r2, r3
    3b8c:	b2da      	uxtb	r2, r3
    3b8e:	1dfb      	adds	r3, r7, #7
    3b90:	701a      	strb	r2, [r3, #0]
	if ((reg & (1ul << 10)) == (1ul << 10)) {
    3b92:	683a      	ldr	r2, [r7, #0]
    3b94:	2380      	movs	r3, #128	; 0x80
    3b96:	00db      	lsls	r3, r3, #3
    3b98:	4013      	ands	r3, r2
    3b9a:	d012      	beq.n	3bc2 <cpu_start+0xbe>
		reg &= ~(1ul << 10);
    3b9c:	683a      	ldr	r2, [r7, #0]
    3b9e:	4b1f      	ldr	r3, [pc, #124]	; (3c1c <cpu_start+0x118>)
    3ba0:	4013      	ands	r3, r2
    3ba2:	603b      	str	r3, [r7, #0]
		ret += nm_write_reg(NMI_GLB_RESET_0, reg);
    3ba4:	683b      	ldr	r3, [r7, #0]
    3ba6:	22a0      	movs	r2, #160	; 0xa0
    3ba8:	0152      	lsls	r2, r2, #5
    3baa:	1c10      	adds	r0, r2, #0
    3bac:	1c19      	adds	r1, r3, #0
    3bae:	4b15      	ldr	r3, [pc, #84]	; (3c04 <cpu_start+0x100>)
    3bb0:	4798      	blx	r3
    3bb2:	1c03      	adds	r3, r0, #0
    3bb4:	b2da      	uxtb	r2, r3
    3bb6:	1dfb      	adds	r3, r7, #7
    3bb8:	781b      	ldrb	r3, [r3, #0]
    3bba:	18d3      	adds	r3, r2, r3
    3bbc:	b2da      	uxtb	r2, r3
    3bbe:	1dfb      	adds	r3, r7, #7
    3bc0:	701a      	strb	r2, [r3, #0]
	}

	reg |= (1ul << 10);
    3bc2:	683b      	ldr	r3, [r7, #0]
    3bc4:	2280      	movs	r2, #128	; 0x80
    3bc6:	00d2      	lsls	r2, r2, #3
    3bc8:	4313      	orrs	r3, r2
    3bca:	603b      	str	r3, [r7, #0]
	ret += nm_write_reg(NMI_GLB_RESET_0, reg);
    3bcc:	683b      	ldr	r3, [r7, #0]
    3bce:	22a0      	movs	r2, #160	; 0xa0
    3bd0:	0152      	lsls	r2, r2, #5
    3bd2:	1c10      	adds	r0, r2, #0
    3bd4:	1c19      	adds	r1, r3, #0
    3bd6:	4b0b      	ldr	r3, [pc, #44]	; (3c04 <cpu_start+0x100>)
    3bd8:	4798      	blx	r3
    3bda:	1c03      	adds	r3, r0, #0
    3bdc:	b2da      	uxtb	r2, r3
    3bde:	1dfb      	adds	r3, r7, #7
    3be0:	781b      	ldrb	r3, [r3, #0]
    3be2:	18d3      	adds	r3, r2, r3
    3be4:	b2da      	uxtb	r2, r3
    3be6:	1dfb      	adds	r3, r7, #7
    3be8:	701a      	strb	r2, [r3, #0]
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    3bea:	2001      	movs	r0, #1
    3bec:	4b0c      	ldr	r3, [pc, #48]	; (3c20 <cpu_start+0x11c>)
    3bee:	4798      	blx	r3
	return ret;
    3bf0:	1dfb      	adds	r3, r7, #7
    3bf2:	781b      	ldrb	r3, [r3, #0]
    3bf4:	b25b      	sxtb	r3, r3
}
    3bf6:	1c18      	adds	r0, r3, #0
    3bf8:	46bd      	mov	sp, r7
    3bfa:	b003      	add	sp, #12
    3bfc:	bd90      	pop	{r4, r7, pc}
    3bfe:	46c0      	nop			; (mov r8, r8)
    3c00:	000c000c 	.word	0x000c000c
    3c04:	000040c9 	.word	0x000040c9
    3c08:	0000108c 	.word	0x0000108c
    3c0c:	000207ac 	.word	0x000207ac
    3c10:	00001118 	.word	0x00001118
    3c14:	000040a5 	.word	0x000040a5
    3c18:	00150014 	.word	0x00150014
    3c1c:	fffffbff 	.word	0xfffffbff
    3c20:	00002471 	.word	0x00002471

00003c24 <nmi_get_chipid>:

uint32 nmi_get_chipid(void)
{
    3c24:	b580      	push	{r7, lr}
    3c26:	b082      	sub	sp, #8
    3c28:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    3c2a:	4b2f      	ldr	r3, [pc, #188]	; (3ce8 <nmi_get_chipid+0xc4>)
    3c2c:	681b      	ldr	r3, [r3, #0]
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d154      	bne.n	3cdc <nmi_get_chipid+0xb8>
		//uint32 revid;
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    3c32:	2380      	movs	r3, #128	; 0x80
    3c34:	015a      	lsls	r2, r3, #5
    3c36:	4b2c      	ldr	r3, [pc, #176]	; (3ce8 <nmi_get_chipid+0xc4>)
    3c38:	1c10      	adds	r0, r2, #0
    3c3a:	1c19      	adds	r1, r3, #0
    3c3c:	4b2b      	ldr	r3, [pc, #172]	; (3cec <nmi_get_chipid+0xc8>)
    3c3e:	4798      	blx	r3
    3c40:	1c03      	adds	r3, r0, #0
    3c42:	2b00      	cmp	r3, #0
    3c44:	d004      	beq.n	3c50 <nmi_get_chipid+0x2c>
			chipid = 0;
    3c46:	4b28      	ldr	r3, [pc, #160]	; (3ce8 <nmi_get_chipid+0xc4>)
    3c48:	2200      	movs	r2, #0
    3c4a:	601a      	str	r2, [r3, #0]
			return 0;
    3c4c:	2300      	movs	r3, #0
    3c4e:	e047      	b.n	3ce0 <nmi_get_chipid+0xbc>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    3c50:	4a27      	ldr	r2, [pc, #156]	; (3cf0 <nmi_get_chipid+0xcc>)
    3c52:	1c3b      	adds	r3, r7, #0
    3c54:	1c10      	adds	r0, r2, #0
    3c56:	1c19      	adds	r1, r3, #0
    3c58:	4b24      	ldr	r3, [pc, #144]	; (3cec <nmi_get_chipid+0xc8>)
    3c5a:	4798      	blx	r3
    3c5c:	1c03      	adds	r3, r0, #0
    3c5e:	2b00      	cmp	r3, #0
    3c60:	d004      	beq.n	3c6c <nmi_get_chipid+0x48>
			chipid = 0;
    3c62:	4b21      	ldr	r3, [pc, #132]	; (3ce8 <nmi_get_chipid+0xc4>)
    3c64:	2200      	movs	r2, #0
    3c66:	601a      	str	r2, [r3, #0]
			return 0;
    3c68:	2300      	movs	r3, #0
    3c6a:	e039      	b.n	3ce0 <nmi_get_chipid+0xbc>
		}

		if (chipid == 0x1002a0)  {
    3c6c:	4b1e      	ldr	r3, [pc, #120]	; (3ce8 <nmi_get_chipid+0xc4>)
    3c6e:	681a      	ldr	r2, [r3, #0]
    3c70:	4b20      	ldr	r3, [pc, #128]	; (3cf4 <nmi_get_chipid+0xd0>)
    3c72:	429a      	cmp	r2, r3
    3c74:	d106      	bne.n	3c84 <nmi_get_chipid+0x60>
			if (rfrevid == 0x1) { /* 1002A0 */
    3c76:	683b      	ldr	r3, [r7, #0]
    3c78:	2b01      	cmp	r3, #1
    3c7a:	d015      	beq.n	3ca8 <nmi_get_chipid+0x84>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    3c7c:	4b1a      	ldr	r3, [pc, #104]	; (3ce8 <nmi_get_chipid+0xc4>)
    3c7e:	4a1e      	ldr	r2, [pc, #120]	; (3cf8 <nmi_get_chipid+0xd4>)
    3c80:	601a      	str	r2, [r3, #0]
    3c82:	e011      	b.n	3ca8 <nmi_get_chipid+0x84>
			}
		} else if(chipid == 0x1002b0) {
    3c84:	4b18      	ldr	r3, [pc, #96]	; (3ce8 <nmi_get_chipid+0xc4>)
    3c86:	681a      	ldr	r2, [r3, #0]
    3c88:	4b1c      	ldr	r3, [pc, #112]	; (3cfc <nmi_get_chipid+0xd8>)
    3c8a:	429a      	cmp	r2, r3
    3c8c:	d10c      	bne.n	3ca8 <nmi_get_chipid+0x84>
			if(rfrevid == 3) { /* 1002B0 */
    3c8e:	683b      	ldr	r3, [r7, #0]
    3c90:	2b03      	cmp	r3, #3
    3c92:	d009      	beq.n	3ca8 <nmi_get_chipid+0x84>
			} else if(rfrevid == 4) { /* 1002B1 */
    3c94:	683b      	ldr	r3, [r7, #0]
    3c96:	2b04      	cmp	r3, #4
    3c98:	d103      	bne.n	3ca2 <nmi_get_chipid+0x7e>
				chipid = 0x1002b1;
    3c9a:	4b13      	ldr	r3, [pc, #76]	; (3ce8 <nmi_get_chipid+0xc4>)
    3c9c:	4a18      	ldr	r2, [pc, #96]	; (3d00 <nmi_get_chipid+0xdc>)
    3c9e:	601a      	str	r2, [r3, #0]
    3ca0:	e002      	b.n	3ca8 <nmi_get_chipid+0x84>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    3ca2:	4b11      	ldr	r3, [pc, #68]	; (3ce8 <nmi_get_chipid+0xc4>)
    3ca4:	4a17      	ldr	r2, [pc, #92]	; (3d04 <nmi_get_chipid+0xe0>)
    3ca6:	601a      	str	r2, [r3, #0]
			}
		} else {
		}
#define PROBE_FLASH
#ifdef PROBE_FLASH
		if(chipid) {
    3ca8:	4b0f      	ldr	r3, [pc, #60]	; (3ce8 <nmi_get_chipid+0xc4>)
    3caa:	681b      	ldr	r3, [r3, #0]
    3cac:	2b00      	cmp	r3, #0
    3cae:	d015      	beq.n	3cdc <nmi_get_chipid+0xb8>
			uint32 flashid;

			flashid = probe_spi_flash();
    3cb0:	4b15      	ldr	r3, [pc, #84]	; (3d08 <nmi_get_chipid+0xe4>)
    3cb2:	4798      	blx	r3
    3cb4:	1c03      	adds	r3, r0, #0
    3cb6:	607b      	str	r3, [r7, #4]
			if(flashid == 0x1230ef) {
    3cb8:	687a      	ldr	r2, [r7, #4]
    3cba:	4b14      	ldr	r3, [pc, #80]	; (3d0c <nmi_get_chipid+0xe8>)
    3cbc:	429a      	cmp	r2, r3
    3cbe:	d10d      	bne.n	3cdc <nmi_get_chipid+0xb8>
				chipid &= ~(0x0f0000);
    3cc0:	4b09      	ldr	r3, [pc, #36]	; (3ce8 <nmi_get_chipid+0xc4>)
    3cc2:	681a      	ldr	r2, [r3, #0]
    3cc4:	4b12      	ldr	r3, [pc, #72]	; (3d10 <nmi_get_chipid+0xec>)
    3cc6:	401a      	ands	r2, r3
    3cc8:	4b07      	ldr	r3, [pc, #28]	; (3ce8 <nmi_get_chipid+0xc4>)
    3cca:	601a      	str	r2, [r3, #0]
				chipid |= 0x050000;
    3ccc:	4b06      	ldr	r3, [pc, #24]	; (3ce8 <nmi_get_chipid+0xc4>)
    3cce:	681b      	ldr	r3, [r3, #0]
    3cd0:	22a0      	movs	r2, #160	; 0xa0
    3cd2:	02d2      	lsls	r2, r2, #11
    3cd4:	431a      	orrs	r2, r3
    3cd6:	4b04      	ldr	r3, [pc, #16]	; (3ce8 <nmi_get_chipid+0xc4>)
    3cd8:	601a      	str	r2, [r3, #0]
    3cda:	e7ff      	b.n	3cdc <nmi_get_chipid+0xb8>
#else
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    3cdc:	4b02      	ldr	r3, [pc, #8]	; (3ce8 <nmi_get_chipid+0xc4>)
    3cde:	681b      	ldr	r3, [r3, #0]
}
    3ce0:	1c18      	adds	r0, r3, #0
    3ce2:	46bd      	mov	sp, r7
    3ce4:	b002      	add	sp, #8
    3ce6:	bd80      	pop	{r7, pc}
    3ce8:	20000938 	.word	0x20000938
    3cec:	000040a5 	.word	0x000040a5
    3cf0:	000013f4 	.word	0x000013f4
    3cf4:	001002a0 	.word	0x001002a0
    3cf8:	001002a1 	.word	0x001002a1
    3cfc:	001002b0 	.word	0x001002b0
    3d00:	001002b1 	.word	0x001002b1
    3d04:	001002b2 	.word	0x001002b2
    3d08:	000054dd 	.word	0x000054dd
    3d0c:	001230ef 	.word	0x001230ef
    3d10:	fff0ffff 	.word	0xfff0ffff

00003d14 <restore_pmu_settings_after_global_reset>:

void restore_pmu_settings_after_global_reset(void)
{
    3d14:	b580      	push	{r7, lr}
    3d16:	af00      	add	r7, sp, #0
	/* 
	* Must restore PMU register value after 
	* global reset if PMU toggle is done at 
	* least once since the last hard reset.
	*/
	if(REV(nmi_get_chipid()) >= REV_B0) {
    3d18:	4b07      	ldr	r3, [pc, #28]	; (3d38 <restore_pmu_settings_after_global_reset+0x24>)
    3d1a:	4798      	blx	r3
    3d1c:	1c03      	adds	r3, r0, #0
    3d1e:	051b      	lsls	r3, r3, #20
    3d20:	0d1a      	lsrs	r2, r3, #20
    3d22:	4b06      	ldr	r3, [pc, #24]	; (3d3c <restore_pmu_settings_after_global_reset+0x28>)
    3d24:	429a      	cmp	r2, r3
    3d26:	d905      	bls.n	3d34 <restore_pmu_settings_after_global_reset+0x20>
		nm_write_reg(0x1e48, 0xb78469ce);
    3d28:	4a05      	ldr	r2, [pc, #20]	; (3d40 <restore_pmu_settings_after_global_reset+0x2c>)
    3d2a:	4b06      	ldr	r3, [pc, #24]	; (3d44 <restore_pmu_settings_after_global_reset+0x30>)
    3d2c:	1c10      	adds	r0, r2, #0
    3d2e:	1c19      	adds	r1, r3, #0
    3d30:	4b05      	ldr	r3, [pc, #20]	; (3d48 <restore_pmu_settings_after_global_reset+0x34>)
    3d32:	4798      	blx	r3
	}
}
    3d34:	46bd      	mov	sp, r7
    3d36:	bd80      	pop	{r7, pc}
    3d38:	00003c25 	.word	0x00003c25
    3d3c:	000002af 	.word	0x000002af
    3d40:	00001e48 	.word	0x00001e48
    3d44:	b78469ce 	.word	0xb78469ce
    3d48:	000040c9 	.word	0x000040c9

00003d4c <nmi_update_pll>:

void nmi_update_pll(void)
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b082      	sub	sp, #8
    3d50:	af00      	add	r7, sp, #0
	uint32 pll;

	pll = nm_read_reg(0x1428);
    3d52:	4b0e      	ldr	r3, [pc, #56]	; (3d8c <nmi_update_pll+0x40>)
    3d54:	1c18      	adds	r0, r3, #0
    3d56:	4b0e      	ldr	r3, [pc, #56]	; (3d90 <nmi_update_pll+0x44>)
    3d58:	4798      	blx	r3
    3d5a:	1c03      	adds	r3, r0, #0
    3d5c:	607b      	str	r3, [r7, #4]
	pll &= ~0x1ul;
    3d5e:	687b      	ldr	r3, [r7, #4]
    3d60:	2201      	movs	r2, #1
    3d62:	4393      	bics	r3, r2
    3d64:	607b      	str	r3, [r7, #4]
	nm_write_reg(0x1428, pll);
    3d66:	4a09      	ldr	r2, [pc, #36]	; (3d8c <nmi_update_pll+0x40>)
    3d68:	687b      	ldr	r3, [r7, #4]
    3d6a:	1c10      	adds	r0, r2, #0
    3d6c:	1c19      	adds	r1, r3, #0
    3d6e:	4b09      	ldr	r3, [pc, #36]	; (3d94 <nmi_update_pll+0x48>)
    3d70:	4798      	blx	r3
	pll |= 0x1ul;
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	2201      	movs	r2, #1
    3d76:	4313      	orrs	r3, r2
    3d78:	607b      	str	r3, [r7, #4]
	nm_write_reg(0x1428, pll);
    3d7a:	4a04      	ldr	r2, [pc, #16]	; (3d8c <nmi_update_pll+0x40>)
    3d7c:	687b      	ldr	r3, [r7, #4]
    3d7e:	1c10      	adds	r0, r2, #0
    3d80:	1c19      	adds	r1, r3, #0
    3d82:	4b04      	ldr	r3, [pc, #16]	; (3d94 <nmi_update_pll+0x48>)
    3d84:	4798      	blx	r3

}
    3d86:	46bd      	mov	sp, r7
    3d88:	b002      	add	sp, #8
    3d8a:	bd80      	pop	{r7, pc}
    3d8c:	00001428 	.word	0x00001428
    3d90:	00004085 	.word	0x00004085
    3d94:	000040c9 	.word	0x000040c9

00003d98 <nmi_set_sys_clk_src_to_xo>:
void nmi_set_sys_clk_src_to_xo(void) 
{
    3d98:	b580      	push	{r7, lr}
    3d9a:	b082      	sub	sp, #8
    3d9c:	af00      	add	r7, sp, #0
	uint32 val32;
	
	/* Switch system clock source to XO. This will take effect after nmi_update_pll(). */
	val32 = nm_read_reg(0x141c);
    3d9e:	4b0a      	ldr	r3, [pc, #40]	; (3dc8 <nmi_set_sys_clk_src_to_xo+0x30>)
    3da0:	1c18      	adds	r0, r3, #0
    3da2:	4b0a      	ldr	r3, [pc, #40]	; (3dcc <nmi_set_sys_clk_src_to_xo+0x34>)
    3da4:	4798      	blx	r3
    3da6:	1c03      	adds	r3, r0, #0
    3da8:	607b      	str	r3, [r7, #4]
	val32 |= (1 << 2);
    3daa:	687b      	ldr	r3, [r7, #4]
    3dac:	2204      	movs	r2, #4
    3dae:	4313      	orrs	r3, r2
    3db0:	607b      	str	r3, [r7, #4]
	nm_write_reg(0x141c, val32);
    3db2:	4a05      	ldr	r2, [pc, #20]	; (3dc8 <nmi_set_sys_clk_src_to_xo+0x30>)
    3db4:	687b      	ldr	r3, [r7, #4]
    3db6:	1c10      	adds	r0, r2, #0
    3db8:	1c19      	adds	r1, r3, #0
    3dba:	4b05      	ldr	r3, [pc, #20]	; (3dd0 <nmi_set_sys_clk_src_to_xo+0x38>)
    3dbc:	4798      	blx	r3
	
	/* Do PLL update */
	nmi_update_pll();
    3dbe:	4b05      	ldr	r3, [pc, #20]	; (3dd4 <nmi_set_sys_clk_src_to_xo+0x3c>)
    3dc0:	4798      	blx	r3
}
    3dc2:	46bd      	mov	sp, r7
    3dc4:	b002      	add	sp, #8
    3dc6:	bd80      	pop	{r7, pc}
    3dc8:	0000141c 	.word	0x0000141c
    3dcc:	00004085 	.word	0x00004085
    3dd0:	000040c9 	.word	0x000040c9
    3dd4:	00003d4d 	.word	0x00003d4d

00003dd8 <chip_reset>:

sint8 chip_reset(void)
{
    3dd8:	b580      	push	{r7, lr}
    3dda:	b082      	sub	sp, #8
    3ddc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    3dde:	1dfb      	adds	r3, r7, #7
    3de0:	2200      	movs	r2, #0
    3de2:	701a      	strb	r2, [r3, #0]

	nmi_set_sys_clk_src_to_xo();
    3de4:	4b0d      	ldr	r3, [pc, #52]	; (3e1c <chip_reset+0x44>)
    3de6:	4798      	blx	r3
	ret += nm_write_reg(NMI_GLB_RESET_0, 0);
    3de8:	23a0      	movs	r3, #160	; 0xa0
    3dea:	015b      	lsls	r3, r3, #5
    3dec:	1c18      	adds	r0, r3, #0
    3dee:	2100      	movs	r1, #0
    3df0:	4b0b      	ldr	r3, [pc, #44]	; (3e20 <chip_reset+0x48>)
    3df2:	4798      	blx	r3
    3df4:	1c03      	adds	r3, r0, #0
    3df6:	b2da      	uxtb	r2, r3
    3df8:	1dfb      	adds	r3, r7, #7
    3dfa:	781b      	ldrb	r3, [r3, #0]
    3dfc:	18d3      	adds	r3, r2, r3
    3dfe:	b2da      	uxtb	r2, r3
    3e00:	1dfb      	adds	r3, r7, #7
    3e02:	701a      	strb	r2, [r3, #0]
	nm_bsp_sleep(50);
    3e04:	2032      	movs	r0, #50	; 0x32
    3e06:	4b07      	ldr	r3, [pc, #28]	; (3e24 <chip_reset+0x4c>)
    3e08:	4798      	blx	r3

	restore_pmu_settings_after_global_reset();
    3e0a:	4b07      	ldr	r3, [pc, #28]	; (3e28 <chip_reset+0x50>)
    3e0c:	4798      	blx	r3
	
	return ret;
    3e0e:	1dfb      	adds	r3, r7, #7
    3e10:	781b      	ldrb	r3, [r3, #0]
    3e12:	b25b      	sxtb	r3, r3
}
    3e14:	1c18      	adds	r0, r3, #0
    3e16:	46bd      	mov	sp, r7
    3e18:	b002      	add	sp, #8
    3e1a:	bd80      	pop	{r7, pc}
    3e1c:	00003d99 	.word	0x00003d99
    3e20:	000040c9 	.word	0x000040c9
    3e24:	00002471 	.word	0x00002471
    3e28:	00003d15 	.word	0x00003d15

00003e2c <wait_for_bootrom>:

sint8 wait_for_bootrom(void)
{
    3e2c:	b580      	push	{r7, lr}
    3e2e:	b084      	sub	sp, #16
    3e30:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    3e32:	1c3b      	adds	r3, r7, #0
    3e34:	330f      	adds	r3, #15
    3e36:	2200      	movs	r2, #0
    3e38:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    3e3a:	2300      	movs	r3, #0
    3e3c:	60bb      	str	r3, [r7, #8]
    3e3e:	2300      	movs	r3, #0
    3e40:	607b      	str	r3, [r7, #4]
	
	reg = 0;
    3e42:	2300      	movs	r3, #0
    3e44:	60bb      	str	r3, [r7, #8]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    3e46:	4b23      	ldr	r3, [pc, #140]	; (3ed4 <wait_for_bootrom+0xa8>)
    3e48:	1c18      	adds	r0, r3, #0
    3e4a:	4b23      	ldr	r3, [pc, #140]	; (3ed8 <wait_for_bootrom+0xac>)
    3e4c:	4798      	blx	r3
    3e4e:	1c03      	adds	r3, r0, #0
    3e50:	60bb      	str	r3, [r7, #8]
		if (reg & 0x80000000) {
    3e52:	68bb      	ldr	r3, [r7, #8]
    3e54:	2b00      	cmp	r3, #0
    3e56:	da0e      	bge.n	3e76 <wait_for_bootrom+0x4a>
			break;
    3e58:	46c0      	nop			; (mov r8, r8)
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    3e5a:	4b20      	ldr	r3, [pc, #128]	; (3edc <wait_for_bootrom+0xb0>)
    3e5c:	1c18      	adds	r0, r3, #0
    3e5e:	4b1e      	ldr	r3, [pc, #120]	; (3ed8 <wait_for_bootrom+0xac>)
    3e60:	4798      	blx	r3
    3e62:	1c03      	adds	r3, r0, #0
    3e64:	60bb      	str	r3, [r7, #8]
	reg &= 0x1;
    3e66:	68ba      	ldr	r2, [r7, #8]
    3e68:	2301      	movs	r3, #1
    3e6a:	4013      	ands	r3, r2
    3e6c:	60bb      	str	r3, [r7, #8]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    3e6e:	68bb      	ldr	r3, [r7, #8]
    3e70:	2b00      	cmp	r3, #0
    3e72:	d121      	bne.n	3eb8 <wait_for_bootrom+0x8c>
    3e74:	e003      	b.n	3e7e <wait_for_bootrom+0x52>
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    3e76:	2001      	movs	r0, #1
    3e78:	4b19      	ldr	r3, [pc, #100]	; (3ee0 <wait_for_bootrom+0xb4>)
    3e7a:	4798      	blx	r3
	}
    3e7c:	e7e3      	b.n	3e46 <wait_for_bootrom+0x1a>
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
    3e7e:	2300      	movs	r3, #0
    3e80:	60bb      	str	r3, [r7, #8]
		while(reg != M2M_FINISH_BOOT_ROM)
    3e82:	e015      	b.n	3eb0 <wait_for_bootrom+0x84>
		{
			nm_bsp_sleep(1);
    3e84:	2001      	movs	r0, #1
    3e86:	4b16      	ldr	r3, [pc, #88]	; (3ee0 <wait_for_bootrom+0xb4>)
    3e88:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    3e8a:	4b16      	ldr	r3, [pc, #88]	; (3ee4 <wait_for_bootrom+0xb8>)
    3e8c:	1c18      	adds	r0, r3, #0
    3e8e:	4b12      	ldr	r3, [pc, #72]	; (3ed8 <wait_for_bootrom+0xac>)
    3e90:	4798      	blx	r3
    3e92:	1c03      	adds	r3, r0, #0
    3e94:	60bb      	str	r3, [r7, #8]

			if(++cnt > 1000)
    3e96:	687b      	ldr	r3, [r7, #4]
    3e98:	3301      	adds	r3, #1
    3e9a:	607b      	str	r3, [r7, #4]
    3e9c:	687a      	ldr	r2, [r7, #4]
    3e9e:	23fa      	movs	r3, #250	; 0xfa
    3ea0:	009b      	lsls	r3, r3, #2
    3ea2:	429a      	cmp	r2, r3
    3ea4:	d904      	bls.n	3eb0 <wait_for_bootrom+0x84>
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
    3ea6:	1c3b      	adds	r3, r7, #0
    3ea8:	330f      	adds	r3, #15
    3eaa:	22fb      	movs	r2, #251	; 0xfb
    3eac:	701a      	strb	r2, [r3, #0]
				goto ERR2;
    3eae:	e009      	b.n	3ec4 <wait_for_bootrom+0x98>

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    3eb0:	68ba      	ldr	r2, [r7, #8]
    3eb2:	4b0d      	ldr	r3, [pc, #52]	; (3ee8 <wait_for_bootrom+0xbc>)
    3eb4:	429a      	cmp	r2, r3
    3eb6:	d1e5      	bne.n	3e84 <wait_for_bootrom+0x58>
				goto ERR2;
			}
		}
	}

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    3eb8:	4a0a      	ldr	r2, [pc, #40]	; (3ee4 <wait_for_bootrom+0xb8>)
    3eba:	4b0c      	ldr	r3, [pc, #48]	; (3eec <wait_for_bootrom+0xc0>)
    3ebc:	1c10      	adds	r0, r2, #0
    3ebe:	1c19      	adds	r1, r3, #0
    3ec0:	4b0b      	ldr	r3, [pc, #44]	; (3ef0 <wait_for_bootrom+0xc4>)
    3ec2:	4798      	blx	r3

ERR2:
	return ret;
    3ec4:	1c3b      	adds	r3, r7, #0
    3ec6:	330f      	adds	r3, #15
    3ec8:	781b      	ldrb	r3, [r3, #0]
    3eca:	b25b      	sxtb	r3, r3
}
    3ecc:	1c18      	adds	r0, r3, #0
    3ece:	46bd      	mov	sp, r7
    3ed0:	b004      	add	sp, #16
    3ed2:	bd80      	pop	{r7, pc}
    3ed4:	00001014 	.word	0x00001014
    3ed8:	00004085 	.word	0x00004085
    3edc:	000207bc 	.word	0x000207bc
    3ee0:	00002471 	.word	0x00002471
    3ee4:	000c000c 	.word	0x000c000c
    3ee8:	10add09e 	.word	0x10add09e
    3eec:	ef522f61 	.word	0xef522f61
    3ef0:	000040c9 	.word	0x000040c9

00003ef4 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(void)
{
    3ef4:	b580      	push	{r7, lr}
    3ef6:	b084      	sub	sp, #16
    3ef8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    3efa:	1c3b      	adds	r3, r7, #0
    3efc:	330f      	adds	r3, #15
    3efe:	2200      	movs	r2, #0
    3f00:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;;
    3f02:	2300      	movs	r3, #0
    3f04:	60bb      	str	r3, [r7, #8]
    3f06:	2300      	movs	r3, #0
    3f08:	607b      	str	r3, [r7, #4]
	
	while (reg != M2M_FINISH_INIT_STATE)
    3f0a:	e015      	b.n	3f38 <wait_for_firmware_start+0x44>
	{
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    3f0c:	2001      	movs	r0, #1
    3f0e:	4b13      	ldr	r3, [pc, #76]	; (3f5c <wait_for_firmware_start+0x68>)
    3f10:	4798      	blx	r3
		reg = nm_read_reg(STATE_REG);
    3f12:	4b13      	ldr	r3, [pc, #76]	; (3f60 <wait_for_firmware_start+0x6c>)
    3f14:	1c18      	adds	r0, r3, #0
    3f16:	4b13      	ldr	r3, [pc, #76]	; (3f64 <wait_for_firmware_start+0x70>)
    3f18:	4798      	blx	r3
    3f1a:	1c03      	adds	r3, r0, #0
    3f1c:	60bb      	str	r3, [r7, #8]
		if(++cnt > 1000)
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	3301      	adds	r3, #1
    3f22:	607b      	str	r3, [r7, #4]
    3f24:	687a      	ldr	r2, [r7, #4]
    3f26:	23fa      	movs	r3, #250	; 0xfa
    3f28:	009b      	lsls	r3, r3, #2
    3f2a:	429a      	cmp	r2, r3
    3f2c:	d904      	bls.n	3f38 <wait_for_firmware_start+0x44>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    3f2e:	1c3b      	adds	r3, r7, #0
    3f30:	330f      	adds	r3, #15
    3f32:	22fb      	movs	r2, #251	; 0xfb
    3f34:	701a      	strb	r2, [r3, #0]
			goto ERR;
    3f36:	e008      	b.n	3f4a <wait_for_firmware_start+0x56>
sint8 wait_for_firmware_start(void)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;;
	
	while (reg != M2M_FINISH_INIT_STATE)
    3f38:	68ba      	ldr	r2, [r7, #8]
    3f3a:	4b0b      	ldr	r3, [pc, #44]	; (3f68 <wait_for_firmware_start+0x74>)
    3f3c:	429a      	cmp	r2, r3
    3f3e:	d1e5      	bne.n	3f0c <wait_for_firmware_start+0x18>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	nm_write_reg(STATE_REG,0);
    3f40:	4b07      	ldr	r3, [pc, #28]	; (3f60 <wait_for_firmware_start+0x6c>)
    3f42:	1c18      	adds	r0, r3, #0
    3f44:	2100      	movs	r1, #0
    3f46:	4b09      	ldr	r3, [pc, #36]	; (3f6c <wait_for_firmware_start+0x78>)
    3f48:	4798      	blx	r3
ERR:
	return ret;
    3f4a:	1c3b      	adds	r3, r7, #0
    3f4c:	330f      	adds	r3, #15
    3f4e:	781b      	ldrb	r3, [r3, #0]
    3f50:	b25b      	sxtb	r3, r3
}
    3f52:	1c18      	adds	r0, r3, #0
    3f54:	46bd      	mov	sp, r7
    3f56:	b004      	add	sp, #16
    3f58:	bd80      	pop	{r7, pc}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	00002471 	.word	0x00002471
    3f60:	0000108c 	.word	0x0000108c
    3f64:	00004085 	.word	0x00004085
    3f68:	02532636 	.word	0x02532636
    3f6c:	000040c9 	.word	0x000040c9

00003f70 <chip_deinit>:

sint8 chip_deinit(void)
{
    3f70:	b590      	push	{r4, r7, lr}
    3f72:	b083      	sub	sp, #12
    3f74:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    3f76:	2300      	movs	r3, #0
    3f78:	603b      	str	r3, [r7, #0]
	sint8 ret;
	uint8 timeout = 10;
    3f7a:	1dfb      	adds	r3, r7, #7
    3f7c:	220a      	movs	r2, #10
    3f7e:	701a      	strb	r2, [r3, #0]

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    3f80:	1dbc      	adds	r4, r7, #6
    3f82:	23a0      	movs	r3, #160	; 0xa0
    3f84:	015a      	lsls	r2, r3, #5
    3f86:	1c3b      	adds	r3, r7, #0
    3f88:	1c10      	adds	r0, r2, #0
    3f8a:	1c19      	adds	r1, r3, #0
    3f8c:	4b27      	ldr	r3, [pc, #156]	; (402c <chip_deinit+0xbc>)
    3f8e:	4798      	blx	r3
    3f90:	1c03      	adds	r3, r0, #0
    3f92:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
    3f94:	683a      	ldr	r2, [r7, #0]
    3f96:	4b26      	ldr	r3, [pc, #152]	; (4030 <chip_deinit+0xc0>)
    3f98:	4013      	ands	r3, r2
    3f9a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    3f9c:	683b      	ldr	r3, [r7, #0]
    3f9e:	1dbc      	adds	r4, r7, #6
    3fa0:	22a0      	movs	r2, #160	; 0xa0
    3fa2:	0152      	lsls	r2, r2, #5
    3fa4:	1c10      	adds	r0, r2, #0
    3fa6:	1c19      	adds	r1, r3, #0
    3fa8:	4b22      	ldr	r3, [pc, #136]	; (4034 <chip_deinit+0xc4>)
    3faa:	4798      	blx	r3
    3fac:	1c03      	adds	r3, r0, #0
    3fae:	7023      	strb	r3, [r4, #0]

	if (ret != M2M_SUCCESS) {
    3fb0:	1dbb      	adds	r3, r7, #6
    3fb2:	781b      	ldrb	r3, [r3, #0]
    3fb4:	b25b      	sxtb	r3, r3
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d002      	beq.n	3fc0 <chip_deinit+0x50>
		M2M_ERR("Error while writing reg\n");
		return ret;
    3fba:	1dbb      	adds	r3, r7, #6
    3fbc:	781b      	ldrb	r3, [r3, #0]
    3fbe:	e030      	b.n	4022 <chip_deinit+0xb2>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    3fc0:	1dbc      	adds	r4, r7, #6
    3fc2:	23a0      	movs	r3, #160	; 0xa0
    3fc4:	015a      	lsls	r2, r3, #5
    3fc6:	1c3b      	adds	r3, r7, #0
    3fc8:	1c10      	adds	r0, r2, #0
    3fca:	1c19      	adds	r1, r3, #0
    3fcc:	4b17      	ldr	r3, [pc, #92]	; (402c <chip_deinit+0xbc>)
    3fce:	4798      	blx	r3
    3fd0:	1c03      	adds	r3, r0, #0
    3fd2:	7023      	strb	r3, [r4, #0]
		if (ret != M2M_SUCCESS) {
    3fd4:	1dbb      	adds	r3, r7, #6
    3fd6:	781b      	ldrb	r3, [r3, #0]
    3fd8:	b25b      	sxtb	r3, r3
    3fda:	2b00      	cmp	r3, #0
    3fdc:	d002      	beq.n	3fe4 <chip_deinit+0x74>
			M2M_ERR("Error while reading reg\n");
			return ret;
    3fde:	1dbb      	adds	r3, r7, #6
    3fe0:	781b      	ldrb	r3, [r3, #0]
    3fe2:	e01e      	b.n	4022 <chip_deinit+0xb2>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    3fe4:	683a      	ldr	r2, [r7, #0]
    3fe6:	2380      	movs	r3, #128	; 0x80
    3fe8:	00db      	lsls	r3, r3, #3
    3fea:	4013      	ands	r3, r2
    3fec:	d017      	beq.n	401e <chip_deinit+0xae>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    3fee:	683a      	ldr	r2, [r7, #0]
    3ff0:	4b0f      	ldr	r3, [pc, #60]	; (4030 <chip_deinit+0xc0>)
    3ff2:	4013      	ands	r3, r2
    3ff4:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    3ff6:	683b      	ldr	r3, [r7, #0]
    3ff8:	1dbc      	adds	r4, r7, #6
    3ffa:	22a0      	movs	r2, #160	; 0xa0
    3ffc:	0152      	lsls	r2, r2, #5
    3ffe:	1c10      	adds	r0, r2, #0
    4000:	1c19      	adds	r1, r3, #0
    4002:	4b0c      	ldr	r3, [pc, #48]	; (4034 <chip_deinit+0xc4>)
    4004:	4798      	blx	r3
    4006:	1c03      	adds	r3, r0, #0
    4008:	7023      	strb	r3, [r4, #0]
			timeout--;
    400a:	1dfb      	adds	r3, r7, #7
    400c:	781a      	ldrb	r2, [r3, #0]
    400e:	1dfb      	adds	r3, r7, #7
    4010:	3a01      	subs	r2, #1
    4012:	701a      	strb	r2, [r3, #0]
		} else {
			break;
		}

	} while (timeout);
    4014:	1dfb      	adds	r3, r7, #7
    4016:	781b      	ldrb	r3, [r3, #0]
    4018:	2b00      	cmp	r3, #0
    401a:	d1d1      	bne.n	3fc0 <chip_deinit+0x50>
    401c:	e000      	b.n	4020 <chip_deinit+0xb0>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
			timeout--;
		} else {
			break;
    401e:	46c0      	nop			; (mov r8, r8)
    4020:	e000      	b.n	4024 <chip_deinit+0xb4>
    4022:	b25b      	sxtb	r3, r3
		}

	} while (timeout);
		
    4024:	1c18      	adds	r0, r3, #0
    4026:	46bd      	mov	sp, r7
    4028:	b003      	add	sp, #12
    402a:	bd90      	pop	{r4, r7, pc}
    402c:	000040a5 	.word	0x000040a5
    4030:	fffffbff 	.word	0xfffffbff
    4034:	000040c9 	.word	0x000040c9

00004038 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_bus_iface_init(void)
{
    4038:	b590      	push	{r4, r7, lr}
    403a:	b083      	sub	sp, #12
    403c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    403e:	1dfb      	adds	r3, r7, #7
    4040:	2200      	movs	r2, #0
    4042:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init();
    4044:	1dfc      	adds	r4, r7, #7
    4046:	4b05      	ldr	r3, [pc, #20]	; (405c <nm_bus_iface_init+0x24>)
    4048:	4798      	blx	r3
    404a:	1c03      	adds	r3, r0, #0
    404c:	7023      	strb	r3, [r4, #0]


	
	return ret;
    404e:	1dfb      	adds	r3, r7, #7
    4050:	781b      	ldrb	r3, [r3, #0]
    4052:	b25b      	sxtb	r3, r3
}
    4054:	1c18      	adds	r0, r3, #0
    4056:	46bd      	mov	sp, r7
    4058:	b003      	add	sp, #12
    405a:	bd90      	pop	{r4, r7, pc}
    405c:	00002a51 	.word	0x00002a51

00004060 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/ 
sint8 nm_bus_iface_deinit(void)
{
    4060:	b580      	push	{r7, lr}
    4062:	b082      	sub	sp, #8
    4064:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    4066:	1dfb      	adds	r3, r7, #7
    4068:	2200      	movs	r2, #0
    406a:	701a      	strb	r2, [r3, #0]

	nm_bus_deinit();
    406c:	4b04      	ldr	r3, [pc, #16]	; (4080 <nm_bus_iface_deinit+0x20>)
    406e:	4798      	blx	r3
	
	return ret;
    4070:	1dfb      	adds	r3, r7, #7
    4072:	781b      	ldrb	r3, [r3, #0]
    4074:	b25b      	sxtb	r3, r3
}
    4076:	1c18      	adds	r0, r3, #0
    4078:	46bd      	mov	sp, r7
    407a:	b002      	add	sp, #8
    407c:	bd80      	pop	{r7, pc}
    407e:	46c0      	nop			; (mov r8, r8)
    4080:	00002b71 	.word	0x00002b71

00004084 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
uint32 nm_read_reg(uint32 u32Addr)
{
    4084:	b580      	push	{r7, lr}
    4086:	b082      	sub	sp, #8
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
#ifdef USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (USE_SPI)
	return nm_spi_read_reg(u32Addr);
    408c:	687b      	ldr	r3, [r7, #4]
    408e:	1c18      	adds	r0, r3, #0
    4090:	4b03      	ldr	r3, [pc, #12]	; (40a0 <nm_read_reg+0x1c>)
    4092:	4798      	blx	r3
    4094:	1c03      	adds	r3, r0, #0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    4096:	1c18      	adds	r0, r3, #0
    4098:	46bd      	mov	sp, r7
    409a:	b002      	add	sp, #8
    409c:	bd80      	pop	{r7, pc}
    409e:	46c0      	nop			; (mov r8, r8)
    40a0:	000052d1 	.word	0x000052d1

000040a4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    40a4:	b580      	push	{r7, lr}
    40a6:	b082      	sub	sp, #8
    40a8:	af00      	add	r7, sp, #0
    40aa:	6078      	str	r0, [r7, #4]
    40ac:	6039      	str	r1, [r7, #0]
#ifdef USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    40ae:	687a      	ldr	r2, [r7, #4]
    40b0:	683b      	ldr	r3, [r7, #0]
    40b2:	1c10      	adds	r0, r2, #0
    40b4:	1c19      	adds	r1, r3, #0
    40b6:	4b03      	ldr	r3, [pc, #12]	; (40c4 <nm_read_reg_with_ret+0x20>)
    40b8:	4798      	blx	r3
    40ba:	1c03      	adds	r3, r0, #0
#elif defined (USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    40bc:	1c18      	adds	r0, r3, #0
    40be:	46bd      	mov	sp, r7
    40c0:	b002      	add	sp, #8
    40c2:	bd80      	pop	{r7, pc}
    40c4:	000052f5 	.word	0x000052f5

000040c8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    40c8:	b580      	push	{r7, lr}
    40ca:	b082      	sub	sp, #8
    40cc:	af00      	add	r7, sp, #0
    40ce:	6078      	str	r0, [r7, #4]
    40d0:	6039      	str	r1, [r7, #0]
#ifdef USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    40d2:	687a      	ldr	r2, [r7, #4]
    40d4:	683b      	ldr	r3, [r7, #0]
    40d6:	1c10      	adds	r0, r2, #0
    40d8:	1c19      	adds	r1, r3, #0
    40da:	4b03      	ldr	r3, [pc, #12]	; (40e8 <nm_write_reg+0x20>)
    40dc:	4798      	blx	r3
    40de:	1c03      	adds	r3, r0, #0
#elif defined (USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    40e0:	1c18      	adds	r0, r3, #0
    40e2:	46bd      	mov	sp, r7
    40e4:	b002      	add	sp, #8
    40e6:	bd80      	pop	{r7, pc}
    40e8:	00005345 	.word	0x00005345

000040ec <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    40ec:	b580      	push	{r7, lr}
    40ee:	b084      	sub	sp, #16
    40f0:	af00      	add	r7, sp, #0
    40f2:	60f8      	str	r0, [r7, #12]
    40f4:	60b9      	str	r1, [r7, #8]
    40f6:	1dbb      	adds	r3, r7, #6
    40f8:	801a      	strh	r2, [r3, #0]
	#ifdef USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    40fa:	68f9      	ldr	r1, [r7, #12]
    40fc:	68ba      	ldr	r2, [r7, #8]
    40fe:	1dbb      	adds	r3, r7, #6
    4100:	881b      	ldrh	r3, [r3, #0]
    4102:	1c08      	adds	r0, r1, #0
    4104:	1c11      	adds	r1, r2, #0
    4106:	1c1a      	adds	r2, r3, #0
    4108:	4b03      	ldr	r3, [pc, #12]	; (4118 <p_nm_read_block+0x2c>)
    410a:	4798      	blx	r3
    410c:	1c03      	adds	r3, r0, #0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    410e:	1c18      	adds	r0, r3, #0
    4110:	46bd      	mov	sp, r7
    4112:	b004      	add	sp, #16
    4114:	bd80      	pop	{r7, pc}
    4116:	46c0      	nop			; (mov r8, r8)
    4118:	00005395 	.word	0x00005395

0000411c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    411c:	b580      	push	{r7, lr}
    411e:	b086      	sub	sp, #24
    4120:	af00      	add	r7, sp, #0
    4122:	60f8      	str	r0, [r7, #12]
    4124:	60b9      	str	r1, [r7, #8]
    4126:	1dbb      	adds	r3, r7, #6
    4128:	801a      	strh	r2, [r3, #0]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    412a:	4b33      	ldr	r3, [pc, #204]	; (41f8 <nm_read_block+0xdc>)
    412c:	881a      	ldrh	r2, [r3, #0]
    412e:	1c3b      	adds	r3, r7, #0
    4130:	3312      	adds	r3, #18
    4132:	3a08      	subs	r2, #8
    4134:	801a      	strh	r2, [r3, #0]
	uint16 off = 0;
    4136:	1c3b      	adds	r3, r7, #0
    4138:	3316      	adds	r3, #22
    413a:	2200      	movs	r2, #0
    413c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    413e:	1c3b      	adds	r3, r7, #0
    4140:	3315      	adds	r3, #21
    4142:	2200      	movs	r2, #0
    4144:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u16Sz <= u16MaxTrxSz)
    4146:	1dba      	adds	r2, r7, #6
    4148:	1c3b      	adds	r3, r7, #0
    414a:	3312      	adds	r3, #18
    414c:	8812      	ldrh	r2, [r2, #0]
    414e:	881b      	ldrh	r3, [r3, #0]
    4150:	429a      	cmp	r2, r3
    4152:	d817      	bhi.n	4184 <nm_read_block+0x68>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16Sz);	
    4154:	1c3b      	adds	r3, r7, #0
    4156:	3316      	adds	r3, #22
    4158:	881b      	ldrh	r3, [r3, #0]
    415a:	68ba      	ldr	r2, [r7, #8]
    415c:	18d2      	adds	r2, r2, r3
    415e:	68f9      	ldr	r1, [r7, #12]
    4160:	1dbb      	adds	r3, r7, #6
    4162:	881b      	ldrh	r3, [r3, #0]
    4164:	1c08      	adds	r0, r1, #0
    4166:	1c11      	adds	r1, r2, #0
    4168:	1c1a      	adds	r2, r3, #0
    416a:	4b24      	ldr	r3, [pc, #144]	; (41fc <nm_read_block+0xe0>)
    416c:	4798      	blx	r3
    416e:	1c03      	adds	r3, r0, #0
    4170:	b2da      	uxtb	r2, r3
    4172:	1c3b      	adds	r3, r7, #0
    4174:	3315      	adds	r3, #21
    4176:	781b      	ldrb	r3, [r3, #0]
    4178:	18d3      	adds	r3, r2, r3
    417a:	b2da      	uxtb	r2, r3
    417c:	1c3b      	adds	r3, r7, #0
    417e:	3315      	adds	r3, #21
    4180:	701a      	strb	r2, [r3, #0]
			break;
    4182:	e030      	b.n	41e6 <nm_read_block+0xca>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    4184:	1c3b      	adds	r3, r7, #0
    4186:	3316      	adds	r3, #22
    4188:	881b      	ldrh	r3, [r3, #0]
    418a:	68ba      	ldr	r2, [r7, #8]
    418c:	18d2      	adds	r2, r2, r3
    418e:	68f9      	ldr	r1, [r7, #12]
    4190:	1c3b      	adds	r3, r7, #0
    4192:	3312      	adds	r3, #18
    4194:	881b      	ldrh	r3, [r3, #0]
    4196:	1c08      	adds	r0, r1, #0
    4198:	1c11      	adds	r1, r2, #0
    419a:	1c1a      	adds	r2, r3, #0
    419c:	4b17      	ldr	r3, [pc, #92]	; (41fc <nm_read_block+0xe0>)
    419e:	4798      	blx	r3
    41a0:	1c03      	adds	r3, r0, #0
    41a2:	b2da      	uxtb	r2, r3
    41a4:	1c3b      	adds	r3, r7, #0
    41a6:	3315      	adds	r3, #21
    41a8:	781b      	ldrb	r3, [r3, #0]
    41aa:	18d3      	adds	r3, r2, r3
    41ac:	b2da      	uxtb	r2, r3
    41ae:	1c3b      	adds	r3, r7, #0
    41b0:	3315      	adds	r3, #21
    41b2:	701a      	strb	r2, [r3, #0]
			u16Sz -= u16MaxTrxSz;
    41b4:	1dbb      	adds	r3, r7, #6
    41b6:	1db9      	adds	r1, r7, #6
    41b8:	1c3a      	adds	r2, r7, #0
    41ba:	3212      	adds	r2, #18
    41bc:	8809      	ldrh	r1, [r1, #0]
    41be:	8812      	ldrh	r2, [r2, #0]
    41c0:	1a8a      	subs	r2, r1, r2
    41c2:	801a      	strh	r2, [r3, #0]
			off += u16MaxTrxSz;
    41c4:	1c3b      	adds	r3, r7, #0
    41c6:	3316      	adds	r3, #22
    41c8:	1c39      	adds	r1, r7, #0
    41ca:	3116      	adds	r1, #22
    41cc:	1c3a      	adds	r2, r7, #0
    41ce:	3212      	adds	r2, #18
    41d0:	8809      	ldrh	r1, [r1, #0]
    41d2:	8812      	ldrh	r2, [r2, #0]
    41d4:	188a      	adds	r2, r1, r2
    41d6:	801a      	strh	r2, [r3, #0]
			u32Addr += u16MaxTrxSz;
    41d8:	1c3b      	adds	r3, r7, #0
    41da:	3312      	adds	r3, #18
    41dc:	881b      	ldrh	r3, [r3, #0]
    41de:	68fa      	ldr	r2, [r7, #12]
    41e0:	18d3      	adds	r3, r2, r3
    41e2:	60fb      	str	r3, [r7, #12]
		}
	}
    41e4:	e7af      	b.n	4146 <nm_read_block+0x2a>

	return s8Ret;
    41e6:	1c3b      	adds	r3, r7, #0
    41e8:	3315      	adds	r3, #21
    41ea:	781b      	ldrb	r3, [r3, #0]
    41ec:	b25b      	sxtb	r3, r3
}
    41ee:	1c18      	adds	r0, r3, #0
    41f0:	46bd      	mov	sp, r7
    41f2:	b006      	add	sp, #24
    41f4:	bd80      	pop	{r7, pc}
    41f6:	46c0      	nop			; (mov r8, r8)
    41f8:	20000008 	.word	0x20000008
    41fc:	000040ed 	.word	0x000040ed

00004200 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4200:	b580      	push	{r7, lr}
    4202:	b084      	sub	sp, #16
    4204:	af00      	add	r7, sp, #0
    4206:	60f8      	str	r0, [r7, #12]
    4208:	60b9      	str	r1, [r7, #8]
    420a:	1dbb      	adds	r3, r7, #6
    420c:	801a      	strh	r2, [r3, #0]
	#ifdef USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    420e:	68f9      	ldr	r1, [r7, #12]
    4210:	68ba      	ldr	r2, [r7, #8]
    4212:	1dbb      	adds	r3, r7, #6
    4214:	881b      	ldrh	r3, [r3, #0]
    4216:	1c08      	adds	r0, r1, #0
    4218:	1c11      	adds	r1, r2, #0
    421a:	1c1a      	adds	r2, r3, #0
    421c:	4b03      	ldr	r3, [pc, #12]	; (422c <p_nm_write_block+0x2c>)
    421e:	4798      	blx	r3
    4220:	1c03      	adds	r3, r0, #0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    4222:	1c18      	adds	r0, r3, #0
    4224:	46bd      	mov	sp, r7
    4226:	b004      	add	sp, #16
    4228:	bd80      	pop	{r7, pc}
    422a:	46c0      	nop			; (mov r8, r8)
    422c:	000053f1 	.word	0x000053f1

00004230 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4230:	b580      	push	{r7, lr}
    4232:	b086      	sub	sp, #24
    4234:	af00      	add	r7, sp, #0
    4236:	60f8      	str	r0, [r7, #12]
    4238:	60b9      	str	r1, [r7, #8]
    423a:	1dbb      	adds	r3, r7, #6
    423c:	801a      	strh	r2, [r3, #0]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    423e:	4b33      	ldr	r3, [pc, #204]	; (430c <nm_write_block+0xdc>)
    4240:	881a      	ldrh	r2, [r3, #0]
    4242:	1c3b      	adds	r3, r7, #0
    4244:	3312      	adds	r3, #18
    4246:	3a08      	subs	r2, #8
    4248:	801a      	strh	r2, [r3, #0]
	uint16 off = 0;
    424a:	1c3b      	adds	r3, r7, #0
    424c:	3316      	adds	r3, #22
    424e:	2200      	movs	r2, #0
    4250:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    4252:	1c3b      	adds	r3, r7, #0
    4254:	3315      	adds	r3, #21
    4256:	2200      	movs	r2, #0
    4258:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u16Sz <= u16MaxTrxSz)
    425a:	1dba      	adds	r2, r7, #6
    425c:	1c3b      	adds	r3, r7, #0
    425e:	3312      	adds	r3, #18
    4260:	8812      	ldrh	r2, [r2, #0]
    4262:	881b      	ldrh	r3, [r3, #0]
    4264:	429a      	cmp	r2, r3
    4266:	d817      	bhi.n	4298 <nm_write_block+0x68>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16Sz);	
    4268:	1c3b      	adds	r3, r7, #0
    426a:	3316      	adds	r3, #22
    426c:	881b      	ldrh	r3, [r3, #0]
    426e:	68ba      	ldr	r2, [r7, #8]
    4270:	18d2      	adds	r2, r2, r3
    4272:	68f9      	ldr	r1, [r7, #12]
    4274:	1dbb      	adds	r3, r7, #6
    4276:	881b      	ldrh	r3, [r3, #0]
    4278:	1c08      	adds	r0, r1, #0
    427a:	1c11      	adds	r1, r2, #0
    427c:	1c1a      	adds	r2, r3, #0
    427e:	4b24      	ldr	r3, [pc, #144]	; (4310 <nm_write_block+0xe0>)
    4280:	4798      	blx	r3
    4282:	1c03      	adds	r3, r0, #0
    4284:	b2da      	uxtb	r2, r3
    4286:	1c3b      	adds	r3, r7, #0
    4288:	3315      	adds	r3, #21
    428a:	781b      	ldrb	r3, [r3, #0]
    428c:	18d3      	adds	r3, r2, r3
    428e:	b2da      	uxtb	r2, r3
    4290:	1c3b      	adds	r3, r7, #0
    4292:	3315      	adds	r3, #21
    4294:	701a      	strb	r2, [r3, #0]
			break;
    4296:	e030      	b.n	42fa <nm_write_block+0xca>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    4298:	1c3b      	adds	r3, r7, #0
    429a:	3316      	adds	r3, #22
    429c:	881b      	ldrh	r3, [r3, #0]
    429e:	68ba      	ldr	r2, [r7, #8]
    42a0:	18d2      	adds	r2, r2, r3
    42a2:	68f9      	ldr	r1, [r7, #12]
    42a4:	1c3b      	adds	r3, r7, #0
    42a6:	3312      	adds	r3, #18
    42a8:	881b      	ldrh	r3, [r3, #0]
    42aa:	1c08      	adds	r0, r1, #0
    42ac:	1c11      	adds	r1, r2, #0
    42ae:	1c1a      	adds	r2, r3, #0
    42b0:	4b17      	ldr	r3, [pc, #92]	; (4310 <nm_write_block+0xe0>)
    42b2:	4798      	blx	r3
    42b4:	1c03      	adds	r3, r0, #0
    42b6:	b2da      	uxtb	r2, r3
    42b8:	1c3b      	adds	r3, r7, #0
    42ba:	3315      	adds	r3, #21
    42bc:	781b      	ldrb	r3, [r3, #0]
    42be:	18d3      	adds	r3, r2, r3
    42c0:	b2da      	uxtb	r2, r3
    42c2:	1c3b      	adds	r3, r7, #0
    42c4:	3315      	adds	r3, #21
    42c6:	701a      	strb	r2, [r3, #0]
			u16Sz -= u16MaxTrxSz;
    42c8:	1dbb      	adds	r3, r7, #6
    42ca:	1db9      	adds	r1, r7, #6
    42cc:	1c3a      	adds	r2, r7, #0
    42ce:	3212      	adds	r2, #18
    42d0:	8809      	ldrh	r1, [r1, #0]
    42d2:	8812      	ldrh	r2, [r2, #0]
    42d4:	1a8a      	subs	r2, r1, r2
    42d6:	801a      	strh	r2, [r3, #0]
			off += u16MaxTrxSz;
    42d8:	1c3b      	adds	r3, r7, #0
    42da:	3316      	adds	r3, #22
    42dc:	1c39      	adds	r1, r7, #0
    42de:	3116      	adds	r1, #22
    42e0:	1c3a      	adds	r2, r7, #0
    42e2:	3212      	adds	r2, #18
    42e4:	8809      	ldrh	r1, [r1, #0]
    42e6:	8812      	ldrh	r2, [r2, #0]
    42e8:	188a      	adds	r2, r1, r2
    42ea:	801a      	strh	r2, [r3, #0]
			u32Addr += u16MaxTrxSz;
    42ec:	1c3b      	adds	r3, r7, #0
    42ee:	3312      	adds	r3, #18
    42f0:	881b      	ldrh	r3, [r3, #0]
    42f2:	68fa      	ldr	r2, [r7, #12]
    42f4:	18d3      	adds	r3, r2, r3
    42f6:	60fb      	str	r3, [r7, #12]
		}
	}
    42f8:	e7af      	b.n	425a <nm_write_block+0x2a>

	return s8Ret;
    42fa:	1c3b      	adds	r3, r7, #0
    42fc:	3315      	adds	r3, #21
    42fe:	781b      	ldrb	r3, [r3, #0]
    4300:	b25b      	sxtb	r3, r3
}
    4302:	1c18      	adds	r0, r3, #0
    4304:	46bd      	mov	sp, r7
    4306:	b006      	add	sp, #24
    4308:	bd80      	pop	{r7, pc}
    430a:	46c0      	nop			; (mov r8, r8)
    430c:	20000008 	.word	0x20000008
    4310:	00004201 	.word	0x00004201

00004314 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    4314:	b590      	push	{r4, r7, lr}
    4316:	b085      	sub	sp, #20
    4318:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    431a:	1c3b      	adds	r3, r7, #0
    431c:	330f      	adds	r3, #15
    431e:	2200      	movs	r2, #0
    4320:	701a      	strb	r2, [r3, #0]
	uint32 reg, clk_status_reg,trials = 0;
    4322:	2300      	movs	r3, #0
    4324:	60bb      	str	r3, [r7, #8]
	ret = nm_read_reg_with_ret(0x1, &reg);
    4326:	1c3c      	adds	r4, r7, #0
    4328:	340f      	adds	r4, #15
    432a:	1d3b      	adds	r3, r7, #4
    432c:	2001      	movs	r0, #1
    432e:	1c19      	adds	r1, r3, #0
    4330:	4b38      	ldr	r3, [pc, #224]	; (4414 <nm_clkless_wake+0x100>)
    4332:	4798      	blx	r3
    4334:	1c03      	adds	r3, r0, #0
    4336:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) {
    4338:	1c3b      	adds	r3, r7, #0
    433a:	330f      	adds	r3, #15
    433c:	781b      	ldrb	r3, [r3, #0]
    433e:	b25b      	sxtb	r3, r3
    4340:	2b00      	cmp	r3, #0
    4342:	d000      	beq.n	4346 <nm_clkless_wake+0x32>
		M2M_ERR("Bus error (1). Wake up failed\n");
		goto _WAKE_EXIT;
    4344:	e05e      	b.n	4404 <nm_clkless_wake+0xf0>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    4346:	687b      	ldr	r3, [r7, #4]
    4348:	2202      	movs	r2, #2
    434a:	4313      	orrs	r3, r2
    434c:	2001      	movs	r0, #1
    434e:	1c19      	adds	r1, r3, #0
    4350:	4b31      	ldr	r3, [pc, #196]	; (4418 <nm_clkless_wake+0x104>)
    4352:	4798      	blx	r3

		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    4354:	4b31      	ldr	r3, [pc, #196]	; (441c <nm_clkless_wake+0x108>)
    4356:	681a      	ldr	r2, [r3, #0]
    4358:	1c3c      	adds	r4, r7, #0
    435a:	340f      	adds	r4, #15
    435c:	1c3b      	adds	r3, r7, #0
    435e:	1c10      	adds	r0, r2, #0
    4360:	1c19      	adds	r1, r3, #0
    4362:	4b2c      	ldr	r3, [pc, #176]	; (4414 <nm_clkless_wake+0x100>)
    4364:	4798      	blx	r3
    4366:	1c03      	adds	r3, r0, #0
    4368:	7023      	strb	r3, [r4, #0]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    436a:	1c3b      	adds	r3, r7, #0
    436c:	330f      	adds	r3, #15
    436e:	781b      	ldrb	r3, [r3, #0]
    4370:	b25b      	sxtb	r3, r3
    4372:	2b00      	cmp	r3, #0
    4374:	d108      	bne.n	4388 <nm_clkless_wake+0x74>
    4376:	1c3b      	adds	r3, r7, #0
    4378:	330f      	adds	r3, #15
    437a:	781b      	ldrb	r3, [r3, #0]
    437c:	b25b      	sxtb	r3, r3
    437e:	2b00      	cmp	r3, #0
    4380:	d117      	bne.n	43b2 <nm_clkless_wake+0x9e>
    4382:	683b      	ldr	r3, [r7, #0]
    4384:	2b00      	cmp	r3, #0
    4386:	d114      	bne.n	43b2 <nm_clkless_wake+0x9e>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    4388:	4b24      	ldr	r3, [pc, #144]	; (441c <nm_clkless_wake+0x108>)
    438a:	220e      	movs	r2, #14
    438c:	601a      	str	r2, [r3, #0]
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    438e:	4b23      	ldr	r3, [pc, #140]	; (441c <nm_clkless_wake+0x108>)
    4390:	681a      	ldr	r2, [r3, #0]
    4392:	1c3c      	adds	r4, r7, #0
    4394:	340f      	adds	r4, #15
    4396:	1c3b      	adds	r3, r7, #0
    4398:	1c10      	adds	r0, r2, #0
    439a:	1c19      	adds	r1, r3, #0
    439c:	4b1d      	ldr	r3, [pc, #116]	; (4414 <nm_clkless_wake+0x100>)
    439e:	4798      	blx	r3
    43a0:	1c03      	adds	r3, r0, #0
    43a2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) {
    43a4:	1c3b      	adds	r3, r7, #0
    43a6:	330f      	adds	r3, #15
    43a8:	781b      	ldrb	r3, [r3, #0]
    43aa:	b25b      	sxtb	r3, r3
    43ac:	2b00      	cmp	r3, #0
    43ae:	d000      	beq.n	43b2 <nm_clkless_wake+0x9e>
				M2M_ERR("Bus error (2). Wake up failed\n");
				goto _WAKE_EXIT;
    43b0:	e028      	b.n	4404 <nm_clkless_wake+0xf0>
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    43b2:	e009      	b.n	43c8 <nm_clkless_wake+0xb4>
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(1);
    43b4:	2001      	movs	r0, #1
    43b6:	4b1a      	ldr	r3, [pc, #104]	; (4420 <nm_clkless_wake+0x10c>)
    43b8:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    43ba:	4b18      	ldr	r3, [pc, #96]	; (441c <nm_clkless_wake+0x108>)
    43bc:	681a      	ldr	r2, [r3, #0]
    43be:	1c3b      	adds	r3, r7, #0
    43c0:	1c10      	adds	r0, r2, #0
    43c2:	1c19      	adds	r1, r3, #0
    43c4:	4b13      	ldr	r3, [pc, #76]	; (4414 <nm_clkless_wake+0x100>)
    43c6:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    43c8:	683a      	ldr	r2, [r7, #0]
    43ca:	2304      	movs	r3, #4
    43cc:	4013      	ands	r3, r2
    43ce:	d10a      	bne.n	43e6 <nm_clkless_wake+0xd2>
    43d0:	68bb      	ldr	r3, [r7, #8]
    43d2:	3301      	adds	r3, #1
    43d4:	60bb      	str	r3, [r7, #8]
    43d6:	68ba      	ldr	r2, [r7, #8]
    43d8:	4b12      	ldr	r3, [pc, #72]	; (4424 <nm_clkless_wake+0x110>)
    43da:	1c10      	adds	r0, r2, #0
    43dc:	2103      	movs	r1, #3
    43de:	4798      	blx	r3
    43e0:	1c0b      	adds	r3, r1, #0
    43e2:	2b00      	cmp	r3, #0
    43e4:	d0e6      	beq.n	43b4 <nm_clkless_wake+0xa0>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
    43e6:	683a      	ldr	r2, [r7, #0]
    43e8:	2304      	movs	r3, #4
    43ea:	4013      	ands	r3, r2
    43ec:	d106      	bne.n	43fc <nm_clkless_wake+0xe8>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    43ee:	687b      	ldr	r3, [r7, #4]
    43f0:	2202      	movs	r2, #2
    43f2:	4313      	orrs	r3, r2
    43f4:	2001      	movs	r0, #1
    43f6:	1c19      	adds	r1, r3, #0
    43f8:	4b07      	ldr	r3, [pc, #28]	; (4418 <nm_clkless_wake+0x104>)
    43fa:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    43fc:	683a      	ldr	r2, [r7, #0]
    43fe:	2304      	movs	r3, #4
    4400:	4013      	ands	r3, r2
    4402:	d0a0      	beq.n	4346 <nm_clkless_wake+0x32>

_WAKE_EXIT:
	return ret;
    4404:	1c3b      	adds	r3, r7, #0
    4406:	330f      	adds	r3, #15
    4408:	781b      	ldrb	r3, [r3, #0]
    440a:	b25b      	sxtb	r3, r3
}
    440c:	1c18      	adds	r0, r3, #0
    440e:	46bd      	mov	sp, r7
    4410:	b005      	add	sp, #20
    4412:	bd90      	pop	{r4, r7, pc}
    4414:	000040a5 	.word	0x000040a5
    4418:	000040c9 	.word	0x000040c9
    441c:	2000000c 	.word	0x2000000c
    4420:	00002471 	.word	0x00002471
    4424:	000097f5 	.word	0x000097f5

00004428 <chip_wake>:

static sint8 nm_get_firmware_info(tstrM2mRev* M2mRev);


static sint8 chip_wake(void)
{
    4428:	b590      	push	{r4, r7, lr}
    442a:	b083      	sub	sp, #12
    442c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    442e:	1dfb      	adds	r3, r7, #7
    4430:	2200      	movs	r2, #0
    4432:	701a      	strb	r2, [r3, #0]

	ret  = nm_clkless_wake();
    4434:	1dfc      	adds	r4, r7, #7
    4436:	4b0a      	ldr	r3, [pc, #40]	; (4460 <chip_wake+0x38>)
    4438:	4798      	blx	r3
    443a:	1c03      	adds	r3, r0, #0
    443c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) return ret;
    443e:	1dfb      	adds	r3, r7, #7
    4440:	781b      	ldrb	r3, [r3, #0]
    4442:	b25b      	sxtb	r3, r3
    4444:	2b00      	cmp	r3, #0
    4446:	d002      	beq.n	444e <chip_wake+0x26>
    4448:	1dfb      	adds	r3, r7, #7
    444a:	781b      	ldrb	r3, [r3, #0]
    444c:	e003      	b.n	4456 <chip_wake+0x2e>
	
	enable_rf_blocks();
    444e:	4b05      	ldr	r3, [pc, #20]	; (4464 <chip_wake+0x3c>)
    4450:	4798      	blx	r3

	return ret;
    4452:	1dfb      	adds	r3, r7, #7
    4454:	781b      	ldrb	r3, [r3, #0]
    4456:	b25b      	sxtb	r3, r3
}
    4458:	1c18      	adds	r0, r3, #0
    445a:	46bd      	mov	sp, r7
    445c:	b003      	add	sp, #12
    445e:	bd90      	pop	{r4, r7, pc}
    4460:	00004315 	.word	0x00004315
    4464:	000039f5 	.word	0x000039f5

00004468 <chip_apply_conf>:

static void chip_apply_conf(void)
{
    4468:	b590      	push	{r4, r7, lr}
    446a:	b085      	sub	sp, #20
    446c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    446e:	1c3b      	adds	r3, r7, #0
    4470:	330f      	adds	r3, #15
    4472:	2200      	movs	r2, #0
    4474:	701a      	strb	r2, [r3, #0]
	
	uint32 val32;
	val32 = 0;
    4476:	2300      	movs	r3, #0
    4478:	60bb      	str	r3, [r7, #8]
#endif
#ifdef __ENABLE_LEGACY_RF_SETTINGS__
	val32 |= rHAVE_LEGACY_RF_SETTINGS;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    447a:	23a5      	movs	r3, #165	; 0xa5
    447c:	015a      	lsls	r2, r3, #5
    447e:	68bb      	ldr	r3, [r7, #8]
    4480:	1c10      	adds	r0, r2, #0
    4482:	1c19      	adds	r1, r3, #0
    4484:	4b10      	ldr	r3, [pc, #64]	; (44c8 <chip_apply_conf+0x60>)
    4486:	4798      	blx	r3
		if(val32 != 0) {		
    4488:	68bb      	ldr	r3, [r7, #8]
    448a:	2b00      	cmp	r3, #0
    448c:	d017      	beq.n	44be <chip_apply_conf+0x56>
			uint32 reg = 0;
    448e:	2300      	movs	r3, #0
    4490:	607b      	str	r3, [r7, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    4492:	1c3c      	adds	r4, r7, #0
    4494:	340f      	adds	r4, #15
    4496:	23a5      	movs	r3, #165	; 0xa5
    4498:	015a      	lsls	r2, r3, #5
    449a:	1d3b      	adds	r3, r7, #4
    449c:	1c10      	adds	r0, r2, #0
    449e:	1c19      	adds	r1, r3, #0
    44a0:	4b0a      	ldr	r3, [pc, #40]	; (44cc <chip_apply_conf+0x64>)
    44a2:	4798      	blx	r3
    44a4:	1c03      	adds	r3, r0, #0
    44a6:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    44a8:	1c3b      	adds	r3, r7, #0
    44aa:	330f      	adds	r3, #15
    44ac:	781b      	ldrb	r3, [r3, #0]
    44ae:	b25b      	sxtb	r3, r3
    44b0:	2b00      	cmp	r3, #0
    44b2:	d103      	bne.n	44bc <chip_apply_conf+0x54>
				if(reg == val32)
    44b4:	687a      	ldr	r2, [r7, #4]
    44b6:	68bb      	ldr	r3, [r7, #8]
    44b8:	429a      	cmp	r2, r3
    44ba:	d001      	beq.n	44c0 <chip_apply_conf+0x58>
					break;
			}
		} else {
			break;
		}
	} while(1);
    44bc:	e7dd      	b.n	447a <chip_apply_conf+0x12>
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
			}
		} else {
			break;
    44be:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);
}
    44c0:	46bd      	mov	sp, r7
    44c2:	b005      	add	sp, #20
    44c4:	bd90      	pop	{r4, r7, pc}
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	000040c9 	.word	0x000040c9
    44cc:	000040a5 	.word	0x000040a5

000044d0 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    44d0:	b590      	push	{r4, r7, lr}
    44d2:	b089      	sub	sp, #36	; 0x24
    44d4:	af00      	add	r7, sp, #0
    44d6:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    44d8:	1c3b      	adds	r3, r7, #0
    44da:	331f      	adds	r3, #31
    44dc:	2200      	movs	r2, #0
    44de:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    44e0:	2300      	movs	r3, #0
    44e2:	61bb      	str	r3, [r7, #24]
    44e4:	2300      	movs	r3, #0
    44e6:	617b      	str	r3, [r7, #20]
	
	ret = nm_bus_iface_init();
    44e8:	1c3c      	adds	r4, r7, #0
    44ea:	341f      	adds	r4, #31
    44ec:	4b3c      	ldr	r3, [pc, #240]	; (45e0 <nm_drv_init+0x110>)
    44ee:	4798      	blx	r3
    44f0:	1c03      	adds	r3, r0, #0
    44f2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    44f4:	1c3b      	adds	r3, r7, #0
    44f6:	331f      	adds	r3, #31
    44f8:	781b      	ldrb	r3, [r3, #0]
    44fa:	b25b      	sxtb	r3, r3
    44fc:	2b00      	cmp	r3, #0
    44fe:	d000      	beq.n	4502 <nm_drv_init+0x32>
		M2M_ERR("[nmi start]: fail init bus\n");
		goto ERR1;
    4500:	e066      	b.n	45d0 <nm_drv_init+0x100>
	}
	
	ret = chip_wake();
    4502:	1c3c      	adds	r4, r7, #0
    4504:	341f      	adds	r4, #31
    4506:	4b37      	ldr	r3, [pc, #220]	; (45e4 <nm_drv_init+0x114>)
    4508:	4798      	blx	r3
    450a:	1c03      	adds	r3, r0, #0
    450c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    450e:	1c3b      	adds	r3, r7, #0
    4510:	331f      	adds	r3, #31
    4512:	781b      	ldrb	r3, [r3, #0]
    4514:	b25b      	sxtb	r3, r3
    4516:	2b00      	cmp	r3, #0
    4518:	d000      	beq.n	451c <nm_drv_init+0x4c>
		M2M_ERR("[nmi start]: fail chip_wakeup\n");
		goto ERR2;
    451a:	e057      	b.n	45cc <nm_drv_init+0xfc>
	}
	/**
	Go...
	**/
	ret = chip_reset();
    451c:	1c3c      	adds	r4, r7, #0
    451e:	341f      	adds	r4, #31
    4520:	4b31      	ldr	r3, [pc, #196]	; (45e8 <nm_drv_init+0x118>)
    4522:	4798      	blx	r3
    4524:	1c03      	adds	r3, r0, #0
    4526:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4528:	1c3b      	adds	r3, r7, #0
    452a:	331f      	adds	r3, #31
    452c:	781b      	ldrb	r3, [r3, #0]
    452e:	b25b      	sxtb	r3, r3
    4530:	2b00      	cmp	r3, #0
    4532:	d000      	beq.n	4536 <nm_drv_init+0x66>
		goto ERR2;
    4534:	e04a      	b.n	45cc <nm_drv_init+0xfc>
	}

#ifdef USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    4536:	4b2d      	ldr	r3, [pc, #180]	; (45ec <nm_drv_init+0x11c>)
    4538:	4798      	blx	r3
#endif
	/*return power save to default value*/
	chip_idle();
    453a:	4b2d      	ldr	r3, [pc, #180]	; (45f0 <nm_drv_init+0x120>)
    453c:	4798      	blx	r3
	M2M_INFO("Chip ID %x\n", nmi_get_chipid());

	ret = cpu_start();
    453e:	1c3c      	adds	r4, r7, #0
    4540:	341f      	adds	r4, #31
    4542:	4b2c      	ldr	r3, [pc, #176]	; (45f4 <nm_drv_init+0x124>)
    4544:	4798      	blx	r3
    4546:	1c03      	adds	r3, r0, #0
    4548:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    454a:	1c3b      	adds	r3, r7, #0
    454c:	331f      	adds	r3, #31
    454e:	781b      	ldrb	r3, [r3, #0]
    4550:	b25b      	sxtb	r3, r3
    4552:	2b00      	cmp	r3, #0
    4554:	d000      	beq.n	4558 <nm_drv_init+0x88>
		goto ERR2;
    4556:	e039      	b.n	45cc <nm_drv_init+0xfc>
	}
	ret = wait_for_bootrom();
    4558:	1c3c      	adds	r4, r7, #0
    455a:	341f      	adds	r4, #31
    455c:	4b26      	ldr	r3, [pc, #152]	; (45f8 <nm_drv_init+0x128>)
    455e:	4798      	blx	r3
    4560:	1c03      	adds	r3, r0, #0
    4562:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4564:	1c3b      	adds	r3, r7, #0
    4566:	331f      	adds	r3, #31
    4568:	781b      	ldrb	r3, [r3, #0]
    456a:	b25b      	sxtb	r3, r3
    456c:	2b00      	cmp	r3, #0
    456e:	d000      	beq.n	4572 <nm_drv_init+0xa2>
		goto ERR2;
    4570:	e02c      	b.n	45cc <nm_drv_init+0xfc>
	}
	ret = wait_for_firmware_start();
    4572:	1c3c      	adds	r4, r7, #0
    4574:	341f      	adds	r4, #31
    4576:	4b21      	ldr	r3, [pc, #132]	; (45fc <nm_drv_init+0x12c>)
    4578:	4798      	blx	r3
    457a:	1c03      	adds	r3, r0, #0
    457c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    457e:	1c3b      	adds	r3, r7, #0
    4580:	331f      	adds	r3, #31
    4582:	781b      	ldrb	r3, [r3, #0]
    4584:	b25b      	sxtb	r3, r3
    4586:	2b00      	cmp	r3, #0
    4588:	d000      	beq.n	458c <nm_drv_init+0xbc>
		goto ERR2;
    458a:	e01f      	b.n	45cc <nm_drv_init+0xfc>
	}
	ret = enable_interrupts();
    458c:	1c3c      	adds	r4, r7, #0
    458e:	341f      	adds	r4, #31
    4590:	4b1b      	ldr	r3, [pc, #108]	; (4600 <nm_drv_init+0x130>)
    4592:	4798      	blx	r3
    4594:	1c03      	adds	r3, r0, #0
    4596:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4598:	1c3b      	adds	r3, r7, #0
    459a:	331f      	adds	r3, #31
    459c:	781b      	ldrb	r3, [r3, #0]
    459e:	b25b      	sxtb	r3, r3
    45a0:	2b00      	cmp	r3, #0
    45a2:	d000      	beq.n	45a6 <nm_drv_init+0xd6>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
    45a4:	e012      	b.n	45cc <nm_drv_init+0xfc>
	}
	
	chip_apply_conf();
    45a6:	4b17      	ldr	r3, [pc, #92]	; (4604 <nm_drv_init+0x134>)
    45a8:	4798      	blx	r3
	
	if(M2M_ERR_FW_VER_MISMATCH == nm_get_firmware_info(&strtmp))
    45aa:	1c3b      	adds	r3, r7, #0
    45ac:	330c      	adds	r3, #12
    45ae:	1c18      	adds	r0, r3, #0
    45b0:	4b15      	ldr	r3, [pc, #84]	; (4608 <nm_drv_init+0x138>)
    45b2:	4798      	blx	r3
    45b4:	1c03      	adds	r3, r0, #0
    45b6:	1c1a      	adds	r2, r3, #0
    45b8:	320d      	adds	r2, #13
    45ba:	d103      	bne.n	45c4 <nm_drv_init+0xf4>
	{
		ret = M2M_ERR_FW_VER_MISMATCH;
    45bc:	1c3b      	adds	r3, r7, #0
    45be:	331f      	adds	r3, #31
    45c0:	22f3      	movs	r2, #243	; 0xf3
    45c2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("Mismatch Firmawre Version\n");
		M2M_INFO("Firmware_info: REV_MAJOR = %d, REV_MINOR= %d\n",strtmp.u16Major, strtmp.u16Minor);
		M2M_INFO("Host_info:     REV_MAJOR = %d, REV_MINOR= %d\n",M2M_FIRMWARE_VERSION_MAJOR_NO,M2M_FIRMWARE_VERSION_MINOR_NO);
	}
	return ret;
    45c4:	1c3b      	adds	r3, r7, #0
    45c6:	331f      	adds	r3, #31
    45c8:	781b      	ldrb	r3, [r3, #0]
    45ca:	e004      	b.n	45d6 <nm_drv_init+0x106>
ERR2:
	nm_bus_iface_deinit();
    45cc:	4b0f      	ldr	r3, [pc, #60]	; (460c <nm_drv_init+0x13c>)
    45ce:	4798      	blx	r3
ERR1:	
	return ret;
    45d0:	1c3b      	adds	r3, r7, #0
    45d2:	331f      	adds	r3, #31
    45d4:	781b      	ldrb	r3, [r3, #0]
    45d6:	b25b      	sxtb	r3, r3
}
    45d8:	1c18      	adds	r0, r3, #0
    45da:	46bd      	mov	sp, r7
    45dc:	b009      	add	sp, #36	; 0x24
    45de:	bd90      	pop	{r4, r7, pc}
    45e0:	00004039 	.word	0x00004039
    45e4:	00004429 	.word	0x00004429
    45e8:	00003dd9 	.word	0x00003dd9
    45ec:	00005299 	.word	0x00005299
    45f0:	000039b9 	.word	0x000039b9
    45f4:	00003b05 	.word	0x00003b05
    45f8:	00003e2d 	.word	0x00003e2d
    45fc:	00003ef5 	.word	0x00003ef5
    4600:	00003a4d 	.word	0x00003a4d
    4604:	00004469 	.word	0x00004469
    4608:	00004665 	.word	0x00004665
    460c:	00004061 	.word	0x00004061

00004610 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg) 
{
    4610:	b590      	push	{r4, r7, lr}
    4612:	b085      	sub	sp, #20
    4614:	af00      	add	r7, sp, #0
    4616:	6078      	str	r0, [r7, #4]
	sint8 ret;
	
	ret = chip_deinit();
    4618:	1c3c      	adds	r4, r7, #0
    461a:	340f      	adds	r4, #15
    461c:	4b0f      	ldr	r3, [pc, #60]	; (465c <nm_drv_deinit+0x4c>)
    461e:	4798      	blx	r3
    4620:	1c03      	adds	r3, r0, #0
    4622:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4624:	1c3b      	adds	r3, r7, #0
    4626:	330f      	adds	r3, #15
    4628:	781b      	ldrb	r3, [r3, #0]
    462a:	b25b      	sxtb	r3, r3
    462c:	2b00      	cmp	r3, #0
    462e:	d000      	beq.n	4632 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
    4630:	e00c      	b.n	464c <nm_drv_deinit+0x3c>
	}

	ret = nm_bus_iface_deinit();
    4632:	1c3c      	adds	r4, r7, #0
    4634:	340f      	adds	r4, #15
    4636:	4b0a      	ldr	r3, [pc, #40]	; (4660 <nm_drv_deinit+0x50>)
    4638:	4798      	blx	r3
    463a:	1c03      	adds	r3, r0, #0
    463c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    463e:	1c3b      	adds	r3, r7, #0
    4640:	330f      	adds	r3, #15
    4642:	781b      	ldrb	r3, [r3, #0]
    4644:	b25b      	sxtb	r3, r3
    4646:	2b00      	cmp	r3, #0
    4648:	d000      	beq.n	464c <nm_drv_deinit+0x3c>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
    464a:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    464c:	1c3b      	adds	r3, r7, #0
    464e:	330f      	adds	r3, #15
    4650:	781b      	ldrb	r3, [r3, #0]
    4652:	b25b      	sxtb	r3, r3
}
    4654:	1c18      	adds	r0, r3, #0
    4656:	46bd      	mov	sp, r7
    4658:	b005      	add	sp, #20
    465a:	bd90      	pop	{r4, r7, pc}
    465c:	00003f71 	.word	0x00003f71
    4660:	00004061 	.word	0x00004061

00004664 <nm_get_firmware_info>:
*   @author		Ahmad.Mohammad.Yahya
*   @date		27 MARCH 2013
*	@version	1.0
*/
static sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
    4664:	b590      	push	{r4, r7, lr}
    4666:	b085      	sub	sp, #20
    4668:	af00      	add	r7, sp, #0
    466a:	6078      	str	r0, [r7, #4]
	uint32	reg = 0;
    466c:	2300      	movs	r3, #0
    466e:	60bb      	str	r3, [r7, #8]
	sint8	ret = M2M_SUCCESS;
    4670:	1c3b      	adds	r3, r7, #0
    4672:	330f      	adds	r3, #15
    4674:	2200      	movs	r2, #0
    4676:	701a      	strb	r2, [r3, #0]

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    4678:	1c3c      	adds	r4, r7, #0
    467a:	340f      	adds	r4, #15
    467c:	4a15      	ldr	r2, [pc, #84]	; (46d4 <nm_get_firmware_info+0x70>)
    467e:	1c3b      	adds	r3, r7, #0
    4680:	3308      	adds	r3, #8
    4682:	1c10      	adds	r0, r2, #0
    4684:	1c19      	adds	r1, r3, #0
    4686:	4b14      	ldr	r3, [pc, #80]	; (46d8 <nm_get_firmware_info+0x74>)
    4688:	4798      	blx	r3
    468a:	1c03      	adds	r3, r0, #0
    468c:	7023      	strb	r3, [r4, #0]

	M2mRev->u16Major	= (uint16)(reg >> 16);
    468e:	68bb      	ldr	r3, [r7, #8]
    4690:	0c1b      	lsrs	r3, r3, #16
    4692:	b29a      	uxth	r2, r3
    4694:	687b      	ldr	r3, [r7, #4]
    4696:	801a      	strh	r2, [r3, #0]
	M2mRev->u16Minor	= (uint16)(reg);
    4698:	68bb      	ldr	r3, [r7, #8]
    469a:	b29a      	uxth	r2, r3
    469c:	687b      	ldr	r3, [r7, #4]
    469e:	805a      	strh	r2, [r3, #2]
	M2mRev->u32Chipid	= nmi_get_chipid();
    46a0:	4b0e      	ldr	r3, [pc, #56]	; (46dc <nm_get_firmware_info+0x78>)
    46a2:	4798      	blx	r3
    46a4:	1c02      	adds	r2, r0, #0
    46a6:	687b      	ldr	r3, [r7, #4]
    46a8:	605a      	str	r2, [r3, #4]
	if((M2mRev->u16Major != M2M_FIRMWARE_VERSION_MAJOR_NO) && (M2mRev->u16Minor != M2M_FIRMWARE_VERSION_MINOR_NO))
    46aa:	687b      	ldr	r3, [r7, #4]
    46ac:	881b      	ldrh	r3, [r3, #0]
    46ae:	2b10      	cmp	r3, #16
    46b0:	d007      	beq.n	46c2 <nm_get_firmware_info+0x5e>
    46b2:	687b      	ldr	r3, [r7, #4]
    46b4:	885b      	ldrh	r3, [r3, #2]
    46b6:	2b00      	cmp	r3, #0
    46b8:	d003      	beq.n	46c2 <nm_get_firmware_info+0x5e>
	{
		ret = M2M_ERR_FW_VER_MISMATCH;
    46ba:	1c3b      	adds	r3, r7, #0
    46bc:	330f      	adds	r3, #15
    46be:	22f3      	movs	r2, #243	; 0xf3
    46c0:	701a      	strb	r2, [r3, #0]
	}
	return ret;
    46c2:	1c3b      	adds	r3, r7, #0
    46c4:	330f      	adds	r3, #15
    46c6:	781b      	ldrb	r3, [r3, #0]
    46c8:	b25b      	sxtb	r3, r3
}
    46ca:	1c18      	adds	r0, r3, #0
    46cc:	46bd      	mov	sp, r7
    46ce:	b005      	add	sp, #20
    46d0:	bd90      	pop	{r4, r7, pc}
    46d2:	46c0      	nop			; (mov r8, r8)
    46d4:	000207ac 	.word	0x000207ac
    46d8:	000040a5 	.word	0x000040a5
    46dc:	00003c25 	.word	0x00003c25

000046e0 <nmi_spi_read>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 nmi_spi_read(uint8* b, uint16 sz)                                 
{
    46e0:	b580      	push	{r7, lr}
    46e2:	b086      	sub	sp, #24
    46e4:	af00      	add	r7, sp, #0
    46e6:	6078      	str	r0, [r7, #4]
    46e8:	1c0a      	adds	r2, r1, #0
    46ea:	1cbb      	adds	r3, r7, #2
    46ec:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    46ee:	1c3b      	adds	r3, r7, #0
    46f0:	330c      	adds	r3, #12
    46f2:	2200      	movs	r2, #0
    46f4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    46f6:	1c3b      	adds	r3, r7, #0
    46f8:	330c      	adds	r3, #12
    46fa:	687a      	ldr	r2, [r7, #4]
    46fc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    46fe:	1c3b      	adds	r3, r7, #0
    4700:	330c      	adds	r3, #12
    4702:	1cba      	adds	r2, r7, #2
    4704:	8812      	ldrh	r2, [r2, #0]
    4706:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    4708:	1c3b      	adds	r3, r7, #0
    470a:	330c      	adds	r3, #12
    470c:	2003      	movs	r0, #3
    470e:	1c19      	adds	r1, r3, #0
    4710:	4b03      	ldr	r3, [pc, #12]	; (4720 <nmi_spi_read+0x40>)
    4712:	4798      	blx	r3
    4714:	1c03      	adds	r3, r0, #0
}
    4716:	1c18      	adds	r0, r3, #0
    4718:	46bd      	mov	sp, r7
    471a:	b006      	add	sp, #24
    471c:	bd80      	pop	{r7, pc}
    471e:	46c0      	nop			; (mov r8, r8)
    4720:	00002b11 	.word	0x00002b11

00004724 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    4724:	b580      	push	{r7, lr}
    4726:	b086      	sub	sp, #24
    4728:	af00      	add	r7, sp, #0
    472a:	6078      	str	r0, [r7, #4]
    472c:	1c0a      	adds	r2, r1, #0
    472e:	1cbb      	adds	r3, r7, #2
    4730:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    4732:	1c3b      	adds	r3, r7, #0
    4734:	330c      	adds	r3, #12
    4736:	687a      	ldr	r2, [r7, #4]
    4738:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    473a:	1c3b      	adds	r3, r7, #0
    473c:	330c      	adds	r3, #12
    473e:	2200      	movs	r2, #0
    4740:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    4742:	1c3b      	adds	r3, r7, #0
    4744:	330c      	adds	r3, #12
    4746:	1cba      	adds	r2, r7, #2
    4748:	8812      	ldrh	r2, [r2, #0]
    474a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    474c:	1c3b      	adds	r3, r7, #0
    474e:	330c      	adds	r3, #12
    4750:	2003      	movs	r0, #3
    4752:	1c19      	adds	r1, r3, #0
    4754:	4b03      	ldr	r3, [pc, #12]	; (4764 <nmi_spi_write+0x40>)
    4756:	4798      	blx	r3
    4758:	1c03      	adds	r3, r0, #0
}
    475a:	1c18      	adds	r0, r3, #0
    475c:	46bd      	mov	sp, r7
    475e:	b006      	add	sp, #24
    4760:	bd80      	pop	{r7, pc}
    4762:	46c0      	nop			; (mov r8, r8)
    4764:	00002b11 	.word	0x00002b11

00004768 <crc7>:

static sint8 nm_spi_read(uint32, uint8 *, uint16);
static sint8 nm_spi_write(uint32, uint8 *, uint16);

static uint8 crc7(uint8 crc, const uint8 *b, int len)
{
    4768:	b580      	push	{r7, lr}
    476a:	b086      	sub	sp, #24
    476c:	af00      	add	r7, sp, #0
    476e:	60b9      	str	r1, [r7, #8]
    4770:	607a      	str	r2, [r7, #4]
    4772:	1c3b      	adds	r3, r7, #0
    4774:	330f      	adds	r3, #15
    4776:	1c02      	adds	r2, r0, #0
    4778:	701a      	strb	r2, [r3, #0]
	uint16 i, g;

	uint8 mask = 0x9;
    477a:	1c3b      	adds	r3, r7, #0
    477c:	3312      	adds	r3, #18
    477e:	2209      	movs	r2, #9
    4780:	701a      	strb	r2, [r3, #0]

	/* initialize register */
	uint8 reg = crc, inv;
    4782:	1c3b      	adds	r3, r7, #0
    4784:	3313      	adds	r3, #19
    4786:	1c3a      	adds	r2, r7, #0
    4788:	320f      	adds	r2, #15
    478a:	7812      	ldrb	r2, [r2, #0]
    478c:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < len; i++)
    478e:	1c3b      	adds	r3, r7, #0
    4790:	3316      	adds	r3, #22
    4792:	2200      	movs	r2, #0
    4794:	801a      	strh	r2, [r3, #0]
    4796:	e04c      	b.n	4832 <crc7+0xca>
	{
		for(g = 0; g < 8; g++)
    4798:	1c3b      	adds	r3, r7, #0
    479a:	3314      	adds	r3, #20
    479c:	2200      	movs	r2, #0
    479e:	801a      	strh	r2, [r3, #0]
    47a0:	e03b      	b.n	481a <crc7+0xb2>
		{
			inv = (((b[i] << g) & 0x80) >> 7) ^ ((reg >> 6) & 1);
    47a2:	1c3b      	adds	r3, r7, #0
    47a4:	3316      	adds	r3, #22
    47a6:	881b      	ldrh	r3, [r3, #0]
    47a8:	68ba      	ldr	r2, [r7, #8]
    47aa:	18d3      	adds	r3, r2, r3
    47ac:	781b      	ldrb	r3, [r3, #0]
    47ae:	1c1a      	adds	r2, r3, #0
    47b0:	1c3b      	adds	r3, r7, #0
    47b2:	3314      	adds	r3, #20
    47b4:	881b      	ldrh	r3, [r3, #0]
    47b6:	409a      	lsls	r2, r3
    47b8:	2380      	movs	r3, #128	; 0x80
    47ba:	4013      	ands	r3, r2
    47bc:	11db      	asrs	r3, r3, #7
    47be:	b2da      	uxtb	r2, r3
    47c0:	1c3b      	adds	r3, r7, #0
    47c2:	3313      	adds	r3, #19
    47c4:	781b      	ldrb	r3, [r3, #0]
    47c6:	099b      	lsrs	r3, r3, #6
    47c8:	b2db      	uxtb	r3, r3
    47ca:	b2db      	uxtb	r3, r3
    47cc:	1c19      	adds	r1, r3, #0
    47ce:	2301      	movs	r3, #1
    47d0:	400b      	ands	r3, r1
    47d2:	b2db      	uxtb	r3, r3
    47d4:	4053      	eors	r3, r2
    47d6:	b2da      	uxtb	r2, r3
    47d8:	1c3b      	adds	r3, r7, #0
    47da:	3311      	adds	r3, #17
    47dc:	701a      	strb	r2, [r3, #0]
			reg = ((reg << 1) & 0x7f) ^ (mask * inv);
    47de:	1c3b      	adds	r3, r7, #0
    47e0:	3313      	adds	r3, #19
    47e2:	781b      	ldrb	r3, [r3, #0]
    47e4:	005b      	lsls	r3, r3, #1
    47e6:	b2db      	uxtb	r3, r3
    47e8:	1c1a      	adds	r2, r3, #0
    47ea:	237f      	movs	r3, #127	; 0x7f
    47ec:	4013      	ands	r3, r2
    47ee:	b2da      	uxtb	r2, r3
    47f0:	1c3b      	adds	r3, r7, #0
    47f2:	3312      	adds	r3, #18
    47f4:	1c39      	adds	r1, r7, #0
    47f6:	3111      	adds	r1, #17
    47f8:	781b      	ldrb	r3, [r3, #0]
    47fa:	7809      	ldrb	r1, [r1, #0]
    47fc:	434b      	muls	r3, r1
    47fe:	b2db      	uxtb	r3, r3
    4800:	b2db      	uxtb	r3, r3
    4802:	4053      	eors	r3, r2
    4804:	b2da      	uxtb	r2, r3
    4806:	1c3b      	adds	r3, r7, #0
    4808:	3313      	adds	r3, #19
    480a:	701a      	strb	r2, [r3, #0]
	/* initialize register */
	uint8 reg = crc, inv;

	for(i = 0; i < len; i++)
	{
		for(g = 0; g < 8; g++)
    480c:	1c3b      	adds	r3, r7, #0
    480e:	3314      	adds	r3, #20
    4810:	881a      	ldrh	r2, [r3, #0]
    4812:	1c3b      	adds	r3, r7, #0
    4814:	3314      	adds	r3, #20
    4816:	3201      	adds	r2, #1
    4818:	801a      	strh	r2, [r3, #0]
    481a:	1c3b      	adds	r3, r7, #0
    481c:	3314      	adds	r3, #20
    481e:	881b      	ldrh	r3, [r3, #0]
    4820:	2b07      	cmp	r3, #7
    4822:	d9be      	bls.n	47a2 <crc7+0x3a>
	uint8 mask = 0x9;

	/* initialize register */
	uint8 reg = crc, inv;

	for(i = 0; i < len; i++)
    4824:	1c3b      	adds	r3, r7, #0
    4826:	3316      	adds	r3, #22
    4828:	881a      	ldrh	r2, [r3, #0]
    482a:	1c3b      	adds	r3, r7, #0
    482c:	3316      	adds	r3, #22
    482e:	3201      	adds	r2, #1
    4830:	801a      	strh	r2, [r3, #0]
    4832:	1c3b      	adds	r3, r7, #0
    4834:	3316      	adds	r3, #22
    4836:	881a      	ldrh	r2, [r3, #0]
    4838:	687b      	ldr	r3, [r7, #4]
    483a:	429a      	cmp	r2, r3
    483c:	dbac      	blt.n	4798 <crc7+0x30>
			inv = (((b[i] << g) & 0x80) >> 7) ^ ((reg >> 6) & 1);
			reg = ((reg << 1) & 0x7f) ^ (mask * inv);
		}
	}

	return reg;
    483e:	1c3b      	adds	r3, r7, #0
    4840:	3313      	adds	r3, #19
    4842:	781b      	ldrb	r3, [r3, #0]
}
    4844:	1c18      	adds	r0, r3, #0
    4846:	46bd      	mov	sp, r7
    4848:	b006      	add	sp, #24
    484a:	bd80      	pop	{r7, pc}

0000484c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    484c:	b590      	push	{r4, r7, lr}
    484e:	b089      	sub	sp, #36	; 0x24
    4850:	af00      	add	r7, sp, #0
    4852:	60b9      	str	r1, [r7, #8]
    4854:	607a      	str	r2, [r7, #4]
    4856:	603b      	str	r3, [r7, #0]
    4858:	1c3b      	adds	r3, r7, #0
    485a:	330f      	adds	r3, #15
    485c:	1c02      	adds	r2, r0, #0
    485e:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    4860:	1c3b      	adds	r3, r7, #0
    4862:	331f      	adds	r3, #31
    4864:	2205      	movs	r2, #5
    4866:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    4868:	1c3b      	adds	r3, r7, #0
    486a:	331e      	adds	r3, #30
    486c:	2201      	movs	r2, #1
    486e:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    4870:	1c3b      	adds	r3, r7, #0
    4872:	3314      	adds	r3, #20
    4874:	1c3a      	adds	r2, r7, #0
    4876:	320f      	adds	r2, #15
    4878:	7812      	ldrb	r2, [r2, #0]
    487a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    487c:	1c3b      	adds	r3, r7, #0
    487e:	330f      	adds	r3, #15
    4880:	781b      	ldrb	r3, [r3, #0]
    4882:	3bc1      	subs	r3, #193	; 0xc1
    4884:	2b0e      	cmp	r3, #14
    4886:	d900      	bls.n	488a <spi_cmd+0x3e>
    4888:	e11b      	b.n	4ac2 <spi_cmd+0x276>
    488a:	009a      	lsls	r2, r3, #2
    488c:	4ba9      	ldr	r3, [pc, #676]	; (4b34 <spi_cmd+0x2e8>)
    488e:	18d3      	adds	r3, r2, r3
    4890:	681b      	ldr	r3, [r3, #0]
    4892:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    4894:	68bb      	ldr	r3, [r7, #8]
    4896:	0c1b      	lsrs	r3, r3, #16
    4898:	b2da      	uxtb	r2, r3
    489a:	1c3b      	adds	r3, r7, #0
    489c:	3314      	adds	r3, #20
    489e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    48a0:	68bb      	ldr	r3, [r7, #8]
    48a2:	0a1b      	lsrs	r3, r3, #8
    48a4:	b2da      	uxtb	r2, r3
    48a6:	1c3b      	adds	r3, r7, #0
    48a8:	3314      	adds	r3, #20
    48aa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    48ac:	68bb      	ldr	r3, [r7, #8]
    48ae:	b2da      	uxtb	r2, r3
    48b0:	1c3b      	adds	r3, r7, #0
    48b2:	3314      	adds	r3, #20
    48b4:	70da      	strb	r2, [r3, #3]
		len = 5;
    48b6:	1c3b      	adds	r3, r7, #0
    48b8:	331f      	adds	r3, #31
    48ba:	2205      	movs	r2, #5
    48bc:	701a      	strb	r2, [r3, #0]
		break; 
    48be:	e105      	b.n	4acc <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		bc[1] = (uint8)(adr >> 8);
    48c0:	68bb      	ldr	r3, [r7, #8]
    48c2:	0a1b      	lsrs	r3, r3, #8
    48c4:	b2da      	uxtb	r2, r3
    48c6:	1c3b      	adds	r3, r7, #0
    48c8:	3314      	adds	r3, #20
    48ca:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    48cc:	1c3b      	adds	r3, r7, #0
    48ce:	3330      	adds	r3, #48	; 0x30
    48d0:	781b      	ldrb	r3, [r3, #0]
    48d2:	2b00      	cmp	r3, #0
    48d4:	d009      	beq.n	48ea <spi_cmd+0x9e>
    48d6:	1c3b      	adds	r3, r7, #0
    48d8:	3314      	adds	r3, #20
    48da:	785b      	ldrb	r3, [r3, #1]
    48dc:	2280      	movs	r2, #128	; 0x80
    48de:	4252      	negs	r2, r2
    48e0:	4313      	orrs	r3, r2
    48e2:	b2da      	uxtb	r2, r3
    48e4:	1c3b      	adds	r3, r7, #0
    48e6:	3314      	adds	r3, #20
    48e8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    48ea:	68bb      	ldr	r3, [r7, #8]
    48ec:	b2da      	uxtb	r2, r3
    48ee:	1c3b      	adds	r3, r7, #0
    48f0:	3314      	adds	r3, #20
    48f2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    48f4:	1c3b      	adds	r3, r7, #0
    48f6:	3314      	adds	r3, #20
    48f8:	2200      	movs	r2, #0
    48fa:	70da      	strb	r2, [r3, #3]
		len = 5;
    48fc:	1c3b      	adds	r3, r7, #0
    48fe:	331f      	adds	r3, #31
    4900:	2205      	movs	r2, #5
    4902:	701a      	strb	r2, [r3, #0]
		break;
    4904:	e0e2      	b.n	4acc <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    4906:	1c3b      	adds	r3, r7, #0
    4908:	3314      	adds	r3, #20
    490a:	2200      	movs	r2, #0
    490c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    490e:	1c3b      	adds	r3, r7, #0
    4910:	3314      	adds	r3, #20
    4912:	2200      	movs	r2, #0
    4914:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    4916:	1c3b      	adds	r3, r7, #0
    4918:	3314      	adds	r3, #20
    491a:	2200      	movs	r2, #0
    491c:	70da      	strb	r2, [r3, #3]
		len = 5;
    491e:	1c3b      	adds	r3, r7, #0
    4920:	331f      	adds	r3, #31
    4922:	2205      	movs	r2, #5
    4924:	701a      	strb	r2, [r3, #0]
		break;
    4926:	e0d1      	b.n	4acc <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    4928:	1c3b      	adds	r3, r7, #0
    492a:	3314      	adds	r3, #20
    492c:	2200      	movs	r2, #0
    492e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    4930:	1c3b      	adds	r3, r7, #0
    4932:	3314      	adds	r3, #20
    4934:	2200      	movs	r2, #0
    4936:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    4938:	1c3b      	adds	r3, r7, #0
    493a:	3314      	adds	r3, #20
    493c:	2200      	movs	r2, #0
    493e:	70da      	strb	r2, [r3, #3]
		len = 5;
    4940:	1c3b      	adds	r3, r7, #0
    4942:	331f      	adds	r3, #31
    4944:	2205      	movs	r2, #5
    4946:	701a      	strb	r2, [r3, #0]
		break;
    4948:	e0c0      	b.n	4acc <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    494a:	1c3b      	adds	r3, r7, #0
    494c:	3314      	adds	r3, #20
    494e:	22ff      	movs	r2, #255	; 0xff
    4950:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    4952:	1c3b      	adds	r3, r7, #0
    4954:	3314      	adds	r3, #20
    4956:	22ff      	movs	r2, #255	; 0xff
    4958:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    495a:	1c3b      	adds	r3, r7, #0
    495c:	3314      	adds	r3, #20
    495e:	22ff      	movs	r2, #255	; 0xff
    4960:	70da      	strb	r2, [r3, #3]
		len = 5;
    4962:	1c3b      	adds	r3, r7, #0
    4964:	331f      	adds	r3, #31
    4966:	2205      	movs	r2, #5
    4968:	701a      	strb	r2, [r3, #0]
		break;
    496a:	e0af      	b.n	4acc <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    496c:	68bb      	ldr	r3, [r7, #8]
    496e:	0c1b      	lsrs	r3, r3, #16
    4970:	b2da      	uxtb	r2, r3
    4972:	1c3b      	adds	r3, r7, #0
    4974:	3314      	adds	r3, #20
    4976:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    4978:	68bb      	ldr	r3, [r7, #8]
    497a:	0a1b      	lsrs	r3, r3, #8
    497c:	b2da      	uxtb	r2, r3
    497e:	1c3b      	adds	r3, r7, #0
    4980:	3314      	adds	r3, #20
    4982:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    4984:	68bb      	ldr	r3, [r7, #8]
    4986:	b2da      	uxtb	r2, r3
    4988:	1c3b      	adds	r3, r7, #0
    498a:	3314      	adds	r3, #20
    498c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    498e:	683b      	ldr	r3, [r7, #0]
    4990:	0a1b      	lsrs	r3, r3, #8
    4992:	b2da      	uxtb	r2, r3
    4994:	1c3b      	adds	r3, r7, #0
    4996:	3314      	adds	r3, #20
    4998:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    499a:	683b      	ldr	r3, [r7, #0]
    499c:	b2da      	uxtb	r2, r3
    499e:	1c3b      	adds	r3, r7, #0
    49a0:	3314      	adds	r3, #20
    49a2:	715a      	strb	r2, [r3, #5]
		len = 7;
    49a4:	1c3b      	adds	r3, r7, #0
    49a6:	331f      	adds	r3, #31
    49a8:	2207      	movs	r2, #7
    49aa:	701a      	strb	r2, [r3, #0]
		break;
    49ac:	e08e      	b.n	4acc <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    49ae:	68bb      	ldr	r3, [r7, #8]
    49b0:	0c1b      	lsrs	r3, r3, #16
    49b2:	b2da      	uxtb	r2, r3
    49b4:	1c3b      	adds	r3, r7, #0
    49b6:	3314      	adds	r3, #20
    49b8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    49ba:	68bb      	ldr	r3, [r7, #8]
    49bc:	0a1b      	lsrs	r3, r3, #8
    49be:	b2da      	uxtb	r2, r3
    49c0:	1c3b      	adds	r3, r7, #0
    49c2:	3314      	adds	r3, #20
    49c4:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    49c6:	68bb      	ldr	r3, [r7, #8]
    49c8:	b2da      	uxtb	r2, r3
    49ca:	1c3b      	adds	r3, r7, #0
    49cc:	3314      	adds	r3, #20
    49ce:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    49d0:	683b      	ldr	r3, [r7, #0]
    49d2:	0c1b      	lsrs	r3, r3, #16
    49d4:	b2da      	uxtb	r2, r3
    49d6:	1c3b      	adds	r3, r7, #0
    49d8:	3314      	adds	r3, #20
    49da:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    49dc:	683b      	ldr	r3, [r7, #0]
    49de:	0a1b      	lsrs	r3, r3, #8
    49e0:	b2da      	uxtb	r2, r3
    49e2:	1c3b      	adds	r3, r7, #0
    49e4:	3314      	adds	r3, #20
    49e6:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    49e8:	683b      	ldr	r3, [r7, #0]
    49ea:	b2da      	uxtb	r2, r3
    49ec:	1c3b      	adds	r3, r7, #0
    49ee:	3314      	adds	r3, #20
    49f0:	719a      	strb	r2, [r3, #6]
		len = 8;
    49f2:	1c3b      	adds	r3, r7, #0
    49f4:	331f      	adds	r3, #31
    49f6:	2208      	movs	r2, #8
    49f8:	701a      	strb	r2, [r3, #0]
		break;
    49fa:	e067      	b.n	4acc <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    49fc:	68bb      	ldr	r3, [r7, #8]
    49fe:	0a1b      	lsrs	r3, r3, #8
    4a00:	b2da      	uxtb	r2, r3
    4a02:	1c3b      	adds	r3, r7, #0
    4a04:	3314      	adds	r3, #20
    4a06:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    4a08:	1c3b      	adds	r3, r7, #0
    4a0a:	3330      	adds	r3, #48	; 0x30
    4a0c:	781b      	ldrb	r3, [r3, #0]
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d009      	beq.n	4a26 <spi_cmd+0x1da>
    4a12:	1c3b      	adds	r3, r7, #0
    4a14:	3314      	adds	r3, #20
    4a16:	785b      	ldrb	r3, [r3, #1]
    4a18:	2280      	movs	r2, #128	; 0x80
    4a1a:	4252      	negs	r2, r2
    4a1c:	4313      	orrs	r3, r2
    4a1e:	b2da      	uxtb	r2, r3
    4a20:	1c3b      	adds	r3, r7, #0
    4a22:	3314      	adds	r3, #20
    4a24:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    4a26:	68bb      	ldr	r3, [r7, #8]
    4a28:	b2da      	uxtb	r2, r3
    4a2a:	1c3b      	adds	r3, r7, #0
    4a2c:	3314      	adds	r3, #20
    4a2e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	0e1b      	lsrs	r3, r3, #24
    4a34:	b2da      	uxtb	r2, r3
    4a36:	1c3b      	adds	r3, r7, #0
    4a38:	3314      	adds	r3, #20
    4a3a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    4a3c:	687b      	ldr	r3, [r7, #4]
    4a3e:	0c1b      	lsrs	r3, r3, #16
    4a40:	b2da      	uxtb	r2, r3
    4a42:	1c3b      	adds	r3, r7, #0
    4a44:	3314      	adds	r3, #20
    4a46:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    4a48:	687b      	ldr	r3, [r7, #4]
    4a4a:	0a1b      	lsrs	r3, r3, #8
    4a4c:	b2da      	uxtb	r2, r3
    4a4e:	1c3b      	adds	r3, r7, #0
    4a50:	3314      	adds	r3, #20
    4a52:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    4a54:	687b      	ldr	r3, [r7, #4]
    4a56:	b2da      	uxtb	r2, r3
    4a58:	1c3b      	adds	r3, r7, #0
    4a5a:	3314      	adds	r3, #20
    4a5c:	719a      	strb	r2, [r3, #6]
		len = 8;
    4a5e:	1c3b      	adds	r3, r7, #0
    4a60:	331f      	adds	r3, #31
    4a62:	2208      	movs	r2, #8
    4a64:	701a      	strb	r2, [r3, #0]
		break;
    4a66:	e031      	b.n	4acc <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    4a68:	68bb      	ldr	r3, [r7, #8]
    4a6a:	0c1b      	lsrs	r3, r3, #16
    4a6c:	b2da      	uxtb	r2, r3
    4a6e:	1c3b      	adds	r3, r7, #0
    4a70:	3314      	adds	r3, #20
    4a72:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    4a74:	68bb      	ldr	r3, [r7, #8]
    4a76:	0a1b      	lsrs	r3, r3, #8
    4a78:	b2da      	uxtb	r2, r3
    4a7a:	1c3b      	adds	r3, r7, #0
    4a7c:	3314      	adds	r3, #20
    4a7e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    4a80:	68bb      	ldr	r3, [r7, #8]
    4a82:	b2da      	uxtb	r2, r3
    4a84:	1c3b      	adds	r3, r7, #0
    4a86:	3314      	adds	r3, #20
    4a88:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    4a8a:	687b      	ldr	r3, [r7, #4]
    4a8c:	0e1b      	lsrs	r3, r3, #24
    4a8e:	b2da      	uxtb	r2, r3
    4a90:	1c3b      	adds	r3, r7, #0
    4a92:	3314      	adds	r3, #20
    4a94:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    4a96:	687b      	ldr	r3, [r7, #4]
    4a98:	0c1b      	lsrs	r3, r3, #16
    4a9a:	b2da      	uxtb	r2, r3
    4a9c:	1c3b      	adds	r3, r7, #0
    4a9e:	3314      	adds	r3, #20
    4aa0:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	0a1b      	lsrs	r3, r3, #8
    4aa6:	b2da      	uxtb	r2, r3
    4aa8:	1c3b      	adds	r3, r7, #0
    4aaa:	3314      	adds	r3, #20
    4aac:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    4aae:	687b      	ldr	r3, [r7, #4]
    4ab0:	b2da      	uxtb	r2, r3
    4ab2:	1c3b      	adds	r3, r7, #0
    4ab4:	3314      	adds	r3, #20
    4ab6:	71da      	strb	r2, [r3, #7]
		len = 9;
    4ab8:	1c3b      	adds	r3, r7, #0
    4aba:	331f      	adds	r3, #31
    4abc:	2209      	movs	r2, #9
    4abe:	701a      	strb	r2, [r3, #0]
		break;
    4ac0:	e004      	b.n	4acc <spi_cmd+0x280>
	default:
		result = N_FAIL;
    4ac2:	1c3b      	adds	r3, r7, #0
    4ac4:	331e      	adds	r3, #30
    4ac6:	2200      	movs	r2, #0
    4ac8:	701a      	strb	r2, [r3, #0]
		break;
    4aca:	46c0      	nop			; (mov r8, r8)
	}
	
	if (result) {
    4acc:	1c3b      	adds	r3, r7, #0
    4ace:	331e      	adds	r3, #30
    4ad0:	781b      	ldrb	r3, [r3, #0]
    4ad2:	b25b      	sxtb	r3, r3
    4ad4:	2b00      	cmp	r3, #0
    4ad6:	d025      	beq.n	4b24 <spi_cmd+0x2d8>
		bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    4ad8:	1c3b      	adds	r3, r7, #0
    4ada:	331f      	adds	r3, #31
    4adc:	781b      	ldrb	r3, [r3, #0]
    4ade:	1e5c      	subs	r4, r3, #1
    4ae0:	1c3b      	adds	r3, r7, #0
    4ae2:	331f      	adds	r3, #31
    4ae4:	781b      	ldrb	r3, [r3, #0]
    4ae6:	3b01      	subs	r3, #1
    4ae8:	1c3a      	adds	r2, r7, #0
    4aea:	3214      	adds	r2, #20
    4aec:	207f      	movs	r0, #127	; 0x7f
    4aee:	1c11      	adds	r1, r2, #0
    4af0:	1c1a      	adds	r2, r3, #0
    4af2:	4b11      	ldr	r3, [pc, #68]	; (4b38 <spi_cmd+0x2ec>)
    4af4:	4798      	blx	r3
    4af6:	1c03      	adds	r3, r0, #0
    4af8:	18db      	adds	r3, r3, r3
    4afa:	b2da      	uxtb	r2, r3
    4afc:	1c3b      	adds	r3, r7, #0
    4afe:	3314      	adds	r3, #20
    4b00:	551a      	strb	r2, [r3, r4]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    4b02:	1c3b      	adds	r3, r7, #0
    4b04:	331f      	adds	r3, #31
    4b06:	781b      	ldrb	r3, [r3, #0]
    4b08:	b29b      	uxth	r3, r3
    4b0a:	1c3a      	adds	r2, r7, #0
    4b0c:	3214      	adds	r2, #20
    4b0e:	1c10      	adds	r0, r2, #0
    4b10:	1c19      	adds	r1, r3, #0
    4b12:	4b0a      	ldr	r3, [pc, #40]	; (4b3c <spi_cmd+0x2f0>)
    4b14:	4798      	blx	r3
    4b16:	1c03      	adds	r3, r0, #0
    4b18:	2b00      	cmp	r3, #0
    4b1a:	d003      	beq.n	4b24 <spi_cmd+0x2d8>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
    4b1c:	1c3b      	adds	r3, r7, #0
    4b1e:	331e      	adds	r3, #30
    4b20:	2200      	movs	r2, #0
    4b22:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    4b24:	1c3b      	adds	r3, r7, #0
    4b26:	331e      	adds	r3, #30
    4b28:	781b      	ldrb	r3, [r3, #0]
    4b2a:	b25b      	sxtb	r3, r3
}
    4b2c:	1c18      	adds	r0, r3, #0
    4b2e:	46bd      	mov	sp, r7
    4b30:	b009      	add	sp, #36	; 0x24
    4b32:	bd90      	pop	{r4, r7, pc}
    4b34:	000106c0 	.word	0x000106c0
    4b38:	00004769 	.word	0x00004769
    4b3c:	00004725 	.word	0x00004725

00004b40 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    4b40:	b580      	push	{r7, lr}
    4b42:	b084      	sub	sp, #16
    4b44:	af00      	add	r7, sp, #0
    4b46:	1c02      	adds	r2, r0, #0
    4b48:	1dfb      	adds	r3, r7, #7
    4b4a:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    4b4c:	1c3b      	adds	r3, r7, #0
    4b4e:	330f      	adds	r3, #15
    4b50:	2201      	movs	r2, #1
    4b52:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    4b54:	1dfb      	adds	r3, r7, #7
    4b56:	781b      	ldrb	r3, [r3, #0]
    4b58:	2bcf      	cmp	r3, #207	; 0xcf
    4b5a:	d007      	beq.n	4b6c <spi_cmd_rsp+0x2c>
    4b5c:	1dfb      	adds	r3, r7, #7
    4b5e:	781b      	ldrb	r3, [r3, #0]
    4b60:	2bc5      	cmp	r3, #197	; 0xc5
    4b62:	d003      	beq.n	4b6c <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    4b64:	1dfb      	adds	r3, r7, #7
    4b66:	781b      	ldrb	r3, [r3, #0]
    4b68:	2bc6      	cmp	r3, #198	; 0xc6
    4b6a:	d10d      	bne.n	4b88 <spi_cmd_rsp+0x48>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4b6c:	1c3b      	adds	r3, r7, #0
    4b6e:	330d      	adds	r3, #13
    4b70:	1c18      	adds	r0, r3, #0
    4b72:	2101      	movs	r1, #1
    4b74:	4b2b      	ldr	r3, [pc, #172]	; (4c24 <spi_cmd_rsp+0xe4>)
    4b76:	4798      	blx	r3
    4b78:	1c03      	adds	r3, r0, #0
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	d004      	beq.n	4b88 <spi_cmd_rsp+0x48>
			result = N_FAIL;
    4b7e:	1c3b      	adds	r3, r7, #0
    4b80:	330f      	adds	r3, #15
    4b82:	2200      	movs	r2, #0
    4b84:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    4b86:	e045      	b.n	4c14 <spi_cmd_rsp+0xd4>
		}
	}	

	/* wait for response */
	s8RetryCnt = 10;
    4b88:	1c3b      	adds	r3, r7, #0
    4b8a:	330e      	adds	r3, #14
    4b8c:	220a      	movs	r2, #10
    4b8e:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4b90:	1c3b      	adds	r3, r7, #0
    4b92:	330d      	adds	r3, #13
    4b94:	1c18      	adds	r0, r3, #0
    4b96:	2101      	movs	r1, #1
    4b98:	4b22      	ldr	r3, [pc, #136]	; (4c24 <spi_cmd_rsp+0xe4>)
    4b9a:	4798      	blx	r3
    4b9c:	1c03      	adds	r3, r0, #0
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d004      	beq.n	4bac <spi_cmd_rsp+0x6c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    4ba2:	1c3b      	adds	r3, r7, #0
    4ba4:	330f      	adds	r3, #15
    4ba6:	2200      	movs	r2, #0
    4ba8:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    4baa:	e033      	b.n	4c14 <spi_cmd_rsp+0xd4>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    4bac:	1c3b      	adds	r3, r7, #0
    4bae:	330d      	adds	r3, #13
    4bb0:	781b      	ldrb	r3, [r3, #0]
    4bb2:	1dfa      	adds	r2, r7, #7
    4bb4:	7812      	ldrb	r2, [r2, #0]
    4bb6:	429a      	cmp	r2, r3
    4bb8:	d00a      	beq.n	4bd0 <spi_cmd_rsp+0x90>
    4bba:	1c3b      	adds	r3, r7, #0
    4bbc:	330e      	adds	r3, #14
    4bbe:	781b      	ldrb	r3, [r3, #0]
    4bc0:	1c3a      	adds	r2, r7, #0
    4bc2:	320e      	adds	r2, #14
    4bc4:	1c19      	adds	r1, r3, #0
    4bc6:	3901      	subs	r1, #1
    4bc8:	7011      	strb	r1, [r2, #0]
    4bca:	b25b      	sxtb	r3, r3
    4bcc:	2b00      	cmp	r3, #0
    4bce:	dcdf      	bgt.n	4b90 <spi_cmd_rsp+0x50>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    4bd0:	1c3b      	adds	r3, r7, #0
    4bd2:	330e      	adds	r3, #14
    4bd4:	220a      	movs	r2, #10
    4bd6:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4bd8:	1c3b      	adds	r3, r7, #0
    4bda:	330d      	adds	r3, #13
    4bdc:	1c18      	adds	r0, r3, #0
    4bde:	2101      	movs	r1, #1
    4be0:	4b10      	ldr	r3, [pc, #64]	; (4c24 <spi_cmd_rsp+0xe4>)
    4be2:	4798      	blx	r3
    4be4:	1c03      	adds	r3, r0, #0
    4be6:	2b00      	cmp	r3, #0
    4be8:	d004      	beq.n	4bf4 <spi_cmd_rsp+0xb4>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    4bea:	1c3b      	adds	r3, r7, #0
    4bec:	330f      	adds	r3, #15
    4bee:	2200      	movs	r2, #0
    4bf0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    4bf2:	e00f      	b.n	4c14 <spi_cmd_rsp+0xd4>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    4bf4:	1c3b      	adds	r3, r7, #0
    4bf6:	330d      	adds	r3, #13
    4bf8:	781b      	ldrb	r3, [r3, #0]
    4bfa:	2b00      	cmp	r3, #0
    4bfc:	d00a      	beq.n	4c14 <spi_cmd_rsp+0xd4>
    4bfe:	1c3b      	adds	r3, r7, #0
    4c00:	330e      	adds	r3, #14
    4c02:	781b      	ldrb	r3, [r3, #0]
    4c04:	1c3a      	adds	r2, r7, #0
    4c06:	320e      	adds	r2, #14
    4c08:	1c19      	adds	r1, r3, #0
    4c0a:	3901      	subs	r1, #1
    4c0c:	7011      	strb	r1, [r2, #0]
    4c0e:	b25b      	sxtb	r3, r3
    4c10:	2b00      	cmp	r3, #0
    4c12:	dce1      	bgt.n	4bd8 <spi_cmd_rsp+0x98>

_fail_:

	return result;
    4c14:	1c3b      	adds	r3, r7, #0
    4c16:	330f      	adds	r3, #15
    4c18:	781b      	ldrb	r3, [r3, #0]
    4c1a:	b25b      	sxtb	r3, r3
}
    4c1c:	1c18      	adds	r0, r3, #0
    4c1e:	46bd      	mov	sp, r7
    4c20:	b004      	add	sp, #16
    4c22:	bd80      	pop	{r7, pc}
    4c24:	000046e1 	.word	0x000046e1

00004c28 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    4c28:	b580      	push	{r7, lr}
    4c2a:	b086      	sub	sp, #24
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	6078      	str	r0, [r7, #4]
    4c30:	1cbb      	adds	r3, r7, #2
    4c32:	8019      	strh	r1, [r3, #0]
    4c34:	1c7b      	adds	r3, r7, #1
    4c36:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    4c38:	1c3b      	adds	r3, r7, #0
    4c3a:	3311      	adds	r3, #17
    4c3c:	2201      	movs	r2, #1
    4c3e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    4c40:	1c3b      	adds	r3, r7, #0
    4c42:	3314      	adds	r3, #20
    4c44:	2200      	movs	r2, #0
    4c46:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    4c48:	1cbb      	adds	r3, r7, #2
    4c4a:	881a      	ldrh	r2, [r3, #0]
    4c4c:	2380      	movs	r3, #128	; 0x80
    4c4e:	019b      	lsls	r3, r3, #6
    4c50:	429a      	cmp	r2, r3
    4c52:	d805      	bhi.n	4c60 <spi_data_read+0x38>
			nbytes = sz;
    4c54:	1c3b      	adds	r3, r7, #0
    4c56:	3312      	adds	r3, #18
    4c58:	1cba      	adds	r2, r7, #2
    4c5a:	8812      	ldrh	r2, [r2, #0]
    4c5c:	801a      	strh	r2, [r3, #0]
    4c5e:	e004      	b.n	4c6a <spi_data_read+0x42>
		else
			nbytes = DATA_PKT_SZ;
    4c60:	1c3b      	adds	r3, r7, #0
    4c62:	3312      	adds	r3, #18
    4c64:	2280      	movs	r2, #128	; 0x80
    4c66:	0192      	lsls	r2, r2, #6
    4c68:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    4c6a:	1c3b      	adds	r3, r7, #0
    4c6c:	3316      	adds	r3, #22
    4c6e:	220a      	movs	r2, #10
    4c70:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4c72:	1c3b      	adds	r3, r7, #0
    4c74:	330b      	adds	r3, #11
    4c76:	1c18      	adds	r0, r3, #0
    4c78:	2101      	movs	r1, #1
    4c7a:	4b3c      	ldr	r3, [pc, #240]	; (4d6c <spi_data_read+0x144>)
    4c7c:	4798      	blx	r3
    4c7e:	1c03      	adds	r3, r0, #0
    4c80:	2b00      	cmp	r3, #0
    4c82:	d004      	beq.n	4c8e <spi_data_read+0x66>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
    4c84:	1c3b      	adds	r3, r7, #0
    4c86:	3311      	adds	r3, #17
    4c88:	2200      	movs	r2, #0
    4c8a:	701a      	strb	r2, [r3, #0]
				break;
    4c8c:	e014      	b.n	4cb8 <spi_data_read+0x90>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    4c8e:	1c3b      	adds	r3, r7, #0
    4c90:	330b      	adds	r3, #11
    4c92:	781b      	ldrb	r3, [r3, #0]
    4c94:	091b      	lsrs	r3, r3, #4
    4c96:	b2db      	uxtb	r3, r3
    4c98:	1c1a      	adds	r2, r3, #0
    4c9a:	230f      	movs	r3, #15
    4c9c:	4013      	ands	r3, r2
    4c9e:	2b0f      	cmp	r3, #15
    4ca0:	d100      	bne.n	4ca4 <spi_data_read+0x7c>
				break;
    4ca2:	e009      	b.n	4cb8 <spi_data_read+0x90>
		} while (retry--);
    4ca4:	1c3b      	adds	r3, r7, #0
    4ca6:	3316      	adds	r3, #22
    4ca8:	881b      	ldrh	r3, [r3, #0]
    4caa:	1c3a      	adds	r2, r7, #0
    4cac:	3216      	adds	r2, #22
    4cae:	1c19      	adds	r1, r3, #0
    4cb0:	3901      	subs	r1, #1
    4cb2:	8011      	strh	r1, [r2, #0]
    4cb4:	2b00      	cmp	r3, #0
    4cb6:	d1dc      	bne.n	4c72 <spi_data_read+0x4a>
		
		if (result == N_FAIL)
    4cb8:	1c3b      	adds	r3, r7, #0
    4cba:	3311      	adds	r3, #17
    4cbc:	781b      	ldrb	r3, [r3, #0]
    4cbe:	b25b      	sxtb	r3, r3
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d100      	bne.n	4cc6 <spi_data_read+0x9e>
			break;
    4cc4:	e049      	b.n	4d5a <spi_data_read+0x132>

		if (retry <= 0) {
    4cc6:	1c3b      	adds	r3, r7, #0
    4cc8:	3316      	adds	r3, #22
    4cca:	2200      	movs	r2, #0
    4ccc:	5e9b      	ldrsh	r3, [r3, r2]
    4cce:	2b00      	cmp	r3, #0
    4cd0:	dc04      	bgt.n	4cdc <spi_data_read+0xb4>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
    4cd2:	1c3b      	adds	r3, r7, #0
    4cd4:	3311      	adds	r3, #17
    4cd6:	2200      	movs	r2, #0
    4cd8:	701a      	strb	r2, [r3, #0]
			break;
    4cda:	e03e      	b.n	4d5a <spi_data_read+0x132>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    4cdc:	1c3b      	adds	r3, r7, #0
    4cde:	3314      	adds	r3, #20
    4ce0:	2200      	movs	r2, #0
    4ce2:	5e9b      	ldrsh	r3, [r3, r2]
    4ce4:	687a      	ldr	r2, [r7, #4]
    4ce6:	18d2      	adds	r2, r2, r3
    4ce8:	1c3b      	adds	r3, r7, #0
    4cea:	3312      	adds	r3, #18
    4cec:	881b      	ldrh	r3, [r3, #0]
    4cee:	1c10      	adds	r0, r2, #0
    4cf0:	1c19      	adds	r1, r3, #0
    4cf2:	4b1e      	ldr	r3, [pc, #120]	; (4d6c <spi_data_read+0x144>)
    4cf4:	4798      	blx	r3
    4cf6:	1c03      	adds	r3, r0, #0
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	d004      	beq.n	4d06 <spi_data_read+0xde>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
    4cfc:	1c3b      	adds	r3, r7, #0
    4cfe:	3311      	adds	r3, #17
    4d00:	2200      	movs	r2, #0
    4d02:	701a      	strb	r2, [r3, #0]
			break;
    4d04:	e029      	b.n	4d5a <spi_data_read+0x132>
		}
		if(!clockless)
    4d06:	1c7b      	adds	r3, r7, #1
    4d08:	781b      	ldrb	r3, [r3, #0]
    4d0a:	2b00      	cmp	r3, #0
    4d0c:	d10d      	bne.n	4d2a <spi_data_read+0x102>
		{
			/**
			Read Crc
			**/
			if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    4d0e:	1c3b      	adds	r3, r7, #0
    4d10:	330c      	adds	r3, #12
    4d12:	1c18      	adds	r0, r3, #0
    4d14:	2102      	movs	r1, #2
    4d16:	4b15      	ldr	r3, [pc, #84]	; (4d6c <spi_data_read+0x144>)
    4d18:	4798      	blx	r3
    4d1a:	1c03      	adds	r3, r0, #0
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d004      	beq.n	4d2a <spi_data_read+0x102>
				M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
				result = N_FAIL;
    4d20:	1c3b      	adds	r3, r7, #0
    4d22:	3311      	adds	r3, #17
    4d24:	2200      	movs	r2, #0
    4d26:	701a      	strb	r2, [r3, #0]
				break;
    4d28:	e017      	b.n	4d5a <spi_data_read+0x132>
			}
		}
		ix += nbytes;
    4d2a:	1c3b      	adds	r3, r7, #0
    4d2c:	3314      	adds	r3, #20
    4d2e:	881a      	ldrh	r2, [r3, #0]
    4d30:	1c3b      	adds	r3, r7, #0
    4d32:	3312      	adds	r3, #18
    4d34:	881b      	ldrh	r3, [r3, #0]
    4d36:	18d3      	adds	r3, r2, r3
    4d38:	b29a      	uxth	r2, r3
    4d3a:	1c3b      	adds	r3, r7, #0
    4d3c:	3314      	adds	r3, #20
    4d3e:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    4d40:	1c3b      	adds	r3, r7, #0
    4d42:	3312      	adds	r3, #18
    4d44:	881a      	ldrh	r2, [r3, #0]
    4d46:	1cbb      	adds	r3, r7, #2
    4d48:	1cb9      	adds	r1, r7, #2
    4d4a:	8809      	ldrh	r1, [r1, #0]
    4d4c:	1a8a      	subs	r2, r1, r2
    4d4e:	801a      	strh	r2, [r3, #0]

	} while (sz);
    4d50:	1cbb      	adds	r3, r7, #2
    4d52:	881b      	ldrh	r3, [r3, #0]
    4d54:	2b00      	cmp	r3, #0
    4d56:	d000      	beq.n	4d5a <spi_data_read+0x132>
    4d58:	e776      	b.n	4c48 <spi_data_read+0x20>

	return result;
    4d5a:	1c3b      	adds	r3, r7, #0
    4d5c:	3311      	adds	r3, #17
    4d5e:	781b      	ldrb	r3, [r3, #0]
    4d60:	b25b      	sxtb	r3, r3
}
    4d62:	1c18      	adds	r0, r3, #0
    4d64:	46bd      	mov	sp, r7
    4d66:	b006      	add	sp, #24
    4d68:	bd80      	pop	{r7, pc}
    4d6a:	46c0      	nop			; (mov r8, r8)
    4d6c:	000046e1 	.word	0x000046e1

00004d70 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    4d70:	b580      	push	{r7, lr}
    4d72:	b086      	sub	sp, #24
    4d74:	af00      	add	r7, sp, #0
    4d76:	6078      	str	r0, [r7, #4]
    4d78:	1c0a      	adds	r2, r1, #0
    4d7a:	1cbb      	adds	r3, r7, #2
    4d7c:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    4d7e:	1c3b      	adds	r3, r7, #0
    4d80:	3313      	adds	r3, #19
    4d82:	2201      	movs	r2, #1
    4d84:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    4d86:	1c3b      	adds	r3, r7, #0
    4d88:	330c      	adds	r3, #12
    4d8a:	2200      	movs	r2, #0
    4d8c:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    4d8e:	1c3b      	adds	r3, r7, #0
    4d90:	3316      	adds	r3, #22
    4d92:	2200      	movs	r2, #0
    4d94:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    4d96:	1cbb      	adds	r3, r7, #2
    4d98:	881a      	ldrh	r2, [r3, #0]
    4d9a:	2380      	movs	r3, #128	; 0x80
    4d9c:	019b      	lsls	r3, r3, #6
    4d9e:	429a      	cmp	r2, r3
    4da0:	d805      	bhi.n	4dae <spi_data_write+0x3e>
			nbytes = sz;
    4da2:	1c3b      	adds	r3, r7, #0
    4da4:	3314      	adds	r3, #20
    4da6:	1cba      	adds	r2, r7, #2
    4da8:	8812      	ldrh	r2, [r2, #0]
    4daa:	801a      	strh	r2, [r3, #0]
    4dac:	e004      	b.n	4db8 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    4dae:	1c3b      	adds	r3, r7, #0
    4db0:	3314      	adds	r3, #20
    4db2:	2280      	movs	r2, #128	; 0x80
    4db4:	0192      	lsls	r2, r2, #6
    4db6:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    4db8:	1c3b      	adds	r3, r7, #0
    4dba:	3311      	adds	r3, #17
    4dbc:	22f0      	movs	r2, #240	; 0xf0
    4dbe:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    4dc0:	1c3b      	adds	r3, r7, #0
    4dc2:	3316      	adds	r3, #22
    4dc4:	2200      	movs	r2, #0
    4dc6:	5e9b      	ldrsh	r3, [r3, r2]
    4dc8:	2b00      	cmp	r3, #0
    4dca:	d10f      	bne.n	4dec <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    4dcc:	1cbb      	adds	r3, r7, #2
    4dce:	881a      	ldrh	r2, [r3, #0]
    4dd0:	2380      	movs	r3, #128	; 0x80
    4dd2:	019b      	lsls	r3, r3, #6
    4dd4:	429a      	cmp	r2, r3
    4dd6:	d804      	bhi.n	4de2 <spi_data_write+0x72>
				order = 0x3;
    4dd8:	1c3b      	adds	r3, r7, #0
    4dda:	3312      	adds	r3, #18
    4ddc:	2203      	movs	r2, #3
    4dde:	701a      	strb	r2, [r3, #0]
    4de0:	e013      	b.n	4e0a <spi_data_write+0x9a>
			else
				order = 0x1;
    4de2:	1c3b      	adds	r3, r7, #0
    4de4:	3312      	adds	r3, #18
    4de6:	2201      	movs	r2, #1
    4de8:	701a      	strb	r2, [r3, #0]
    4dea:	e00e      	b.n	4e0a <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    4dec:	1cbb      	adds	r3, r7, #2
    4dee:	881a      	ldrh	r2, [r3, #0]
    4df0:	2380      	movs	r3, #128	; 0x80
    4df2:	019b      	lsls	r3, r3, #6
    4df4:	429a      	cmp	r2, r3
    4df6:	d804      	bhi.n	4e02 <spi_data_write+0x92>
				order = 0x3;
    4df8:	1c3b      	adds	r3, r7, #0
    4dfa:	3312      	adds	r3, #18
    4dfc:	2203      	movs	r2, #3
    4dfe:	701a      	strb	r2, [r3, #0]
    4e00:	e003      	b.n	4e0a <spi_data_write+0x9a>
			else
				order = 0x2;
    4e02:	1c3b      	adds	r3, r7, #0
    4e04:	3312      	adds	r3, #18
    4e06:	2202      	movs	r2, #2
    4e08:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;	
    4e0a:	1c3b      	adds	r3, r7, #0
    4e0c:	3311      	adds	r3, #17
    4e0e:	781a      	ldrb	r2, [r3, #0]
    4e10:	1c3b      	adds	r3, r7, #0
    4e12:	3312      	adds	r3, #18
    4e14:	781b      	ldrb	r3, [r3, #0]
    4e16:	4313      	orrs	r3, r2
    4e18:	b2da      	uxtb	r2, r3
    4e1a:	1c3b      	adds	r3, r7, #0
    4e1c:	3311      	adds	r3, #17
    4e1e:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    4e20:	1c3b      	adds	r3, r7, #0
    4e22:	3311      	adds	r3, #17
    4e24:	1c18      	adds	r0, r3, #0
    4e26:	2101      	movs	r1, #1
    4e28:	4b26      	ldr	r3, [pc, #152]	; (4ec4 <spi_data_write+0x154>)
    4e2a:	4798      	blx	r3
    4e2c:	1c03      	adds	r3, r0, #0
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d004      	beq.n	4e3c <spi_data_write+0xcc>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
    4e32:	1c3b      	adds	r3, r7, #0
    4e34:	3313      	adds	r3, #19
    4e36:	2200      	movs	r2, #0
    4e38:	701a      	strb	r2, [r3, #0]
			break;
    4e3a:	e03a      	b.n	4eb2 <spi_data_write+0x142>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    4e3c:	1c3b      	adds	r3, r7, #0
    4e3e:	3316      	adds	r3, #22
    4e40:	2200      	movs	r2, #0
    4e42:	5e9b      	ldrsh	r3, [r3, r2]
    4e44:	687a      	ldr	r2, [r7, #4]
    4e46:	18d2      	adds	r2, r2, r3
    4e48:	1c3b      	adds	r3, r7, #0
    4e4a:	3314      	adds	r3, #20
    4e4c:	881b      	ldrh	r3, [r3, #0]
    4e4e:	1c10      	adds	r0, r2, #0
    4e50:	1c19      	adds	r1, r3, #0
    4e52:	4b1c      	ldr	r3, [pc, #112]	; (4ec4 <spi_data_write+0x154>)
    4e54:	4798      	blx	r3
    4e56:	1c03      	adds	r3, r0, #0
    4e58:	2b00      	cmp	r3, #0
    4e5a:	d004      	beq.n	4e66 <spi_data_write+0xf6>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
    4e5c:	1c3b      	adds	r3, r7, #0
    4e5e:	3313      	adds	r3, #19
    4e60:	2200      	movs	r2, #0
    4e62:	701a      	strb	r2, [r3, #0]
			break;
    4e64:	e025      	b.n	4eb2 <spi_data_write+0x142>
		}

		/**
			Write Crc
		**/
		if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    4e66:	1c3b      	adds	r3, r7, #0
    4e68:	330c      	adds	r3, #12
    4e6a:	1c18      	adds	r0, r3, #0
    4e6c:	2102      	movs	r1, #2
    4e6e:	4b15      	ldr	r3, [pc, #84]	; (4ec4 <spi_data_write+0x154>)
    4e70:	4798      	blx	r3
    4e72:	1c03      	adds	r3, r0, #0
    4e74:	2b00      	cmp	r3, #0
    4e76:	d004      	beq.n	4e82 <spi_data_write+0x112>
			M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
			result = N_FAIL;
    4e78:	1c3b      	adds	r3, r7, #0
    4e7a:	3313      	adds	r3, #19
    4e7c:	2200      	movs	r2, #0
    4e7e:	701a      	strb	r2, [r3, #0]
			break;
    4e80:	e017      	b.n	4eb2 <spi_data_write+0x142>
		}

		ix += nbytes;
    4e82:	1c3b      	adds	r3, r7, #0
    4e84:	3316      	adds	r3, #22
    4e86:	881a      	ldrh	r2, [r3, #0]
    4e88:	1c3b      	adds	r3, r7, #0
    4e8a:	3314      	adds	r3, #20
    4e8c:	881b      	ldrh	r3, [r3, #0]
    4e8e:	18d3      	adds	r3, r2, r3
    4e90:	b29a      	uxth	r2, r3
    4e92:	1c3b      	adds	r3, r7, #0
    4e94:	3316      	adds	r3, #22
    4e96:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    4e98:	1cbb      	adds	r3, r7, #2
    4e9a:	1cb9      	adds	r1, r7, #2
    4e9c:	1c3a      	adds	r2, r7, #0
    4e9e:	3214      	adds	r2, #20
    4ea0:	8809      	ldrh	r1, [r1, #0]
    4ea2:	8812      	ldrh	r2, [r2, #0]
    4ea4:	1a8a      	subs	r2, r1, r2
    4ea6:	801a      	strh	r2, [r3, #0]
	} while (sz);
    4ea8:	1cbb      	adds	r3, r7, #2
    4eaa:	881b      	ldrh	r3, [r3, #0]
    4eac:	2b00      	cmp	r3, #0
    4eae:	d000      	beq.n	4eb2 <spi_data_write+0x142>
    4eb0:	e771      	b.n	4d96 <spi_data_write+0x26>


	return result;
    4eb2:	1c3b      	adds	r3, r7, #0
    4eb4:	3313      	adds	r3, #19
    4eb6:	781b      	ldrb	r3, [r3, #0]
    4eb8:	b25b      	sxtb	r3, r3
}
    4eba:	1c18      	adds	r0, r3, #0
    4ebc:	46bd      	mov	sp, r7
    4ebe:	b006      	add	sp, #24
    4ec0:	bd80      	pop	{r7, pc}
    4ec2:	46c0      	nop			; (mov r8, r8)
    4ec4:	00004725 	.word	0x00004725

00004ec8 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    4ec8:	b5b0      	push	{r4, r5, r7, lr}
    4eca:	b086      	sub	sp, #24
    4ecc:	af02      	add	r7, sp, #8
    4ece:	6078      	str	r0, [r7, #4]
    4ed0:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    4ed2:	1c3b      	adds	r3, r7, #0
    4ed4:	330d      	adds	r3, #13
    4ed6:	2201      	movs	r2, #1
    4ed8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    4eda:	1c3b      	adds	r3, r7, #0
    4edc:	330f      	adds	r3, #15
    4ede:	22c9      	movs	r2, #201	; 0xc9
    4ee0:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    4ee2:	1c3b      	adds	r3, r7, #0
    4ee4:	330e      	adds	r3, #14
    4ee6:	2200      	movs	r2, #0
    4ee8:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30) 
    4eea:	687b      	ldr	r3, [r7, #4]
    4eec:	2b30      	cmp	r3, #48	; 0x30
    4eee:	d808      	bhi.n	4f02 <spi_write_reg+0x3a>
	{	
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    4ef0:	1c3b      	adds	r3, r7, #0
    4ef2:	330f      	adds	r3, #15
    4ef4:	22c3      	movs	r2, #195	; 0xc3
    4ef6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    4ef8:	1c3b      	adds	r3, r7, #0
    4efa:	330e      	adds	r3, #14
    4efc:	2201      	movs	r2, #1
    4efe:	701a      	strb	r2, [r3, #0]
    4f00:	e007      	b.n	4f12 <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    4f02:	1c3b      	adds	r3, r7, #0
    4f04:	330f      	adds	r3, #15
    4f06:	22c9      	movs	r2, #201	; 0xc9
    4f08:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    4f0a:	1c3b      	adds	r3, r7, #0
    4f0c:	330e      	adds	r3, #14
    4f0e:	2200      	movs	r2, #0
    4f10:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    4f12:	1c3c      	adds	r4, r7, #0
    4f14:	340d      	adds	r4, #13
    4f16:	1c3b      	adds	r3, r7, #0
    4f18:	330f      	adds	r3, #15
    4f1a:	7819      	ldrb	r1, [r3, #0]
    4f1c:	687a      	ldr	r2, [r7, #4]
    4f1e:	683b      	ldr	r3, [r7, #0]
    4f20:	1c38      	adds	r0, r7, #0
    4f22:	300e      	adds	r0, #14
    4f24:	7800      	ldrb	r0, [r0, #0]
    4f26:	9000      	str	r0, [sp, #0]
    4f28:	1c08      	adds	r0, r1, #0
    4f2a:	1c11      	adds	r1, r2, #0
    4f2c:	1c1a      	adds	r2, r3, #0
    4f2e:	2304      	movs	r3, #4
    4f30:	4d15      	ldr	r5, [pc, #84]	; (4f88 <spi_write_reg+0xc0>)
    4f32:	47a8      	blx	r5
    4f34:	1c03      	adds	r3, r0, #0
    4f36:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4f38:	1c3b      	adds	r3, r7, #0
    4f3a:	330d      	adds	r3, #13
    4f3c:	781b      	ldrb	r3, [r3, #0]
    4f3e:	b25b      	sxtb	r3, r3
    4f40:	2b01      	cmp	r3, #1
    4f42:	d001      	beq.n	4f48 <spi_write_reg+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);		
		return N_FAIL;
    4f44:	2300      	movs	r3, #0
    4f46:	e01a      	b.n	4f7e <spi_write_reg+0xb6>
	}
	 
	result = spi_cmd_rsp(cmd);
    4f48:	1c3c      	adds	r4, r7, #0
    4f4a:	340d      	adds	r4, #13
    4f4c:	1c3b      	adds	r3, r7, #0
    4f4e:	330f      	adds	r3, #15
    4f50:	781b      	ldrb	r3, [r3, #0]
    4f52:	1c18      	adds	r0, r3, #0
    4f54:	4b0d      	ldr	r3, [pc, #52]	; (4f8c <spi_write_reg+0xc4>)
    4f56:	4798      	blx	r3
    4f58:	1c03      	adds	r3, r0, #0
    4f5a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4f5c:	1c3b      	adds	r3, r7, #0
    4f5e:	330d      	adds	r3, #13
    4f60:	781b      	ldrb	r3, [r3, #0]
    4f62:	b25b      	sxtb	r3, r3
    4f64:	2b01      	cmp	r3, #1
    4f66:	d009      	beq.n	4f7c <spi_write_reg+0xb4>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", addr);		
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4f68:	2300      	movs	r3, #0
    4f6a:	9300      	str	r3, [sp, #0]
    4f6c:	20cf      	movs	r0, #207	; 0xcf
    4f6e:	2100      	movs	r1, #0
    4f70:	2200      	movs	r2, #0
    4f72:	2300      	movs	r3, #0
    4f74:	4c04      	ldr	r4, [pc, #16]	; (4f88 <spi_write_reg+0xc0>)
    4f76:	47a0      	blx	r4
		return N_FAIL;
    4f78:	2300      	movs	r3, #0
    4f7a:	e000      	b.n	4f7e <spi_write_reg+0xb6>
	}

	return N_OK;
    4f7c:	2301      	movs	r3, #1
    4f7e:	b25b      	sxtb	r3, r3
}
    4f80:	1c18      	adds	r0, r3, #0
    4f82:	46bd      	mov	sp, r7
    4f84:	b004      	add	sp, #16
    4f86:	bdb0      	pop	{r4, r5, r7, pc}
    4f88:	0000484d 	.word	0x0000484d
    4f8c:	00004b41 	.word	0x00004b41

00004f90 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    4f90:	b5b0      	push	{r4, r5, r7, lr}
    4f92:	b088      	sub	sp, #32
    4f94:	af02      	add	r7, sp, #8
    4f96:	60f8      	str	r0, [r7, #12]
    4f98:	60b9      	str	r1, [r7, #8]
    4f9a:	1dbb      	adds	r3, r7, #6
    4f9c:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    4f9e:	1c3b      	adds	r3, r7, #0
    4fa0:	3317      	adds	r3, #23
    4fa2:	22c7      	movs	r2, #199	; 0xc7
    4fa4:	701a      	strb	r2, [r3, #0]

	/**
		Command 
	**/
	result = spi_cmd(cmd, addr, 0, size,0);
    4fa6:	1dbb      	adds	r3, r7, #6
    4fa8:	881b      	ldrh	r3, [r3, #0]
    4faa:	1c3c      	adds	r4, r7, #0
    4fac:	3416      	adds	r4, #22
    4fae:	1c3a      	adds	r2, r7, #0
    4fb0:	3217      	adds	r2, #23
    4fb2:	7811      	ldrb	r1, [r2, #0]
    4fb4:	68fa      	ldr	r2, [r7, #12]
    4fb6:	2000      	movs	r0, #0
    4fb8:	9000      	str	r0, [sp, #0]
    4fba:	1c08      	adds	r0, r1, #0
    4fbc:	1c11      	adds	r1, r2, #0
    4fbe:	2200      	movs	r2, #0
    4fc0:	4d22      	ldr	r5, [pc, #136]	; (504c <nm_spi_write+0xbc>)
    4fc2:	47a8      	blx	r5
    4fc4:	1c03      	adds	r3, r0, #0
    4fc6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4fc8:	1c3b      	adds	r3, r7, #0
    4fca:	3316      	adds	r3, #22
    4fcc:	781b      	ldrb	r3, [r3, #0]
    4fce:	b25b      	sxtb	r3, r3
    4fd0:	2b01      	cmp	r3, #1
    4fd2:	d001      	beq.n	4fd8 <nm_spi_write+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", addr);		
		return N_FAIL;
    4fd4:	2300      	movs	r3, #0
    4fd6:	e033      	b.n	5040 <nm_spi_write+0xb0>
	}
 
	result = spi_cmd_rsp(cmd);
    4fd8:	1c3c      	adds	r4, r7, #0
    4fda:	3416      	adds	r4, #22
    4fdc:	1c3b      	adds	r3, r7, #0
    4fde:	3317      	adds	r3, #23
    4fe0:	781b      	ldrb	r3, [r3, #0]
    4fe2:	1c18      	adds	r0, r3, #0
    4fe4:	4b1a      	ldr	r3, [pc, #104]	; (5050 <nm_spi_write+0xc0>)
    4fe6:	4798      	blx	r3
    4fe8:	1c03      	adds	r3, r0, #0
    4fea:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4fec:	1c3b      	adds	r3, r7, #0
    4fee:	3316      	adds	r3, #22
    4ff0:	781b      	ldrb	r3, [r3, #0]
    4ff2:	b25b      	sxtb	r3, r3
    4ff4:	2b01      	cmp	r3, #1
    4ff6:	d009      	beq.n	500c <nm_spi_write+0x7c>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", addr);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4ff8:	2300      	movs	r3, #0
    4ffa:	9300      	str	r3, [sp, #0]
    4ffc:	20cf      	movs	r0, #207	; 0xcf
    4ffe:	2100      	movs	r1, #0
    5000:	2200      	movs	r2, #0
    5002:	2300      	movs	r3, #0
    5004:	4c11      	ldr	r4, [pc, #68]	; (504c <nm_spi_write+0xbc>)
    5006:	47a0      	blx	r4
		return N_FAIL;		
    5008:	2300      	movs	r3, #0
    500a:	e019      	b.n	5040 <nm_spi_write+0xb0>
	}

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    500c:	1c3c      	adds	r4, r7, #0
    500e:	3416      	adds	r4, #22
    5010:	68ba      	ldr	r2, [r7, #8]
    5012:	1dbb      	adds	r3, r7, #6
    5014:	881b      	ldrh	r3, [r3, #0]
    5016:	1c10      	adds	r0, r2, #0
    5018:	1c19      	adds	r1, r3, #0
    501a:	4b0e      	ldr	r3, [pc, #56]	; (5054 <nm_spi_write+0xc4>)
    501c:	4798      	blx	r3
    501e:	1c03      	adds	r3, r0, #0
    5020:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5022:	1c3b      	adds	r3, r7, #0
    5024:	3316      	adds	r3, #22
    5026:	781b      	ldrb	r3, [r3, #0]
    5028:	b25b      	sxtb	r3, r3
    502a:	2b01      	cmp	r3, #1
    502c:	d007      	beq.n	503e <nm_spi_write+0xae>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    502e:	2300      	movs	r3, #0
    5030:	9300      	str	r3, [sp, #0]
    5032:	20cf      	movs	r0, #207	; 0xcf
    5034:	2100      	movs	r1, #0
    5036:	2200      	movs	r2, #0
    5038:	2300      	movs	r3, #0
    503a:	4c04      	ldr	r4, [pc, #16]	; (504c <nm_spi_write+0xbc>)
    503c:	47a0      	blx	r4
	}
		
	return N_OK;
    503e:	2301      	movs	r3, #1
    5040:	b25b      	sxtb	r3, r3
}
    5042:	1c18      	adds	r0, r3, #0
    5044:	46bd      	mov	sp, r7
    5046:	b006      	add	sp, #24
    5048:	bdb0      	pop	{r4, r5, r7, pc}
    504a:	46c0      	nop			; (mov r8, r8)
    504c:	0000484d 	.word	0x0000484d
    5050:	00004b41 	.word	0x00004b41
    5054:	00004d71 	.word	0x00004d71

00005058 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    5058:	b5b0      	push	{r4, r5, r7, lr}
    505a:	b086      	sub	sp, #24
    505c:	af02      	add	r7, sp, #8
    505e:	6078      	str	r0, [r7, #4]
    5060:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    5062:	1c3b      	adds	r3, r7, #0
    5064:	330d      	adds	r3, #13
    5066:	2201      	movs	r2, #1
    5068:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    506a:	1c3b      	adds	r3, r7, #0
    506c:	330f      	adds	r3, #15
    506e:	22ca      	movs	r2, #202	; 0xca
    5070:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    5072:	1c3b      	adds	r3, r7, #0
    5074:	330e      	adds	r3, #14
    5076:	2200      	movs	r2, #0
    5078:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff) 
    507a:	687b      	ldr	r3, [r7, #4]
    507c:	2bff      	cmp	r3, #255	; 0xff
    507e:	d808      	bhi.n	5092 <spi_read_reg+0x3a>
	{	
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    5080:	1c3b      	adds	r3, r7, #0
    5082:	330f      	adds	r3, #15
    5084:	22c4      	movs	r2, #196	; 0xc4
    5086:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    5088:	1c3b      	adds	r3, r7, #0
    508a:	330e      	adds	r3, #14
    508c:	2201      	movs	r2, #1
    508e:	701a      	strb	r2, [r3, #0]
    5090:	e007      	b.n	50a2 <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    5092:	1c3b      	adds	r3, r7, #0
    5094:	330f      	adds	r3, #15
    5096:	22ca      	movs	r2, #202	; 0xca
    5098:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    509a:	1c3b      	adds	r3, r7, #0
    509c:	330e      	adds	r3, #14
    509e:	2200      	movs	r2, #0
    50a0:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    50a2:	1c3c      	adds	r4, r7, #0
    50a4:	340d      	adds	r4, #13
    50a6:	1c3b      	adds	r3, r7, #0
    50a8:	330f      	adds	r3, #15
    50aa:	781a      	ldrb	r2, [r3, #0]
    50ac:	687b      	ldr	r3, [r7, #4]
    50ae:	1c39      	adds	r1, r7, #0
    50b0:	310e      	adds	r1, #14
    50b2:	7809      	ldrb	r1, [r1, #0]
    50b4:	9100      	str	r1, [sp, #0]
    50b6:	1c10      	adds	r0, r2, #0
    50b8:	1c19      	adds	r1, r3, #0
    50ba:	2200      	movs	r2, #0
    50bc:	2304      	movs	r3, #4
    50be:	4d2f      	ldr	r5, [pc, #188]	; (517c <spi_read_reg+0x124>)
    50c0:	47a8      	blx	r5
    50c2:	1c03      	adds	r3, r0, #0
    50c4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    50c6:	1c3b      	adds	r3, r7, #0
    50c8:	330d      	adds	r3, #13
    50ca:	781b      	ldrb	r3, [r3, #0]
    50cc:	b25b      	sxtb	r3, r3
    50ce:	2b01      	cmp	r3, #1
    50d0:	d001      	beq.n	50d6 <spi_read_reg+0x7e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
		return N_FAIL;
    50d2:	2300      	movs	r3, #0
    50d4:	e04d      	b.n	5172 <spi_read_reg+0x11a>
	} 
	
	result = spi_cmd_rsp(cmd);
    50d6:	1c3c      	adds	r4, r7, #0
    50d8:	340d      	adds	r4, #13
    50da:	1c3b      	adds	r3, r7, #0
    50dc:	330f      	adds	r3, #15
    50de:	781b      	ldrb	r3, [r3, #0]
    50e0:	1c18      	adds	r0, r3, #0
    50e2:	4b27      	ldr	r3, [pc, #156]	; (5180 <spi_read_reg+0x128>)
    50e4:	4798      	blx	r3
    50e6:	1c03      	adds	r3, r0, #0
    50e8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    50ea:	1c3b      	adds	r3, r7, #0
    50ec:	330d      	adds	r3, #13
    50ee:	781b      	ldrb	r3, [r3, #0]
    50f0:	b25b      	sxtb	r3, r3
    50f2:	2b01      	cmp	r3, #1
    50f4:	d009      	beq.n	510a <spi_read_reg+0xb2>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", addr);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    50f6:	2300      	movs	r3, #0
    50f8:	9300      	str	r3, [sp, #0]
    50fa:	20cf      	movs	r0, #207	; 0xcf
    50fc:	2100      	movs	r1, #0
    50fe:	2200      	movs	r2, #0
    5100:	2300      	movs	r3, #0
    5102:	4c1e      	ldr	r4, [pc, #120]	; (517c <spi_read_reg+0x124>)
    5104:	47a0      	blx	r4
		return N_FAIL;
    5106:	2300      	movs	r3, #0
    5108:	e033      	b.n	5172 <spi_read_reg+0x11a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    510a:	1c3c      	adds	r4, r7, #0
    510c:	340d      	adds	r4, #13
    510e:	1c3a      	adds	r2, r7, #0
    5110:	3208      	adds	r2, #8
    5112:	1c3b      	adds	r3, r7, #0
    5114:	330e      	adds	r3, #14
    5116:	781b      	ldrb	r3, [r3, #0]
    5118:	1c10      	adds	r0, r2, #0
    511a:	2104      	movs	r1, #4
    511c:	1c1a      	adds	r2, r3, #0
    511e:	4b19      	ldr	r3, [pc, #100]	; (5184 <spi_read_reg+0x12c>)
    5120:	4798      	blx	r3
    5122:	1c03      	adds	r3, r0, #0
    5124:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5126:	1c3b      	adds	r3, r7, #0
    5128:	330d      	adds	r3, #13
    512a:	781b      	ldrb	r3, [r3, #0]
    512c:	b25b      	sxtb	r3, r3
    512e:	2b01      	cmp	r3, #1
    5130:	d009      	beq.n	5146 <spi_read_reg+0xee>
		M2M_ERR("[nmi spi]: Failed data read...\n");
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5132:	2300      	movs	r3, #0
    5134:	9300      	str	r3, [sp, #0]
    5136:	20cf      	movs	r0, #207	; 0xcf
    5138:	2100      	movs	r1, #0
    513a:	2200      	movs	r2, #0
    513c:	2300      	movs	r3, #0
    513e:	4c0f      	ldr	r4, [pc, #60]	; (517c <spi_read_reg+0x124>)
    5140:	47a0      	blx	r4
		return N_FAIL;
    5142:	2300      	movs	r3, #0
    5144:	e015      	b.n	5172 <spi_read_reg+0x11a>
	}

	*u32data = tmp[0] | 
    5146:	1c3b      	adds	r3, r7, #0
    5148:	3308      	adds	r3, #8
    514a:	781b      	ldrb	r3, [r3, #0]
    514c:	1c1a      	adds	r2, r3, #0
		((uint32)tmp[1] << 8) |
    514e:	1c3b      	adds	r3, r7, #0
    5150:	3308      	adds	r3, #8
    5152:	785b      	ldrb	r3, [r3, #1]
    5154:	021b      	lsls	r3, r3, #8
		M2M_ERR("[nmi spi]: Failed data read...\n");
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
		return N_FAIL;
	}

	*u32data = tmp[0] | 
    5156:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    5158:	1c3b      	adds	r3, r7, #0
    515a:	3308      	adds	r3, #8
    515c:	789b      	ldrb	r3, [r3, #2]
    515e:	041b      	lsls	r3, r3, #16
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
		return N_FAIL;
	}

	*u32data = tmp[0] | 
		((uint32)tmp[1] << 8) |
    5160:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    5162:	1c3b      	adds	r3, r7, #0
    5164:	3308      	adds	r3, #8
    5166:	78db      	ldrb	r3, [r3, #3]
    5168:	061b      	lsls	r3, r3, #24
		return N_FAIL;
	}

	*u32data = tmp[0] | 
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    516a:	431a      	orrs	r2, r3
		M2M_ERR("[nmi spi]: Failed data read...\n");
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
		return N_FAIL;
	}

	*u32data = tmp[0] | 
    516c:	683b      	ldr	r3, [r7, #0]
    516e:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
	
	return N_OK;
    5170:	2301      	movs	r3, #1
    5172:	b25b      	sxtb	r3, r3
}
    5174:	1c18      	adds	r0, r3, #0
    5176:	46bd      	mov	sp, r7
    5178:	b004      	add	sp, #16
    517a:	bdb0      	pop	{r4, r5, r7, pc}
    517c:	0000484d 	.word	0x0000484d
    5180:	00004b41 	.word	0x00004b41
    5184:	00004c29 	.word	0x00004c29

00005188 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    5188:	b5b0      	push	{r4, r5, r7, lr}
    518a:	b088      	sub	sp, #32
    518c:	af02      	add	r7, sp, #8
    518e:	60f8      	str	r0, [r7, #12]
    5190:	60b9      	str	r1, [r7, #8]
    5192:	1dbb      	adds	r3, r7, #6
    5194:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    5196:	1c3b      	adds	r3, r7, #0
    5198:	3317      	adds	r3, #23
    519a:	22c8      	movs	r2, #200	; 0xc8
    519c:	701a      	strb	r2, [r3, #0]
	sint8 result;

	/**
		Command 
	**/
	result = spi_cmd(cmd, addr, 0, size,0);
    519e:	1dbb      	adds	r3, r7, #6
    51a0:	881b      	ldrh	r3, [r3, #0]
    51a2:	1c3c      	adds	r4, r7, #0
    51a4:	3416      	adds	r4, #22
    51a6:	1c3a      	adds	r2, r7, #0
    51a8:	3217      	adds	r2, #23
    51aa:	7811      	ldrb	r1, [r2, #0]
    51ac:	68fa      	ldr	r2, [r7, #12]
    51ae:	2000      	movs	r0, #0
    51b0:	9000      	str	r0, [sp, #0]
    51b2:	1c08      	adds	r0, r1, #0
    51b4:	1c11      	adds	r1, r2, #0
    51b6:	2200      	movs	r2, #0
    51b8:	4d23      	ldr	r5, [pc, #140]	; (5248 <nm_spi_read+0xc0>)
    51ba:	47a8      	blx	r5
    51bc:	1c03      	adds	r3, r0, #0
    51be:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    51c0:	1c3b      	adds	r3, r7, #0
    51c2:	3316      	adds	r3, #22
    51c4:	781b      	ldrb	r3, [r3, #0]
    51c6:	b25b      	sxtb	r3, r3
    51c8:	2b01      	cmp	r3, #1
    51ca:	d001      	beq.n	51d0 <nm_spi_read+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
		return N_FAIL;
    51cc:	2300      	movs	r3, #0
    51ce:	e036      	b.n	523e <nm_spi_read+0xb6>
	}  
 
	result = spi_cmd_rsp(cmd);
    51d0:	1c3c      	adds	r4, r7, #0
    51d2:	3416      	adds	r4, #22
    51d4:	1c3b      	adds	r3, r7, #0
    51d6:	3317      	adds	r3, #23
    51d8:	781b      	ldrb	r3, [r3, #0]
    51da:	1c18      	adds	r0, r3, #0
    51dc:	4b1b      	ldr	r3, [pc, #108]	; (524c <nm_spi_read+0xc4>)
    51de:	4798      	blx	r3
    51e0:	1c03      	adds	r3, r0, #0
    51e2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    51e4:	1c3b      	adds	r3, r7, #0
    51e6:	3316      	adds	r3, #22
    51e8:	781b      	ldrb	r3, [r3, #0]
    51ea:	b25b      	sxtb	r3, r3
    51ec:	2b01      	cmp	r3, #1
    51ee:	d009      	beq.n	5204 <nm_spi_read+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", addr);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    51f0:	2300      	movs	r3, #0
    51f2:	9300      	str	r3, [sp, #0]
    51f4:	20cf      	movs	r0, #207	; 0xcf
    51f6:	2100      	movs	r1, #0
    51f8:	2200      	movs	r2, #0
    51fa:	2300      	movs	r3, #0
    51fc:	4c12      	ldr	r4, [pc, #72]	; (5248 <nm_spi_read+0xc0>)
    51fe:	47a0      	blx	r4
		return N_FAIL;
    5200:	2300      	movs	r3, #0
    5202:	e01c      	b.n	523e <nm_spi_read+0xb6>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    5204:	1c3c      	adds	r4, r7, #0
    5206:	3416      	adds	r4, #22
    5208:	68ba      	ldr	r2, [r7, #8]
    520a:	1dbb      	adds	r3, r7, #6
    520c:	881b      	ldrh	r3, [r3, #0]
    520e:	1c10      	adds	r0, r2, #0
    5210:	1c19      	adds	r1, r3, #0
    5212:	2200      	movs	r2, #0
    5214:	4b0e      	ldr	r3, [pc, #56]	; (5250 <nm_spi_read+0xc8>)
    5216:	4798      	blx	r3
    5218:	1c03      	adds	r3, r0, #0
    521a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    521c:	1c3b      	adds	r3, r7, #0
    521e:	3316      	adds	r3, #22
    5220:	781b      	ldrb	r3, [r3, #0]
    5222:	b25b      	sxtb	r3, r3
    5224:	2b01      	cmp	r3, #1
    5226:	d009      	beq.n	523c <nm_spi_read+0xb4>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5228:	2300      	movs	r3, #0
    522a:	9300      	str	r3, [sp, #0]
    522c:	20cf      	movs	r0, #207	; 0xcf
    522e:	2100      	movs	r1, #0
    5230:	2200      	movs	r2, #0
    5232:	2300      	movs	r3, #0
    5234:	4c04      	ldr	r4, [pc, #16]	; (5248 <nm_spi_read+0xc0>)
    5236:	47a0      	blx	r4
		return N_FAIL;
    5238:	2300      	movs	r3, #0
    523a:	e000      	b.n	523e <nm_spi_read+0xb6>
	}

		
	return N_OK;
    523c:	2301      	movs	r3, #1
    523e:	b25b      	sxtb	r3, r3
}
    5240:	1c18      	adds	r0, r3, #0
    5242:	46bd      	mov	sp, r7
    5244:	b006      	add	sp, #24
    5246:	bdb0      	pop	{r4, r5, r7, pc}
    5248:	0000484d 	.word	0x0000484d
    524c:	00004b41 	.word	0x00004b41
    5250:	00004c29 	.word	0x00004c29

00005254 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    5254:	b580      	push	{r7, lr}
    5256:	b082      	sub	sp, #8
    5258:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    525a:	4b0c      	ldr	r3, [pc, #48]	; (528c <spi_init_pkt_sz+0x38>)
    525c:	1c18      	adds	r0, r3, #0
    525e:	4b0c      	ldr	r3, [pc, #48]	; (5290 <spi_init_pkt_sz+0x3c>)
    5260:	4798      	blx	r3
    5262:	1c03      	adds	r3, r0, #0
    5264:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    5266:	687b      	ldr	r3, [r7, #4]
    5268:	2270      	movs	r2, #112	; 0x70
    526a:	4393      	bics	r3, r2
    526c:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    526e:	687b      	ldr	r3, [r7, #4]
    5270:	2250      	movs	r2, #80	; 0x50
    5272:	4313      	orrs	r3, r2
    5274:	607b      	str	r3, [r7, #4]
    5276:	46c0      	nop			; (mov r8, r8)
	
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    5278:	4a04      	ldr	r2, [pc, #16]	; (528c <spi_init_pkt_sz+0x38>)
    527a:	687b      	ldr	r3, [r7, #4]
    527c:	1c10      	adds	r0, r2, #0
    527e:	1c19      	adds	r1, r3, #0
    5280:	4b04      	ldr	r3, [pc, #16]	; (5294 <spi_init_pkt_sz+0x40>)
    5282:	4798      	blx	r3
}
    5284:	46bd      	mov	sp, r7
    5286:	b002      	add	sp, #8
    5288:	bd80      	pop	{r7, pc}
    528a:	46c0      	nop			; (mov r8, r8)
    528c:	0000e824 	.word	0x0000e824
    5290:	000052d1 	.word	0x000052d1
    5294:	00005345 	.word	0x00005345

00005298 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_init(void)
{
    5298:	b580      	push	{r7, lr}
    529a:	b082      	sub	sp, #8
    529c:	af00      	add	r7, sp, #0
	uint32 chipid;

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    529e:	2380      	movs	r3, #128	; 0x80
    52a0:	015a      	lsls	r2, r3, #5
    52a2:	1d3b      	adds	r3, r7, #4
    52a4:	1c10      	adds	r0, r2, #0
    52a6:	1c19      	adds	r1, r3, #0
    52a8:	4b07      	ldr	r3, [pc, #28]	; (52c8 <nm_spi_init+0x30>)
    52aa:	4798      	blx	r3
    52ac:	1c03      	adds	r3, r0, #0
    52ae:	2b00      	cmp	r3, #0
    52b0:	d101      	bne.n	52b6 <nm_spi_init+0x1e>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
    52b2:	23fa      	movs	r3, #250	; 0xfa
    52b4:	e002      	b.n	52bc <nm_spi_init+0x24>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", chipid);
	spi_init_pkt_sz();
    52b6:	4b05      	ldr	r3, [pc, #20]	; (52cc <nm_spi_init+0x34>)
    52b8:	4798      	blx	r3


	return M2M_SUCCESS;
    52ba:	2300      	movs	r3, #0
    52bc:	b25b      	sxtb	r3, r3
}
    52be:	1c18      	adds	r0, r3, #0
    52c0:	46bd      	mov	sp, r7
    52c2:	b002      	add	sp, #8
    52c4:	bd80      	pop	{r7, pc}
    52c6:	46c0      	nop			; (mov r8, r8)
    52c8:	00005059 	.word	0x00005059
    52cc:	00005255 	.word	0x00005255

000052d0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    52d0:	b580      	push	{r7, lr}
    52d2:	b084      	sub	sp, #16
    52d4:	af00      	add	r7, sp, #0
    52d6:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    52d8:	687a      	ldr	r2, [r7, #4]
    52da:	1c3b      	adds	r3, r7, #0
    52dc:	330c      	adds	r3, #12
    52de:	1c10      	adds	r0, r2, #0
    52e0:	1c19      	adds	r1, r3, #0
    52e2:	4b03      	ldr	r3, [pc, #12]	; (52f0 <nm_spi_read_reg+0x20>)
    52e4:	4798      	blx	r3

	return u32Val;
    52e6:	68fb      	ldr	r3, [r7, #12]
}
    52e8:	1c18      	adds	r0, r3, #0
    52ea:	46bd      	mov	sp, r7
    52ec:	b004      	add	sp, #16
    52ee:	bd80      	pop	{r7, pc}
    52f0:	00005059 	.word	0x00005059

000052f4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    52f4:	b590      	push	{r4, r7, lr}
    52f6:	b085      	sub	sp, #20
    52f8:	af00      	add	r7, sp, #0
    52fa:	6078      	str	r0, [r7, #4]
    52fc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    52fe:	1c3c      	adds	r4, r7, #0
    5300:	340f      	adds	r4, #15
    5302:	687a      	ldr	r2, [r7, #4]
    5304:	683b      	ldr	r3, [r7, #0]
    5306:	1c10      	adds	r0, r2, #0
    5308:	1c19      	adds	r1, r3, #0
    530a:	4b0d      	ldr	r3, [pc, #52]	; (5340 <nm_spi_read_reg_with_ret+0x4c>)
    530c:	4798      	blx	r3
    530e:	1c03      	adds	r3, r0, #0
    5310:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5312:	1c3b      	adds	r3, r7, #0
    5314:	330f      	adds	r3, #15
    5316:	781b      	ldrb	r3, [r3, #0]
    5318:	b25b      	sxtb	r3, r3
    531a:	2b01      	cmp	r3, #1
    531c:	d104      	bne.n	5328 <nm_spi_read_reg_with_ret+0x34>
    531e:	1c3b      	adds	r3, r7, #0
    5320:	330f      	adds	r3, #15
    5322:	2200      	movs	r2, #0
    5324:	701a      	strb	r2, [r3, #0]
    5326:	e003      	b.n	5330 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5328:	1c3b      	adds	r3, r7, #0
    532a:	330f      	adds	r3, #15
    532c:	22fa      	movs	r2, #250	; 0xfa
    532e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    5330:	1c3b      	adds	r3, r7, #0
    5332:	330f      	adds	r3, #15
    5334:	781b      	ldrb	r3, [r3, #0]
    5336:	b25b      	sxtb	r3, r3
}
    5338:	1c18      	adds	r0, r3, #0
    533a:	46bd      	mov	sp, r7
    533c:	b005      	add	sp, #20
    533e:	bd90      	pop	{r4, r7, pc}
    5340:	00005059 	.word	0x00005059

00005344 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    5344:	b590      	push	{r4, r7, lr}
    5346:	b085      	sub	sp, #20
    5348:	af00      	add	r7, sp, #0
    534a:	6078      	str	r0, [r7, #4]
    534c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    534e:	1c3c      	adds	r4, r7, #0
    5350:	340f      	adds	r4, #15
    5352:	687a      	ldr	r2, [r7, #4]
    5354:	683b      	ldr	r3, [r7, #0]
    5356:	1c10      	adds	r0, r2, #0
    5358:	1c19      	adds	r1, r3, #0
    535a:	4b0d      	ldr	r3, [pc, #52]	; (5390 <nm_spi_write_reg+0x4c>)
    535c:	4798      	blx	r3
    535e:	1c03      	adds	r3, r0, #0
    5360:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5362:	1c3b      	adds	r3, r7, #0
    5364:	330f      	adds	r3, #15
    5366:	781b      	ldrb	r3, [r3, #0]
    5368:	b25b      	sxtb	r3, r3
    536a:	2b01      	cmp	r3, #1
    536c:	d104      	bne.n	5378 <nm_spi_write_reg+0x34>
    536e:	1c3b      	adds	r3, r7, #0
    5370:	330f      	adds	r3, #15
    5372:	2200      	movs	r2, #0
    5374:	701a      	strb	r2, [r3, #0]
    5376:	e003      	b.n	5380 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5378:	1c3b      	adds	r3, r7, #0
    537a:	330f      	adds	r3, #15
    537c:	22fa      	movs	r2, #250	; 0xfa
    537e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    5380:	1c3b      	adds	r3, r7, #0
    5382:	330f      	adds	r3, #15
    5384:	781b      	ldrb	r3, [r3, #0]
    5386:	b25b      	sxtb	r3, r3
}
    5388:	1c18      	adds	r0, r3, #0
    538a:	46bd      	mov	sp, r7
    538c:	b005      	add	sp, #20
    538e:	bd90      	pop	{r4, r7, pc}
    5390:	00004ec9 	.word	0x00004ec9

00005394 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    5394:	b590      	push	{r4, r7, lr}
    5396:	b087      	sub	sp, #28
    5398:	af00      	add	r7, sp, #0
    539a:	60f8      	str	r0, [r7, #12]
    539c:	60b9      	str	r1, [r7, #8]
    539e:	1dbb      	adds	r3, r7, #6
    53a0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    53a2:	1c3c      	adds	r4, r7, #0
    53a4:	3417      	adds	r4, #23
    53a6:	68f9      	ldr	r1, [r7, #12]
    53a8:	68ba      	ldr	r2, [r7, #8]
    53aa:	1dbb      	adds	r3, r7, #6
    53ac:	881b      	ldrh	r3, [r3, #0]
    53ae:	1c08      	adds	r0, r1, #0
    53b0:	1c11      	adds	r1, r2, #0
    53b2:	1c1a      	adds	r2, r3, #0
    53b4:	4b0d      	ldr	r3, [pc, #52]	; (53ec <nm_spi_read_block+0x58>)
    53b6:	4798      	blx	r3
    53b8:	1c03      	adds	r3, r0, #0
    53ba:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    53bc:	1c3b      	adds	r3, r7, #0
    53be:	3317      	adds	r3, #23
    53c0:	781b      	ldrb	r3, [r3, #0]
    53c2:	b25b      	sxtb	r3, r3
    53c4:	2b01      	cmp	r3, #1
    53c6:	d104      	bne.n	53d2 <nm_spi_read_block+0x3e>
    53c8:	1c3b      	adds	r3, r7, #0
    53ca:	3317      	adds	r3, #23
    53cc:	2200      	movs	r2, #0
    53ce:	701a      	strb	r2, [r3, #0]
    53d0:	e003      	b.n	53da <nm_spi_read_block+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    53d2:	1c3b      	adds	r3, r7, #0
    53d4:	3317      	adds	r3, #23
    53d6:	22fa      	movs	r2, #250	; 0xfa
    53d8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    53da:	1c3b      	adds	r3, r7, #0
    53dc:	3317      	adds	r3, #23
    53de:	781b      	ldrb	r3, [r3, #0]
    53e0:	b25b      	sxtb	r3, r3
}
    53e2:	1c18      	adds	r0, r3, #0
    53e4:	46bd      	mov	sp, r7
    53e6:	b007      	add	sp, #28
    53e8:	bd90      	pop	{r4, r7, pc}
    53ea:	46c0      	nop			; (mov r8, r8)
    53ec:	00005189 	.word	0x00005189

000053f0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    53f0:	b590      	push	{r4, r7, lr}
    53f2:	b087      	sub	sp, #28
    53f4:	af00      	add	r7, sp, #0
    53f6:	60f8      	str	r0, [r7, #12]
    53f8:	60b9      	str	r1, [r7, #8]
    53fa:	1dbb      	adds	r3, r7, #6
    53fc:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    53fe:	1c3c      	adds	r4, r7, #0
    5400:	3417      	adds	r4, #23
    5402:	68f9      	ldr	r1, [r7, #12]
    5404:	68ba      	ldr	r2, [r7, #8]
    5406:	1dbb      	adds	r3, r7, #6
    5408:	881b      	ldrh	r3, [r3, #0]
    540a:	1c08      	adds	r0, r1, #0
    540c:	1c11      	adds	r1, r2, #0
    540e:	1c1a      	adds	r2, r3, #0
    5410:	4b0d      	ldr	r3, [pc, #52]	; (5448 <nm_spi_write_block+0x58>)
    5412:	4798      	blx	r3
    5414:	1c03      	adds	r3, r0, #0
    5416:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5418:	1c3b      	adds	r3, r7, #0
    541a:	3317      	adds	r3, #23
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	b25b      	sxtb	r3, r3
    5420:	2b01      	cmp	r3, #1
    5422:	d104      	bne.n	542e <nm_spi_write_block+0x3e>
    5424:	1c3b      	adds	r3, r7, #0
    5426:	3317      	adds	r3, #23
    5428:	2200      	movs	r2, #0
    542a:	701a      	strb	r2, [r3, #0]
    542c:	e003      	b.n	5436 <nm_spi_write_block+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    542e:	1c3b      	adds	r3, r7, #0
    5430:	3317      	adds	r3, #23
    5432:	22fa      	movs	r2, #250	; 0xfa
    5434:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    5436:	1c3b      	adds	r3, r7, #0
    5438:	3317      	adds	r3, #23
    543a:	781b      	ldrb	r3, [r3, #0]
    543c:	b25b      	sxtb	r3, r3
}
    543e:	1c18      	adds	r0, r3, #0
    5440:	46bd      	mov	sp, r7
    5442:	b007      	add	sp, #28
    5444:	bd90      	pop	{r4, r7, pc}
    5446:	46c0      	nop			; (mov r8, r8)
    5448:	00004f91 	.word	0x00004f91

0000544c <spi_flash_rdid>:
#define SPI_FLASH_TX_CTL	(SPI_FLASH_BASE + 0x24)

#define DUMMY_REGISTER	(0x1084)

static uint32 spi_flash_rdid(void)
{
    544c:	b580      	push	{r7, lr}
    544e:	b082      	sub	sp, #8
    5450:	af00      	add	r7, sp, #0
	unsigned char cmd[1];
	uint32 reg;

	cmd[0] = 0x9f;
    5452:	1c3b      	adds	r3, r7, #0
    5454:	229f      	movs	r2, #159	; 0x9f
    5456:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 4);
    5458:	4b17      	ldr	r3, [pc, #92]	; (54b8 <spi_flash_rdid+0x6c>)
    545a:	1c18      	adds	r0, r3, #0
    545c:	2104      	movs	r1, #4
    545e:	4b17      	ldr	r3, [pc, #92]	; (54bc <spi_flash_rdid+0x70>)
    5460:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    5462:	1c3b      	adds	r3, r7, #0
    5464:	781b      	ldrb	r3, [r3, #0]
    5466:	4a16      	ldr	r2, [pc, #88]	; (54c0 <spi_flash_rdid+0x74>)
    5468:	1c10      	adds	r0, r2, #0
    546a:	1c19      	adds	r1, r3, #0
    546c:	4b13      	ldr	r3, [pc, #76]	; (54bc <spi_flash_rdid+0x70>)
    546e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    5470:	4b14      	ldr	r3, [pc, #80]	; (54c4 <spi_flash_rdid+0x78>)
    5472:	1c18      	adds	r0, r3, #0
    5474:	2101      	movs	r1, #1
    5476:	4b11      	ldr	r3, [pc, #68]	; (54bc <spi_flash_rdid+0x70>)
    5478:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, DUMMY_REGISTER);
    547a:	4a13      	ldr	r2, [pc, #76]	; (54c8 <spi_flash_rdid+0x7c>)
    547c:	4b13      	ldr	r3, [pc, #76]	; (54cc <spi_flash_rdid+0x80>)
    547e:	1c10      	adds	r0, r2, #0
    5480:	1c19      	adds	r1, r3, #0
    5482:	4b0e      	ldr	r3, [pc, #56]	; (54bc <spi_flash_rdid+0x70>)
    5484:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1<<7));
    5486:	4b12      	ldr	r3, [pc, #72]	; (54d0 <spi_flash_rdid+0x84>)
    5488:	1c18      	adds	r0, r3, #0
    548a:	2181      	movs	r1, #129	; 0x81
    548c:	4b0b      	ldr	r3, [pc, #44]	; (54bc <spi_flash_rdid+0x70>)
    548e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5490:	46c0      	nop			; (mov r8, r8)
    5492:	4b10      	ldr	r3, [pc, #64]	; (54d4 <spi_flash_rdid+0x88>)
    5494:	1c18      	adds	r0, r3, #0
    5496:	4b10      	ldr	r3, [pc, #64]	; (54d8 <spi_flash_rdid+0x8c>)
    5498:	4798      	blx	r3
    549a:	1c03      	adds	r3, r0, #0
    549c:	2b01      	cmp	r3, #1
    549e:	d1f8      	bne.n	5492 <spi_flash_rdid+0x46>
	reg = nm_read_reg(DUMMY_REGISTER);
    54a0:	4b0a      	ldr	r3, [pc, #40]	; (54cc <spi_flash_rdid+0x80>)
    54a2:	1c18      	adds	r0, r3, #0
    54a4:	4b0c      	ldr	r3, [pc, #48]	; (54d8 <spi_flash_rdid+0x8c>)
    54a6:	4798      	blx	r3
    54a8:	1c03      	adds	r3, r0, #0
    54aa:	607b      	str	r3, [r7, #4]
	M2M_PRINT("Flash id %x \n",reg);
	return reg;
    54ac:	687b      	ldr	r3, [r7, #4]
}
    54ae:	1c18      	adds	r0, r3, #0
    54b0:	46bd      	mov	sp, r7
    54b2:	b002      	add	sp, #8
    54b4:	bd80      	pop	{r7, pc}
    54b6:	46c0      	nop			; (mov r8, r8)
    54b8:	00010208 	.word	0x00010208
    54bc:	000040c9 	.word	0x000040c9
    54c0:	0001020c 	.word	0x0001020c
    54c4:	00010214 	.word	0x00010214
    54c8:	0001021c 	.word	0x0001021c
    54cc:	00001084 	.word	0x00001084
    54d0:	00010204 	.word	0x00010204
    54d4:	00010218 	.word	0x00010218
    54d8:	00004085 	.word	0x00004085

000054dc <probe_spi_flash>:

uint32 probe_spi_flash(void);

uint32 probe_spi_flash(void) 
{
    54dc:	b580      	push	{r7, lr}
    54de:	b084      	sub	sp, #16
    54e0:	af00      	add	r7, sp, #0
	uint32 pin_mux_0;
	uint32 orig_pin_mux_0;
	uint32 flashid;

	pin_mux_0 = nm_read_reg(0x1408);
    54e2:	4b18      	ldr	r3, [pc, #96]	; (5544 <probe_spi_flash+0x68>)
    54e4:	1c18      	adds	r0, r3, #0
    54e6:	4b18      	ldr	r3, [pc, #96]	; (5548 <probe_spi_flash+0x6c>)
    54e8:	4798      	blx	r3
    54ea:	1c03      	adds	r3, r0, #0
    54ec:	60fb      	str	r3, [r7, #12]
	orig_pin_mux_0 = pin_mux_0;
    54ee:	68fb      	ldr	r3, [r7, #12]
    54f0:	60bb      	str	r3, [r7, #8]

	if( (orig_pin_mux_0 & 0xffff000) != 0x1111000) {
    54f2:	68ba      	ldr	r2, [r7, #8]
    54f4:	4b15      	ldr	r3, [pc, #84]	; (554c <probe_spi_flash+0x70>)
    54f6:	401a      	ands	r2, r3
    54f8:	4b15      	ldr	r3, [pc, #84]	; (5550 <probe_spi_flash+0x74>)
    54fa:	429a      	cmp	r2, r3
    54fc:	d00d      	beq.n	551a <probe_spi_flash+0x3e>
		/* Select PINMUX to use SPI MASTER */
		pin_mux_0 &= ~0xffff000;
    54fe:	68fa      	ldr	r2, [r7, #12]
    5500:	4b14      	ldr	r3, [pc, #80]	; (5554 <probe_spi_flash+0x78>)
    5502:	4013      	ands	r3, r2
    5504:	60fb      	str	r3, [r7, #12]
		pin_mux_0 |= 0x1111000;
    5506:	68fb      	ldr	r3, [r7, #12]
    5508:	4a11      	ldr	r2, [pc, #68]	; (5550 <probe_spi_flash+0x74>)
    550a:	4313      	orrs	r3, r2
    550c:	60fb      	str	r3, [r7, #12]
		nm_write_reg(0x1408, pin_mux_0);
    550e:	4a0d      	ldr	r2, [pc, #52]	; (5544 <probe_spi_flash+0x68>)
    5510:	68fb      	ldr	r3, [r7, #12]
    5512:	1c10      	adds	r0, r2, #0
    5514:	1c19      	adds	r1, r3, #0
    5516:	4b10      	ldr	r3, [pc, #64]	; (5558 <probe_spi_flash+0x7c>)
    5518:	4798      	blx	r3
	}

	flashid = spi_flash_rdid();
    551a:	4b10      	ldr	r3, [pc, #64]	; (555c <probe_spi_flash+0x80>)
    551c:	4798      	blx	r3
    551e:	1c03      	adds	r3, r0, #0
    5520:	607b      	str	r3, [r7, #4]

	if( (orig_pin_mux_0 & 0xffff000) != 0x1111000) {
    5522:	68ba      	ldr	r2, [r7, #8]
    5524:	4b09      	ldr	r3, [pc, #36]	; (554c <probe_spi_flash+0x70>)
    5526:	401a      	ands	r2, r3
    5528:	4b09      	ldr	r3, [pc, #36]	; (5550 <probe_spi_flash+0x74>)
    552a:	429a      	cmp	r2, r3
    552c:	d005      	beq.n	553a <probe_spi_flash+0x5e>
		nm_write_reg(0x1408, orig_pin_mux_0);
    552e:	4a05      	ldr	r2, [pc, #20]	; (5544 <probe_spi_flash+0x68>)
    5530:	68bb      	ldr	r3, [r7, #8]
    5532:	1c10      	adds	r0, r2, #0
    5534:	1c19      	adds	r1, r3, #0
    5536:	4b08      	ldr	r3, [pc, #32]	; (5558 <probe_spi_flash+0x7c>)
    5538:	4798      	blx	r3
	}

	return flashid;
    553a:	687b      	ldr	r3, [r7, #4]
    553c:	1c18      	adds	r0, r3, #0
    553e:	46bd      	mov	sp, r7
    5540:	b004      	add	sp, #16
    5542:	bd80      	pop	{r7, pc}
    5544:	00001408 	.word	0x00001408
    5548:	00004085 	.word	0x00004085
    554c:	0ffff000 	.word	0x0ffff000
    5550:	01111000 	.word	0x01111000
    5554:	f0000fff 	.word	0xf0000fff
    5558:	000040c9 	.word	0x000040c9
    555c:	0000544d 	.word	0x0000544d

00005560 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount, uint8 u8Skip)
{
    5560:	b580      	push	{r7, lr}
    5562:	b086      	sub	sp, #24
    5564:	af00      	add	r7, sp, #0
    5566:	60b9      	str	r1, [r7, #8]
    5568:	607b      	str	r3, [r7, #4]
    556a:	1c3b      	adds	r3, r7, #0
    556c:	330f      	adds	r3, #15
    556e:	1c01      	adds	r1, r0, #0
    5570:	7019      	strb	r1, [r3, #0]
    5572:	1c3b      	adds	r3, r7, #0
    5574:	330e      	adds	r3, #14
    5576:	701a      	strb	r2, [r3, #0]
	if(u16ReadCount > 0)
    5578:	1c3b      	adds	r3, r7, #0
    557a:	3320      	adds	r3, #32
    557c:	881b      	ldrh	r3, [r3, #0]
    557e:	2b00      	cmp	r3, #0
    5580:	d100      	bne.n	5584 <Socket_ReadSocketData+0x24>
    5582:	e07f      	b.n	5684 <Socket_ReadSocketData+0x124>
	{
		uint32	u32Address = u32StartAddress;
    5584:	687b      	ldr	r3, [r7, #4]
    5586:	617b      	str	r3, [r7, #20]
		uint16	u16Read;
		if(!u8Skip)
    5588:	1c3b      	adds	r3, r7, #0
    558a:	3324      	adds	r3, #36	; 0x24
    558c:	781b      	ldrb	r3, [r3, #0]
    558e:	2b00      	cmp	r3, #0
    5590:	d104      	bne.n	559c <Socket_ReadSocketData+0x3c>
		{
			pstrRecv->u16RemainingSize = u16ReadCount;
    5592:	68bb      	ldr	r3, [r7, #8]
    5594:	1c3a      	adds	r2, r7, #0
    5596:	3220      	adds	r2, #32
    5598:	8812      	ldrh	r2, [r2, #0]
    559a:	80da      	strh	r2, [r3, #6]
		}
		do
		{
			u16Read = u16ReadCount;
    559c:	1c3b      	adds	r3, r7, #0
    559e:	3312      	adds	r3, #18
    55a0:	1c3a      	adds	r2, r7, #0
    55a2:	3220      	adds	r2, #32
    55a4:	8812      	ldrh	r2, [r2, #0]
    55a6:	801a      	strh	r2, [r3, #0]
			if(u16Read > gastrSockets[sock].u16UserBufferSize)
    55a8:	1c3b      	adds	r3, r7, #0
    55aa:	330f      	adds	r3, #15
    55ac:	781b      	ldrb	r3, [r3, #0]
    55ae:	b25b      	sxtb	r3, r3
    55b0:	4a36      	ldr	r2, [pc, #216]	; (568c <Socket_ReadSocketData+0x12c>)
    55b2:	00db      	lsls	r3, r3, #3
    55b4:	18d3      	adds	r3, r2, r3
    55b6:	685b      	ldr	r3, [r3, #4]
    55b8:	b29b      	uxth	r3, r3
    55ba:	1c3a      	adds	r2, r7, #0
    55bc:	3212      	adds	r2, #18
    55be:	8812      	ldrh	r2, [r2, #0]
    55c0:	429a      	cmp	r2, r3
    55c2:	d90a      	bls.n	55da <Socket_ReadSocketData+0x7a>
			{
				u16Read = gastrSockets[sock].u16UserBufferSize;
    55c4:	1c3b      	adds	r3, r7, #0
    55c6:	330f      	adds	r3, #15
    55c8:	781b      	ldrb	r3, [r3, #0]
    55ca:	b25b      	sxtb	r3, r3
    55cc:	1c3a      	adds	r2, r7, #0
    55ce:	3212      	adds	r2, #18
    55d0:	492e      	ldr	r1, [pc, #184]	; (568c <Socket_ReadSocketData+0x12c>)
    55d2:	00db      	lsls	r3, r3, #3
    55d4:	18cb      	adds	r3, r1, r3
    55d6:	685b      	ldr	r3, [r3, #4]
    55d8:	8013      	strh	r3, [r2, #0]
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read) == M2M_SUCCESS)
    55da:	1c3b      	adds	r3, r7, #0
    55dc:	330f      	adds	r3, #15
    55de:	2200      	movs	r2, #0
    55e0:	569a      	ldrsb	r2, [r3, r2]
    55e2:	4b2a      	ldr	r3, [pc, #168]	; (568c <Socket_ReadSocketData+0x12c>)
    55e4:	00d2      	lsls	r2, r2, #3
    55e6:	58d2      	ldr	r2, [r2, r3]
    55e8:	6979      	ldr	r1, [r7, #20]
    55ea:	1c3b      	adds	r3, r7, #0
    55ec:	3312      	adds	r3, #18
    55ee:	881b      	ldrh	r3, [r3, #0]
    55f0:	1c08      	adds	r0, r1, #0
    55f2:	1c11      	adds	r1, r2, #0
    55f4:	1c1a      	adds	r2, r3, #0
    55f6:	4b26      	ldr	r3, [pc, #152]	; (5690 <Socket_ReadSocketData+0x130>)
    55f8:	4798      	blx	r3
    55fa:	1c03      	adds	r3, r0, #0
    55fc:	2b00      	cmp	r3, #0
    55fe:	d140      	bne.n	5682 <Socket_ReadSocketData+0x122>
			{
				if(!u8Skip)
    5600:	1c3b      	adds	r3, r7, #0
    5602:	3324      	adds	r3, #36	; 0x24
    5604:	781b      	ldrb	r3, [r3, #0]
    5606:	2b00      	cmp	r3, #0
    5608:	d125      	bne.n	5656 <Socket_ReadSocketData+0xf6>
				{
					pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    560a:	1c3b      	adds	r3, r7, #0
    560c:	330f      	adds	r3, #15
    560e:	2200      	movs	r2, #0
    5610:	569a      	ldrsb	r2, [r3, r2]
    5612:	4b1e      	ldr	r3, [pc, #120]	; (568c <Socket_ReadSocketData+0x12c>)
    5614:	00d2      	lsls	r2, r2, #3
    5616:	58d2      	ldr	r2, [r2, r3]
    5618:	68bb      	ldr	r3, [r7, #8]
    561a:	601a      	str	r2, [r3, #0]
					pstrRecv->s16BufferSize		= u16Read;
    561c:	1c3b      	adds	r3, r7, #0
    561e:	3312      	adds	r3, #18
    5620:	881a      	ldrh	r2, [r3, #0]
    5622:	68bb      	ldr	r3, [r7, #8]
    5624:	809a      	strh	r2, [r3, #4]
					pstrRecv->u16RemainingSize	-= u16Read;
    5626:	68bb      	ldr	r3, [r7, #8]
    5628:	88da      	ldrh	r2, [r3, #6]
    562a:	1c3b      	adds	r3, r7, #0
    562c:	3312      	adds	r3, #18
    562e:	881b      	ldrh	r3, [r3, #0]
    5630:	1ad3      	subs	r3, r2, r3
    5632:	b29a      	uxth	r2, r3
    5634:	68bb      	ldr	r3, [r7, #8]
    5636:	80da      	strh	r2, [r3, #6]
					if (gpfAppSocketCb)
    5638:	4b16      	ldr	r3, [pc, #88]	; (5694 <Socket_ReadSocketData+0x134>)
    563a:	681b      	ldr	r3, [r3, #0]
    563c:	2b00      	cmp	r3, #0
    563e:	d00a      	beq.n	5656 <Socket_ReadSocketData+0xf6>
						gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    5640:	4b14      	ldr	r3, [pc, #80]	; (5694 <Socket_ReadSocketData+0x134>)
    5642:	681b      	ldr	r3, [r3, #0]
    5644:	1c3a      	adds	r2, r7, #0
    5646:	320f      	adds	r2, #15
    5648:	2000      	movs	r0, #0
    564a:	5610      	ldrsb	r0, [r2, r0]
    564c:	1c3a      	adds	r2, r7, #0
    564e:	320e      	adds	r2, #14
    5650:	7811      	ldrb	r1, [r2, #0]
    5652:	68ba      	ldr	r2, [r7, #8]
    5654:	4798      	blx	r3
				}
				u16ReadCount -= u16Read;
    5656:	1c3b      	adds	r3, r7, #0
    5658:	3320      	adds	r3, #32
    565a:	1c39      	adds	r1, r7, #0
    565c:	3120      	adds	r1, #32
    565e:	1c3a      	adds	r2, r7, #0
    5660:	3212      	adds	r2, #18
    5662:	8809      	ldrh	r1, [r1, #0]
    5664:	8812      	ldrh	r2, [r2, #0]
    5666:	1a8a      	subs	r2, r1, r2
    5668:	801a      	strh	r2, [r3, #0]
				u32Address += u16Read;
    566a:	1c3b      	adds	r3, r7, #0
    566c:	3312      	adds	r3, #18
    566e:	881b      	ldrh	r3, [r3, #0]
    5670:	697a      	ldr	r2, [r7, #20]
    5672:	18d3      	adds	r3, r2, r3
    5674:	617b      	str	r3, [r7, #20]
			}
			else
				break;
		}while(u16ReadCount != 0);
    5676:	1c3b      	adds	r3, r7, #0
    5678:	3320      	adds	r3, #32
    567a:	881b      	ldrh	r3, [r3, #0]
    567c:	2b00      	cmp	r3, #0
    567e:	d18d      	bne.n	559c <Socket_ReadSocketData+0x3c>
    5680:	e000      	b.n	5684 <Socket_ReadSocketData+0x124>
				}
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
				break;
    5682:	46c0      	nop			; (mov r8, r8)
		}while(u16ReadCount != 0);
	}
}
    5684:	46bd      	mov	sp, r7
    5686:	b006      	add	sp, #24
    5688:	bd80      	pop	{r7, pc}
    568a:	46c0      	nop			; (mov r8, r8)
    568c:	20001000 	.word	0x20001000
    5690:	00003245 	.word	0x00003245
    5694:	20001058 	.word	0x20001058

00005698 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address, uint8 grp)
{	
    5698:	b590      	push	{r4, r7, lr}
    569a:	b0b3      	sub	sp, #204	; 0xcc
    569c:	af02      	add	r7, sp, #8
    569e:	603a      	str	r2, [r7, #0]
    56a0:	1c1a      	adds	r2, r3, #0
    56a2:	1dfb      	adds	r3, r7, #7
    56a4:	7018      	strb	r0, [r3, #0]
    56a6:	1d3b      	adds	r3, r7, #4
    56a8:	8019      	strh	r1, [r3, #0]
    56aa:	1dbb      	adds	r3, r7, #6
    56ac:	701a      	strb	r2, [r3, #0]
	if(u8OpCode == SOCKET_CMD_BIND)
    56ae:	1dfb      	adds	r3, r7, #7
    56b0:	781b      	ldrb	r3, [r3, #0]
    56b2:	2b41      	cmp	r3, #65	; 0x41
    56b4:	d121      	bne.n	56fa <m2m_ip_cb+0x62>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply)) == M2M_SUCCESS)
    56b6:	683a      	ldr	r2, [r7, #0]
    56b8:	1c3b      	adds	r3, r7, #0
    56ba:	33b0      	adds	r3, #176	; 0xb0
    56bc:	1c10      	adds	r0, r2, #0
    56be:	1c19      	adds	r1, r3, #0
    56c0:	2204      	movs	r2, #4
    56c2:	4b72      	ldr	r3, [pc, #456]	; (588c <m2m_ip_cb+0x1f4>)
    56c4:	4798      	blx	r3
    56c6:	1c03      	adds	r3, r0, #0
    56c8:	2b00      	cmp	r3, #0
    56ca:	d115      	bne.n	56f8 <m2m_ip_cb+0x60>
		{
			strBind.status = strBindReply.s8Status;
    56cc:	1c3b      	adds	r3, r7, #0
    56ce:	33b0      	adds	r3, #176	; 0xb0
    56d0:	785a      	ldrb	r2, [r3, #1]
    56d2:	1c3b      	adds	r3, r7, #0
    56d4:	33ac      	adds	r3, #172	; 0xac
    56d6:	701a      	strb	r2, [r3, #0]
			if (gpfAppSocketCb)
    56d8:	4b6d      	ldr	r3, [pc, #436]	; (5890 <m2m_ip_cb+0x1f8>)
    56da:	681b      	ldr	r3, [r3, #0]
    56dc:	2b00      	cmp	r3, #0
    56de:	d00b      	beq.n	56f8 <m2m_ip_cb+0x60>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    56e0:	4b6b      	ldr	r3, [pc, #428]	; (5890 <m2m_ip_cb+0x1f8>)
    56e2:	681b      	ldr	r3, [r3, #0]
    56e4:	1c3a      	adds	r2, r7, #0
    56e6:	32b0      	adds	r2, #176	; 0xb0
    56e8:	7812      	ldrb	r2, [r2, #0]
    56ea:	b251      	sxtb	r1, r2
    56ec:	1c3a      	adds	r2, r7, #0
    56ee:	32ac      	adds	r2, #172	; 0xac
    56f0:	1c08      	adds	r0, r1, #0
    56f2:	2101      	movs	r1, #1
    56f4:	4798      	blx	r3
    56f6:	e1f6      	b.n	5ae6 <m2m_ip_cb+0x44e>
    56f8:	e1f5      	b.n	5ae6 <m2m_ip_cb+0x44e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    56fa:	1dfb      	adds	r3, r7, #7
    56fc:	781b      	ldrb	r3, [r3, #0]
    56fe:	2b42      	cmp	r3, #66	; 0x42
    5700:	d121      	bne.n	5746 <m2m_ip_cb+0xae>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply)) == M2M_SUCCESS)
    5702:	683a      	ldr	r2, [r7, #0]
    5704:	1c3b      	adds	r3, r7, #0
    5706:	33a8      	adds	r3, #168	; 0xa8
    5708:	1c10      	adds	r0, r2, #0
    570a:	1c19      	adds	r1, r3, #0
    570c:	2204      	movs	r2, #4
    570e:	4b5f      	ldr	r3, [pc, #380]	; (588c <m2m_ip_cb+0x1f4>)
    5710:	4798      	blx	r3
    5712:	1c03      	adds	r3, r0, #0
    5714:	2b00      	cmp	r3, #0
    5716:	d115      	bne.n	5744 <m2m_ip_cb+0xac>
		{
			strListen.status = strListenReply.s8Status;
    5718:	1c3b      	adds	r3, r7, #0
    571a:	33a8      	adds	r3, #168	; 0xa8
    571c:	785a      	ldrb	r2, [r3, #1]
    571e:	1c3b      	adds	r3, r7, #0
    5720:	33a4      	adds	r3, #164	; 0xa4
    5722:	701a      	strb	r2, [r3, #0]
			if (gpfAppSocketCb)
    5724:	4b5a      	ldr	r3, [pc, #360]	; (5890 <m2m_ip_cb+0x1f8>)
    5726:	681b      	ldr	r3, [r3, #0]
    5728:	2b00      	cmp	r3, #0
    572a:	d00b      	beq.n	5744 <m2m_ip_cb+0xac>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    572c:	4b58      	ldr	r3, [pc, #352]	; (5890 <m2m_ip_cb+0x1f8>)
    572e:	681b      	ldr	r3, [r3, #0]
    5730:	1c3a      	adds	r2, r7, #0
    5732:	32a8      	adds	r2, #168	; 0xa8
    5734:	7812      	ldrb	r2, [r2, #0]
    5736:	b251      	sxtb	r1, r2
    5738:	1c3a      	adds	r2, r7, #0
    573a:	32a4      	adds	r2, #164	; 0xa4
    573c:	1c08      	adds	r0, r1, #0
    573e:	2102      	movs	r1, #2
    5740:	4798      	blx	r3
    5742:	e1d0      	b.n	5ae6 <m2m_ip_cb+0x44e>
    5744:	e1cf      	b.n	5ae6 <m2m_ip_cb+0x44e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    5746:	1dfb      	adds	r3, r7, #7
    5748:	781b      	ldrb	r3, [r3, #0]
    574a:	2b43      	cmp	r3, #67	; 0x43
    574c:	d149      	bne.n	57e2 <m2m_ip_cb+0x14a>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply)) == M2M_SUCCESS)
    574e:	683a      	ldr	r2, [r7, #0]
    5750:	1c3b      	adds	r3, r7, #0
    5752:	3398      	adds	r3, #152	; 0x98
    5754:	1c10      	adds	r0, r2, #0
    5756:	1c19      	adds	r1, r3, #0
    5758:	220c      	movs	r2, #12
    575a:	4b4c      	ldr	r3, [pc, #304]	; (588c <m2m_ip_cb+0x1f4>)
    575c:	4798      	blx	r3
    575e:	1c03      	adds	r3, r0, #0
    5760:	2b00      	cmp	r3, #0
    5762:	d13d      	bne.n	57e0 <m2m_ip_cb+0x148>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    5764:	1c3b      	adds	r3, r7, #0
    5766:	3398      	adds	r3, #152	; 0x98
    5768:	7a5b      	ldrb	r3, [r3, #9]
    576a:	b25b      	sxtb	r3, r3
    576c:	2b00      	cmp	r3, #0
    576e:	db11      	blt.n	5794 <m2m_ip_cb+0xfc>
			{
				gastrSockets[strAcceptReply.sConnectedSock].bIsSSLSock 	= 0;
    5770:	1c3b      	adds	r3, r7, #0
    5772:	3398      	adds	r3, #152	; 0x98
    5774:	7a5b      	ldrb	r3, [r3, #9]
    5776:	b25b      	sxtb	r3, r3
    5778:	4a46      	ldr	r2, [pc, #280]	; (5894 <m2m_ip_cb+0x1fc>)
    577a:	00db      	lsls	r3, r3, #3
    577c:	18d3      	adds	r3, r2, r3
    577e:	2200      	movs	r2, #0
    5780:	71da      	strb	r2, [r3, #7]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    5782:	1c3b      	adds	r3, r7, #0
    5784:	3398      	adds	r3, #152	; 0x98
    5786:	7a5b      	ldrb	r3, [r3, #9]
    5788:	b25b      	sxtb	r3, r3
    578a:	4a42      	ldr	r2, [pc, #264]	; (5894 <m2m_ip_cb+0x1fc>)
    578c:	00db      	lsls	r3, r3, #3
    578e:	18d3      	adds	r3, r2, r3
    5790:	2201      	movs	r2, #1
    5792:	719a      	strb	r2, [r3, #6]
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    5794:	1c3b      	adds	r3, r7, #0
    5796:	3398      	adds	r3, #152	; 0x98
    5798:	7a5a      	ldrb	r2, [r3, #9]
    579a:	1c3b      	adds	r3, r7, #0
    579c:	3384      	adds	r3, #132	; 0x84
    579e:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    57a0:	1c3b      	adds	r3, r7, #0
    57a2:	3384      	adds	r3, #132	; 0x84
    57a4:	2202      	movs	r2, #2
    57a6:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    57a8:	1c3b      	adds	r3, r7, #0
    57aa:	3398      	adds	r3, #152	; 0x98
    57ac:	885a      	ldrh	r2, [r3, #2]
    57ae:	1c3b      	adds	r3, r7, #0
    57b0:	3384      	adds	r3, #132	; 0x84
    57b2:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    57b4:	1c3b      	adds	r3, r7, #0
    57b6:	3398      	adds	r3, #152	; 0x98
    57b8:	685a      	ldr	r2, [r3, #4]
    57ba:	1c3b      	adds	r3, r7, #0
    57bc:	3384      	adds	r3, #132	; 0x84
    57be:	609a      	str	r2, [r3, #8]
			if (gpfAppSocketCb)
    57c0:	4b33      	ldr	r3, [pc, #204]	; (5890 <m2m_ip_cb+0x1f8>)
    57c2:	681b      	ldr	r3, [r3, #0]
    57c4:	2b00      	cmp	r3, #0
    57c6:	d00b      	beq.n	57e0 <m2m_ip_cb+0x148>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    57c8:	4b31      	ldr	r3, [pc, #196]	; (5890 <m2m_ip_cb+0x1f8>)
    57ca:	681b      	ldr	r3, [r3, #0]
    57cc:	1c3a      	adds	r2, r7, #0
    57ce:	3298      	adds	r2, #152	; 0x98
    57d0:	7a12      	ldrb	r2, [r2, #8]
    57d2:	b251      	sxtb	r1, r2
    57d4:	1c3a      	adds	r2, r7, #0
    57d6:	3284      	adds	r2, #132	; 0x84
    57d8:	1c08      	adds	r0, r1, #0
    57da:	2104      	movs	r1, #4
    57dc:	4798      	blx	r3
    57de:	e182      	b.n	5ae6 <m2m_ip_cb+0x44e>
    57e0:	e181      	b.n	5ae6 <m2m_ip_cb+0x44e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    57e2:	1dfb      	adds	r3, r7, #7
    57e4:	781b      	ldrb	r3, [r3, #0]
    57e6:	2b44      	cmp	r3, #68	; 0x44
    57e8:	d003      	beq.n	57f2 <m2m_ip_cb+0x15a>
    57ea:	1dfb      	adds	r3, r7, #7
    57ec:	781b      	ldrb	r3, [r3, #0]
    57ee:	2b4b      	cmp	r3, #75	; 0x4b
    57f0:	d127      	bne.n	5842 <m2m_ip_cb+0x1aa>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply)) == M2M_SUCCESS)
    57f2:	683a      	ldr	r2, [r7, #0]
    57f4:	1c3b      	adds	r3, r7, #0
    57f6:	3380      	adds	r3, #128	; 0x80
    57f8:	1c10      	adds	r0, r2, #0
    57fa:	1c19      	adds	r1, r3, #0
    57fc:	2204      	movs	r2, #4
    57fe:	4b23      	ldr	r3, [pc, #140]	; (588c <m2m_ip_cb+0x1f4>)
    5800:	4798      	blx	r3
    5802:	1c03      	adds	r3, r0, #0
    5804:	2b00      	cmp	r3, #0
    5806:	d11b      	bne.n	5840 <m2m_ip_cb+0x1a8>
		{
			strConnMsg.sock		= strConnectReply.sock;
    5808:	1c3b      	adds	r3, r7, #0
    580a:	3380      	adds	r3, #128	; 0x80
    580c:	781a      	ldrb	r2, [r3, #0]
    580e:	1c3b      	adds	r3, r7, #0
    5810:	337c      	adds	r3, #124	; 0x7c
    5812:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    5814:	1c3b      	adds	r3, r7, #0
    5816:	3380      	adds	r3, #128	; 0x80
    5818:	785a      	ldrb	r2, [r3, #1]
    581a:	1c3b      	adds	r3, r7, #0
    581c:	337c      	adds	r3, #124	; 0x7c
    581e:	705a      	strb	r2, [r3, #1]
			if (gpfAppSocketCb)
    5820:	4b1b      	ldr	r3, [pc, #108]	; (5890 <m2m_ip_cb+0x1f8>)
    5822:	681b      	ldr	r3, [r3, #0]
    5824:	2b00      	cmp	r3, #0
    5826:	d00b      	beq.n	5840 <m2m_ip_cb+0x1a8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    5828:	4b19      	ldr	r3, [pc, #100]	; (5890 <m2m_ip_cb+0x1f8>)
    582a:	681b      	ldr	r3, [r3, #0]
    582c:	1c3a      	adds	r2, r7, #0
    582e:	3280      	adds	r2, #128	; 0x80
    5830:	7812      	ldrb	r2, [r2, #0]
    5832:	b251      	sxtb	r1, r2
    5834:	1c3a      	adds	r2, r7, #0
    5836:	327c      	adds	r2, #124	; 0x7c
    5838:	1c08      	adds	r0, r1, #0
    583a:	2105      	movs	r1, #5
    583c:	4798      	blx	r3
			if (gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    583e:	e152      	b.n	5ae6 <m2m_ip_cb+0x44e>
    5840:	e151      	b.n	5ae6 <m2m_ip_cb+0x44e>
			strConnMsg.s8Error	= strConnectReply.s8Error;
			if (gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    5842:	1dfb      	adds	r3, r7, #7
    5844:	781b      	ldrb	r3, [r3, #0]
    5846:	2b4a      	cmp	r3, #74	; 0x4a
    5848:	d128      	bne.n	589c <m2m_ip_cb+0x204>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply)) == M2M_SUCCESS)
    584a:	683a      	ldr	r2, [r7, #0]
    584c:	1c3b      	adds	r3, r7, #0
    584e:	3308      	adds	r3, #8
    5850:	1c10      	adds	r0, r2, #0
    5852:	1c19      	adds	r1, r3, #0
    5854:	2244      	movs	r2, #68	; 0x44
    5856:	4b0d      	ldr	r3, [pc, #52]	; (588c <m2m_ip_cb+0x1f4>)
    5858:	4798      	blx	r3
    585a:	1c03      	adds	r3, r0, #0
    585c:	2b00      	cmp	r3, #0
    585e:	d114      	bne.n	588a <m2m_ip_cb+0x1f2>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
    5860:	1c3b      	adds	r3, r7, #0
    5862:	3308      	adds	r3, #8
    5864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    5866:	1c3b      	adds	r3, r7, #0
    5868:	3308      	adds	r3, #8
    586a:	641a      	str	r2, [r3, #64]	; 0x40
			if (gpfAppResolveCb)
    586c:	4b0a      	ldr	r3, [pc, #40]	; (5898 <m2m_ip_cb+0x200>)
    586e:	681b      	ldr	r3, [r3, #0]
    5870:	2b00      	cmp	r3, #0
    5872:	d00a      	beq.n	588a <m2m_ip_cb+0x1f2>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    5874:	4b08      	ldr	r3, [pc, #32]	; (5898 <m2m_ip_cb+0x200>)
    5876:	681a      	ldr	r2, [r3, #0]
    5878:	1c3b      	adds	r3, r7, #0
    587a:	3308      	adds	r3, #8
    587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    587e:	1c39      	adds	r1, r7, #0
    5880:	3108      	adds	r1, #8
    5882:	1c08      	adds	r0, r1, #0
    5884:	1c19      	adds	r1, r3, #0
    5886:	4790      	blx	r2
    5888:	e12d      	b.n	5ae6 <m2m_ip_cb+0x44e>
    588a:	e12c      	b.n	5ae6 <m2m_ip_cb+0x44e>
    588c:	00003245 	.word	0x00003245
    5890:	20001058 	.word	0x20001058
    5894:	20001000 	.word	0x20001000
    5898:	2000105c 	.word	0x2000105c
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    589c:	1dfb      	adds	r3, r7, #7
    589e:	781b      	ldrb	r3, [r3, #0]
    58a0:	2b46      	cmp	r3, #70	; 0x46
    58a2:	d008      	beq.n	58b6 <m2m_ip_cb+0x21e>
    58a4:	1dfb      	adds	r3, r7, #7
    58a6:	781b      	ldrb	r3, [r3, #0]
    58a8:	2b48      	cmp	r3, #72	; 0x48
    58aa:	d004      	beq.n	58b6 <m2m_ip_cb+0x21e>
    58ac:	1dfb      	adds	r3, r7, #7
    58ae:	781b      	ldrb	r3, [r3, #0]
    58b0:	2b4d      	cmp	r3, #77	; 0x4d
    58b2:	d000      	beq.n	58b6 <m2m_ip_cb+0x21e>
    58b4:	e0d8      	b.n	5a68 <m2m_ip_cb+0x3d0>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    58b6:	1c3b      	adds	r3, r7, #0
    58b8:	33bf      	adds	r3, #191	; 0xbf
    58ba:	2206      	movs	r2, #6
    58bc:	701a      	strb	r2, [r3, #0]
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
    58be:	1dfb      	adds	r3, r7, #7
    58c0:	781b      	ldrb	r3, [r3, #0]
    58c2:	2b48      	cmp	r3, #72	; 0x48
    58c4:	d103      	bne.n	58ce <m2m_ip_cb+0x236>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    58c6:	1c3b      	adds	r3, r7, #0
    58c8:	33bf      	adds	r3, #191	; 0xbf
    58ca:	2209      	movs	r2, #9
    58cc:	701a      	strb	r2, [r3, #0]

		/* Read RECV REPLY data structure. 
		*/
		u16ReadSize = sizeof(tstrRecvReply);
    58ce:	1c3b      	adds	r3, r7, #0
    58d0:	33ba      	adds	r3, #186	; 0xba
    58d2:	2210      	movs	r2, #16
    58d4:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize) == M2M_SUCCESS)
    58d6:	6839      	ldr	r1, [r7, #0]
    58d8:	1c3a      	adds	r2, r7, #0
    58da:	326c      	adds	r2, #108	; 0x6c
    58dc:	1c3b      	adds	r3, r7, #0
    58de:	33ba      	adds	r3, #186	; 0xba
    58e0:	881b      	ldrh	r3, [r3, #0]
    58e2:	1c08      	adds	r0, r1, #0
    58e4:	1c11      	adds	r1, r2, #0
    58e6:	1c1a      	adds	r2, r3, #0
    58e8:	4b80      	ldr	r3, [pc, #512]	; (5aec <m2m_ip_cb+0x454>)
    58ea:	4798      	blx	r3
    58ec:	1c03      	adds	r3, r0, #0
    58ee:	2b00      	cmp	r3, #0
    58f0:	d000      	beq.n	58f4 <m2m_ip_cb+0x25c>
    58f2:	e0b8      	b.n	5a66 <m2m_ip_cb+0x3ce>
		{
			u32Address += u16ReadSize;
    58f4:	1c3b      	adds	r3, r7, #0
    58f6:	33ba      	adds	r3, #186	; 0xba
    58f8:	881b      	ldrh	r3, [r3, #0]
    58fa:	683a      	ldr	r2, [r7, #0]
    58fc:	18d3      	adds	r3, r2, r3
    58fe:	603b      	str	r3, [r7, #0]
			u16BufferSize -= u16ReadSize;
    5900:	1d3b      	adds	r3, r7, #4
    5902:	1d39      	adds	r1, r7, #4
    5904:	1c3a      	adds	r2, r7, #0
    5906:	32ba      	adds	r2, #186	; 0xba
    5908:	8809      	ldrh	r1, [r1, #0]
    590a:	8812      	ldrh	r2, [r2, #0]
    590c:	1a8a      	subs	r2, r1, r2
    590e:	801a      	strh	r2, [r3, #0]

			sock			= strRecvReply.sock;
    5910:	1c3b      	adds	r3, r7, #0
    5912:	33b9      	adds	r3, #185	; 0xb9
    5914:	1c3a      	adds	r2, r7, #0
    5916:	326c      	adds	r2, #108	; 0x6c
    5918:	7b12      	ldrb	r2, [r2, #12]
    591a:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    591c:	1c3b      	adds	r3, r7, #0
    591e:	33b6      	adds	r3, #182	; 0xb6
    5920:	1c3a      	adds	r2, r7, #0
    5922:	326c      	adds	r2, #108	; 0x6c
    5924:	8912      	ldrh	r2, [r2, #8]
    5926:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    5928:	1c3b      	adds	r3, r7, #0
    592a:	33b4      	adds	r3, #180	; 0xb4
    592c:	1c3a      	adds	r2, r7, #0
    592e:	326c      	adds	r2, #108	; 0x6c
    5930:	8952      	ldrh	r2, [r2, #10]
    5932:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    5934:	1c3b      	adds	r3, r7, #0
    5936:	336c      	adds	r3, #108	; 0x6c
    5938:	885a      	ldrh	r2, [r3, #2]
    593a:	1c3b      	adds	r3, r7, #0
    593c:	3354      	adds	r3, #84	; 0x54
    593e:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    5940:	1c3b      	adds	r3, r7, #0
    5942:	336c      	adds	r3, #108	; 0x6c
    5944:	685a      	ldr	r2, [r3, #4]
    5946:	1c3b      	adds	r3, r7, #0
    5948:	3354      	adds	r3, #84	; 0x54
    594a:	60da      	str	r2, [r3, #12]

			if(s16RecvStatus > 0)
    594c:	1c3b      	adds	r3, r7, #0
    594e:	33b6      	adds	r3, #182	; 0xb6
    5950:	2200      	movs	r2, #0
    5952:	5e9b      	ldrsh	r3, [r3, r2]
    5954:	2b00      	cmp	r3, #0
    5956:	dd6b      	ble.n	5a30 <m2m_ip_cb+0x398>
			{		
				/* Skip incoming bytes untill reaching the Start of Application Data. 
				*/
				u16ReadSize = u16DataOffset - u16ReadSize;
    5958:	1c3b      	adds	r3, r7, #0
    595a:	33ba      	adds	r3, #186	; 0xba
    595c:	1c39      	adds	r1, r7, #0
    595e:	31b4      	adds	r1, #180	; 0xb4
    5960:	1c3a      	adds	r2, r7, #0
    5962:	32ba      	adds	r2, #186	; 0xba
    5964:	8809      	ldrh	r1, [r1, #0]
    5966:	8812      	ldrh	r2, [r2, #0]
    5968:	1a8a      	subs	r2, r1, r2
    596a:	801a      	strh	r2, [r3, #0]
				Socket_ReadSocketData(sock,&strRecvMsg, u8CallbackMsgID,u32Address,u16ReadSize,1);
    596c:	1c3b      	adds	r3, r7, #0
    596e:	33b9      	adds	r3, #185	; 0xb9
    5970:	2000      	movs	r0, #0
    5972:	5618      	ldrsb	r0, [r3, r0]
    5974:	1c39      	adds	r1, r7, #0
    5976:	3154      	adds	r1, #84	; 0x54
    5978:	1c3b      	adds	r3, r7, #0
    597a:	33bf      	adds	r3, #191	; 0xbf
    597c:	781a      	ldrb	r2, [r3, #0]
    597e:	683b      	ldr	r3, [r7, #0]
    5980:	1c3c      	adds	r4, r7, #0
    5982:	34ba      	adds	r4, #186	; 0xba
    5984:	8824      	ldrh	r4, [r4, #0]
    5986:	9400      	str	r4, [sp, #0]
    5988:	2401      	movs	r4, #1
    598a:	9401      	str	r4, [sp, #4]
    598c:	4c58      	ldr	r4, [pc, #352]	; (5af0 <m2m_ip_cb+0x458>)
    598e:	47a0      	blx	r4
				u32Address += u16ReadSize;
    5990:	1c3b      	adds	r3, r7, #0
    5992:	33ba      	adds	r3, #186	; 0xba
    5994:	881b      	ldrh	r3, [r3, #0]
    5996:	683a      	ldr	r2, [r7, #0]
    5998:	18d3      	adds	r3, r2, r3
    599a:	603b      	str	r3, [r7, #0]
				u16BufferSize -= u16ReadSize;
    599c:	1d3b      	adds	r3, r7, #4
    599e:	1d39      	adds	r1, r7, #4
    59a0:	1c3a      	adds	r2, r7, #0
    59a2:	32ba      	adds	r2, #186	; 0xba
    59a4:	8809      	ldrh	r1, [r1, #0]
    59a6:	8812      	ldrh	r2, [r2, #0]
    59a8:	1a8a      	subs	r2, r1, r2
    59aa:	801a      	strh	r2, [r3, #0]
				/* Read the Application data and deliver it to the application
				callback in the given application buffer. If the buffer is smaller
				than the received data, the data is passed to the application in
				chunks according to its buffer size.
				*/
				u16ReadSize = (uint16)s16RecvStatus;
    59ac:	1c3b      	adds	r3, r7, #0
    59ae:	33ba      	adds	r3, #186	; 0xba
    59b0:	1c3a      	adds	r2, r7, #0
    59b2:	32b6      	adds	r2, #182	; 0xb6
    59b4:	8812      	ldrh	r2, [r2, #0]
    59b6:	801a      	strh	r2, [r3, #0]
				Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize, 0);
    59b8:	1c3b      	adds	r3, r7, #0
    59ba:	33b9      	adds	r3, #185	; 0xb9
    59bc:	2000      	movs	r0, #0
    59be:	5618      	ldrsb	r0, [r3, r0]
    59c0:	1c39      	adds	r1, r7, #0
    59c2:	3154      	adds	r1, #84	; 0x54
    59c4:	1c3b      	adds	r3, r7, #0
    59c6:	33bf      	adds	r3, #191	; 0xbf
    59c8:	781a      	ldrb	r2, [r3, #0]
    59ca:	683b      	ldr	r3, [r7, #0]
    59cc:	1c3c      	adds	r4, r7, #0
    59ce:	34ba      	adds	r4, #186	; 0xba
    59d0:	8824      	ldrh	r4, [r4, #0]
    59d2:	9400      	str	r4, [sp, #0]
    59d4:	2400      	movs	r4, #0
    59d6:	9401      	str	r4, [sp, #4]
    59d8:	4c45      	ldr	r4, [pc, #276]	; (5af0 <m2m_ip_cb+0x458>)
    59da:	47a0      	blx	r4
				u32Address += u16ReadSize;
    59dc:	1c3b      	adds	r3, r7, #0
    59de:	33ba      	adds	r3, #186	; 0xba
    59e0:	881b      	ldrh	r3, [r3, #0]
    59e2:	683a      	ldr	r2, [r7, #0]
    59e4:	18d3      	adds	r3, r2, r3
    59e6:	603b      	str	r3, [r7, #0]
				u16BufferSize -= u16ReadSize;
    59e8:	1d3b      	adds	r3, r7, #4
    59ea:	1d39      	adds	r1, r7, #4
    59ec:	1c3a      	adds	r2, r7, #0
    59ee:	32ba      	adds	r2, #186	; 0xba
    59f0:	8809      	ldrh	r1, [r1, #0]
    59f2:	8812      	ldrh	r2, [r2, #0]
    59f4:	1a8a      	subs	r2, r1, r2
    59f6:	801a      	strh	r2, [r3, #0]

				/* If there is any remaining data in the buffer, read it with no processing.
				*/
				if(u16BufferSize != 0)
    59f8:	1d3b      	adds	r3, r7, #4
    59fa:	881b      	ldrh	r3, [r3, #0]
    59fc:	2b00      	cmp	r3, #0
    59fe:	d032      	beq.n	5a66 <m2m_ip_cb+0x3ce>
				{
					u16ReadSize = u16BufferSize;
    5a00:	1c3b      	adds	r3, r7, #0
    5a02:	33ba      	adds	r3, #186	; 0xba
    5a04:	1d3a      	adds	r2, r7, #4
    5a06:	8812      	ldrh	r2, [r2, #0]
    5a08:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize, 1);
    5a0a:	1c3b      	adds	r3, r7, #0
    5a0c:	33b9      	adds	r3, #185	; 0xb9
    5a0e:	2000      	movs	r0, #0
    5a10:	5618      	ldrsb	r0, [r3, r0]
    5a12:	1c39      	adds	r1, r7, #0
    5a14:	3154      	adds	r1, #84	; 0x54
    5a16:	1c3b      	adds	r3, r7, #0
    5a18:	33bf      	adds	r3, #191	; 0xbf
    5a1a:	781a      	ldrb	r2, [r3, #0]
    5a1c:	683b      	ldr	r3, [r7, #0]
    5a1e:	1c3c      	adds	r4, r7, #0
    5a20:	34ba      	adds	r4, #186	; 0xba
    5a22:	8824      	ldrh	r4, [r4, #0]
    5a24:	9400      	str	r4, [sp, #0]
    5a26:	2401      	movs	r4, #1
    5a28:	9401      	str	r4, [sp, #4]
    5a2a:	4c31      	ldr	r4, [pc, #196]	; (5af0 <m2m_ip_cb+0x458>)
    5a2c:	47a0      	blx	r4
			if (gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    5a2e:	e05a      	b.n	5ae6 <m2m_ip_cb+0x44e>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize, 1);
				}
			}
			else
			{
				strRecvMsg.s16BufferSize	= s16RecvStatus;
    5a30:	1c3b      	adds	r3, r7, #0
    5a32:	3354      	adds	r3, #84	; 0x54
    5a34:	1c3a      	adds	r2, r7, #0
    5a36:	32b6      	adds	r2, #182	; 0xb6
    5a38:	8812      	ldrh	r2, [r2, #0]
    5a3a:	809a      	strh	r2, [r3, #4]
				strRecvMsg.pu8Buffer		= NULL;
    5a3c:	1c3b      	adds	r3, r7, #0
    5a3e:	3354      	adds	r3, #84	; 0x54
    5a40:	2200      	movs	r2, #0
    5a42:	601a      	str	r2, [r3, #0]
				if (gpfAppSocketCb)
    5a44:	4b2b      	ldr	r3, [pc, #172]	; (5af4 <m2m_ip_cb+0x45c>)
    5a46:	681b      	ldr	r3, [r3, #0]
    5a48:	2b00      	cmp	r3, #0
    5a4a:	d00c      	beq.n	5a66 <m2m_ip_cb+0x3ce>
					gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    5a4c:	4b29      	ldr	r3, [pc, #164]	; (5af4 <m2m_ip_cb+0x45c>)
    5a4e:	681b      	ldr	r3, [r3, #0]
    5a50:	1c3a      	adds	r2, r7, #0
    5a52:	32b9      	adds	r2, #185	; 0xb9
    5a54:	2000      	movs	r0, #0
    5a56:	5610      	ldrsb	r0, [r2, r0]
    5a58:	1c3a      	adds	r2, r7, #0
    5a5a:	32bf      	adds	r2, #191	; 0xbf
    5a5c:	7811      	ldrb	r1, [r2, #0]
    5a5e:	1c3a      	adds	r2, r7, #0
    5a60:	3254      	adds	r2, #84	; 0x54
    5a62:	4798      	blx	r3
			if (gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    5a64:	e03f      	b.n	5ae6 <m2m_ip_cb+0x44e>
    5a66:	e03e      	b.n	5ae6 <m2m_ip_cb+0x44e>
				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    5a68:	1dfb      	adds	r3, r7, #7
    5a6a:	781b      	ldrb	r3, [r3, #0]
    5a6c:	2b45      	cmp	r3, #69	; 0x45
    5a6e:	d007      	beq.n	5a80 <m2m_ip_cb+0x3e8>
    5a70:	1dfb      	adds	r3, r7, #7
    5a72:	781b      	ldrb	r3, [r3, #0]
    5a74:	2b47      	cmp	r3, #71	; 0x47
    5a76:	d003      	beq.n	5a80 <m2m_ip_cb+0x3e8>
    5a78:	1dfb      	adds	r3, r7, #7
    5a7a:	781b      	ldrb	r3, [r3, #0]
    5a7c:	2b4c      	cmp	r3, #76	; 0x4c
    5a7e:	d132      	bne.n	5ae6 <m2m_ip_cb+0x44e>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    5a80:	1c3b      	adds	r3, r7, #0
    5a82:	33be      	adds	r3, #190	; 0xbe
    5a84:	2207      	movs	r2, #7
    5a86:	701a      	strb	r2, [r3, #0]

		if(u8OpCode == SOCKET_CMD_SENDTO)
    5a88:	1dfb      	adds	r3, r7, #7
    5a8a:	781b      	ldrb	r3, [r3, #0]
    5a8c:	2b47      	cmp	r3, #71	; 0x47
    5a8e:	d103      	bne.n	5a98 <m2m_ip_cb+0x400>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    5a90:	1c3b      	adds	r3, r7, #0
    5a92:	33be      	adds	r3, #190	; 0xbe
    5a94:	2208      	movs	r2, #8
    5a96:	701a      	strb	r2, [r3, #0]

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply)) == M2M_SUCCESS)
    5a98:	683a      	ldr	r2, [r7, #0]
    5a9a:	1c3b      	adds	r3, r7, #0
    5a9c:	334c      	adds	r3, #76	; 0x4c
    5a9e:	1c10      	adds	r0, r2, #0
    5aa0:	1c19      	adds	r1, r3, #0
    5aa2:	2204      	movs	r2, #4
    5aa4:	4b11      	ldr	r3, [pc, #68]	; (5aec <m2m_ip_cb+0x454>)
    5aa6:	4798      	blx	r3
    5aa8:	1c03      	adds	r3, r0, #0
    5aaa:	2b00      	cmp	r3, #0
    5aac:	d11b      	bne.n	5ae6 <m2m_ip_cb+0x44e>
		{
			sock = strReply.sock;
    5aae:	1c3b      	adds	r3, r7, #0
    5ab0:	33bd      	adds	r3, #189	; 0xbd
    5ab2:	1c3a      	adds	r2, r7, #0
    5ab4:	324c      	adds	r2, #76	; 0x4c
    5ab6:	7812      	ldrb	r2, [r2, #0]
    5ab8:	701a      	strb	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    5aba:	1c3b      	adds	r3, r7, #0
    5abc:	334c      	adds	r3, #76	; 0x4c
    5abe:	885a      	ldrh	r2, [r3, #2]
    5ac0:	1c3b      	adds	r3, r7, #0
    5ac2:	3352      	adds	r3, #82	; 0x52
    5ac4:	801a      	strh	r2, [r3, #0]
			if (gpfAppSocketCb)
    5ac6:	4b0b      	ldr	r3, [pc, #44]	; (5af4 <m2m_ip_cb+0x45c>)
    5ac8:	681b      	ldr	r3, [r3, #0]
    5aca:	2b00      	cmp	r3, #0
    5acc:	d00b      	beq.n	5ae6 <m2m_ip_cb+0x44e>
				gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    5ace:	4b09      	ldr	r3, [pc, #36]	; (5af4 <m2m_ip_cb+0x45c>)
    5ad0:	681b      	ldr	r3, [r3, #0]
    5ad2:	1c3a      	adds	r2, r7, #0
    5ad4:	32bd      	adds	r2, #189	; 0xbd
    5ad6:	2000      	movs	r0, #0
    5ad8:	5610      	ldrsb	r0, [r2, r0]
    5ada:	1c3a      	adds	r2, r7, #0
    5adc:	32be      	adds	r2, #190	; 0xbe
    5ade:	7811      	ldrb	r1, [r2, #0]
    5ae0:	1c3a      	adds	r2, r7, #0
    5ae2:	3252      	adds	r2, #82	; 0x52
    5ae4:	4798      	blx	r3
		}
	}	
}
    5ae6:	46bd      	mov	sp, r7
    5ae8:	b031      	add	sp, #196	; 0xc4
    5aea:	bd90      	pop	{r4, r7, pc}
    5aec:	00003245 	.word	0x00003245
    5af0:	00005561 	.word	0x00005561
    5af4:	20001058 	.word	0x20001058

00005af8 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    5af8:	b580      	push	{r7, lr}
    5afa:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    5afc:	4b05      	ldr	r3, [pc, #20]	; (5b14 <socketInit+0x1c>)
    5afe:	1c18      	adds	r0, r3, #0
    5b00:	2100      	movs	r1, #0
    5b02:	2258      	movs	r2, #88	; 0x58
    5b04:	4b04      	ldr	r3, [pc, #16]	; (5b18 <socketInit+0x20>)
    5b06:	4798      	blx	r3
	hif_register_ip_cb(m2m_ip_cb);
    5b08:	4b04      	ldr	r3, [pc, #16]	; (5b1c <socketInit+0x24>)
    5b0a:	1c18      	adds	r0, r3, #0
    5b0c:	4b04      	ldr	r3, [pc, #16]	; (5b20 <socketInit+0x28>)
    5b0e:	4798      	blx	r3
}
    5b10:	46bd      	mov	sp, r7
    5b12:	bd80      	pop	{r7, pc}
    5b14:	20001000 	.word	0x20001000
    5b18:	00002bb5 	.word	0x00002bb5
    5b1c:	00005699 	.word	0x00005699
    5b20:	000032f9 	.word	0x000032f9

00005b24 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    5b24:	b580      	push	{r7, lr}
    5b26:	b082      	sub	sp, #8
    5b28:	af00      	add	r7, sp, #0
    5b2a:	6078      	str	r0, [r7, #4]
    5b2c:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    5b2e:	4b04      	ldr	r3, [pc, #16]	; (5b40 <registerSocketCallback+0x1c>)
    5b30:	687a      	ldr	r2, [r7, #4]
    5b32:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    5b34:	4b03      	ldr	r3, [pc, #12]	; (5b44 <registerSocketCallback+0x20>)
    5b36:	683a      	ldr	r2, [r7, #0]
    5b38:	601a      	str	r2, [r3, #0]
}
    5b3a:	46bd      	mov	sp, r7
    5b3c:	b002      	add	sp, #8
    5b3e:	bd80      	pop	{r7, pc}
    5b40:	20001058 	.word	0x20001058
    5b44:	2000105c 	.word	0x2000105c

00005b48 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    5b48:	b580      	push	{r7, lr}
    5b4a:	b084      	sub	sp, #16
    5b4c:	af00      	add	r7, sp, #0
    5b4e:	1dbb      	adds	r3, r7, #6
    5b50:	8018      	strh	r0, [r3, #0]
    5b52:	1d7b      	adds	r3, r7, #5
    5b54:	7019      	strb	r1, [r3, #0]
    5b56:	1d3b      	adds	r3, r7, #4
    5b58:	701a      	strb	r2, [r3, #0]
	SOCKET	sock = -1;
    5b5a:	1c3b      	adds	r3, r7, #0
    5b5c:	330f      	adds	r3, #15
    5b5e:	22ff      	movs	r2, #255	; 0xff
    5b60:	701a      	strb	r2, [r3, #0]
	uint8	u8Count,u8SocketCount = MAX_SOCKET;
    5b62:	1c3b      	adds	r3, r7, #0
    5b64:	330d      	adds	r3, #13
    5b66:	220b      	movs	r2, #11
    5b68:	701a      	strb	r2, [r3, #0]

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    5b6a:	1dbb      	adds	r3, r7, #6
    5b6c:	881b      	ldrh	r3, [r3, #0]
    5b6e:	2b02      	cmp	r3, #2
    5b70:	d155      	bne.n	5c1e <socket+0xd6>
	{
		if(u8Type == SOCK_STREAM)
    5b72:	1d7b      	adds	r3, r7, #5
    5b74:	781b      	ldrb	r3, [r3, #0]
    5b76:	2b01      	cmp	r3, #1
    5b78:	d108      	bne.n	5b8c <socket+0x44>
		{
			u8SocketCount = TCP_SOCK_MAX;
    5b7a:	1c3b      	adds	r3, r7, #0
    5b7c:	330d      	adds	r3, #13
    5b7e:	2207      	movs	r2, #7
    5b80:	701a      	strb	r2, [r3, #0]
			u8Count = 0;
    5b82:	1c3b      	adds	r3, r7, #0
    5b84:	330e      	adds	r3, #14
    5b86:	2200      	movs	r2, #0
    5b88:	701a      	strb	r2, [r3, #0]
    5b8a:	e010      	b.n	5bae <socket+0x66>
		}
		else if(u8Type == SOCK_DGRAM)
    5b8c:	1d7b      	adds	r3, r7, #5
    5b8e:	781b      	ldrb	r3, [r3, #0]
    5b90:	2b02      	cmp	r3, #2
    5b92:	d108      	bne.n	5ba6 <socket+0x5e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    5b94:	1c3b      	adds	r3, r7, #0
    5b96:	330d      	adds	r3, #13
    5b98:	220b      	movs	r2, #11
    5b9a:	701a      	strb	r2, [r3, #0]
			u8Count = TCP_SOCK_MAX;
    5b9c:	1c3b      	adds	r3, r7, #0
    5b9e:	330e      	adds	r3, #14
    5ba0:	2207      	movs	r2, #7
    5ba2:	701a      	strb	r2, [r3, #0]
    5ba4:	e003      	b.n	5bae <socket+0x66>
		}
		else
			return sock;
    5ba6:	1c3b      	adds	r3, r7, #0
    5ba8:	330f      	adds	r3, #15
    5baa:	781b      	ldrb	r3, [r3, #0]
    5bac:	e03a      	b.n	5c24 <socket+0xdc>

		for(;u8Count < u8SocketCount; u8Count ++)
    5bae:	e02e      	b.n	5c0e <socket+0xc6>
		{
			if(gastrSockets[u8Count].bIsUsed == 0)
    5bb0:	1c3b      	adds	r3, r7, #0
    5bb2:	330e      	adds	r3, #14
    5bb4:	781b      	ldrb	r3, [r3, #0]
    5bb6:	4a1e      	ldr	r2, [pc, #120]	; (5c30 <socket+0xe8>)
    5bb8:	00db      	lsls	r3, r3, #3
    5bba:	18d3      	adds	r3, r2, r3
    5bbc:	685b      	ldr	r3, [r3, #4]
    5bbe:	021b      	lsls	r3, r3, #8
    5bc0:	0e1b      	lsrs	r3, r3, #24
    5bc2:	b2db      	uxtb	r3, r3
    5bc4:	2b00      	cmp	r3, #0
    5bc6:	d11b      	bne.n	5c00 <socket+0xb8>
			{
				gastrSockets[u8Count].bIsUsed = 1;
    5bc8:	1c3b      	adds	r3, r7, #0
    5bca:	330e      	adds	r3, #14
    5bcc:	781b      	ldrb	r3, [r3, #0]
    5bce:	4a18      	ldr	r2, [pc, #96]	; (5c30 <socket+0xe8>)
    5bd0:	00db      	lsls	r3, r3, #3
    5bd2:	18d3      	adds	r3, r2, r3
    5bd4:	2201      	movs	r2, #1
    5bd6:	719a      	strb	r2, [r3, #6]
				if(u8Flags & SOCKET_FLAGS_SSL)
    5bd8:	1d3b      	adds	r3, r7, #4
    5bda:	781a      	ldrb	r2, [r3, #0]
    5bdc:	2301      	movs	r3, #1
    5bde:	4013      	ands	r3, r2
    5be0:	d007      	beq.n	5bf2 <socket+0xaa>
					gastrSockets[u8Count].bIsSSLSock = 1;
    5be2:	1c3b      	adds	r3, r7, #0
    5be4:	330e      	adds	r3, #14
    5be6:	781b      	ldrb	r3, [r3, #0]
    5be8:	4a11      	ldr	r2, [pc, #68]	; (5c30 <socket+0xe8>)
    5bea:	00db      	lsls	r3, r3, #3
    5bec:	18d3      	adds	r3, r2, r3
    5bee:	2201      	movs	r2, #1
    5bf0:	71da      	strb	r2, [r3, #7]
				sock = (SOCKET)u8Count;
    5bf2:	1c3b      	adds	r3, r7, #0
    5bf4:	330f      	adds	r3, #15
    5bf6:	1c3a      	adds	r2, r7, #0
    5bf8:	320e      	adds	r2, #14
    5bfa:	7812      	ldrb	r2, [r2, #0]
    5bfc:	701a      	strb	r2, [r3, #0]
				break;
    5bfe:	e00e      	b.n	5c1e <socket+0xd6>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    5c00:	1c3b      	adds	r3, r7, #0
    5c02:	330e      	adds	r3, #14
    5c04:	781a      	ldrb	r2, [r3, #0]
    5c06:	1c3b      	adds	r3, r7, #0
    5c08:	330e      	adds	r3, #14
    5c0a:	3201      	adds	r2, #1
    5c0c:	701a      	strb	r2, [r3, #0]
    5c0e:	1c3a      	adds	r2, r7, #0
    5c10:	320e      	adds	r2, #14
    5c12:	1c3b      	adds	r3, r7, #0
    5c14:	330d      	adds	r3, #13
    5c16:	7812      	ldrb	r2, [r2, #0]
    5c18:	781b      	ldrb	r3, [r3, #0]
    5c1a:	429a      	cmp	r2, r3
    5c1c:	d3c8      	bcc.n	5bb0 <socket+0x68>
				sock = (SOCKET)u8Count;
				break;
			}
		}
	}
	return sock;
    5c1e:	1c3b      	adds	r3, r7, #0
    5c20:	330f      	adds	r3, #15
    5c22:	781b      	ldrb	r3, [r3, #0]
    5c24:	b25b      	sxtb	r3, r3
}
    5c26:	1c18      	adds	r0, r3, #0
    5c28:	46bd      	mov	sp, r7
    5c2a:	b004      	add	sp, #16
    5c2c:	bd80      	pop	{r7, pc}
    5c2e:	46c0      	nop			; (mov r8, r8)
    5c30:	20001000 	.word	0x20001000

00005c34 <bind>:

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    5c34:	b5b0      	push	{r4, r5, r7, lr}
    5c36:	b08a      	sub	sp, #40	; 0x28
    5c38:	af04      	add	r7, sp, #16
    5c3a:	6039      	str	r1, [r7, #0]
    5c3c:	1dfb      	adds	r3, r7, #7
    5c3e:	1c01      	adds	r1, r0, #0
    5c40:	7019      	strb	r1, [r3, #0]
    5c42:	1dbb      	adds	r3, r7, #6
    5c44:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    5c46:	1c3b      	adds	r3, r7, #0
    5c48:	3317      	adds	r3, #23
    5c4a:	22fa      	movs	r2, #250	; 0xfa
    5c4c:	701a      	strb	r2, [r3, #0]
	if((pstrAddr != NULL) && (sock >= 0))
    5c4e:	683b      	ldr	r3, [r7, #0]
    5c50:	2b00      	cmp	r3, #0
    5c52:	d03e      	beq.n	5cd2 <bind+0x9e>
    5c54:	1dfb      	adds	r3, r7, #7
    5c56:	781b      	ldrb	r3, [r3, #0]
    5c58:	2b7f      	cmp	r3, #127	; 0x7f
    5c5a:	d83a      	bhi.n	5cd2 <bind+0x9e>
	{
		tstrBindCmd			strBind;

		/* Build the bind request. */
		strBind.sock = sock;
    5c5c:	1c3b      	adds	r3, r7, #0
    5c5e:	3308      	adds	r3, #8
    5c60:	1dfa      	adds	r2, r7, #7
    5c62:	7812      	ldrb	r2, [r2, #0]
    5c64:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    5c66:	1c3a      	adds	r2, r7, #0
    5c68:	3208      	adds	r2, #8
    5c6a:	683b      	ldr	r3, [r7, #0]
    5c6c:	1c10      	adds	r0, r2, #0
    5c6e:	1c19      	adds	r1, r3, #0
    5c70:	2208      	movs	r2, #8
    5c72:	4b1c      	ldr	r3, [pc, #112]	; (5ce4 <bind+0xb0>)
    5c74:	4798      	blx	r3
		//strBind.strAddr = *((tstrSockAddr*)pstrAddr);

		strBind.strAddr.u16Family	= strBind.strAddr.u16Family;
    5c76:	1c3b      	adds	r3, r7, #0
    5c78:	3308      	adds	r3, #8
    5c7a:	881a      	ldrh	r2, [r3, #0]
    5c7c:	1c3b      	adds	r3, r7, #0
    5c7e:	3308      	adds	r3, #8
    5c80:	801a      	strh	r2, [r3, #0]
		strBind.strAddr.u16Port		= strBind.strAddr.u16Port;
    5c82:	1c3b      	adds	r3, r7, #0
    5c84:	3308      	adds	r3, #8
    5c86:	885a      	ldrh	r2, [r3, #2]
    5c88:	1c3b      	adds	r3, r7, #0
    5c8a:	3308      	adds	r3, #8
    5c8c:	805a      	strh	r2, [r3, #2]
		strBind.strAddr.u32IPAddr	= strBind.strAddr.u32IPAddr;
    5c8e:	1c3b      	adds	r3, r7, #0
    5c90:	3308      	adds	r3, #8
    5c92:	685a      	ldr	r2, [r3, #4]
    5c94:	1c3b      	adds	r3, r7, #0
    5c96:	3308      	adds	r3, #8
    5c98:	605a      	str	r2, [r3, #4]
		/* Send the request. */
		s8Ret = SOCKET_REQUEST(SOCKET_CMD_BIND, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
    5c9a:	1c3c      	adds	r4, r7, #0
    5c9c:	3417      	adds	r4, #23
    5c9e:	1c3b      	adds	r3, r7, #0
    5ca0:	3308      	adds	r3, #8
    5ca2:	2200      	movs	r2, #0
    5ca4:	9200      	str	r2, [sp, #0]
    5ca6:	2200      	movs	r2, #0
    5ca8:	9201      	str	r2, [sp, #4]
    5caa:	2200      	movs	r2, #0
    5cac:	9202      	str	r2, [sp, #8]
    5cae:	2002      	movs	r0, #2
    5cb0:	2141      	movs	r1, #65	; 0x41
    5cb2:	1c1a      	adds	r2, r3, #0
    5cb4:	230c      	movs	r3, #12
    5cb6:	4d0c      	ldr	r5, [pc, #48]	; (5ce8 <bind+0xb4>)
    5cb8:	47a8      	blx	r5
    5cba:	1c03      	adds	r3, r0, #0
    5cbc:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR) 
    5cbe:	1c3b      	adds	r3, r7, #0
    5cc0:	3317      	adds	r3, #23
    5cc2:	781b      	ldrb	r3, [r3, #0]
    5cc4:	b25b      	sxtb	r3, r3
    5cc6:	2b00      	cmp	r3, #0
    5cc8:	d003      	beq.n	5cd2 <bind+0x9e>
		{
			s8Ret = SOCK_ERR_INVALID;
    5cca:	1c3b      	adds	r3, r7, #0
    5ccc:	3317      	adds	r3, #23
    5cce:	22f7      	movs	r2, #247	; 0xf7
    5cd0:	701a      	strb	r2, [r3, #0]
		}  
	}
	return s8Ret;
    5cd2:	1c3b      	adds	r3, r7, #0
    5cd4:	3317      	adds	r3, #23
    5cd6:	781b      	ldrb	r3, [r3, #0]
    5cd8:	b25b      	sxtb	r3, r3
}
    5cda:	1c18      	adds	r0, r3, #0
    5cdc:	46bd      	mov	sp, r7
    5cde:	b006      	add	sp, #24
    5ce0:	bdb0      	pop	{r4, r5, r7, pc}
    5ce2:	46c0      	nop			; (mov r8, r8)
    5ce4:	00002b79 	.word	0x00002b79
    5ce8:	00002d69 	.word	0x00002d69

00005cec <sendto>:

Date
		4 June 2012
*********************************************************************/
sint16 sendto(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags, struct sockaddr *pstrDestAddr, uint8 u8AddrLen)
{
    5cec:	b590      	push	{r4, r7, lr}
    5cee:	b08f      	sub	sp, #60	; 0x3c
    5cf0:	af04      	add	r7, sp, #16
    5cf2:	60b9      	str	r1, [r7, #8]
    5cf4:	1c11      	adds	r1, r2, #0
    5cf6:	1c1a      	adds	r2, r3, #0
    5cf8:	1c3b      	adds	r3, r7, #0
    5cfa:	330f      	adds	r3, #15
    5cfc:	7018      	strb	r0, [r3, #0]
    5cfe:	1c3b      	adds	r3, r7, #0
    5d00:	330c      	adds	r3, #12
    5d02:	8019      	strh	r1, [r3, #0]
    5d04:	1dbb      	adds	r3, r7, #6
    5d06:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    5d08:	1c3b      	adds	r3, r7, #0
    5d0a:	3326      	adds	r3, #38	; 0x26
    5d0c:	2206      	movs	r2, #6
    5d0e:	4252      	negs	r2, r2
    5d10:	801a      	strh	r2, [r3, #0]
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH))
    5d12:	1c3b      	adds	r3, r7, #0
    5d14:	330f      	adds	r3, #15
    5d16:	781b      	ldrb	r3, [r3, #0]
    5d18:	2b7f      	cmp	r3, #127	; 0x7f
    5d1a:	d85d      	bhi.n	5dd8 <sendto+0xec>
    5d1c:	68bb      	ldr	r3, [r7, #8]
    5d1e:	2b00      	cmp	r3, #0
    5d20:	d05a      	beq.n	5dd8 <sendto+0xec>
    5d22:	1c3b      	adds	r3, r7, #0
    5d24:	330c      	adds	r3, #12
    5d26:	881a      	ldrh	r2, [r3, #0]
    5d28:	23af      	movs	r3, #175	; 0xaf
    5d2a:	00db      	lsls	r3, r3, #3
    5d2c:	429a      	cmp	r2, r3
    5d2e:	d853      	bhi.n	5dd8 <sendto+0xec>
	{
		if(gastrSockets[sock].bIsUsed)
    5d30:	1c3b      	adds	r3, r7, #0
    5d32:	330f      	adds	r3, #15
    5d34:	781b      	ldrb	r3, [r3, #0]
    5d36:	b25b      	sxtb	r3, r3
    5d38:	4a2b      	ldr	r2, [pc, #172]	; (5de8 <sendto+0xfc>)
    5d3a:	00db      	lsls	r3, r3, #3
    5d3c:	18d3      	adds	r3, r2, r3
    5d3e:	685b      	ldr	r3, [r3, #4]
    5d40:	021b      	lsls	r3, r3, #8
    5d42:	0e1b      	lsrs	r3, r3, #24
    5d44:	b2db      	uxtb	r3, r3
    5d46:	2b00      	cmp	r3, #0
    5d48:	d046      	beq.n	5dd8 <sendto+0xec>
		{
			tstrSendCmd	strSendTo;

			m2m_memset((uint8*)&strSendTo, 0, sizeof(tstrSendCmd));
    5d4a:	1c3b      	adds	r3, r7, #0
    5d4c:	3314      	adds	r3, #20
    5d4e:	1c18      	adds	r0, r3, #0
    5d50:	2100      	movs	r1, #0
    5d52:	220c      	movs	r2, #12
    5d54:	4b25      	ldr	r3, [pc, #148]	; (5dec <sendto+0x100>)
    5d56:	4798      	blx	r3

			strSendTo.sock			= sock;
    5d58:	1c3b      	adds	r3, r7, #0
    5d5a:	3314      	adds	r3, #20
    5d5c:	1c3a      	adds	r2, r7, #0
    5d5e:	320f      	adds	r2, #15
    5d60:	7812      	ldrb	r2, [r2, #0]
    5d62:	701a      	strb	r2, [r3, #0]
			strSendTo.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
    5d64:	1c3b      	adds	r3, r7, #0
    5d66:	3314      	adds	r3, #20
    5d68:	1c3a      	adds	r2, r7, #0
    5d6a:	320c      	adds	r2, #12
    5d6c:	8812      	ldrh	r2, [r2, #0]
    5d6e:	805a      	strh	r2, [r3, #2]
			if(pstrDestAddr != NULL)
    5d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5d72:	2b00      	cmp	r3, #0
    5d74:	d010      	beq.n	5d98 <sendto+0xac>
			{
				struct sockaddr_in	*pstrAddr;
				pstrAddr = (void *)pstrDestAddr;
    5d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5d78:	623b      	str	r3, [r7, #32]
	
				strSendTo.strAddr.u16Family	= pstrAddr->sin_family;
    5d7a:	6a3b      	ldr	r3, [r7, #32]
    5d7c:	881a      	ldrh	r2, [r3, #0]
    5d7e:	1c3b      	adds	r3, r7, #0
    5d80:	3314      	adds	r3, #20
    5d82:	809a      	strh	r2, [r3, #4]
				strSendTo.strAddr.u16Port	= pstrAddr->sin_port;
    5d84:	6a3b      	ldr	r3, [r7, #32]
    5d86:	885a      	ldrh	r2, [r3, #2]
    5d88:	1c3b      	adds	r3, r7, #0
    5d8a:	3314      	adds	r3, #20
    5d8c:	80da      	strh	r2, [r3, #6]
				strSendTo.strAddr.u32IPAddr	= pstrAddr->sin_addr.s_addr;
    5d8e:	6a3b      	ldr	r3, [r7, #32]
    5d90:	685a      	ldr	r2, [r3, #4]
    5d92:	1c3b      	adds	r3, r7, #0
    5d94:	3314      	adds	r3, #20
    5d96:	609a      	str	r2, [r3, #8]
			}
			s16Ret = SOCKET_REQUEST(SOCKET_CMD_SENDTO|M2M_REQ_DATA_PKT, (uint8*)&strSendTo,  sizeof(tstrSendCmd), 
    5d98:	1c3b      	adds	r3, r7, #0
    5d9a:	3314      	adds	r3, #20
    5d9c:	68ba      	ldr	r2, [r7, #8]
    5d9e:	9200      	str	r2, [sp, #0]
    5da0:	1c3a      	adds	r2, r7, #0
    5da2:	320c      	adds	r2, #12
    5da4:	8812      	ldrh	r2, [r2, #0]
    5da6:	9201      	str	r2, [sp, #4]
    5da8:	2248      	movs	r2, #72	; 0x48
    5daa:	9202      	str	r2, [sp, #8]
    5dac:	2002      	movs	r0, #2
    5dae:	21c7      	movs	r1, #199	; 0xc7
    5db0:	1c1a      	adds	r2, r3, #0
    5db2:	230c      	movs	r3, #12
    5db4:	4c0e      	ldr	r4, [pc, #56]	; (5df0 <sendto+0x104>)
    5db6:	47a0      	blx	r4
    5db8:	1c03      	adds	r3, r0, #0
    5dba:	1c1a      	adds	r2, r3, #0
    5dbc:	1c3b      	adds	r3, r7, #0
    5dbe:	3326      	adds	r3, #38	; 0x26
    5dc0:	801a      	strh	r2, [r3, #0]
				pvSendBuffer, u16SendLength, UDP_TX_PACKET_OFFSET);

			if(s16Ret != SOCK_ERR_NO_ERROR)
    5dc2:	1c3b      	adds	r3, r7, #0
    5dc4:	3326      	adds	r3, #38	; 0x26
    5dc6:	2200      	movs	r2, #0
    5dc8:	5e9b      	ldrsh	r3, [r3, r2]
    5dca:	2b00      	cmp	r3, #0
    5dcc:	d004      	beq.n	5dd8 <sendto+0xec>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    5dce:	1c3b      	adds	r3, r7, #0
    5dd0:	3326      	adds	r3, #38	; 0x26
    5dd2:	220e      	movs	r2, #14
    5dd4:	4252      	negs	r2, r2
    5dd6:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    5dd8:	1c3b      	adds	r3, r7, #0
    5dda:	3326      	adds	r3, #38	; 0x26
    5ddc:	881b      	ldrh	r3, [r3, #0]
    5dde:	b21b      	sxth	r3, r3
}
    5de0:	1c18      	adds	r0, r3, #0
    5de2:	46bd      	mov	sp, r7
    5de4:	b00b      	add	sp, #44	; 0x2c
    5de6:	bd90      	pop	{r4, r7, pc}
    5de8:	20001000 	.word	0x20001000
    5dec:	00002bb5 	.word	0x00002bb5
    5df0:	00002d69 	.word	0x00002d69

00005df4 <recvfrom>:

Date
		5 June 2012
*********************************************************************/
sint16 recvfrom(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    5df4:	b590      	push	{r4, r7, lr}
    5df6:	b08d      	sub	sp, #52	; 0x34
    5df8:	af04      	add	r7, sp, #16
    5dfa:	60b9      	str	r1, [r7, #8]
    5dfc:	607b      	str	r3, [r7, #4]
    5dfe:	1c3b      	adds	r3, r7, #0
    5e00:	330f      	adds	r3, #15
    5e02:	1c01      	adds	r1, r0, #0
    5e04:	7019      	strb	r1, [r3, #0]
    5e06:	1c3b      	adds	r3, r7, #0
    5e08:	330c      	adds	r3, #12
    5e0a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
    5e0c:	1c3b      	adds	r3, r7, #0
    5e0e:	331e      	adds	r3, #30
    5e10:	2200      	movs	r2, #0
    5e12:	801a      	strh	r2, [r3, #0]
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0))
    5e14:	1c3b      	adds	r3, r7, #0
    5e16:	330f      	adds	r3, #15
    5e18:	781b      	ldrb	r3, [r3, #0]
    5e1a:	2b7f      	cmp	r3, #127	; 0x7f
    5e1c:	d85a      	bhi.n	5ed4 <recvfrom+0xe0>
    5e1e:	68bb      	ldr	r3, [r7, #8]
    5e20:	2b00      	cmp	r3, #0
    5e22:	d057      	beq.n	5ed4 <recvfrom+0xe0>
    5e24:	1c3b      	adds	r3, r7, #0
    5e26:	330c      	adds	r3, #12
    5e28:	881b      	ldrh	r3, [r3, #0]
    5e2a:	2b00      	cmp	r3, #0
    5e2c:	d052      	beq.n	5ed4 <recvfrom+0xe0>
	{
		if(gastrSockets[sock].bIsUsed)
    5e2e:	1c3b      	adds	r3, r7, #0
    5e30:	330f      	adds	r3, #15
    5e32:	781b      	ldrb	r3, [r3, #0]
    5e34:	b25b      	sxtb	r3, r3
    5e36:	4a2e      	ldr	r2, [pc, #184]	; (5ef0 <recvfrom+0xfc>)
    5e38:	00db      	lsls	r3, r3, #3
    5e3a:	18d3      	adds	r3, r2, r3
    5e3c:	685b      	ldr	r3, [r3, #4]
    5e3e:	021b      	lsls	r3, r3, #8
    5e40:	0e1b      	lsrs	r3, r3, #24
    5e42:	b2db      	uxtb	r3, r3
    5e44:	2b00      	cmp	r3, #0
    5e46:	d044      	beq.n	5ed2 <recvfrom+0xde>
		{
			tstrRecvCmd	strRecv;
			gastrSockets[sock].pu8UserBuffer = (uint8*)pvRecvBuf;
    5e48:	1c3b      	adds	r3, r7, #0
    5e4a:	330f      	adds	r3, #15
    5e4c:	2200      	movs	r2, #0
    5e4e:	569a      	ldrsb	r2, [r3, r2]
    5e50:	4b27      	ldr	r3, [pc, #156]	; (5ef0 <recvfrom+0xfc>)
    5e52:	00d2      	lsls	r2, r2, #3
    5e54:	68b9      	ldr	r1, [r7, #8]
    5e56:	50d1      	str	r1, [r2, r3]
			gastrSockets[sock].u16UserBufferSize = u16BufLen;
    5e58:	1c3b      	adds	r3, r7, #0
    5e5a:	330f      	adds	r3, #15
    5e5c:	781b      	ldrb	r3, [r3, #0]
    5e5e:	b25b      	sxtb	r3, r3
    5e60:	4923      	ldr	r1, [pc, #140]	; (5ef0 <recvfrom+0xfc>)
    5e62:	00db      	lsls	r3, r3, #3
    5e64:	1c3a      	adds	r2, r7, #0
    5e66:	320c      	adds	r2, #12
    5e68:	18cb      	adds	r3, r1, r3
    5e6a:	8812      	ldrh	r2, [r2, #0]
    5e6c:	809a      	strh	r2, [r3, #4]

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    5e6e:	687b      	ldr	r3, [r7, #4]
    5e70:	2b00      	cmp	r3, #0
    5e72:	d105      	bne.n	5e80 <recvfrom+0x8c>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    5e74:	1c3b      	adds	r3, r7, #0
    5e76:	3314      	adds	r3, #20
    5e78:	2201      	movs	r2, #1
    5e7a:	4252      	negs	r2, r2
    5e7c:	601a      	str	r2, [r3, #0]
    5e7e:	e003      	b.n	5e88 <recvfrom+0x94>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    5e80:	1c3b      	adds	r3, r7, #0
    5e82:	3314      	adds	r3, #20
    5e84:	687a      	ldr	r2, [r7, #4]
    5e86:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    5e88:	1c3b      	adds	r3, r7, #0
    5e8a:	3314      	adds	r3, #20
    5e8c:	1c3a      	adds	r2, r7, #0
    5e8e:	320f      	adds	r2, #15
    5e90:	7812      	ldrb	r2, [r2, #0]
    5e92:	711a      	strb	r2, [r3, #4]
			s16Ret = SOCKET_REQUEST(SOCKET_CMD_RECVFROM, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    5e94:	1c3b      	adds	r3, r7, #0
    5e96:	3314      	adds	r3, #20
    5e98:	2200      	movs	r2, #0
    5e9a:	9200      	str	r2, [sp, #0]
    5e9c:	2200      	movs	r2, #0
    5e9e:	9201      	str	r2, [sp, #4]
    5ea0:	2200      	movs	r2, #0
    5ea2:	9202      	str	r2, [sp, #8]
    5ea4:	2002      	movs	r0, #2
    5ea6:	2148      	movs	r1, #72	; 0x48
    5ea8:	1c1a      	adds	r2, r3, #0
    5eaa:	2308      	movs	r3, #8
    5eac:	4c11      	ldr	r4, [pc, #68]	; (5ef4 <recvfrom+0x100>)
    5eae:	47a0      	blx	r4
    5eb0:	1c03      	adds	r3, r0, #0
    5eb2:	1c1a      	adds	r2, r3, #0
    5eb4:	1c3b      	adds	r3, r7, #0
    5eb6:	331e      	adds	r3, #30
    5eb8:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    5eba:	1c3b      	adds	r3, r7, #0
    5ebc:	331e      	adds	r3, #30
    5ebe:	2200      	movs	r2, #0
    5ec0:	5e9b      	ldrsh	r3, [r3, r2]
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	d005      	beq.n	5ed2 <recvfrom+0xde>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    5ec6:	1c3b      	adds	r3, r7, #0
    5ec8:	331e      	adds	r3, #30
    5eca:	220e      	movs	r2, #14
    5ecc:	4252      	negs	r2, r2
    5ece:	801a      	strh	r2, [r3, #0]
sint16 recvfrom(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0))
	{
		if(gastrSockets[sock].bIsUsed)
    5ed0:	e005      	b.n	5ede <recvfrom+0xea>
    5ed2:	e004      	b.n	5ede <recvfrom+0xea>
			}
		}
	}
	else
	{
		s16Ret = SOCK_ERR_INVALID_ARG;
    5ed4:	1c3b      	adds	r3, r7, #0
    5ed6:	331e      	adds	r3, #30
    5ed8:	2206      	movs	r2, #6
    5eda:	4252      	negs	r2, r2
    5edc:	801a      	strh	r2, [r3, #0]
	}
	return s16Ret;
    5ede:	1c3b      	adds	r3, r7, #0
    5ee0:	331e      	adds	r3, #30
    5ee2:	881b      	ldrh	r3, [r3, #0]
    5ee4:	b21b      	sxth	r3, r3
}
    5ee6:	1c18      	adds	r0, r3, #0
    5ee8:	46bd      	mov	sp, r7
    5eea:	b009      	add	sp, #36	; 0x24
    5eec:	bd90      	pop	{r4, r7, pc}
    5eee:	46c0      	nop			; (mov r8, r8)
    5ef0:	20001000 	.word	0x20001000
    5ef4:	00002d69 	.word	0x00002d69

00005ef8 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    5ef8:	b580      	push	{r7, lr}
    5efa:	b082      	sub	sp, #8
    5efc:	af00      	add	r7, sp, #0
    5efe:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    5f00:	687b      	ldr	r3, [r7, #4]
    5f02:	2b00      	cmp	r3, #0
    5f04:	d00c      	beq.n	5f20 <delay_cycles+0x28>
		SysTick->LOAD = n;
    5f06:	4b08      	ldr	r3, [pc, #32]	; (5f28 <delay_cycles+0x30>)
    5f08:	687a      	ldr	r2, [r7, #4]
    5f0a:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    5f0c:	4b06      	ldr	r3, [pc, #24]	; (5f28 <delay_cycles+0x30>)
    5f0e:	2200      	movs	r2, #0
    5f10:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    5f12:	46c0      	nop			; (mov r8, r8)
    5f14:	4b04      	ldr	r3, [pc, #16]	; (5f28 <delay_cycles+0x30>)
    5f16:	681a      	ldr	r2, [r3, #0]
    5f18:	2380      	movs	r3, #128	; 0x80
    5f1a:	025b      	lsls	r3, r3, #9
    5f1c:	4013      	ands	r3, r2
    5f1e:	d0f9      	beq.n	5f14 <delay_cycles+0x1c>
		};
	}
}
    5f20:	46bd      	mov	sp, r7
    5f22:	b002      	add	sp, #8
    5f24:	bd80      	pop	{r7, pc}
    5f26:	46c0      	nop			; (mov r8, r8)
    5f28:	e000e010 	.word	0xe000e010

00005f2c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    5f2c:	b580      	push	{r7, lr}
    5f2e:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    5f30:	2000      	movs	r0, #0
    5f32:	4b10      	ldr	r3, [pc, #64]	; (5f74 <delay_init+0x48>)
    5f34:	4798      	blx	r3
    5f36:	1c02      	adds	r2, r0, #0
    5f38:	4b0f      	ldr	r3, [pc, #60]	; (5f78 <delay_init+0x4c>)
    5f3a:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    5f3c:	4b0e      	ldr	r3, [pc, #56]	; (5f78 <delay_init+0x4c>)
    5f3e:	681a      	ldr	r2, [r3, #0]
    5f40:	4b0e      	ldr	r3, [pc, #56]	; (5f7c <delay_init+0x50>)
    5f42:	1c10      	adds	r0, r2, #0
    5f44:	22fa      	movs	r2, #250	; 0xfa
    5f46:	0091      	lsls	r1, r2, #2
    5f48:	4798      	blx	r3
    5f4a:	1c03      	adds	r3, r0, #0
    5f4c:	1c1a      	adds	r2, r3, #0
    5f4e:	4b0a      	ldr	r3, [pc, #40]	; (5f78 <delay_init+0x4c>)
    5f50:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    5f52:	4b09      	ldr	r3, [pc, #36]	; (5f78 <delay_init+0x4c>)
    5f54:	681a      	ldr	r2, [r3, #0]
    5f56:	4b09      	ldr	r3, [pc, #36]	; (5f7c <delay_init+0x50>)
    5f58:	1c10      	adds	r0, r2, #0
    5f5a:	22fa      	movs	r2, #250	; 0xfa
    5f5c:	0091      	lsls	r1, r2, #2
    5f5e:	4798      	blx	r3
    5f60:	1c03      	adds	r3, r0, #0
    5f62:	1c1a      	adds	r2, r3, #0
    5f64:	4b06      	ldr	r3, [pc, #24]	; (5f80 <delay_init+0x54>)
    5f66:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    5f68:	4b06      	ldr	r3, [pc, #24]	; (5f84 <delay_init+0x58>)
    5f6a:	2205      	movs	r2, #5
    5f6c:	601a      	str	r2, [r3, #0]
}
    5f6e:	46bd      	mov	sp, r7
    5f70:	bd80      	pop	{r7, pc}
    5f72:	46c0      	nop			; (mov r8, r8)
    5f74:	00007f9d 	.word	0x00007f9d
    5f78:	20000010 	.word	0x20000010
    5f7c:	0000976d 	.word	0x0000976d
    5f80:	20000014 	.word	0x20000014
    5f84:	e000e010 	.word	0xe000e010

00005f88 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    5f88:	b580      	push	{r7, lr}
    5f8a:	b082      	sub	sp, #8
    5f8c:	af00      	add	r7, sp, #0
    5f8e:	6078      	str	r0, [r7, #4]
	while (n--) {
    5f90:	e004      	b.n	5f9c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    5f92:	4b06      	ldr	r3, [pc, #24]	; (5fac <delay_cycles_ms+0x24>)
    5f94:	681b      	ldr	r3, [r3, #0]
    5f96:	1c18      	adds	r0, r3, #0
    5f98:	4b05      	ldr	r3, [pc, #20]	; (5fb0 <delay_cycles_ms+0x28>)
    5f9a:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    5f9c:	687b      	ldr	r3, [r7, #4]
    5f9e:	1e5a      	subs	r2, r3, #1
    5fa0:	607a      	str	r2, [r7, #4]
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d1f5      	bne.n	5f92 <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    5fa6:	46bd      	mov	sp, r7
    5fa8:	b002      	add	sp, #8
    5faa:	bd80      	pop	{r7, pc}
    5fac:	20000010 	.word	0x20000010
    5fb0:	00005ef9 	.word	0x00005ef9

00005fb4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    5fb4:	b580      	push	{r7, lr}
    5fb6:	b082      	sub	sp, #8
    5fb8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    5fba:	4b0f      	ldr	r3, [pc, #60]	; (5ff8 <cpu_irq_enter_critical+0x44>)
    5fbc:	681b      	ldr	r3, [r3, #0]
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	d112      	bne.n	5fe8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5fc2:	f3ef 8310 	mrs	r3, PRIMASK
    5fc6:	607b      	str	r3, [r7, #4]
  return(result);
    5fc8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    5fca:	2b00      	cmp	r3, #0
    5fcc:	d109      	bne.n	5fe2 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    5fce:	b672      	cpsid	i
    5fd0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5fd4:	4b09      	ldr	r3, [pc, #36]	; (5ffc <cpu_irq_enter_critical+0x48>)
    5fd6:	2200      	movs	r2, #0
    5fd8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5fda:	4b09      	ldr	r3, [pc, #36]	; (6000 <cpu_irq_enter_critical+0x4c>)
    5fdc:	2201      	movs	r2, #1
    5fde:	701a      	strb	r2, [r3, #0]
    5fe0:	e002      	b.n	5fe8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    5fe2:	4b07      	ldr	r3, [pc, #28]	; (6000 <cpu_irq_enter_critical+0x4c>)
    5fe4:	2200      	movs	r2, #0
    5fe6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5fe8:	4b03      	ldr	r3, [pc, #12]	; (5ff8 <cpu_irq_enter_critical+0x44>)
    5fea:	681b      	ldr	r3, [r3, #0]
    5fec:	1c5a      	adds	r2, r3, #1
    5fee:	4b02      	ldr	r3, [pc, #8]	; (5ff8 <cpu_irq_enter_critical+0x44>)
    5ff0:	601a      	str	r2, [r3, #0]
}
    5ff2:	46bd      	mov	sp, r7
    5ff4:	b002      	add	sp, #8
    5ff6:	bd80      	pop	{r7, pc}
    5ff8:	2000093c 	.word	0x2000093c
    5ffc:	20000018 	.word	0x20000018
    6000:	20000940 	.word	0x20000940

00006004 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    6004:	b580      	push	{r7, lr}
    6006:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    6008:	4b0a      	ldr	r3, [pc, #40]	; (6034 <cpu_irq_leave_critical+0x30>)
    600a:	681b      	ldr	r3, [r3, #0]
    600c:	1e5a      	subs	r2, r3, #1
    600e:	4b09      	ldr	r3, [pc, #36]	; (6034 <cpu_irq_leave_critical+0x30>)
    6010:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    6012:	4b08      	ldr	r3, [pc, #32]	; (6034 <cpu_irq_leave_critical+0x30>)
    6014:	681b      	ldr	r3, [r3, #0]
    6016:	2b00      	cmp	r3, #0
    6018:	d10a      	bne.n	6030 <cpu_irq_leave_critical+0x2c>
    601a:	4b07      	ldr	r3, [pc, #28]	; (6038 <cpu_irq_leave_critical+0x34>)
    601c:	781b      	ldrb	r3, [r3, #0]
    601e:	b2db      	uxtb	r3, r3
    6020:	2b00      	cmp	r3, #0
    6022:	d005      	beq.n	6030 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    6024:	4b05      	ldr	r3, [pc, #20]	; (603c <cpu_irq_leave_critical+0x38>)
    6026:	2201      	movs	r2, #1
    6028:	701a      	strb	r2, [r3, #0]
    602a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    602e:	b662      	cpsie	i
	}
}
    6030:	46bd      	mov	sp, r7
    6032:	bd80      	pop	{r7, pc}
    6034:	2000093c 	.word	0x2000093c
    6038:	20000940 	.word	0x20000940
    603c:	20000018 	.word	0x20000018

00006040 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6040:	b580      	push	{r7, lr}
    6042:	b084      	sub	sp, #16
    6044:	af00      	add	r7, sp, #0
    6046:	1c02      	adds	r2, r0, #0
    6048:	1dfb      	adds	r3, r7, #7
    604a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    604c:	1c3b      	adds	r3, r7, #0
    604e:	330f      	adds	r3, #15
    6050:	1dfa      	adds	r2, r7, #7
    6052:	7812      	ldrb	r2, [r2, #0]
    6054:	09d2      	lsrs	r2, r2, #7
    6056:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6058:	1c3b      	adds	r3, r7, #0
    605a:	330e      	adds	r3, #14
    605c:	1dfa      	adds	r2, r7, #7
    605e:	7812      	ldrb	r2, [r2, #0]
    6060:	0952      	lsrs	r2, r2, #5
    6062:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6064:	4b0d      	ldr	r3, [pc, #52]	; (609c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6066:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    6068:	1c3b      	adds	r3, r7, #0
    606a:	330f      	adds	r3, #15
    606c:	781b      	ldrb	r3, [r3, #0]
    606e:	2b00      	cmp	r3, #0
    6070:	d10e      	bne.n	6090 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    6072:	1c3b      	adds	r3, r7, #0
    6074:	330f      	adds	r3, #15
    6076:	781b      	ldrb	r3, [r3, #0]
    6078:	009b      	lsls	r3, r3, #2
    607a:	2210      	movs	r2, #16
    607c:	19d2      	adds	r2, r2, r7
    607e:	18d3      	adds	r3, r2, r3
    6080:	3b08      	subs	r3, #8
    6082:	681a      	ldr	r2, [r3, #0]
    6084:	1c3b      	adds	r3, r7, #0
    6086:	330e      	adds	r3, #14
    6088:	781b      	ldrb	r3, [r3, #0]
    608a:	01db      	lsls	r3, r3, #7
    608c:	18d3      	adds	r3, r2, r3
    608e:	e000      	b.n	6092 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    6090:	2300      	movs	r3, #0
	}
}
    6092:	1c18      	adds	r0, r3, #0
    6094:	46bd      	mov	sp, r7
    6096:	b004      	add	sp, #16
    6098:	bd80      	pop	{r7, pc}
    609a:	46c0      	nop			; (mov r8, r8)
    609c:	41004400 	.word	0x41004400

000060a0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    60a0:	b580      	push	{r7, lr}
    60a2:	b082      	sub	sp, #8
    60a4:	af00      	add	r7, sp, #0
    60a6:	1c02      	adds	r2, r0, #0
    60a8:	1dfb      	adds	r3, r7, #7
    60aa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    60ac:	1dfb      	adds	r3, r7, #7
    60ae:	781b      	ldrb	r3, [r3, #0]
    60b0:	1c18      	adds	r0, r3, #0
    60b2:	4b03      	ldr	r3, [pc, #12]	; (60c0 <port_get_group_from_gpio_pin+0x20>)
    60b4:	4798      	blx	r3
    60b6:	1c03      	adds	r3, r0, #0
}
    60b8:	1c18      	adds	r0, r3, #0
    60ba:	46bd      	mov	sp, r7
    60bc:	b002      	add	sp, #8
    60be:	bd80      	pop	{r7, pc}
    60c0:	00006041 	.word	0x00006041

000060c4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    60c4:	b580      	push	{r7, lr}
    60c6:	b082      	sub	sp, #8
    60c8:	af00      	add	r7, sp, #0
    60ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    60cc:	687b      	ldr	r3, [r7, #4]
    60ce:	2200      	movs	r2, #0
    60d0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    60d2:	687b      	ldr	r3, [r7, #4]
    60d4:	2201      	movs	r2, #1
    60d6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    60d8:	687b      	ldr	r3, [r7, #4]
    60da:	2200      	movs	r2, #0
    60dc:	709a      	strb	r2, [r3, #2]
}
    60de:	46bd      	mov	sp, r7
    60e0:	b002      	add	sp, #8
    60e2:	bd80      	pop	{r7, pc}

000060e4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    60e4:	b580      	push	{r7, lr}
    60e6:	b084      	sub	sp, #16
    60e8:	af00      	add	r7, sp, #0
    60ea:	1c0a      	adds	r2, r1, #0
    60ec:	1dfb      	adds	r3, r7, #7
    60ee:	1c01      	adds	r1, r0, #0
    60f0:	7019      	strb	r1, [r3, #0]
    60f2:	1dbb      	adds	r3, r7, #6
    60f4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    60f6:	1dfb      	adds	r3, r7, #7
    60f8:	781b      	ldrb	r3, [r3, #0]
    60fa:	1c18      	adds	r0, r3, #0
    60fc:	4b0d      	ldr	r3, [pc, #52]	; (6134 <port_pin_set_output_level+0x50>)
    60fe:	4798      	blx	r3
    6100:	1c03      	adds	r3, r0, #0
    6102:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6104:	1dfb      	adds	r3, r7, #7
    6106:	781a      	ldrb	r2, [r3, #0]
    6108:	231f      	movs	r3, #31
    610a:	4013      	ands	r3, r2
    610c:	2201      	movs	r2, #1
    610e:	1c11      	adds	r1, r2, #0
    6110:	4099      	lsls	r1, r3
    6112:	1c0b      	adds	r3, r1, #0
    6114:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    6116:	1dbb      	adds	r3, r7, #6
    6118:	781b      	ldrb	r3, [r3, #0]
    611a:	2b00      	cmp	r3, #0
    611c:	d003      	beq.n	6126 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    611e:	68fb      	ldr	r3, [r7, #12]
    6120:	68ba      	ldr	r2, [r7, #8]
    6122:	619a      	str	r2, [r3, #24]
    6124:	e002      	b.n	612c <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    6126:	68fb      	ldr	r3, [r7, #12]
    6128:	68ba      	ldr	r2, [r7, #8]
    612a:	615a      	str	r2, [r3, #20]
	}
}
    612c:	46bd      	mov	sp, r7
    612e:	b004      	add	sp, #16
    6130:	bd80      	pop	{r7, pc}
    6132:	46c0      	nop			; (mov r8, r8)
    6134:	000060a1 	.word	0x000060a1

00006138 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    6138:	b580      	push	{r7, lr}
    613a:	b082      	sub	sp, #8
    613c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    613e:	1d3b      	adds	r3, r7, #4
    6140:	1c18      	adds	r0, r3, #0
    6142:	4b0e      	ldr	r3, [pc, #56]	; (617c <system_board_init+0x44>)
    6144:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6146:	1d3b      	adds	r3, r7, #4
    6148:	2201      	movs	r2, #1
    614a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    614c:	1d3b      	adds	r3, r7, #4
    614e:	203e      	movs	r0, #62	; 0x3e
    6150:	1c19      	adds	r1, r3, #0
    6152:	4b0b      	ldr	r3, [pc, #44]	; (6180 <system_board_init+0x48>)
    6154:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    6156:	203e      	movs	r0, #62	; 0x3e
    6158:	2101      	movs	r1, #1
    615a:	4b0a      	ldr	r3, [pc, #40]	; (6184 <system_board_init+0x4c>)
    615c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    615e:	1d3b      	adds	r3, r7, #4
    6160:	2200      	movs	r2, #0
    6162:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    6164:	1d3b      	adds	r3, r7, #4
    6166:	2201      	movs	r2, #1
    6168:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    616a:	1d3b      	adds	r3, r7, #4
    616c:	200f      	movs	r0, #15
    616e:	1c19      	adds	r1, r3, #0
    6170:	4b03      	ldr	r3, [pc, #12]	; (6180 <system_board_init+0x48>)
    6172:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    6174:	46bd      	mov	sp, r7
    6176:	b002      	add	sp, #8
    6178:	bd80      	pop	{r7, pc}
    617a:	46c0      	nop			; (mov r8, r8)
    617c:	000060c5 	.word	0x000060c5
    6180:	00006769 	.word	0x00006769
    6184:	000060e5 	.word	0x000060e5

00006188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6188:	b580      	push	{r7, lr}
    618a:	b082      	sub	sp, #8
    618c:	af00      	add	r7, sp, #0
    618e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	2280      	movs	r2, #128	; 0x80
    6194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6196:	687b      	ldr	r3, [r7, #4]
    6198:	2200      	movs	r2, #0
    619a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    619c:	687b      	ldr	r3, [r7, #4]
    619e:	2201      	movs	r2, #1
    61a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    61a2:	687b      	ldr	r3, [r7, #4]
    61a4:	2200      	movs	r2, #0
    61a6:	70da      	strb	r2, [r3, #3]
}
    61a8:	46bd      	mov	sp, r7
    61aa:	b002      	add	sp, #8
    61ac:	bd80      	pop	{r7, pc}
    61ae:	46c0      	nop			; (mov r8, r8)

000061b0 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    61b0:	b580      	push	{r7, lr}
    61b2:	b084      	sub	sp, #16
    61b4:	af00      	add	r7, sp, #0
    61b6:	1c02      	adds	r2, r0, #0
    61b8:	1dfb      	adds	r3, r7, #7
    61ba:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    61bc:	1c3b      	adds	r3, r7, #0
    61be:	330f      	adds	r3, #15
    61c0:	1dfa      	adds	r2, r7, #7
    61c2:	7812      	ldrb	r2, [r2, #0]
    61c4:	0952      	lsrs	r2, r2, #5
    61c6:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    61c8:	1c3b      	adds	r3, r7, #0
    61ca:	330f      	adds	r3, #15
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	2b00      	cmp	r3, #0
    61d0:	d10b      	bne.n	61ea <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    61d2:	4b08      	ldr	r3, [pc, #32]	; (61f4 <_extint_get_eic_from_channel+0x44>)
    61d4:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    61d6:	1c3b      	adds	r3, r7, #0
    61d8:	330f      	adds	r3, #15
    61da:	781b      	ldrb	r3, [r3, #0]
    61dc:	009b      	lsls	r3, r3, #2
    61de:	2210      	movs	r2, #16
    61e0:	19d2      	adds	r2, r2, r7
    61e2:	18d3      	adds	r3, r2, r3
    61e4:	3b08      	subs	r3, #8
    61e6:	681b      	ldr	r3, [r3, #0]
    61e8:	e000      	b.n	61ec <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    61ea:	2300      	movs	r3, #0
	}
}
    61ec:	1c18      	adds	r0, r3, #0
    61ee:	46bd      	mov	sp, r7
    61f0:	b004      	add	sp, #16
    61f2:	bd80      	pop	{r7, pc}
    61f4:	40001800 	.word	0x40001800

000061f8 <extint_is_syncing>:
 *
 * \retval true  If the module has completed synchronization
 * \retval false If the module synchronization is ongoing
 */
static inline bool extint_is_syncing(void)
{
    61f8:	b580      	push	{r7, lr}
    61fa:	b082      	sub	sp, #8
    61fc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    61fe:	4b10      	ldr	r3, [pc, #64]	; (6240 <extint_is_syncing+0x48>)
    6200:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6202:	2300      	movs	r3, #0
    6204:	607b      	str	r3, [r7, #4]
    6206:	e013      	b.n	6230 <extint_is_syncing+0x38>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	009b      	lsls	r3, r3, #2
    620c:	2208      	movs	r2, #8
    620e:	19d2      	adds	r2, r2, r7
    6210:	18d3      	adds	r3, r2, r3
    6212:	3b08      	subs	r3, #8
    6214:	681b      	ldr	r3, [r3, #0]
    6216:	681b      	ldr	r3, [r3, #0]
    6218:	041b      	lsls	r3, r3, #16
    621a:	0e1b      	lsrs	r3, r3, #24
    621c:	b2db      	uxtb	r3, r3
    621e:	b2db      	uxtb	r3, r3
    6220:	b25b      	sxtb	r3, r3
    6222:	2b00      	cmp	r3, #0
    6224:	da01      	bge.n	622a <extint_is_syncing+0x32>
			return true;
    6226:	2301      	movs	r3, #1
    6228:	e006      	b.n	6238 <extint_is_syncing+0x40>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    622a:	687b      	ldr	r3, [r7, #4]
    622c:	3301      	adds	r3, #1
    622e:	607b      	str	r3, [r7, #4]
    6230:	687b      	ldr	r3, [r7, #4]
    6232:	2b00      	cmp	r3, #0
    6234:	d0e8      	beq.n	6208 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}

	return false;
    6236:	2300      	movs	r3, #0
}
    6238:	1c18      	adds	r0, r3, #0
    623a:	46bd      	mov	sp, r7
    623c:	b002      	add	sp, #8
    623e:	bd80      	pop	{r7, pc}
    6240:	40001800 	.word	0x40001800

00006244 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6244:	b580      	push	{r7, lr}
    6246:	b082      	sub	sp, #8
    6248:	af00      	add	r7, sp, #0
    624a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	2200      	movs	r2, #0
    6250:	701a      	strb	r2, [r3, #0]
}
    6252:	46bd      	mov	sp, r7
    6254:	b002      	add	sp, #8
    6256:	bd80      	pop	{r7, pc}

00006258 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    6258:	b580      	push	{r7, lr}
    625a:	b082      	sub	sp, #8
    625c:	af00      	add	r7, sp, #0
    625e:	1c02      	adds	r2, r0, #0
    6260:	6039      	str	r1, [r7, #0]
    6262:	1dfb      	adds	r3, r7, #7
    6264:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6266:	1dfb      	adds	r3, r7, #7
    6268:	781b      	ldrb	r3, [r3, #0]
    626a:	2b01      	cmp	r3, #1
    626c:	d00a      	beq.n	6284 <system_apb_clock_set_mask+0x2c>
    626e:	2b02      	cmp	r3, #2
    6270:	d00f      	beq.n	6292 <system_apb_clock_set_mask+0x3a>
    6272:	2b00      	cmp	r3, #0
    6274:	d114      	bne.n	62a0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6276:	4b0e      	ldr	r3, [pc, #56]	; (62b0 <system_apb_clock_set_mask+0x58>)
    6278:	4a0d      	ldr	r2, [pc, #52]	; (62b0 <system_apb_clock_set_mask+0x58>)
    627a:	6991      	ldr	r1, [r2, #24]
    627c:	683a      	ldr	r2, [r7, #0]
    627e:	430a      	orrs	r2, r1
    6280:	619a      	str	r2, [r3, #24]
			break;
    6282:	e00f      	b.n	62a4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6284:	4b0a      	ldr	r3, [pc, #40]	; (62b0 <system_apb_clock_set_mask+0x58>)
    6286:	4a0a      	ldr	r2, [pc, #40]	; (62b0 <system_apb_clock_set_mask+0x58>)
    6288:	69d1      	ldr	r1, [r2, #28]
    628a:	683a      	ldr	r2, [r7, #0]
    628c:	430a      	orrs	r2, r1
    628e:	61da      	str	r2, [r3, #28]
			break;
    6290:	e008      	b.n	62a4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6292:	4b07      	ldr	r3, [pc, #28]	; (62b0 <system_apb_clock_set_mask+0x58>)
    6294:	4a06      	ldr	r2, [pc, #24]	; (62b0 <system_apb_clock_set_mask+0x58>)
    6296:	6a11      	ldr	r1, [r2, #32]
    6298:	683a      	ldr	r2, [r7, #0]
    629a:	430a      	orrs	r2, r1
    629c:	621a      	str	r2, [r3, #32]
			break;
    629e:	e001      	b.n	62a4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    62a0:	2317      	movs	r3, #23
    62a2:	e000      	b.n	62a6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    62a4:	2300      	movs	r3, #0
}
    62a6:	1c18      	adds	r0, r3, #0
    62a8:	46bd      	mov	sp, r7
    62aa:	b002      	add	sp, #8
    62ac:	bd80      	pop	{r7, pc}
    62ae:	46c0      	nop			; (mov r8, r8)
    62b0:	40000400 	.word	0x40000400

000062b4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    62b4:	b580      	push	{r7, lr}
    62b6:	b082      	sub	sp, #8
    62b8:	af00      	add	r7, sp, #0
    62ba:	1c02      	adds	r2, r0, #0
    62bc:	1dfb      	adds	r3, r7, #7
    62be:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    62c0:	4b06      	ldr	r3, [pc, #24]	; (62dc <system_interrupt_enable+0x28>)
    62c2:	1dfa      	adds	r2, r7, #7
    62c4:	7812      	ldrb	r2, [r2, #0]
    62c6:	1c11      	adds	r1, r2, #0
    62c8:	221f      	movs	r2, #31
    62ca:	400a      	ands	r2, r1
    62cc:	2101      	movs	r1, #1
    62ce:	1c08      	adds	r0, r1, #0
    62d0:	4090      	lsls	r0, r2
    62d2:	1c02      	adds	r2, r0, #0
    62d4:	601a      	str	r2, [r3, #0]
}
    62d6:	46bd      	mov	sp, r7
    62d8:	b002      	add	sp, #8
    62da:	bd80      	pop	{r7, pc}
    62dc:	e000e100 	.word	0xe000e100

000062e0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    62e0:	b580      	push	{r7, lr}
    62e2:	b084      	sub	sp, #16
    62e4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    62e6:	4b2c      	ldr	r3, [pc, #176]	; (6398 <_system_extint_init+0xb8>)
    62e8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    62ea:	2000      	movs	r0, #0
    62ec:	2140      	movs	r1, #64	; 0x40
    62ee:	4b2b      	ldr	r3, [pc, #172]	; (639c <_system_extint_init+0xbc>)
    62f0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    62f2:	1c3b      	adds	r3, r7, #0
    62f4:	1c18      	adds	r0, r3, #0
    62f6:	4b2a      	ldr	r3, [pc, #168]	; (63a0 <_system_extint_init+0xc0>)
    62f8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    62fa:	1c3b      	adds	r3, r7, #0
    62fc:	2200      	movs	r2, #0
    62fe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    6300:	1c3b      	adds	r3, r7, #0
    6302:	2005      	movs	r0, #5
    6304:	1c19      	adds	r1, r3, #0
    6306:	4b27      	ldr	r3, [pc, #156]	; (63a4 <_system_extint_init+0xc4>)
    6308:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    630a:	2005      	movs	r0, #5
    630c:	4b26      	ldr	r3, [pc, #152]	; (63a8 <_system_extint_init+0xc8>)
    630e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6310:	2300      	movs	r3, #0
    6312:	60fb      	str	r3, [r7, #12]
    6314:	e016      	b.n	6344 <_system_extint_init+0x64>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    6316:	68fb      	ldr	r3, [r7, #12]
    6318:	009b      	lsls	r3, r3, #2
    631a:	2110      	movs	r1, #16
    631c:	19c9      	adds	r1, r1, r7
    631e:	18cb      	adds	r3, r1, r3
    6320:	3b0c      	subs	r3, #12
    6322:	681a      	ldr	r2, [r3, #0]
    6324:	68fb      	ldr	r3, [r7, #12]
    6326:	009b      	lsls	r3, r3, #2
    6328:	2110      	movs	r1, #16
    632a:	19c9      	adds	r1, r1, r7
    632c:	18cb      	adds	r3, r1, r3
    632e:	3b0c      	subs	r3, #12
    6330:	681b      	ldr	r3, [r3, #0]
    6332:	681b      	ldr	r3, [r3, #0]
    6334:	b2db      	uxtb	r3, r3
    6336:	2101      	movs	r1, #1
    6338:	430b      	orrs	r3, r1
    633a:	b2db      	uxtb	r3, r3
    633c:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    633e:	68fb      	ldr	r3, [r7, #12]
    6340:	3301      	adds	r3, #1
    6342:	60fb      	str	r3, [r7, #12]
    6344:	68fb      	ldr	r3, [r7, #12]
    6346:	2b00      	cmp	r3, #0
    6348:	d0e5      	beq.n	6316 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    634a:	46c0      	nop			; (mov r8, r8)
    634c:	4b17      	ldr	r3, [pc, #92]	; (63ac <_system_extint_init+0xcc>)
    634e:	4798      	blx	r3
    6350:	1c03      	adds	r3, r0, #0
    6352:	2b00      	cmp	r3, #0
    6354:	d1fa      	bne.n	634c <_system_extint_init+0x6c>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6356:	1c3b      	adds	r3, r7, #0
    6358:	330b      	adds	r3, #11
    635a:	2200      	movs	r2, #0
    635c:	701a      	strb	r2, [r3, #0]
    635e:	e00d      	b.n	637c <_system_extint_init+0x9c>
		_extint_dev.callbacks[j] = NULL;
    6360:	1c3b      	adds	r3, r7, #0
    6362:	330b      	adds	r3, #11
    6364:	781a      	ldrb	r2, [r3, #0]
    6366:	4b12      	ldr	r3, [pc, #72]	; (63b0 <_system_extint_init+0xd0>)
    6368:	0092      	lsls	r2, r2, #2
    636a:	2100      	movs	r1, #0
    636c:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    636e:	1c3b      	adds	r3, r7, #0
    6370:	330b      	adds	r3, #11
    6372:	781a      	ldrb	r2, [r3, #0]
    6374:	1c3b      	adds	r3, r7, #0
    6376:	330b      	adds	r3, #11
    6378:	3201      	adds	r2, #1
    637a:	701a      	strb	r2, [r3, #0]
    637c:	1c3b      	adds	r3, r7, #0
    637e:	330b      	adds	r3, #11
    6380:	781b      	ldrb	r3, [r3, #0]
    6382:	2b0f      	cmp	r3, #15
    6384:	d9ec      	bls.n	6360 <_system_extint_init+0x80>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    6386:	2004      	movs	r0, #4
    6388:	4b0a      	ldr	r3, [pc, #40]	; (63b4 <_system_extint_init+0xd4>)
    638a:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    638c:	4b0a      	ldr	r3, [pc, #40]	; (63b8 <_system_extint_init+0xd8>)
    638e:	4798      	blx	r3
}
    6390:	46bd      	mov	sp, r7
    6392:	b004      	add	sp, #16
    6394:	bd80      	pop	{r7, pc}
    6396:	46c0      	nop			; (mov r8, r8)
    6398:	40001800 	.word	0x40001800
    639c:	00006259 	.word	0x00006259
    63a0:	00006245 	.word	0x00006245
    63a4:	0000807d 	.word	0x0000807d
    63a8:	000080bd 	.word	0x000080bd
    63ac:	000061f9 	.word	0x000061f9
    63b0:	20001060 	.word	0x20001060
    63b4:	000062b5 	.word	0x000062b5
    63b8:	000063bd 	.word	0x000063bd

000063bc <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    63bc:	b580      	push	{r7, lr}
    63be:	b082      	sub	sp, #8
    63c0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    63c2:	4b14      	ldr	r3, [pc, #80]	; (6414 <_extint_enable+0x58>)
    63c4:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    63c6:	2300      	movs	r3, #0
    63c8:	607b      	str	r3, [r7, #4]
    63ca:	e016      	b.n	63fa <_extint_enable+0x3e>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    63cc:	687b      	ldr	r3, [r7, #4]
    63ce:	009b      	lsls	r3, r3, #2
    63d0:	2108      	movs	r1, #8
    63d2:	19c9      	adds	r1, r1, r7
    63d4:	18cb      	adds	r3, r1, r3
    63d6:	3b08      	subs	r3, #8
    63d8:	681a      	ldr	r2, [r3, #0]
    63da:	687b      	ldr	r3, [r7, #4]
    63dc:	009b      	lsls	r3, r3, #2
    63de:	2108      	movs	r1, #8
    63e0:	19c9      	adds	r1, r1, r7
    63e2:	18cb      	adds	r3, r1, r3
    63e4:	3b08      	subs	r3, #8
    63e6:	681b      	ldr	r3, [r3, #0]
    63e8:	681b      	ldr	r3, [r3, #0]
    63ea:	b2db      	uxtb	r3, r3
    63ec:	2102      	movs	r1, #2
    63ee:	430b      	orrs	r3, r1
    63f0:	b2db      	uxtb	r3, r3
    63f2:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    63f4:	687b      	ldr	r3, [r7, #4]
    63f6:	3301      	adds	r3, #1
    63f8:	607b      	str	r3, [r7, #4]
    63fa:	687b      	ldr	r3, [r7, #4]
    63fc:	2b00      	cmp	r3, #0
    63fe:	d0e5      	beq.n	63cc <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    6400:	46c0      	nop			; (mov r8, r8)
    6402:	4b05      	ldr	r3, [pc, #20]	; (6418 <_extint_enable+0x5c>)
    6404:	4798      	blx	r3
    6406:	1c03      	adds	r3, r0, #0
    6408:	2b00      	cmp	r3, #0
    640a:	d1fa      	bne.n	6402 <_extint_enable+0x46>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    640c:	46bd      	mov	sp, r7
    640e:	b002      	add	sp, #8
    6410:	bd80      	pop	{r7, pc}
    6412:	46c0      	nop			; (mov r8, r8)
    6414:	40001800 	.word	0x40001800
    6418:	000061f9 	.word	0x000061f9

0000641c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    641c:	b590      	push	{r4, r7, lr}
    641e:	b087      	sub	sp, #28
    6420:	af00      	add	r7, sp, #0
    6422:	1c02      	adds	r2, r0, #0
    6424:	6039      	str	r1, [r7, #0]
    6426:	1dfb      	adds	r3, r7, #7
    6428:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    642a:	1c3b      	adds	r3, r7, #0
    642c:	3308      	adds	r3, #8
    642e:	1c18      	adds	r0, r3, #0
    6430:	4b37      	ldr	r3, [pc, #220]	; (6510 <extint_chan_set_config+0xf4>)
    6432:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    6434:	683b      	ldr	r3, [r7, #0]
    6436:	685b      	ldr	r3, [r3, #4]
    6438:	b2da      	uxtb	r2, r3
    643a:	1c3b      	adds	r3, r7, #0
    643c:	3308      	adds	r3, #8
    643e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6440:	1c3b      	adds	r3, r7, #0
    6442:	3308      	adds	r3, #8
    6444:	2200      	movs	r2, #0
    6446:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    6448:	683b      	ldr	r3, [r7, #0]
    644a:	7a1a      	ldrb	r2, [r3, #8]
    644c:	1c3b      	adds	r3, r7, #0
    644e:	3308      	adds	r3, #8
    6450:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    6452:	683b      	ldr	r3, [r7, #0]
    6454:	681b      	ldr	r3, [r3, #0]
    6456:	b2da      	uxtb	r2, r3
    6458:	1c3b      	adds	r3, r7, #0
    645a:	3308      	adds	r3, #8
    645c:	1c10      	adds	r0, r2, #0
    645e:	1c19      	adds	r1, r3, #0
    6460:	4b2c      	ldr	r3, [pc, #176]	; (6514 <extint_chan_set_config+0xf8>)
    6462:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    6464:	1dfb      	adds	r3, r7, #7
    6466:	781b      	ldrb	r3, [r3, #0]
    6468:	1c18      	adds	r0, r3, #0
    646a:	4b2b      	ldr	r3, [pc, #172]	; (6518 <extint_chan_set_config+0xfc>)
    646c:	4798      	blx	r3
    646e:	1c03      	adds	r3, r0, #0
    6470:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    6472:	1dfb      	adds	r3, r7, #7
    6474:	781a      	ldrb	r2, [r3, #0]
    6476:	2307      	movs	r3, #7
    6478:	4013      	ands	r3, r2
    647a:	009b      	lsls	r3, r3, #2
    647c:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    647e:	683b      	ldr	r3, [r7, #0]
    6480:	7adb      	ldrb	r3, [r3, #11]
    6482:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    6484:	683b      	ldr	r3, [r7, #0]
    6486:	7a9b      	ldrb	r3, [r3, #10]
    6488:	2b00      	cmp	r3, #0
    648a:	d003      	beq.n	6494 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    648c:	697b      	ldr	r3, [r7, #20]
    648e:	2208      	movs	r2, #8
    6490:	4313      	orrs	r3, r2
    6492:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    6494:	1dfb      	adds	r3, r7, #7
    6496:	781b      	ldrb	r3, [r3, #0]
    6498:	08db      	lsrs	r3, r3, #3
    649a:	b2db      	uxtb	r3, r3
    649c:	1c1a      	adds	r2, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
    649e:	1dfb      	adds	r3, r7, #7
    64a0:	781b      	ldrb	r3, [r3, #0]
    64a2:	08db      	lsrs	r3, r3, #3
    64a4:	b2db      	uxtb	r3, r3
    64a6:	1c19      	adds	r1, r3, #0
    64a8:	693b      	ldr	r3, [r7, #16]
    64aa:	3106      	adds	r1, #6
    64ac:	0089      	lsls	r1, r1, #2
    64ae:	58cb      	ldr	r3, [r1, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    64b0:	68f9      	ldr	r1, [r7, #12]
    64b2:	200f      	movs	r0, #15
    64b4:	1c04      	adds	r4, r0, #0
    64b6:	408c      	lsls	r4, r1
    64b8:	1c21      	adds	r1, r4, #0
    64ba:	43c9      	mvns	r1, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    64bc:	4019      	ands	r1, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    64be:	68fb      	ldr	r3, [r7, #12]
    64c0:	6978      	ldr	r0, [r7, #20]
    64c2:	1c04      	adds	r4, r0, #0
    64c4:	409c      	lsls	r4, r3
    64c6:	1c23      	adds	r3, r4, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    64c8:	4319      	orrs	r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    64ca:	693b      	ldr	r3, [r7, #16]
    64cc:	3206      	adds	r2, #6
    64ce:	0092      	lsls	r2, r2, #2
    64d0:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    64d2:	683b      	ldr	r3, [r7, #0]
    64d4:	7a5b      	ldrb	r3, [r3, #9]
    64d6:	2b00      	cmp	r3, #0
    64d8:	d00b      	beq.n	64f2 <extint_chan_set_config+0xd6>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    64da:	693b      	ldr	r3, [r7, #16]
    64dc:	695a      	ldr	r2, [r3, #20]
    64de:	1dfb      	adds	r3, r7, #7
    64e0:	781b      	ldrb	r3, [r3, #0]
    64e2:	2101      	movs	r1, #1
    64e4:	1c08      	adds	r0, r1, #0
    64e6:	4098      	lsls	r0, r3
    64e8:	1c03      	adds	r3, r0, #0
    64ea:	431a      	orrs	r2, r3
    64ec:	693b      	ldr	r3, [r7, #16]
    64ee:	615a      	str	r2, [r3, #20]
    64f0:	e00b      	b.n	650a <extint_chan_set_config+0xee>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    64f2:	693b      	ldr	r3, [r7, #16]
    64f4:	695b      	ldr	r3, [r3, #20]
    64f6:	1dfa      	adds	r2, r7, #7
    64f8:	7812      	ldrb	r2, [r2, #0]
    64fa:	2101      	movs	r1, #1
    64fc:	1c0c      	adds	r4, r1, #0
    64fe:	4094      	lsls	r4, r2
    6500:	1c22      	adds	r2, r4, #0
    6502:	43d2      	mvns	r2, r2
    6504:	401a      	ands	r2, r3
    6506:	693b      	ldr	r3, [r7, #16]
    6508:	615a      	str	r2, [r3, #20]
	}
}
    650a:	46bd      	mov	sp, r7
    650c:	b007      	add	sp, #28
    650e:	bd90      	pop	{r4, r7, pc}
    6510:	00006189 	.word	0x00006189
    6514:	00008355 	.word	0x00008355
    6518:	000061b1 	.word	0x000061b1

0000651c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    651c:	b580      	push	{r7, lr}
    651e:	b084      	sub	sp, #16
    6520:	af00      	add	r7, sp, #0
    6522:	1c02      	adds	r2, r0, #0
    6524:	1dfb      	adds	r3, r7, #7
    6526:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    6528:	1c3b      	adds	r3, r7, #0
    652a:	330f      	adds	r3, #15
    652c:	1dfa      	adds	r2, r7, #7
    652e:	7812      	ldrb	r2, [r2, #0]
    6530:	0952      	lsrs	r2, r2, #5
    6532:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    6534:	1c3b      	adds	r3, r7, #0
    6536:	330f      	adds	r3, #15
    6538:	781b      	ldrb	r3, [r3, #0]
    653a:	2b00      	cmp	r3, #0
    653c:	d10b      	bne.n	6556 <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    653e:	4b08      	ldr	r3, [pc, #32]	; (6560 <_extint_get_eic_from_channel+0x44>)
    6540:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    6542:	1c3b      	adds	r3, r7, #0
    6544:	330f      	adds	r3, #15
    6546:	781b      	ldrb	r3, [r3, #0]
    6548:	009b      	lsls	r3, r3, #2
    654a:	2210      	movs	r2, #16
    654c:	19d2      	adds	r2, r2, r7
    654e:	18d3      	adds	r3, r2, r3
    6550:	3b08      	subs	r3, #8
    6552:	681b      	ldr	r3, [r3, #0]
    6554:	e000      	b.n	6558 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    6556:	2300      	movs	r3, #0
	}
}
    6558:	1c18      	adds	r0, r3, #0
    655a:	46bd      	mov	sp, r7
    655c:	b004      	add	sp, #16
    655e:	bd80      	pop	{r7, pc}
    6560:	40001800 	.word	0x40001800

00006564 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    6564:	b580      	push	{r7, lr}
    6566:	b084      	sub	sp, #16
    6568:	af00      	add	r7, sp, #0
    656a:	1c02      	adds	r2, r0, #0
    656c:	1dfb      	adds	r3, r7, #7
    656e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    6570:	1dfb      	adds	r3, r7, #7
    6572:	781b      	ldrb	r3, [r3, #0]
    6574:	1c18      	adds	r0, r3, #0
    6576:	4b0c      	ldr	r3, [pc, #48]	; (65a8 <extint_chan_is_detected+0x44>)
    6578:	4798      	blx	r3
    657a:	1c03      	adds	r3, r0, #0
    657c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    657e:	1dfb      	adds	r3, r7, #7
    6580:	781a      	ldrb	r2, [r3, #0]
    6582:	231f      	movs	r3, #31
    6584:	4013      	ands	r3, r2
    6586:	2201      	movs	r2, #1
    6588:	1c11      	adds	r1, r2, #0
    658a:	4099      	lsls	r1, r3
    658c:	1c0b      	adds	r3, r1, #0
    658e:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    6590:	68fb      	ldr	r3, [r7, #12]
    6592:	691b      	ldr	r3, [r3, #16]
    6594:	68ba      	ldr	r2, [r7, #8]
    6596:	4013      	ands	r3, r2
    6598:	1e5a      	subs	r2, r3, #1
    659a:	4193      	sbcs	r3, r2
    659c:	b2db      	uxtb	r3, r3
}
    659e:	1c18      	adds	r0, r3, #0
    65a0:	46bd      	mov	sp, r7
    65a2:	b004      	add	sp, #16
    65a4:	bd80      	pop	{r7, pc}
    65a6:	46c0      	nop			; (mov r8, r8)
    65a8:	0000651d 	.word	0x0000651d

000065ac <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check.
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    65ac:	b580      	push	{r7, lr}
    65ae:	b084      	sub	sp, #16
    65b0:	af00      	add	r7, sp, #0
    65b2:	1c02      	adds	r2, r0, #0
    65b4:	1dfb      	adds	r3, r7, #7
    65b6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    65b8:	1dfb      	adds	r3, r7, #7
    65ba:	781b      	ldrb	r3, [r3, #0]
    65bc:	1c18      	adds	r0, r3, #0
    65be:	4b09      	ldr	r3, [pc, #36]	; (65e4 <extint_chan_clear_detected+0x38>)
    65c0:	4798      	blx	r3
    65c2:	1c03      	adds	r3, r0, #0
    65c4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    65c6:	1dfb      	adds	r3, r7, #7
    65c8:	781a      	ldrb	r2, [r3, #0]
    65ca:	231f      	movs	r3, #31
    65cc:	4013      	ands	r3, r2
    65ce:	2201      	movs	r2, #1
    65d0:	1c11      	adds	r1, r2, #0
    65d2:	4099      	lsls	r1, r3
    65d4:	1c0b      	adds	r3, r1, #0
    65d6:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    65d8:	68fb      	ldr	r3, [r7, #12]
    65da:	68ba      	ldr	r2, [r7, #8]
    65dc:	611a      	str	r2, [r3, #16]
}
    65de:	46bd      	mov	sp, r7
    65e0:	b004      	add	sp, #16
    65e2:	bd80      	pop	{r7, pc}
    65e4:	0000651d 	.word	0x0000651d

000065e8 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    65e8:	b580      	push	{r7, lr}
    65ea:	b082      	sub	sp, #8
    65ec:	af00      	add	r7, sp, #0
    65ee:	6078      	str	r0, [r7, #4]
    65f0:	1cfb      	adds	r3, r7, #3
    65f2:	7019      	strb	r1, [r3, #0]
    65f4:	1cbb      	adds	r3, r7, #2
    65f6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    65f8:	1cbb      	adds	r3, r7, #2
    65fa:	781b      	ldrb	r3, [r3, #0]
    65fc:	2b00      	cmp	r3, #0
    65fe:	d001      	beq.n	6604 <extint_register_callback+0x1c>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6600:	2317      	movs	r3, #23
    6602:	e019      	b.n	6638 <extint_register_callback+0x50>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    6604:	1cfb      	adds	r3, r7, #3
    6606:	781a      	ldrb	r2, [r3, #0]
    6608:	4b0d      	ldr	r3, [pc, #52]	; (6640 <extint_register_callback+0x58>)
    660a:	0092      	lsls	r2, r2, #2
    660c:	58d3      	ldr	r3, [r2, r3]
    660e:	2b00      	cmp	r3, #0
    6610:	d107      	bne.n	6622 <extint_register_callback+0x3a>
		_extint_dev.callbacks[channel] = callback;
    6612:	1cfb      	adds	r3, r7, #3
    6614:	781a      	ldrb	r2, [r3, #0]
    6616:	4b0a      	ldr	r3, [pc, #40]	; (6640 <extint_register_callback+0x58>)
    6618:	0092      	lsls	r2, r2, #2
    661a:	6879      	ldr	r1, [r7, #4]
    661c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    661e:	2300      	movs	r3, #0
    6620:	e00a      	b.n	6638 <extint_register_callback+0x50>
	} else if (_extint_dev.callbacks[channel] == callback) {
    6622:	1cfb      	adds	r3, r7, #3
    6624:	781a      	ldrb	r2, [r3, #0]
    6626:	4b06      	ldr	r3, [pc, #24]	; (6640 <extint_register_callback+0x58>)
    6628:	0092      	lsls	r2, r2, #2
    662a:	58d2      	ldr	r2, [r2, r3]
    662c:	687b      	ldr	r3, [r7, #4]
    662e:	429a      	cmp	r2, r3
    6630:	d101      	bne.n	6636 <extint_register_callback+0x4e>
		return STATUS_OK;
    6632:	2300      	movs	r3, #0
    6634:	e000      	b.n	6638 <extint_register_callback+0x50>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    6636:	231d      	movs	r3, #29
}
    6638:	1c18      	adds	r0, r3, #0
    663a:	46bd      	mov	sp, r7
    663c:	b002      	add	sp, #8
    663e:	bd80      	pop	{r7, pc}
    6640:	20001060 	.word	0x20001060

00006644 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied.
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    6644:	b580      	push	{r7, lr}
    6646:	b084      	sub	sp, #16
    6648:	af00      	add	r7, sp, #0
    664a:	1c0a      	adds	r2, r1, #0
    664c:	1dfb      	adds	r3, r7, #7
    664e:	1c01      	adds	r1, r0, #0
    6650:	7019      	strb	r1, [r3, #0]
    6652:	1dbb      	adds	r3, r7, #6
    6654:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    6656:	1dbb      	adds	r3, r7, #6
    6658:	781b      	ldrb	r3, [r3, #0]
    665a:	2b00      	cmp	r3, #0
    665c:	d10e      	bne.n	667c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    665e:	1dfb      	adds	r3, r7, #7
    6660:	781b      	ldrb	r3, [r3, #0]
    6662:	1c18      	adds	r0, r3, #0
    6664:	4b08      	ldr	r3, [pc, #32]	; (6688 <extint_chan_enable_callback+0x44>)
    6666:	4798      	blx	r3
    6668:	1c03      	adds	r3, r0, #0
    666a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    666c:	1dfb      	adds	r3, r7, #7
    666e:	781b      	ldrb	r3, [r3, #0]
    6670:	2201      	movs	r2, #1
    6672:	409a      	lsls	r2, r3
    6674:	68fb      	ldr	r3, [r7, #12]
    6676:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    6678:	2300      	movs	r3, #0
    667a:	e000      	b.n	667e <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    667c:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    667e:	1c18      	adds	r0, r3, #0
    6680:	46bd      	mov	sp, r7
    6682:	b004      	add	sp, #16
    6684:	bd80      	pop	{r7, pc}
    6686:	46c0      	nop			; (mov r8, r8)
    6688:	0000651d 	.word	0x0000651d

0000668c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied.
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    668c:	b580      	push	{r7, lr}
    668e:	b084      	sub	sp, #16
    6690:	af00      	add	r7, sp, #0
    6692:	1c0a      	adds	r2, r1, #0
    6694:	1dfb      	adds	r3, r7, #7
    6696:	1c01      	adds	r1, r0, #0
    6698:	7019      	strb	r1, [r3, #0]
    669a:	1dbb      	adds	r3, r7, #6
    669c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    669e:	1dbb      	adds	r3, r7, #6
    66a0:	781b      	ldrb	r3, [r3, #0]
    66a2:	2b00      	cmp	r3, #0
    66a4:	d10e      	bne.n	66c4 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    66a6:	1dfb      	adds	r3, r7, #7
    66a8:	781b      	ldrb	r3, [r3, #0]
    66aa:	1c18      	adds	r0, r3, #0
    66ac:	4b08      	ldr	r3, [pc, #32]	; (66d0 <extint_chan_disable_callback+0x44>)
    66ae:	4798      	blx	r3
    66b0:	1c03      	adds	r3, r0, #0
    66b2:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    66b4:	1dfb      	adds	r3, r7, #7
    66b6:	781b      	ldrb	r3, [r3, #0]
    66b8:	2201      	movs	r2, #1
    66ba:	409a      	lsls	r2, r3
    66bc:	68fb      	ldr	r3, [r7, #12]
    66be:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    66c0:	2300      	movs	r3, #0
    66c2:	e000      	b.n	66c6 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    66c4:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    66c6:	1c18      	adds	r0, r3, #0
    66c8:	46bd      	mov	sp, r7
    66ca:	b004      	add	sp, #16
    66cc:	bd80      	pop	{r7, pc}
    66ce:	46c0      	nop			; (mov r8, r8)
    66d0:	0000651d 	.word	0x0000651d

000066d4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    66d4:	b580      	push	{r7, lr}
    66d6:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    66d8:	4b15      	ldr	r3, [pc, #84]	; (6730 <EIC_Handler+0x5c>)
    66da:	2200      	movs	r2, #0
    66dc:	701a      	strb	r2, [r3, #0]
    66de:	e021      	b.n	6724 <EIC_Handler+0x50>
		if (extint_chan_is_detected(_current_channel)) {
    66e0:	4b13      	ldr	r3, [pc, #76]	; (6730 <EIC_Handler+0x5c>)
    66e2:	781b      	ldrb	r3, [r3, #0]
    66e4:	1c18      	adds	r0, r3, #0
    66e6:	4b13      	ldr	r3, [pc, #76]	; (6734 <EIC_Handler+0x60>)
    66e8:	4798      	blx	r3
    66ea:	1c03      	adds	r3, r0, #0
    66ec:	2b00      	cmp	r3, #0
    66ee:	d013      	beq.n	6718 <EIC_Handler+0x44>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    66f0:	4b0f      	ldr	r3, [pc, #60]	; (6730 <EIC_Handler+0x5c>)
    66f2:	781b      	ldrb	r3, [r3, #0]
    66f4:	1c18      	adds	r0, r3, #0
    66f6:	4b10      	ldr	r3, [pc, #64]	; (6738 <EIC_Handler+0x64>)
    66f8:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    66fa:	4b0d      	ldr	r3, [pc, #52]	; (6730 <EIC_Handler+0x5c>)
    66fc:	781b      	ldrb	r3, [r3, #0]
    66fe:	1c1a      	adds	r2, r3, #0
    6700:	4b0e      	ldr	r3, [pc, #56]	; (673c <EIC_Handler+0x68>)
    6702:	0092      	lsls	r2, r2, #2
    6704:	58d3      	ldr	r3, [r2, r3]
    6706:	2b00      	cmp	r3, #0
    6708:	d006      	beq.n	6718 <EIC_Handler+0x44>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    670a:	4b09      	ldr	r3, [pc, #36]	; (6730 <EIC_Handler+0x5c>)
    670c:	781b      	ldrb	r3, [r3, #0]
    670e:	1c1a      	adds	r2, r3, #0
    6710:	4b0a      	ldr	r3, [pc, #40]	; (673c <EIC_Handler+0x68>)
    6712:	0092      	lsls	r2, r2, #2
    6714:	58d3      	ldr	r3, [r2, r3]
    6716:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6718:	4b05      	ldr	r3, [pc, #20]	; (6730 <EIC_Handler+0x5c>)
    671a:	781b      	ldrb	r3, [r3, #0]
    671c:	3301      	adds	r3, #1
    671e:	b2da      	uxtb	r2, r3
    6720:	4b03      	ldr	r3, [pc, #12]	; (6730 <EIC_Handler+0x5c>)
    6722:	701a      	strb	r2, [r3, #0]
    6724:	4b02      	ldr	r3, [pc, #8]	; (6730 <EIC_Handler+0x5c>)
    6726:	781b      	ldrb	r3, [r3, #0]
    6728:	2b0f      	cmp	r3, #15
    672a:	d9d9      	bls.n	66e0 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    672c:	46bd      	mov	sp, r7
    672e:	bd80      	pop	{r7, pc}
    6730:	200010a0 	.word	0x200010a0
    6734:	00006565 	.word	0x00006565
    6738:	000065ad 	.word	0x000065ad
    673c:	20001060 	.word	0x20001060

00006740 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6740:	b580      	push	{r7, lr}
    6742:	b082      	sub	sp, #8
    6744:	af00      	add	r7, sp, #0
    6746:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6748:	687b      	ldr	r3, [r7, #4]
    674a:	2280      	movs	r2, #128	; 0x80
    674c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    674e:	687b      	ldr	r3, [r7, #4]
    6750:	2200      	movs	r2, #0
    6752:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6754:	687b      	ldr	r3, [r7, #4]
    6756:	2201      	movs	r2, #1
    6758:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    675a:	687b      	ldr	r3, [r7, #4]
    675c:	2200      	movs	r2, #0
    675e:	70da      	strb	r2, [r3, #3]
}
    6760:	46bd      	mov	sp, r7
    6762:	b002      	add	sp, #8
    6764:	bd80      	pop	{r7, pc}
    6766:	46c0      	nop			; (mov r8, r8)

00006768 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6768:	b580      	push	{r7, lr}
    676a:	b084      	sub	sp, #16
    676c:	af00      	add	r7, sp, #0
    676e:	1c02      	adds	r2, r0, #0
    6770:	6039      	str	r1, [r7, #0]
    6772:	1dfb      	adds	r3, r7, #7
    6774:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    6776:	1c3b      	adds	r3, r7, #0
    6778:	330c      	adds	r3, #12
    677a:	1c18      	adds	r0, r3, #0
    677c:	4b0f      	ldr	r3, [pc, #60]	; (67bc <port_pin_set_config+0x54>)
    677e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    6780:	1c3b      	adds	r3, r7, #0
    6782:	330c      	adds	r3, #12
    6784:	2280      	movs	r2, #128	; 0x80
    6786:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    6788:	683b      	ldr	r3, [r7, #0]
    678a:	781a      	ldrb	r2, [r3, #0]
    678c:	1c3b      	adds	r3, r7, #0
    678e:	330c      	adds	r3, #12
    6790:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6792:	683b      	ldr	r3, [r7, #0]
    6794:	785a      	ldrb	r2, [r3, #1]
    6796:	1c3b      	adds	r3, r7, #0
    6798:	330c      	adds	r3, #12
    679a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    679c:	683b      	ldr	r3, [r7, #0]
    679e:	789a      	ldrb	r2, [r3, #2]
    67a0:	1c3b      	adds	r3, r7, #0
    67a2:	330c      	adds	r3, #12
    67a4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    67a6:	1dfb      	adds	r3, r7, #7
    67a8:	781a      	ldrb	r2, [r3, #0]
    67aa:	1c3b      	adds	r3, r7, #0
    67ac:	330c      	adds	r3, #12
    67ae:	1c10      	adds	r0, r2, #0
    67b0:	1c19      	adds	r1, r3, #0
    67b2:	4b03      	ldr	r3, [pc, #12]	; (67c0 <port_pin_set_config+0x58>)
    67b4:	4798      	blx	r3
}
    67b6:	46bd      	mov	sp, r7
    67b8:	b004      	add	sp, #16
    67ba:	bd80      	pop	{r7, pc}
    67bc:	00006741 	.word	0x00006741
    67c0:	00008355 	.word	0x00008355

000067c4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    67c4:	b580      	push	{r7, lr}
    67c6:	b082      	sub	sp, #8
    67c8:	af00      	add	r7, sp, #0
    67ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    67cc:	687b      	ldr	r3, [r7, #4]
    67ce:	2200      	movs	r2, #0
    67d0:	701a      	strb	r2, [r3, #0]
}
    67d2:	46bd      	mov	sp, r7
    67d4:	b002      	add	sp, #8
    67d6:	bd80      	pop	{r7, pc}

000067d8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    67d8:	b580      	push	{r7, lr}
    67da:	b086      	sub	sp, #24
    67dc:	af00      	add	r7, sp, #0
    67de:	60f8      	str	r0, [r7, #12]
    67e0:	60b9      	str	r1, [r7, #8]
    67e2:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    67e4:	1c3b      	adds	r3, r7, #0
    67e6:	3316      	adds	r3, #22
    67e8:	2200      	movs	r2, #0
    67ea:	801a      	strh	r2, [r3, #0]

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    67ec:	68bb      	ldr	r3, [r7, #8]
    67ee:	085a      	lsrs	r2, r3, #1
    67f0:	68fb      	ldr	r3, [r7, #12]
    67f2:	429a      	cmp	r2, r3
    67f4:	d201      	bcs.n	67fa <_sercom_get_sync_baud_val+0x22>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    67f6:	2340      	movs	r3, #64	; 0x40
    67f8:	e018      	b.n	682c <_sercom_get_sync_baud_val+0x54>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;
    67fa:	68fb      	ldr	r3, [r7, #12]
    67fc:	005a      	lsls	r2, r3, #1
    67fe:	4b0d      	ldr	r3, [pc, #52]	; (6834 <_sercom_get_sync_baud_val+0x5c>)
    6800:	68b8      	ldr	r0, [r7, #8]
    6802:	1c11      	adds	r1, r2, #0
    6804:	4798      	blx	r3
    6806:	1c03      	adds	r3, r0, #0
    6808:	b29a      	uxth	r2, r3
    680a:	1c3b      	adds	r3, r7, #0
    680c:	3316      	adds	r3, #22
    680e:	3a01      	subs	r2, #1
    6810:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    6812:	1c3b      	adds	r3, r7, #0
    6814:	3316      	adds	r3, #22
    6816:	881b      	ldrh	r3, [r3, #0]
    6818:	2bff      	cmp	r3, #255	; 0xff
    681a:	d901      	bls.n	6820 <_sercom_get_sync_baud_val+0x48>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    681c:	2340      	movs	r3, #64	; 0x40
    681e:	e005      	b.n	682c <_sercom_get_sync_baud_val+0x54>
	} else {
		*baudvalue = baud_calculated;
    6820:	687b      	ldr	r3, [r7, #4]
    6822:	1c3a      	adds	r2, r7, #0
    6824:	3216      	adds	r2, #22
    6826:	8812      	ldrh	r2, [r2, #0]
    6828:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    682a:	2300      	movs	r3, #0
	}
}
    682c:	1c18      	adds	r0, r3, #0
    682e:	46bd      	mov	sp, r7
    6830:	b006      	add	sp, #24
    6832:	bd80      	pop	{r7, pc}
    6834:	0000976d 	.word	0x0000976d

00006838 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    6838:	b5f0      	push	{r4, r5, r6, r7, lr}
    683a:	b09d      	sub	sp, #116	; 0x74
    683c:	af00      	add	r7, sp, #0
    683e:	64f8      	str	r0, [r7, #76]	; 0x4c
    6840:	64b9      	str	r1, [r7, #72]	; 0x48
    6842:	647a      	str	r2, [r7, #68]	; 0x44
    6844:	1c3a      	adds	r2, r7, #0
    6846:	3243      	adds	r2, #67	; 0x43
    6848:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    684a:	2300      	movs	r3, #0
    684c:	2400      	movs	r4, #0
    684e:	65bb      	str	r3, [r7, #88]	; 0x58
    6850:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    6852:	2300      	movs	r3, #0
    6854:	2400      	movs	r4, #0
    6856:	653b      	str	r3, [r7, #80]	; 0x50
    6858:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    685a:	2300      	movs	r3, #0
    685c:	2400      	movs	r4, #0
    685e:	66bb      	str	r3, [r7, #104]	; 0x68
    6860:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) >= peripheral_clock) {
    6862:	1c3b      	adds	r3, r7, #0
    6864:	3388      	adds	r3, #136	; 0x88
    6866:	781a      	ldrb	r2, [r3, #0]
    6868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    686a:	435a      	muls	r2, r3
    686c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    686e:	429a      	cmp	r2, r3
    6870:	d301      	bcc.n	6876 <_sercom_get_async_baud_val+0x3e>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6872:	2340      	movs	r3, #64	; 0x40
    6874:	e0a6      	b.n	69c4 <_sercom_get_async_baud_val+0x18c>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    6876:	1c3b      	adds	r3, r7, #0
    6878:	3343      	adds	r3, #67	; 0x43
    687a:	781b      	ldrb	r3, [r3, #0]
    687c:	2b00      	cmp	r3, #0
    687e:	d13c      	bne.n	68fa <_sercom_get_async_baud_val+0xc2>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
    6880:	1c3b      	adds	r3, r7, #0
    6882:	3388      	adds	r3, #136	; 0x88
    6884:	781b      	ldrb	r3, [r3, #0]
    6886:	b2db      	uxtb	r3, r3
    6888:	63bb      	str	r3, [r7, #56]	; 0x38
    688a:	2300      	movs	r3, #0
    688c:	63fb      	str	r3, [r7, #60]	; 0x3c
    688e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6890:	633b      	str	r3, [r7, #48]	; 0x30
    6892:	2300      	movs	r3, #0
    6894:	637b      	str	r3, [r7, #52]	; 0x34
    6896:	4c50      	ldr	r4, [pc, #320]	; (69d8 <_sercom_get_async_baud_val+0x1a0>)
    6898:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    689a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    689c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    689e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    68a0:	47a0      	blx	r4
    68a2:	1c03      	adds	r3, r0, #0
    68a4:	1c0c      	adds	r4, r1, #0
    68a6:	001a      	movs	r2, r3
    68a8:	62fa      	str	r2, [r7, #44]	; 0x2c
    68aa:	2300      	movs	r3, #0
    68ac:	62bb      	str	r3, [r7, #40]	; 0x28
    68ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    68b0:	623b      	str	r3, [r7, #32]
    68b2:	2300      	movs	r3, #0
    68b4:	627b      	str	r3, [r7, #36]	; 0x24
    68b6:	4c49      	ldr	r4, [pc, #292]	; (69dc <_sercom_get_async_baud_val+0x1a4>)
    68b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    68ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    68bc:	6a3a      	ldr	r2, [r7, #32]
    68be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    68c0:	47a0      	blx	r4
    68c2:	1c03      	adds	r3, r0, #0
    68c4:	1c0c      	adds	r4, r1, #0
    68c6:	65bb      	str	r3, [r7, #88]	; 0x58
    68c8:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    68ca:	4a42      	ldr	r2, [pc, #264]	; (69d4 <_sercom_get_async_baud_val+0x19c>)
    68cc:	4940      	ldr	r1, [pc, #256]	; (69d0 <_sercom_get_async_baud_val+0x198>)
    68ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    68d0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    68d2:	1c0d      	adds	r5, r1, #0
    68d4:	1c16      	adds	r6, r2, #0
    68d6:	1aed      	subs	r5, r5, r3
    68d8:	41a6      	sbcs	r6, r4
    68da:	1c2b      	adds	r3, r5, #0
    68dc:	1c34      	adds	r4, r6, #0
    68de:	653b      	str	r3, [r7, #80]	; 0x50
    68e0:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    68e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    68e4:	0c1b      	lsrs	r3, r3, #16
    68e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    68e8:	0416      	lsls	r6, r2, #16
    68ea:	431e      	orrs	r6, r3
    68ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    68ee:	041d      	lsls	r5, r3, #16
    68f0:	0033      	movs	r3, r6
    68f2:	66bb      	str	r3, [r7, #104]	; 0x68
    68f4:	2300      	movs	r3, #0
    68f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    68f8:	e05e      	b.n	69b8 <_sercom_get_async_baud_val+0x180>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    68fa:	1c3b      	adds	r3, r7, #0
    68fc:	3343      	adds	r3, #67	; 0x43
    68fe:	781b      	ldrb	r3, [r3, #0]
    6900:	2b01      	cmp	r3, #1
    6902:	d159      	bne.n	69b8 <_sercom_get_async_baud_val+0x180>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    6904:	1c3b      	adds	r3, r7, #0
    6906:	3367      	adds	r3, #103	; 0x67
    6908:	2200      	movs	r2, #0
    690a:	701a      	strb	r2, [r3, #0]
    690c:	e03e      	b.n	698c <_sercom_get_async_baud_val+0x154>
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
    690e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6910:	61bb      	str	r3, [r7, #24]
    6912:	2300      	movs	r3, #0
    6914:	61fb      	str	r3, [r7, #28]
    6916:	69be      	ldr	r6, [r7, #24]
    6918:	0f73      	lsrs	r3, r6, #29
    691a:	69fa      	ldr	r2, [r7, #28]
    691c:	00d2      	lsls	r2, r2, #3
    691e:	617a      	str	r2, [r7, #20]
    6920:	697d      	ldr	r5, [r7, #20]
    6922:	431d      	orrs	r5, r3
    6924:	617d      	str	r5, [r7, #20]
    6926:	69be      	ldr	r6, [r7, #24]
    6928:	00f6      	lsls	r6, r6, #3
    692a:	613e      	str	r6, [r7, #16]
    692c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    692e:	60bb      	str	r3, [r7, #8]
    6930:	2300      	movs	r3, #0
    6932:	60fb      	str	r3, [r7, #12]
    6934:	1c3b      	adds	r3, r7, #0
    6936:	3388      	adds	r3, #136	; 0x88
    6938:	781b      	ldrb	r3, [r3, #0]
    693a:	b2db      	uxtb	r3, r3
    693c:	603b      	str	r3, [r7, #0]
    693e:	2300      	movs	r3, #0
    6940:	607b      	str	r3, [r7, #4]
    6942:	4c25      	ldr	r4, [pc, #148]	; (69d8 <_sercom_get_async_baud_val+0x1a0>)
    6944:	68b8      	ldr	r0, [r7, #8]
    6946:	68f9      	ldr	r1, [r7, #12]
    6948:	683a      	ldr	r2, [r7, #0]
    694a:	687b      	ldr	r3, [r7, #4]
    694c:	47a0      	blx	r4
    694e:	1c03      	adds	r3, r0, #0
    6950:	1c0c      	adds	r4, r1, #0
    6952:	4d22      	ldr	r5, [pc, #136]	; (69dc <_sercom_get_async_baud_val+0x1a4>)
    6954:	6938      	ldr	r0, [r7, #16]
    6956:	6979      	ldr	r1, [r7, #20]
    6958:	1c1a      	adds	r2, r3, #0
    695a:	1c23      	adds	r3, r4, #0
    695c:	47a8      	blx	r5
    695e:	1c03      	adds	r3, r0, #0
    6960:	1c0c      	adds	r4, r1, #0
    6962:	1c1a      	adds	r2, r3, #0
    6964:	1c3b      	adds	r3, r7, #0
    6966:	3367      	adds	r3, #103	; 0x67
    6968:	781b      	ldrb	r3, [r3, #0]
    696a:	1ad3      	subs	r3, r2, r3
    696c:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    696e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6970:	08db      	lsrs	r3, r3, #3
    6972:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    6974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6976:	4b1a      	ldr	r3, [pc, #104]	; (69e0 <_sercom_get_async_baud_val+0x1a8>)
    6978:	429a      	cmp	r2, r3
    697a:	d800      	bhi.n	697e <_sercom_get_async_baud_val+0x146>
				break;
    697c:	e00b      	b.n	6996 <_sercom_get_async_baud_val+0x15e>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    697e:	1c3b      	adds	r3, r7, #0
    6980:	3367      	adds	r3, #103	; 0x67
    6982:	781a      	ldrb	r2, [r3, #0]
    6984:	1c3b      	adds	r3, r7, #0
    6986:	3367      	adds	r3, #103	; 0x67
    6988:	3201      	adds	r2, #1
    698a:	701a      	strb	r2, [r3, #0]
    698c:	1c3b      	adds	r3, r7, #0
    698e:	3367      	adds	r3, #103	; 0x67
    6990:	781b      	ldrb	r3, [r3, #0]
    6992:	2b07      	cmp	r3, #7
    6994:	d9bb      	bls.n	690e <_sercom_get_async_baud_val+0xd6>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    6996:	1c3b      	adds	r3, r7, #0
    6998:	3367      	adds	r3, #103	; 0x67
    699a:	781b      	ldrb	r3, [r3, #0]
    699c:	2b08      	cmp	r3, #8
    699e:	d101      	bne.n	69a4 <_sercom_get_async_baud_val+0x16c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    69a0:	2340      	movs	r3, #64	; 0x40
    69a2:	e00f      	b.n	69c4 <_sercom_get_async_baud_val+0x18c>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    69a4:	1c3b      	adds	r3, r7, #0
    69a6:	3367      	adds	r3, #103	; 0x67
    69a8:	781b      	ldrb	r3, [r3, #0]
    69aa:	035b      	lsls	r3, r3, #13
    69ac:	1c1a      	adds	r2, r3, #0
    69ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    69b0:	4313      	orrs	r3, r2
    69b2:	66bb      	str	r3, [r7, #104]	; 0x68
    69b4:	2300      	movs	r3, #0
    69b6:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    69b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    69ba:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    69bc:	b29a      	uxth	r2, r3
    69be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    69c0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    69c2:	2300      	movs	r3, #0
}
    69c4:	1c18      	adds	r0, r3, #0
    69c6:	46bd      	mov	sp, r7
    69c8:	b01d      	add	sp, #116	; 0x74
    69ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69cc:	46c0      	nop			; (mov r8, r8)
    69ce:	46c0      	nop			; (mov r8, r8)
    69d0:	00000000 	.word	0x00000000
    69d4:	00000001 	.word	0x00000001
    69d8:	0000984d 	.word	0x0000984d
    69dc:	0000980d 	.word	0x0000980d
    69e0:	00001fff 	.word	0x00001fff
    69e4:	46c0      	nop			; (mov r8, r8)
    69e6:	46c0      	nop			; (mov r8, r8)

000069e8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    69e8:	b580      	push	{r7, lr}
    69ea:	b084      	sub	sp, #16
    69ec:	af00      	add	r7, sp, #0
    69ee:	1c0a      	adds	r2, r1, #0
    69f0:	1dfb      	adds	r3, r7, #7
    69f2:	1c01      	adds	r1, r0, #0
    69f4:	7019      	strb	r1, [r3, #0]
    69f6:	1dbb      	adds	r3, r7, #6
    69f8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    69fa:	4b1a      	ldr	r3, [pc, #104]	; (6a64 <sercom_set_gclk_generator+0x7c>)
    69fc:	781b      	ldrb	r3, [r3, #0]
    69fe:	2201      	movs	r2, #1
    6a00:	4053      	eors	r3, r2
    6a02:	b2db      	uxtb	r3, r3
    6a04:	2b00      	cmp	r3, #0
    6a06:	d103      	bne.n	6a10 <sercom_set_gclk_generator+0x28>
    6a08:	1dbb      	adds	r3, r7, #6
    6a0a:	781b      	ldrb	r3, [r3, #0]
    6a0c:	2b00      	cmp	r3, #0
    6a0e:	d01b      	beq.n	6a48 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6a10:	1c3b      	adds	r3, r7, #0
    6a12:	330c      	adds	r3, #12
    6a14:	1c18      	adds	r0, r3, #0
    6a16:	4b14      	ldr	r3, [pc, #80]	; (6a68 <sercom_set_gclk_generator+0x80>)
    6a18:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    6a1a:	1c3b      	adds	r3, r7, #0
    6a1c:	330c      	adds	r3, #12
    6a1e:	1dfa      	adds	r2, r7, #7
    6a20:	7812      	ldrb	r2, [r2, #0]
    6a22:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    6a24:	1c3b      	adds	r3, r7, #0
    6a26:	330c      	adds	r3, #12
    6a28:	2013      	movs	r0, #19
    6a2a:	1c19      	adds	r1, r3, #0
    6a2c:	4b0f      	ldr	r3, [pc, #60]	; (6a6c <sercom_set_gclk_generator+0x84>)
    6a2e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    6a30:	2013      	movs	r0, #19
    6a32:	4b0f      	ldr	r3, [pc, #60]	; (6a70 <sercom_set_gclk_generator+0x88>)
    6a34:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    6a36:	4b0b      	ldr	r3, [pc, #44]	; (6a64 <sercom_set_gclk_generator+0x7c>)
    6a38:	1dfa      	adds	r2, r7, #7
    6a3a:	7812      	ldrb	r2, [r2, #0]
    6a3c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    6a3e:	4b09      	ldr	r3, [pc, #36]	; (6a64 <sercom_set_gclk_generator+0x7c>)
    6a40:	2201      	movs	r2, #1
    6a42:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    6a44:	2300      	movs	r3, #0
    6a46:	e008      	b.n	6a5a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    6a48:	4b06      	ldr	r3, [pc, #24]	; (6a64 <sercom_set_gclk_generator+0x7c>)
    6a4a:	785b      	ldrb	r3, [r3, #1]
    6a4c:	1dfa      	adds	r2, r7, #7
    6a4e:	7812      	ldrb	r2, [r2, #0]
    6a50:	429a      	cmp	r2, r3
    6a52:	d101      	bne.n	6a58 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
    6a54:	2300      	movs	r3, #0
    6a56:	e000      	b.n	6a5a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    6a58:	231d      	movs	r3, #29
}
    6a5a:	1c18      	adds	r0, r3, #0
    6a5c:	46bd      	mov	sp, r7
    6a5e:	b004      	add	sp, #16
    6a60:	bd80      	pop	{r7, pc}
    6a62:	46c0      	nop			; (mov r8, r8)
    6a64:	20000944 	.word	0x20000944
    6a68:	000067c5 	.word	0x000067c5
    6a6c:	0000807d 	.word	0x0000807d
    6a70:	000080bd 	.word	0x000080bd

00006a74 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    6a74:	b580      	push	{r7, lr}
    6a76:	b082      	sub	sp, #8
    6a78:	af00      	add	r7, sp, #0
    6a7a:	6078      	str	r0, [r7, #4]
    6a7c:	1c0a      	adds	r2, r1, #0
    6a7e:	1cfb      	adds	r3, r7, #3
    6a80:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    6a82:	687b      	ldr	r3, [r7, #4]
    6a84:	4a4d      	ldr	r2, [pc, #308]	; (6bbc <_sercom_get_default_pad+0x148>)
    6a86:	4293      	cmp	r3, r2
    6a88:	d03f      	beq.n	6b0a <_sercom_get_default_pad+0x96>
    6a8a:	4a4c      	ldr	r2, [pc, #304]	; (6bbc <_sercom_get_default_pad+0x148>)
    6a8c:	4293      	cmp	r3, r2
    6a8e:	d806      	bhi.n	6a9e <_sercom_get_default_pad+0x2a>
    6a90:	4a4b      	ldr	r2, [pc, #300]	; (6bc0 <_sercom_get_default_pad+0x14c>)
    6a92:	4293      	cmp	r3, r2
    6a94:	d00f      	beq.n	6ab6 <_sercom_get_default_pad+0x42>
    6a96:	4a4b      	ldr	r2, [pc, #300]	; (6bc4 <_sercom_get_default_pad+0x150>)
    6a98:	4293      	cmp	r3, r2
    6a9a:	d021      	beq.n	6ae0 <_sercom_get_default_pad+0x6c>
    6a9c:	e089      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
    6a9e:	4a4a      	ldr	r2, [pc, #296]	; (6bc8 <_sercom_get_default_pad+0x154>)
    6aa0:	4293      	cmp	r3, r2
    6aa2:	d100      	bne.n	6aa6 <_sercom_get_default_pad+0x32>
    6aa4:	e05b      	b.n	6b5e <_sercom_get_default_pad+0xea>
    6aa6:	4a49      	ldr	r2, [pc, #292]	; (6bcc <_sercom_get_default_pad+0x158>)
    6aa8:	4293      	cmp	r3, r2
    6aaa:	d100      	bne.n	6aae <_sercom_get_default_pad+0x3a>
    6aac:	e06c      	b.n	6b88 <_sercom_get_default_pad+0x114>
    6aae:	4a48      	ldr	r2, [pc, #288]	; (6bd0 <_sercom_get_default_pad+0x15c>)
    6ab0:	4293      	cmp	r3, r2
    6ab2:	d03f      	beq.n	6b34 <_sercom_get_default_pad+0xc0>
    6ab4:	e07d      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6ab6:	1cfb      	adds	r3, r7, #3
    6ab8:	781b      	ldrb	r3, [r3, #0]
    6aba:	2b01      	cmp	r3, #1
    6abc:	d00a      	beq.n	6ad4 <_sercom_get_default_pad+0x60>
    6abe:	dc02      	bgt.n	6ac6 <_sercom_get_default_pad+0x52>
    6ac0:	2b00      	cmp	r3, #0
    6ac2:	d005      	beq.n	6ad0 <_sercom_get_default_pad+0x5c>
    6ac4:	e075      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
    6ac6:	2b02      	cmp	r3, #2
    6ac8:	d006      	beq.n	6ad8 <_sercom_get_default_pad+0x64>
    6aca:	2b03      	cmp	r3, #3
    6acc:	d006      	beq.n	6adc <_sercom_get_default_pad+0x68>
    6ace:	e070      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
    6ad0:	4b40      	ldr	r3, [pc, #256]	; (6bd4 <_sercom_get_default_pad+0x160>)
    6ad2:	e06f      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6ad4:	4b40      	ldr	r3, [pc, #256]	; (6bd8 <_sercom_get_default_pad+0x164>)
    6ad6:	e06d      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6ad8:	4b40      	ldr	r3, [pc, #256]	; (6bdc <_sercom_get_default_pad+0x168>)
    6ada:	e06b      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6adc:	4b40      	ldr	r3, [pc, #256]	; (6be0 <_sercom_get_default_pad+0x16c>)
    6ade:	e069      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6ae0:	1cfb      	adds	r3, r7, #3
    6ae2:	781b      	ldrb	r3, [r3, #0]
    6ae4:	2b01      	cmp	r3, #1
    6ae6:	d00a      	beq.n	6afe <_sercom_get_default_pad+0x8a>
    6ae8:	dc02      	bgt.n	6af0 <_sercom_get_default_pad+0x7c>
    6aea:	2b00      	cmp	r3, #0
    6aec:	d005      	beq.n	6afa <_sercom_get_default_pad+0x86>
    6aee:	e060      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
    6af0:	2b02      	cmp	r3, #2
    6af2:	d006      	beq.n	6b02 <_sercom_get_default_pad+0x8e>
    6af4:	2b03      	cmp	r3, #3
    6af6:	d006      	beq.n	6b06 <_sercom_get_default_pad+0x92>
    6af8:	e05b      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
    6afa:	2303      	movs	r3, #3
    6afc:	e05a      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6afe:	4b39      	ldr	r3, [pc, #228]	; (6be4 <_sercom_get_default_pad+0x170>)
    6b00:	e058      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b02:	4b39      	ldr	r3, [pc, #228]	; (6be8 <_sercom_get_default_pad+0x174>)
    6b04:	e056      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b06:	4b39      	ldr	r3, [pc, #228]	; (6bec <_sercom_get_default_pad+0x178>)
    6b08:	e054      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b0a:	1cfb      	adds	r3, r7, #3
    6b0c:	781b      	ldrb	r3, [r3, #0]
    6b0e:	2b01      	cmp	r3, #1
    6b10:	d00a      	beq.n	6b28 <_sercom_get_default_pad+0xb4>
    6b12:	dc02      	bgt.n	6b1a <_sercom_get_default_pad+0xa6>
    6b14:	2b00      	cmp	r3, #0
    6b16:	d005      	beq.n	6b24 <_sercom_get_default_pad+0xb0>
    6b18:	e04b      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
    6b1a:	2b02      	cmp	r3, #2
    6b1c:	d006      	beq.n	6b2c <_sercom_get_default_pad+0xb8>
    6b1e:	2b03      	cmp	r3, #3
    6b20:	d006      	beq.n	6b30 <_sercom_get_default_pad+0xbc>
    6b22:	e046      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
    6b24:	4b32      	ldr	r3, [pc, #200]	; (6bf0 <_sercom_get_default_pad+0x17c>)
    6b26:	e045      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b28:	4b32      	ldr	r3, [pc, #200]	; (6bf4 <_sercom_get_default_pad+0x180>)
    6b2a:	e043      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b2c:	4b32      	ldr	r3, [pc, #200]	; (6bf8 <_sercom_get_default_pad+0x184>)
    6b2e:	e041      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b30:	4b32      	ldr	r3, [pc, #200]	; (6bfc <_sercom_get_default_pad+0x188>)
    6b32:	e03f      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b34:	1cfb      	adds	r3, r7, #3
    6b36:	781b      	ldrb	r3, [r3, #0]
    6b38:	2b01      	cmp	r3, #1
    6b3a:	d00a      	beq.n	6b52 <_sercom_get_default_pad+0xde>
    6b3c:	dc02      	bgt.n	6b44 <_sercom_get_default_pad+0xd0>
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d005      	beq.n	6b4e <_sercom_get_default_pad+0xda>
    6b42:	e036      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
    6b44:	2b02      	cmp	r3, #2
    6b46:	d006      	beq.n	6b56 <_sercom_get_default_pad+0xe2>
    6b48:	2b03      	cmp	r3, #3
    6b4a:	d006      	beq.n	6b5a <_sercom_get_default_pad+0xe6>
    6b4c:	e031      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
    6b4e:	4b2c      	ldr	r3, [pc, #176]	; (6c00 <_sercom_get_default_pad+0x18c>)
    6b50:	e030      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b52:	4b2c      	ldr	r3, [pc, #176]	; (6c04 <_sercom_get_default_pad+0x190>)
    6b54:	e02e      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b56:	4b2c      	ldr	r3, [pc, #176]	; (6c08 <_sercom_get_default_pad+0x194>)
    6b58:	e02c      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b5a:	4b2c      	ldr	r3, [pc, #176]	; (6c0c <_sercom_get_default_pad+0x198>)
    6b5c:	e02a      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b5e:	1cfb      	adds	r3, r7, #3
    6b60:	781b      	ldrb	r3, [r3, #0]
    6b62:	2b01      	cmp	r3, #1
    6b64:	d00a      	beq.n	6b7c <_sercom_get_default_pad+0x108>
    6b66:	dc02      	bgt.n	6b6e <_sercom_get_default_pad+0xfa>
    6b68:	2b00      	cmp	r3, #0
    6b6a:	d005      	beq.n	6b78 <_sercom_get_default_pad+0x104>
    6b6c:	e021      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
    6b6e:	2b02      	cmp	r3, #2
    6b70:	d006      	beq.n	6b80 <_sercom_get_default_pad+0x10c>
    6b72:	2b03      	cmp	r3, #3
    6b74:	d006      	beq.n	6b84 <_sercom_get_default_pad+0x110>
    6b76:	e01c      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
    6b78:	4b25      	ldr	r3, [pc, #148]	; (6c10 <_sercom_get_default_pad+0x19c>)
    6b7a:	e01b      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b7c:	4b25      	ldr	r3, [pc, #148]	; (6c14 <_sercom_get_default_pad+0x1a0>)
    6b7e:	e019      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b80:	4b25      	ldr	r3, [pc, #148]	; (6c18 <_sercom_get_default_pad+0x1a4>)
    6b82:	e017      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b84:	4b25      	ldr	r3, [pc, #148]	; (6c1c <_sercom_get_default_pad+0x1a8>)
    6b86:	e015      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6b88:	1cfb      	adds	r3, r7, #3
    6b8a:	781b      	ldrb	r3, [r3, #0]
    6b8c:	2b01      	cmp	r3, #1
    6b8e:	d00a      	beq.n	6ba6 <_sercom_get_default_pad+0x132>
    6b90:	dc02      	bgt.n	6b98 <_sercom_get_default_pad+0x124>
    6b92:	2b00      	cmp	r3, #0
    6b94:	d005      	beq.n	6ba2 <_sercom_get_default_pad+0x12e>
    6b96:	e00c      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
    6b98:	2b02      	cmp	r3, #2
    6b9a:	d006      	beq.n	6baa <_sercom_get_default_pad+0x136>
    6b9c:	2b03      	cmp	r3, #3
    6b9e:	d006      	beq.n	6bae <_sercom_get_default_pad+0x13a>
    6ba0:	e007      	b.n	6bb2 <_sercom_get_default_pad+0x13e>
    6ba2:	4b1f      	ldr	r3, [pc, #124]	; (6c20 <_sercom_get_default_pad+0x1ac>)
    6ba4:	e006      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6ba6:	4b1f      	ldr	r3, [pc, #124]	; (6c24 <_sercom_get_default_pad+0x1b0>)
    6ba8:	e004      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6baa:	4b1f      	ldr	r3, [pc, #124]	; (6c28 <_sercom_get_default_pad+0x1b4>)
    6bac:	e002      	b.n	6bb4 <_sercom_get_default_pad+0x140>
    6bae:	4b1f      	ldr	r3, [pc, #124]	; (6c2c <_sercom_get_default_pad+0x1b8>)
    6bb0:	e000      	b.n	6bb4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    6bb2:	2300      	movs	r3, #0
}
    6bb4:	1c18      	adds	r0, r3, #0
    6bb6:	46bd      	mov	sp, r7
    6bb8:	b002      	add	sp, #8
    6bba:	bd80      	pop	{r7, pc}
    6bbc:	42001000 	.word	0x42001000
    6bc0:	42000800 	.word	0x42000800
    6bc4:	42000c00 	.word	0x42000c00
    6bc8:	42001800 	.word	0x42001800
    6bcc:	42001c00 	.word	0x42001c00
    6bd0:	42001400 	.word	0x42001400
    6bd4:	00040003 	.word	0x00040003
    6bd8:	00050003 	.word	0x00050003
    6bdc:	00060003 	.word	0x00060003
    6be0:	00070003 	.word	0x00070003
    6be4:	00010003 	.word	0x00010003
    6be8:	001e0003 	.word	0x001e0003
    6bec:	001f0003 	.word	0x001f0003
    6bf0:	00080003 	.word	0x00080003
    6bf4:	00090003 	.word	0x00090003
    6bf8:	000a0003 	.word	0x000a0003
    6bfc:	000b0003 	.word	0x000b0003
    6c00:	00100003 	.word	0x00100003
    6c04:	00110003 	.word	0x00110003
    6c08:	00120003 	.word	0x00120003
    6c0c:	00130003 	.word	0x00130003
    6c10:	000c0003 	.word	0x000c0003
    6c14:	000d0003 	.word	0x000d0003
    6c18:	000e0003 	.word	0x000e0003
    6c1c:	000f0003 	.word	0x000f0003
    6c20:	00160003 	.word	0x00160003
    6c24:	00170003 	.word	0x00170003
    6c28:	00180003 	.word	0x00180003
    6c2c:	00190003 	.word	0x00190003

00006c30 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    6c30:	b580      	push	{r7, lr}
    6c32:	b082      	sub	sp, #8
    6c34:	af00      	add	r7, sp, #0
    6c36:	1c02      	adds	r2, r0, #0
    6c38:	1dfb      	adds	r3, r7, #7
    6c3a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    6c3c:	46bd      	mov	sp, r7
    6c3e:	b002      	add	sp, #8
    6c40:	bd80      	pop	{r7, pc}
    6c42:	46c0      	nop			; (mov r8, r8)

00006c44 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    6c44:	b590      	push	{r4, r7, lr}
    6c46:	b08b      	sub	sp, #44	; 0x2c
    6c48:	af00      	add	r7, sp, #0
    6c4a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    6c4c:	1c3b      	adds	r3, r7, #0
    6c4e:	330c      	adds	r3, #12
    6c50:	4a0e      	ldr	r2, [pc, #56]	; (6c8c <_sercom_get_sercom_inst_index+0x48>)
    6c52:	ca13      	ldmia	r2!, {r0, r1, r4}
    6c54:	c313      	stmia	r3!, {r0, r1, r4}
    6c56:	ca13      	ldmia	r2!, {r0, r1, r4}
    6c58:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c5a:	2300      	movs	r3, #0
    6c5c:	627b      	str	r3, [r7, #36]	; 0x24
    6c5e:	e00d      	b.n	6c7c <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    6c60:	687a      	ldr	r2, [r7, #4]
    6c62:	1c3b      	adds	r3, r7, #0
    6c64:	330c      	adds	r3, #12
    6c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6c68:	0089      	lsls	r1, r1, #2
    6c6a:	58cb      	ldr	r3, [r1, r3]
    6c6c:	429a      	cmp	r2, r3
    6c6e:	d102      	bne.n	6c76 <_sercom_get_sercom_inst_index+0x32>
			return i;
    6c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c72:	b2db      	uxtb	r3, r3
    6c74:	e006      	b.n	6c84 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c78:	3301      	adds	r3, #1
    6c7a:	627b      	str	r3, [r7, #36]	; 0x24
    6c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c7e:	2b05      	cmp	r3, #5
    6c80:	d9ee      	bls.n	6c60 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6c82:	2300      	movs	r3, #0
}
    6c84:	1c18      	adds	r0, r3, #0
    6c86:	46bd      	mov	sp, r7
    6c88:	b00b      	add	sp, #44	; 0x2c
    6c8a:	bd90      	pop	{r4, r7, pc}
    6c8c:	000106fc 	.word	0x000106fc

00006c90 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    6c90:	b580      	push	{r7, lr}
    6c92:	b084      	sub	sp, #16
    6c94:	af00      	add	r7, sp, #0
    6c96:	1c02      	adds	r2, r0, #0
    6c98:	6039      	str	r1, [r7, #0]
    6c9a:	1dfb      	adds	r3, r7, #7
    6c9c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    6c9e:	4b13      	ldr	r3, [pc, #76]	; (6cec <_sercom_set_handler+0x5c>)
    6ca0:	781b      	ldrb	r3, [r3, #0]
    6ca2:	2201      	movs	r2, #1
    6ca4:	4053      	eors	r3, r2
    6ca6:	b2db      	uxtb	r3, r3
    6ca8:	2b00      	cmp	r3, #0
    6caa:	d015      	beq.n	6cd8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6cac:	2300      	movs	r3, #0
    6cae:	60fb      	str	r3, [r7, #12]
    6cb0:	e00c      	b.n	6ccc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6cb2:	4b0f      	ldr	r3, [pc, #60]	; (6cf0 <_sercom_set_handler+0x60>)
    6cb4:	68fa      	ldr	r2, [r7, #12]
    6cb6:	0092      	lsls	r2, r2, #2
    6cb8:	490e      	ldr	r1, [pc, #56]	; (6cf4 <_sercom_set_handler+0x64>)
    6cba:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    6cbc:	4b0e      	ldr	r3, [pc, #56]	; (6cf8 <_sercom_set_handler+0x68>)
    6cbe:	68fa      	ldr	r2, [r7, #12]
    6cc0:	0092      	lsls	r2, r2, #2
    6cc2:	2100      	movs	r1, #0
    6cc4:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6cc6:	68fb      	ldr	r3, [r7, #12]
    6cc8:	3301      	adds	r3, #1
    6cca:	60fb      	str	r3, [r7, #12]
    6ccc:	68fb      	ldr	r3, [r7, #12]
    6cce:	2b05      	cmp	r3, #5
    6cd0:	d9ef      	bls.n	6cb2 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    6cd2:	4b06      	ldr	r3, [pc, #24]	; (6cec <_sercom_set_handler+0x5c>)
    6cd4:	2201      	movs	r2, #1
    6cd6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    6cd8:	1dfb      	adds	r3, r7, #7
    6cda:	781a      	ldrb	r2, [r3, #0]
    6cdc:	4b04      	ldr	r3, [pc, #16]	; (6cf0 <_sercom_set_handler+0x60>)
    6cde:	0092      	lsls	r2, r2, #2
    6ce0:	6839      	ldr	r1, [r7, #0]
    6ce2:	50d1      	str	r1, [r2, r3]
}
    6ce4:	46bd      	mov	sp, r7
    6ce6:	b004      	add	sp, #16
    6ce8:	bd80      	pop	{r7, pc}
    6cea:	46c0      	nop			; (mov r8, r8)
    6cec:	20000948 	.word	0x20000948
    6cf0:	2000094c 	.word	0x2000094c
    6cf4:	00006c31 	.word	0x00006c31
    6cf8:	200010a4 	.word	0x200010a4

00006cfc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    6cfc:	b590      	push	{r4, r7, lr}
    6cfe:	b085      	sub	sp, #20
    6d00:	af00      	add	r7, sp, #0
    6d02:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    6d04:	1c3a      	adds	r2, r7, #0
    6d06:	3208      	adds	r2, #8
    6d08:	4b0e      	ldr	r3, [pc, #56]	; (6d44 <_sercom_get_interrupt_vector+0x48>)
    6d0a:	1c11      	adds	r1, r2, #0
    6d0c:	1c1a      	adds	r2, r3, #0
    6d0e:	2306      	movs	r3, #6
    6d10:	1c08      	adds	r0, r1, #0
    6d12:	1c11      	adds	r1, r2, #0
    6d14:	1c1a      	adds	r2, r3, #0
    6d16:	4b0c      	ldr	r3, [pc, #48]	; (6d48 <_sercom_get_interrupt_vector+0x4c>)
    6d18:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    6d1a:	1c3c      	adds	r4, r7, #0
    6d1c:	340f      	adds	r4, #15
    6d1e:	687b      	ldr	r3, [r7, #4]
    6d20:	1c18      	adds	r0, r3, #0
    6d22:	4b0a      	ldr	r3, [pc, #40]	; (6d4c <_sercom_get_interrupt_vector+0x50>)
    6d24:	4798      	blx	r3
    6d26:	1c03      	adds	r3, r0, #0
    6d28:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    6d2a:	1c3b      	adds	r3, r7, #0
    6d2c:	330f      	adds	r3, #15
    6d2e:	781b      	ldrb	r3, [r3, #0]
    6d30:	1c3a      	adds	r2, r7, #0
    6d32:	3208      	adds	r2, #8
    6d34:	5cd3      	ldrb	r3, [r2, r3]
    6d36:	b2db      	uxtb	r3, r3
    6d38:	b25b      	sxtb	r3, r3
}
    6d3a:	1c18      	adds	r0, r3, #0
    6d3c:	46bd      	mov	sp, r7
    6d3e:	b005      	add	sp, #20
    6d40:	bd90      	pop	{r4, r7, pc}
    6d42:	46c0      	nop			; (mov r8, r8)
    6d44:	00010714 	.word	0x00010714
    6d48:	0000b075 	.word	0x0000b075
    6d4c:	00006c45 	.word	0x00006c45

00006d50 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    6d50:	b580      	push	{r7, lr}
    6d52:	af00      	add	r7, sp, #0
    6d54:	4b02      	ldr	r3, [pc, #8]	; (6d60 <SERCOM0_Handler+0x10>)
    6d56:	681b      	ldr	r3, [r3, #0]
    6d58:	2000      	movs	r0, #0
    6d5a:	4798      	blx	r3
    6d5c:	46bd      	mov	sp, r7
    6d5e:	bd80      	pop	{r7, pc}
    6d60:	2000094c 	.word	0x2000094c

00006d64 <SERCOM1_Handler>:
    6d64:	b580      	push	{r7, lr}
    6d66:	af00      	add	r7, sp, #0
    6d68:	4b02      	ldr	r3, [pc, #8]	; (6d74 <SERCOM1_Handler+0x10>)
    6d6a:	685b      	ldr	r3, [r3, #4]
    6d6c:	2001      	movs	r0, #1
    6d6e:	4798      	blx	r3
    6d70:	46bd      	mov	sp, r7
    6d72:	bd80      	pop	{r7, pc}
    6d74:	2000094c 	.word	0x2000094c

00006d78 <SERCOM2_Handler>:
    6d78:	b580      	push	{r7, lr}
    6d7a:	af00      	add	r7, sp, #0
    6d7c:	4b02      	ldr	r3, [pc, #8]	; (6d88 <SERCOM2_Handler+0x10>)
    6d7e:	689b      	ldr	r3, [r3, #8]
    6d80:	2002      	movs	r0, #2
    6d82:	4798      	blx	r3
    6d84:	46bd      	mov	sp, r7
    6d86:	bd80      	pop	{r7, pc}
    6d88:	2000094c 	.word	0x2000094c

00006d8c <SERCOM3_Handler>:
    6d8c:	b580      	push	{r7, lr}
    6d8e:	af00      	add	r7, sp, #0
    6d90:	4b02      	ldr	r3, [pc, #8]	; (6d9c <SERCOM3_Handler+0x10>)
    6d92:	68db      	ldr	r3, [r3, #12]
    6d94:	2003      	movs	r0, #3
    6d96:	4798      	blx	r3
    6d98:	46bd      	mov	sp, r7
    6d9a:	bd80      	pop	{r7, pc}
    6d9c:	2000094c 	.word	0x2000094c

00006da0 <SERCOM4_Handler>:
    6da0:	b580      	push	{r7, lr}
    6da2:	af00      	add	r7, sp, #0
    6da4:	4b02      	ldr	r3, [pc, #8]	; (6db0 <SERCOM4_Handler+0x10>)
    6da6:	691b      	ldr	r3, [r3, #16]
    6da8:	2004      	movs	r0, #4
    6daa:	4798      	blx	r3
    6dac:	46bd      	mov	sp, r7
    6dae:	bd80      	pop	{r7, pc}
    6db0:	2000094c 	.word	0x2000094c

00006db4 <SERCOM5_Handler>:
    6db4:	b580      	push	{r7, lr}
    6db6:	af00      	add	r7, sp, #0
    6db8:	4b02      	ldr	r3, [pc, #8]	; (6dc4 <SERCOM5_Handler+0x10>)
    6dba:	695b      	ldr	r3, [r3, #20]
    6dbc:	2005      	movs	r0, #5
    6dbe:	4798      	blx	r3
    6dc0:	46bd      	mov	sp, r7
    6dc2:	bd80      	pop	{r7, pc}
    6dc4:	2000094c 	.word	0x2000094c

00006dc8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6dc8:	b580      	push	{r7, lr}
    6dca:	b082      	sub	sp, #8
    6dcc:	af00      	add	r7, sp, #0
    6dce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6dd0:	687b      	ldr	r3, [r7, #4]
    6dd2:	2200      	movs	r2, #0
    6dd4:	701a      	strb	r2, [r3, #0]
}
    6dd6:	46bd      	mov	sp, r7
    6dd8:	b002      	add	sp, #8
    6dda:	bd80      	pop	{r7, pc}

00006ddc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    6ddc:	b580      	push	{r7, lr}
    6dde:	b082      	sub	sp, #8
    6de0:	af00      	add	r7, sp, #0
    6de2:	1c02      	adds	r2, r0, #0
    6de4:	6039      	str	r1, [r7, #0]
    6de6:	1dfb      	adds	r3, r7, #7
    6de8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6dea:	1dfb      	adds	r3, r7, #7
    6dec:	781b      	ldrb	r3, [r3, #0]
    6dee:	2b01      	cmp	r3, #1
    6df0:	d00a      	beq.n	6e08 <system_apb_clock_set_mask+0x2c>
    6df2:	2b02      	cmp	r3, #2
    6df4:	d00f      	beq.n	6e16 <system_apb_clock_set_mask+0x3a>
    6df6:	2b00      	cmp	r3, #0
    6df8:	d114      	bne.n	6e24 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6dfa:	4b0e      	ldr	r3, [pc, #56]	; (6e34 <system_apb_clock_set_mask+0x58>)
    6dfc:	4a0d      	ldr	r2, [pc, #52]	; (6e34 <system_apb_clock_set_mask+0x58>)
    6dfe:	6991      	ldr	r1, [r2, #24]
    6e00:	683a      	ldr	r2, [r7, #0]
    6e02:	430a      	orrs	r2, r1
    6e04:	619a      	str	r2, [r3, #24]
			break;
    6e06:	e00f      	b.n	6e28 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6e08:	4b0a      	ldr	r3, [pc, #40]	; (6e34 <system_apb_clock_set_mask+0x58>)
    6e0a:	4a0a      	ldr	r2, [pc, #40]	; (6e34 <system_apb_clock_set_mask+0x58>)
    6e0c:	69d1      	ldr	r1, [r2, #28]
    6e0e:	683a      	ldr	r2, [r7, #0]
    6e10:	430a      	orrs	r2, r1
    6e12:	61da      	str	r2, [r3, #28]
			break;
    6e14:	e008      	b.n	6e28 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6e16:	4b07      	ldr	r3, [pc, #28]	; (6e34 <system_apb_clock_set_mask+0x58>)
    6e18:	4a06      	ldr	r2, [pc, #24]	; (6e34 <system_apb_clock_set_mask+0x58>)
    6e1a:	6a11      	ldr	r1, [r2, #32]
    6e1c:	683a      	ldr	r2, [r7, #0]
    6e1e:	430a      	orrs	r2, r1
    6e20:	621a      	str	r2, [r3, #32]
			break;
    6e22:	e001      	b.n	6e28 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6e24:	2317      	movs	r3, #23
    6e26:	e000      	b.n	6e2a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6e28:	2300      	movs	r3, #0
}
    6e2a:	1c18      	adds	r0, r3, #0
    6e2c:	46bd      	mov	sp, r7
    6e2e:	b002      	add	sp, #8
    6e30:	bd80      	pop	{r7, pc}
    6e32:	46c0      	nop			; (mov r8, r8)
    6e34:	40000400 	.word	0x40000400

00006e38 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6e38:	b580      	push	{r7, lr}
    6e3a:	b082      	sub	sp, #8
    6e3c:	af00      	add	r7, sp, #0
    6e3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6e40:	687b      	ldr	r3, [r7, #4]
    6e42:	2280      	movs	r2, #128	; 0x80
    6e44:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6e46:	687b      	ldr	r3, [r7, #4]
    6e48:	2200      	movs	r2, #0
    6e4a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	2201      	movs	r2, #1
    6e50:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6e52:	687b      	ldr	r3, [r7, #4]
    6e54:	2200      	movs	r2, #0
    6e56:	70da      	strb	r2, [r3, #3]
}
    6e58:	46bd      	mov	sp, r7
    6e5a:	b002      	add	sp, #8
    6e5c:	bd80      	pop	{r7, pc}
    6e5e:	46c0      	nop			; (mov r8, r8)

00006e60 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    6e60:	b580      	push	{r7, lr}
    6e62:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6e64:	4b06      	ldr	r3, [pc, #24]	; (6e80 <system_is_debugger_present+0x20>)
    6e66:	681b      	ldr	r3, [r3, #0]
    6e68:	021b      	lsls	r3, r3, #8
    6e6a:	0e1b      	lsrs	r3, r3, #24
    6e6c:	b2db      	uxtb	r3, r3
    6e6e:	1c1a      	adds	r2, r3, #0
    6e70:	2302      	movs	r3, #2
    6e72:	4013      	ands	r3, r2
    6e74:	1e5a      	subs	r2, r3, #1
    6e76:	4193      	sbcs	r3, r2
    6e78:	b2db      	uxtb	r3, r3
}
    6e7a:	1c18      	adds	r0, r3, #0
    6e7c:	46bd      	mov	sp, r7
    6e7e:	bd80      	pop	{r7, pc}
    6e80:	41002000 	.word	0x41002000

00006e84 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    6e84:	b580      	push	{r7, lr}
    6e86:	b084      	sub	sp, #16
    6e88:	af00      	add	r7, sp, #0
    6e8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    6e8c:	687b      	ldr	r3, [r7, #4]
    6e8e:	681b      	ldr	r3, [r3, #0]
    6e90:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    6e92:	68fb      	ldr	r3, [r7, #12]
    6e94:	69db      	ldr	r3, [r3, #28]
    6e96:	1e5a      	subs	r2, r3, #1
    6e98:	4193      	sbcs	r3, r2
    6e9a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    6e9c:	1c18      	adds	r0, r3, #0
    6e9e:	46bd      	mov	sp, r7
    6ea0:	b004      	add	sp, #16
    6ea2:	bd80      	pop	{r7, pc}

00006ea4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    6ea4:	b580      	push	{r7, lr}
    6ea6:	b082      	sub	sp, #8
    6ea8:	af00      	add	r7, sp, #0
    6eaa:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    6eac:	46c0      	nop			; (mov r8, r8)
    6eae:	687b      	ldr	r3, [r7, #4]
    6eb0:	1c18      	adds	r0, r3, #0
    6eb2:	4b04      	ldr	r3, [pc, #16]	; (6ec4 <_usart_wait_for_sync+0x20>)
    6eb4:	4798      	blx	r3
    6eb6:	1c03      	adds	r3, r0, #0
    6eb8:	2b00      	cmp	r3, #0
    6eba:	d1f8      	bne.n	6eae <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    6ebc:	46bd      	mov	sp, r7
    6ebe:	b002      	add	sp, #8
    6ec0:	bd80      	pop	{r7, pc}
    6ec2:	46c0      	nop			; (mov r8, r8)
    6ec4:	00006e85 	.word	0x00006e85

00006ec8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    6ec8:	b5b0      	push	{r4, r5, r7, lr}
    6eca:	b08c      	sub	sp, #48	; 0x30
    6ecc:	af02      	add	r7, sp, #8
    6ece:	6078      	str	r0, [r7, #4]
    6ed0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6ed2:	687b      	ldr	r3, [r7, #4]
    6ed4:	681b      	ldr	r3, [r3, #0]
    6ed6:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6ed8:	687b      	ldr	r3, [r7, #4]
    6eda:	681b      	ldr	r3, [r3, #0]
    6edc:	1c18      	adds	r0, r3, #0
    6ede:	4baa      	ldr	r3, [pc, #680]	; (7188 <_usart_set_config+0x2c0>)
    6ee0:	4798      	blx	r3
    6ee2:	1c03      	adds	r3, r0, #0
    6ee4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6ee6:	697b      	ldr	r3, [r7, #20]
    6ee8:	3314      	adds	r3, #20
    6eea:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    6eec:	2300      	movs	r3, #0
    6eee:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    6ef0:	2300      	movs	r3, #0
    6ef2:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    6ef4:	1c3b      	adds	r3, r7, #0
    6ef6:	330e      	adds	r3, #14
    6ef8:	2200      	movs	r2, #0
    6efa:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6efc:	1c3b      	adds	r3, r7, #0
    6efe:	331f      	adds	r3, #31
    6f00:	2200      	movs	r2, #0
    6f02:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    6f04:	1c3b      	adds	r3, r7, #0
    6f06:	331e      	adds	r3, #30
    6f08:	2210      	movs	r2, #16
    6f0a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    6f0c:	683b      	ldr	r3, [r7, #0]
    6f0e:	8a1b      	ldrh	r3, [r3, #16]
    6f10:	2280      	movs	r2, #128	; 0x80
    6f12:	01d2      	lsls	r2, r2, #7
    6f14:	4293      	cmp	r3, r2
    6f16:	d01c      	beq.n	6f52 <_usart_set_config+0x8a>
    6f18:	2280      	movs	r2, #128	; 0x80
    6f1a:	01d2      	lsls	r2, r2, #7
    6f1c:	4293      	cmp	r3, r2
    6f1e:	dc06      	bgt.n	6f2e <_usart_set_config+0x66>
    6f20:	2b00      	cmp	r3, #0
    6f22:	d00d      	beq.n	6f40 <_usart_set_config+0x78>
    6f24:	2280      	movs	r2, #128	; 0x80
    6f26:	0192      	lsls	r2, r2, #6
    6f28:	4293      	cmp	r3, r2
    6f2a:	d024      	beq.n	6f76 <_usart_set_config+0xae>
    6f2c:	e035      	b.n	6f9a <_usart_set_config+0xd2>
    6f2e:	22c0      	movs	r2, #192	; 0xc0
    6f30:	01d2      	lsls	r2, r2, #7
    6f32:	4293      	cmp	r3, r2
    6f34:	d028      	beq.n	6f88 <_usart_set_config+0xc0>
    6f36:	2280      	movs	r2, #128	; 0x80
    6f38:	0212      	lsls	r2, r2, #8
    6f3a:	4293      	cmp	r3, r2
    6f3c:	d012      	beq.n	6f64 <_usart_set_config+0x9c>
    6f3e:	e02c      	b.n	6f9a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6f40:	1c3b      	adds	r3, r7, #0
    6f42:	331f      	adds	r3, #31
    6f44:	2200      	movs	r2, #0
    6f46:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    6f48:	1c3b      	adds	r3, r7, #0
    6f4a:	331e      	adds	r3, #30
    6f4c:	2210      	movs	r2, #16
    6f4e:	701a      	strb	r2, [r3, #0]
			break;
    6f50:	e023      	b.n	6f9a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6f52:	1c3b      	adds	r3, r7, #0
    6f54:	331f      	adds	r3, #31
    6f56:	2200      	movs	r2, #0
    6f58:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    6f5a:	1c3b      	adds	r3, r7, #0
    6f5c:	331e      	adds	r3, #30
    6f5e:	2208      	movs	r2, #8
    6f60:	701a      	strb	r2, [r3, #0]
			break;
    6f62:	e01a      	b.n	6f9a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6f64:	1c3b      	adds	r3, r7, #0
    6f66:	331f      	adds	r3, #31
    6f68:	2200      	movs	r2, #0
    6f6a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    6f6c:	1c3b      	adds	r3, r7, #0
    6f6e:	331e      	adds	r3, #30
    6f70:	2203      	movs	r2, #3
    6f72:	701a      	strb	r2, [r3, #0]
			break;
    6f74:	e011      	b.n	6f9a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6f76:	1c3b      	adds	r3, r7, #0
    6f78:	331f      	adds	r3, #31
    6f7a:	2201      	movs	r2, #1
    6f7c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    6f7e:	1c3b      	adds	r3, r7, #0
    6f80:	331e      	adds	r3, #30
    6f82:	2210      	movs	r2, #16
    6f84:	701a      	strb	r2, [r3, #0]
			break;
    6f86:	e008      	b.n	6f9a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6f88:	1c3b      	adds	r3, r7, #0
    6f8a:	331f      	adds	r3, #31
    6f8c:	2201      	movs	r2, #1
    6f8e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    6f90:	1c3b      	adds	r3, r7, #0
    6f92:	331e      	adds	r3, #30
    6f94:	2208      	movs	r2, #8
    6f96:	701a      	strb	r2, [r3, #0]
			break;
    6f98:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    6f9a:	683b      	ldr	r3, [r7, #0]
    6f9c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    6f9e:	683b      	ldr	r3, [r7, #0]
    6fa0:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    6fa2:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    6fa4:	683b      	ldr	r3, [r7, #0]
    6fa6:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    6fa8:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    6faa:	683b      	ldr	r3, [r7, #0]
    6fac:	8a1b      	ldrh	r3, [r3, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    6fae:	431a      	orrs	r2, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    6fb0:	683b      	ldr	r3, [r7, #0]
    6fb2:	7e1b      	ldrb	r3, [r3, #24]
    6fb4:	021b      	lsls	r3, r3, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    6fb6:	431a      	orrs	r2, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    6fb8:	6839      	ldr	r1, [r7, #0]
    6fba:	2326      	movs	r3, #38	; 0x26
    6fbc:	5ccb      	ldrb	r3, [r1, r3]
    6fbe:	075b      	lsls	r3, r3, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    6fc0:	4313      	orrs	r3, r2
    6fc2:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    6fc4:	1c3b      	adds	r3, r7, #0
    6fc6:	331d      	adds	r3, #29
    6fc8:	2200      	movs	r2, #0
    6fca:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    6fcc:	683b      	ldr	r3, [r7, #0]
    6fce:	685b      	ldr	r3, [r3, #4]
    6fd0:	2b00      	cmp	r3, #0
    6fd2:	d020      	beq.n	7016 <_usart_set_config+0x14e>
    6fd4:	2280      	movs	r2, #128	; 0x80
    6fd6:	0552      	lsls	r2, r2, #21
    6fd8:	4293      	cmp	r3, r2
    6fda:	d14e      	bne.n	707a <_usart_set_config+0x1b2>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    6fdc:	683a      	ldr	r2, [r7, #0]
    6fde:	2327      	movs	r3, #39	; 0x27
    6fe0:	5cd3      	ldrb	r3, [r2, r3]
    6fe2:	2201      	movs	r2, #1
    6fe4:	4053      	eors	r3, r2
    6fe6:	b2db      	uxtb	r3, r3
    6fe8:	2b00      	cmp	r3, #0
    6fea:	d013      	beq.n	7014 <_usart_set_config+0x14c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    6fec:	683b      	ldr	r3, [r7, #0]
    6fee:	6a1d      	ldr	r5, [r3, #32]
    6ff0:	693b      	ldr	r3, [r7, #16]
    6ff2:	b2db      	uxtb	r3, r3
    6ff4:	1c18      	adds	r0, r3, #0
    6ff6:	4b65      	ldr	r3, [pc, #404]	; (718c <_usart_set_config+0x2c4>)
    6ff8:	4798      	blx	r3
    6ffa:	1c02      	adds	r2, r0, #0
    6ffc:	1c3c      	adds	r4, r7, #0
    6ffe:	341d      	adds	r4, #29
    7000:	1c3b      	adds	r3, r7, #0
    7002:	330e      	adds	r3, #14
    7004:	1c28      	adds	r0, r5, #0
    7006:	1c11      	adds	r1, r2, #0
    7008:	1c1a      	adds	r2, r3, #0
    700a:	4b61      	ldr	r3, [pc, #388]	; (7190 <_usart_set_config+0x2c8>)
    700c:	4798      	blx	r3
    700e:	1c03      	adds	r3, r0, #0
    7010:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    7012:	e032      	b.n	707a <_usart_set_config+0x1b2>
    7014:	e031      	b.n	707a <_usart_set_config+0x1b2>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    7016:	683a      	ldr	r2, [r7, #0]
    7018:	2327      	movs	r3, #39	; 0x27
    701a:	5cd3      	ldrb	r3, [r2, r3]
    701c:	2b00      	cmp	r3, #0
    701e:	d013      	beq.n	7048 <_usart_set_config+0x180>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    7020:	683b      	ldr	r3, [r7, #0]
    7022:	6a18      	ldr	r0, [r3, #32]
    7024:	683b      	ldr	r3, [r7, #0]
    7026:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    7028:	1c3c      	adds	r4, r7, #0
    702a:	341d      	adds	r4, #29
    702c:	1c3a      	adds	r2, r7, #0
    702e:	320e      	adds	r2, #14
    7030:	1c3b      	adds	r3, r7, #0
    7032:	331f      	adds	r3, #31
    7034:	781b      	ldrb	r3, [r3, #0]
    7036:	1c3d      	adds	r5, r7, #0
    7038:	351e      	adds	r5, #30
    703a:	782d      	ldrb	r5, [r5, #0]
    703c:	9500      	str	r5, [sp, #0]
    703e:	4d55      	ldr	r5, [pc, #340]	; (7194 <_usart_set_config+0x2cc>)
    7040:	47a8      	blx	r5
    7042:	1c03      	adds	r3, r0, #0
    7044:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    7046:	e017      	b.n	7078 <_usart_set_config+0x1b0>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    7048:	683b      	ldr	r3, [r7, #0]
    704a:	6a1d      	ldr	r5, [r3, #32]
    704c:	693b      	ldr	r3, [r7, #16]
    704e:	b2db      	uxtb	r3, r3
    7050:	1c18      	adds	r0, r3, #0
    7052:	4b4e      	ldr	r3, [pc, #312]	; (718c <_usart_set_config+0x2c4>)
    7054:	4798      	blx	r3
    7056:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    7058:	1c3c      	adds	r4, r7, #0
    705a:	341d      	adds	r4, #29
    705c:	1c3a      	adds	r2, r7, #0
    705e:	320e      	adds	r2, #14
    7060:	1c3b      	adds	r3, r7, #0
    7062:	331f      	adds	r3, #31
    7064:	781b      	ldrb	r3, [r3, #0]
    7066:	1c38      	adds	r0, r7, #0
    7068:	301e      	adds	r0, #30
    706a:	7800      	ldrb	r0, [r0, #0]
    706c:	9000      	str	r0, [sp, #0]
    706e:	1c28      	adds	r0, r5, #0
    7070:	4d48      	ldr	r5, [pc, #288]	; (7194 <_usart_set_config+0x2cc>)
    7072:	47a8      	blx	r5
    7074:	1c03      	adds	r3, r0, #0
    7076:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    7078:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baud rate failed */
	if (status_code != STATUS_OK) {
    707a:	1c3b      	adds	r3, r7, #0
    707c:	331d      	adds	r3, #29
    707e:	781b      	ldrb	r3, [r3, #0]
    7080:	2b00      	cmp	r3, #0
    7082:	d003      	beq.n	708c <_usart_set_config+0x1c4>
		/* Abort */
		return status_code;
    7084:	1c3b      	adds	r3, r7, #0
    7086:	331d      	adds	r3, #29
    7088:	781b      	ldrb	r3, [r3, #0]
    708a:	e078      	b.n	717e <_usart_set_config+0x2b6>
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    708c:	683b      	ldr	r3, [r7, #0]
    708e:	7e5b      	ldrb	r3, [r3, #25]
    7090:	2b00      	cmp	r3, #0
    7092:	d003      	beq.n	709c <_usart_set_config+0x1d4>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    7094:	683b      	ldr	r3, [r7, #0]
    7096:	7e9a      	ldrb	r2, [r3, #26]
    7098:	69bb      	ldr	r3, [r7, #24]
    709a:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    709c:	687b      	ldr	r3, [r7, #4]
    709e:	1c18      	adds	r0, r3, #0
    70a0:	4b3d      	ldr	r3, [pc, #244]	; (7198 <_usart_set_config+0x2d0>)
    70a2:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    70a4:	1c3b      	adds	r3, r7, #0
    70a6:	330e      	adds	r3, #14
    70a8:	881a      	ldrh	r2, [r3, #0]
    70aa:	69bb      	ldr	r3, [r7, #24]
    70ac:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    70ae:	683b      	ldr	r3, [r7, #0]
    70b0:	685b      	ldr	r3, [r3, #4]
    70b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    70b4:	4313      	orrs	r3, r2
    70b6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    70b8:	683a      	ldr	r2, [r7, #0]
    70ba:	2327      	movs	r3, #39	; 0x27
    70bc:	5cd3      	ldrb	r3, [r2, r3]
    70be:	2201      	movs	r2, #1
    70c0:	4053      	eors	r3, r2
    70c2:	b2db      	uxtb	r3, r3
    70c4:	2b00      	cmp	r3, #0
    70c6:	d003      	beq.n	70d0 <_usart_set_config+0x208>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    70c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70ca:	2204      	movs	r2, #4
    70cc:	4313      	orrs	r3, r2
    70ce:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    70d0:	683b      	ldr	r3, [r7, #0]
    70d2:	7a9a      	ldrb	r2, [r3, #10]
    70d4:	683b      	ldr	r3, [r7, #0]
    70d6:	7adb      	ldrb	r3, [r3, #11]
    70d8:	4313      	orrs	r3, r2
    70da:	b2db      	uxtb	r3, r3
    70dc:	1c1a      	adds	r2, r3, #0
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    70de:	683b      	ldr	r3, [r7, #0]
    70e0:	7e5b      	ldrb	r3, [r3, #25]
    70e2:	029b      	lsls	r3, r3, #10
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    70e4:	431a      	orrs	r2, r3
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    70e6:	683b      	ldr	r3, [r7, #0]
    70e8:	7f1b      	ldrb	r3, [r3, #28]
    70ea:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    70ec:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    70ee:	683b      	ldr	r3, [r7, #0]
    70f0:	7f5b      	ldrb	r3, [r3, #29]
    70f2:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    70f4:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    70f6:	6839      	ldr	r1, [r7, #0]
    70f8:	2324      	movs	r3, #36	; 0x24
    70fa:	5ccb      	ldrb	r3, [r1, r3]
    70fc:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    70fe:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    7100:	6839      	ldr	r1, [r7, #0]
    7102:	2325      	movs	r3, #37	; 0x25
    7104:	5ccb      	ldrb	r3, [r1, r3]
    7106:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    7108:	4313      	orrs	r3, r2
    710a:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    710c:	683b      	ldr	r3, [r7, #0]
    710e:	891b      	ldrh	r3, [r3, #8]
    7110:	2bff      	cmp	r3, #255	; 0xff
    7112:	d00e      	beq.n	7132 <_usart_set_config+0x26a>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    7114:	683b      	ldr	r3, [r7, #0]
    7116:	7edb      	ldrb	r3, [r3, #27]
    7118:	2b00      	cmp	r3, #0
    711a:	d004      	beq.n	7126 <_usart_set_config+0x25e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    711e:	22a0      	movs	r2, #160	; 0xa0
    7120:	04d2      	lsls	r2, r2, #19
    7122:	4313      	orrs	r3, r2
    7124:	627b      	str	r3, [r7, #36]	; 0x24
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    7126:	683b      	ldr	r3, [r7, #0]
    7128:	891b      	ldrh	r3, [r3, #8]
    712a:	6a3a      	ldr	r2, [r7, #32]
    712c:	4313      	orrs	r3, r2
    712e:	623b      	str	r3, [r7, #32]
    7130:	e008      	b.n	7144 <_usart_set_config+0x27c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    7132:	683b      	ldr	r3, [r7, #0]
    7134:	7edb      	ldrb	r3, [r3, #27]
    7136:	2b00      	cmp	r3, #0
    7138:	d004      	beq.n	7144 <_usart_set_config+0x27c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    713c:	2280      	movs	r2, #128	; 0x80
    713e:	04d2      	lsls	r2, r2, #19
    7140:	4313      	orrs	r3, r2
    7142:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    7144:	683a      	ldr	r2, [r7, #0]
    7146:	232c      	movs	r3, #44	; 0x2c
    7148:	5cd3      	ldrb	r3, [r2, r3]
    714a:	2b00      	cmp	r3, #0
    714c:	d104      	bne.n	7158 <_usart_set_config+0x290>
    714e:	4b13      	ldr	r3, [pc, #76]	; (719c <_usart_set_config+0x2d4>)
    7150:	4798      	blx	r3
    7152:	1c03      	adds	r3, r0, #0
    7154:	2b00      	cmp	r3, #0
    7156:	d003      	beq.n	7160 <_usart_set_config+0x298>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    7158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    715a:	2280      	movs	r2, #128	; 0x80
    715c:	4313      	orrs	r3, r2
    715e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7160:	687b      	ldr	r3, [r7, #4]
    7162:	1c18      	adds	r0, r3, #0
    7164:	4b0c      	ldr	r3, [pc, #48]	; (7198 <_usart_set_config+0x2d0>)
    7166:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    7168:	69bb      	ldr	r3, [r7, #24]
    716a:	6a3a      	ldr	r2, [r7, #32]
    716c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    716e:	687b      	ldr	r3, [r7, #4]
    7170:	1c18      	adds	r0, r3, #0
    7172:	4b09      	ldr	r3, [pc, #36]	; (7198 <_usart_set_config+0x2d0>)
    7174:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    7176:	69bb      	ldr	r3, [r7, #24]
    7178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    717a:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    717c:	2300      	movs	r3, #0
}
    717e:	1c18      	adds	r0, r3, #0
    7180:	46bd      	mov	sp, r7
    7182:	b00a      	add	sp, #40	; 0x28
    7184:	bdb0      	pop	{r4, r5, r7, pc}
    7186:	46c0      	nop			; (mov r8, r8)
    7188:	00006c45 	.word	0x00006c45
    718c:	00008199 	.word	0x00008199
    7190:	000067d9 	.word	0x000067d9
    7194:	00006839 	.word	0x00006839
    7198:	00006ea5 	.word	0x00006ea5
    719c:	00006e61 	.word	0x00006e61

000071a0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    71a0:	b590      	push	{r4, r7, lr}
    71a2:	b093      	sub	sp, #76	; 0x4c
    71a4:	af00      	add	r7, sp, #0
    71a6:	60f8      	str	r0, [r7, #12]
    71a8:	60b9      	str	r1, [r7, #8]
    71aa:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    71ac:	1c3b      	adds	r3, r7, #0
    71ae:	333b      	adds	r3, #59	; 0x3b
    71b0:	2200      	movs	r2, #0
    71b2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    71b4:	68fb      	ldr	r3, [r7, #12]
    71b6:	68ba      	ldr	r2, [r7, #8]
    71b8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    71ba:	68fb      	ldr	r3, [r7, #12]
    71bc:	681b      	ldr	r3, [r3, #0]
    71be:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    71c0:	68fb      	ldr	r3, [r7, #12]
    71c2:	681b      	ldr	r3, [r3, #0]
    71c4:	1c18      	adds	r0, r3, #0
    71c6:	4b84      	ldr	r3, [pc, #528]	; (73d8 <usart_init+0x238>)
    71c8:	4798      	blx	r3
    71ca:	1c03      	adds	r3, r0, #0
    71cc:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    71ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    71d0:	3302      	adds	r3, #2
    71d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    71d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    71d6:	3314      	adds	r3, #20
    71d8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    71da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71dc:	681a      	ldr	r2, [r3, #0]
    71de:	2301      	movs	r3, #1
    71e0:	4013      	ands	r3, r2
    71e2:	d001      	beq.n	71e8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    71e4:	2305      	movs	r3, #5
    71e6:	e0f3      	b.n	73d0 <usart_init+0x230>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    71e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71ea:	681a      	ldr	r2, [r3, #0]
    71ec:	2302      	movs	r3, #2
    71ee:	4013      	ands	r3, r2
    71f0:	d001      	beq.n	71f6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    71f2:	231c      	movs	r3, #28
    71f4:	e0ec      	b.n	73d0 <usart_init+0x230>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    71f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    71f8:	2201      	movs	r2, #1
    71fa:	1c11      	adds	r1, r2, #0
    71fc:	4099      	lsls	r1, r3
    71fe:	1c0b      	adds	r3, r1, #0
    7200:	2002      	movs	r0, #2
    7202:	1c19      	adds	r1, r3, #0
    7204:	4b75      	ldr	r3, [pc, #468]	; (73dc <usart_init+0x23c>)
    7206:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    7208:	1c3b      	adds	r3, r7, #0
    720a:	3324      	adds	r3, #36	; 0x24
    720c:	1c18      	adds	r0, r3, #0
    720e:	4b74      	ldr	r3, [pc, #464]	; (73e0 <usart_init+0x240>)
    7210:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    7212:	687a      	ldr	r2, [r7, #4]
    7214:	232d      	movs	r3, #45	; 0x2d
    7216:	5cd2      	ldrb	r2, [r2, r3]
    7218:	1c3b      	adds	r3, r7, #0
    721a:	3324      	adds	r3, #36	; 0x24
    721c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7220:	b2da      	uxtb	r2, r3
    7222:	1c3b      	adds	r3, r7, #0
    7224:	3324      	adds	r3, #36	; 0x24
    7226:	1c10      	adds	r0, r2, #0
    7228:	1c19      	adds	r1, r3, #0
    722a:	4b6e      	ldr	r3, [pc, #440]	; (73e4 <usart_init+0x244>)
    722c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7230:	b2db      	uxtb	r3, r3
    7232:	1c18      	adds	r0, r3, #0
    7234:	4b6c      	ldr	r3, [pc, #432]	; (73e8 <usart_init+0x248>)
    7236:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7238:	687a      	ldr	r2, [r7, #4]
    723a:	232d      	movs	r3, #45	; 0x2d
    723c:	5cd3      	ldrb	r3, [r2, r3]
    723e:	1c18      	adds	r0, r3, #0
    7240:	2100      	movs	r1, #0
    7242:	4b6a      	ldr	r3, [pc, #424]	; (73ec <usart_init+0x24c>)
    7244:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    7246:	687b      	ldr	r3, [r7, #4]
    7248:	7ada      	ldrb	r2, [r3, #11]
    724a:	68fb      	ldr	r3, [r7, #12]
    724c:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    724e:	687a      	ldr	r2, [r7, #4]
    7250:	2324      	movs	r3, #36	; 0x24
    7252:	5cd2      	ldrb	r2, [r2, r3]
    7254:	68fb      	ldr	r3, [r7, #12]
    7256:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    7258:	687a      	ldr	r2, [r7, #4]
    725a:	2325      	movs	r3, #37	; 0x25
    725c:	5cd2      	ldrb	r2, [r2, r3]
    725e:	68fb      	ldr	r3, [r7, #12]
    7260:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    7262:	687b      	ldr	r3, [r7, #4]
    7264:	7eda      	ldrb	r2, [r3, #27]
    7266:	68fb      	ldr	r3, [r7, #12]
    7268:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    726a:	687b      	ldr	r3, [r7, #4]
    726c:	7f1a      	ldrb	r2, [r3, #28]
    726e:	68fb      	ldr	r3, [r7, #12]
    7270:	725a      	strb	r2, [r3, #9]
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    7272:	1c3c      	adds	r4, r7, #0
    7274:	343b      	adds	r4, #59	; 0x3b
    7276:	68fa      	ldr	r2, [r7, #12]
    7278:	687b      	ldr	r3, [r7, #4]
    727a:	1c10      	adds	r0, r2, #0
    727c:	1c19      	adds	r1, r3, #0
    727e:	4b5c      	ldr	r3, [pc, #368]	; (73f0 <usart_init+0x250>)
    7280:	4798      	blx	r3
    7282:	1c03      	adds	r3, r0, #0
    7284:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    7286:	1c3b      	adds	r3, r7, #0
    7288:	333b      	adds	r3, #59	; 0x3b
    728a:	781b      	ldrb	r3, [r3, #0]
    728c:	2b00      	cmp	r3, #0
    728e:	d003      	beq.n	7298 <usart_init+0xf8>
		return status_code;
    7290:	1c3b      	adds	r3, r7, #0
    7292:	333b      	adds	r3, #59	; 0x3b
    7294:	781b      	ldrb	r3, [r3, #0]
    7296:	e09b      	b.n	73d0 <usart_init+0x230>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    7298:	1c3b      	adds	r3, r7, #0
    729a:	3320      	adds	r3, #32
    729c:	1c18      	adds	r0, r3, #0
    729e:	4b55      	ldr	r3, [pc, #340]	; (73f4 <usart_init+0x254>)
    72a0:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    72a2:	1c3b      	adds	r3, r7, #0
    72a4:	3320      	adds	r3, #32
    72a6:	2200      	movs	r2, #0
    72a8:	705a      	strb	r2, [r3, #1]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    72aa:	687b      	ldr	r3, [r7, #4]
    72ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    72ae:	1c3b      	adds	r3, r7, #0
    72b0:	3310      	adds	r3, #16
    72b2:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    72b4:	687b      	ldr	r3, [r7, #4]
    72b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    72b8:	1c3b      	adds	r3, r7, #0
    72ba:	3310      	adds	r3, #16
    72bc:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    72be:	687b      	ldr	r3, [r7, #4]
    72c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    72c2:	1c3b      	adds	r3, r7, #0
    72c4:	3310      	adds	r3, #16
    72c6:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    72c8:	687b      	ldr	r3, [r7, #4]
    72ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    72cc:	1c3b      	adds	r3, r7, #0
    72ce:	3310      	adds	r3, #16
    72d0:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    72d2:	1c3b      	adds	r3, r7, #0
    72d4:	3347      	adds	r3, #71	; 0x47
    72d6:	2200      	movs	r2, #0
    72d8:	701a      	strb	r2, [r3, #0]
    72da:	e02c      	b.n	7336 <usart_init+0x196>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    72dc:	1c3b      	adds	r3, r7, #0
    72de:	3347      	adds	r3, #71	; 0x47
    72e0:	781a      	ldrb	r2, [r3, #0]
    72e2:	1c3b      	adds	r3, r7, #0
    72e4:	3310      	adds	r3, #16
    72e6:	0092      	lsls	r2, r2, #2
    72e8:	58d3      	ldr	r3, [r2, r3]
    72ea:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    72ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    72ee:	2b00      	cmp	r3, #0
    72f0:	d109      	bne.n	7306 <usart_init+0x166>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    72f2:	68ba      	ldr	r2, [r7, #8]
    72f4:	1c3b      	adds	r3, r7, #0
    72f6:	3347      	adds	r3, #71	; 0x47
    72f8:	781b      	ldrb	r3, [r3, #0]
    72fa:	1c10      	adds	r0, r2, #0
    72fc:	1c19      	adds	r1, r3, #0
    72fe:	4b3e      	ldr	r3, [pc, #248]	; (73f8 <usart_init+0x258>)
    7300:	4798      	blx	r3
    7302:	1c03      	adds	r3, r0, #0
    7304:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    7306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7308:	3301      	adds	r3, #1
    730a:	d00d      	beq.n	7328 <usart_init+0x188>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    730c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    730e:	b2da      	uxtb	r2, r3
    7310:	1c3b      	adds	r3, r7, #0
    7312:	3320      	adds	r3, #32
    7314:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7318:	0c1b      	lsrs	r3, r3, #16
    731a:	b2da      	uxtb	r2, r3
    731c:	1c3b      	adds	r3, r7, #0
    731e:	3320      	adds	r3, #32
    7320:	1c10      	adds	r0, r2, #0
    7322:	1c19      	adds	r1, r3, #0
    7324:	4b35      	ldr	r3, [pc, #212]	; (73fc <usart_init+0x25c>)
    7326:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    7328:	1c3b      	adds	r3, r7, #0
    732a:	3347      	adds	r3, #71	; 0x47
    732c:	781a      	ldrb	r2, [r3, #0]
    732e:	1c3b      	adds	r3, r7, #0
    7330:	3347      	adds	r3, #71	; 0x47
    7332:	3201      	adds	r2, #1
    7334:	701a      	strb	r2, [r3, #0]
    7336:	1c3b      	adds	r3, r7, #0
    7338:	3347      	adds	r3, #71	; 0x47
    733a:	781b      	ldrb	r3, [r3, #0]
    733c:	2b03      	cmp	r3, #3
    733e:	d9cd      	bls.n	72dc <usart_init+0x13c>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    7340:	2300      	movs	r3, #0
    7342:	63fb      	str	r3, [r7, #60]	; 0x3c
    7344:	e00a      	b.n	735c <usart_init+0x1bc>
		module->callback[i]            = NULL;
    7346:	68fa      	ldr	r2, [r7, #12]
    7348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    734a:	3302      	adds	r3, #2
    734c:	009b      	lsls	r3, r3, #2
    734e:	18d3      	adds	r3, r2, r3
    7350:	3304      	adds	r3, #4
    7352:	2200      	movs	r2, #0
    7354:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    7356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7358:	3301      	adds	r3, #1
    735a:	63fb      	str	r3, [r7, #60]	; 0x3c
    735c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    735e:	2b05      	cmp	r3, #5
    7360:	d9f1      	bls.n	7346 <usart_init+0x1a6>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    7362:	68fb      	ldr	r3, [r7, #12]
    7364:	2200      	movs	r2, #0
    7366:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    7368:	68fb      	ldr	r3, [r7, #12]
    736a:	2200      	movs	r2, #0
    736c:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    736e:	68fb      	ldr	r3, [r7, #12]
    7370:	2200      	movs	r2, #0
    7372:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    7374:	68fb      	ldr	r3, [r7, #12]
    7376:	2200      	movs	r2, #0
    7378:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    737a:	68fa      	ldr	r2, [r7, #12]
    737c:	2330      	movs	r3, #48	; 0x30
    737e:	2100      	movs	r1, #0
    7380:	54d1      	strb	r1, [r2, r3]
	module->callback_enable_mask       = 0x00;
    7382:	68fa      	ldr	r2, [r7, #12]
    7384:	2331      	movs	r3, #49	; 0x31
    7386:	2100      	movs	r1, #0
    7388:	54d1      	strb	r1, [r2, r3]
	module->rx_status                  = STATUS_OK;
    738a:	68fa      	ldr	r2, [r7, #12]
    738c:	2332      	movs	r3, #50	; 0x32
    738e:	2100      	movs	r1, #0
    7390:	54d1      	strb	r1, [r2, r3]
	module->tx_status                  = STATUS_OK;
    7392:	68fa      	ldr	r2, [r7, #12]
    7394:	2333      	movs	r3, #51	; 0x33
    7396:	2100      	movs	r1, #0
    7398:	54d1      	strb	r1, [r2, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    739a:	68fb      	ldr	r3, [r7, #12]
    739c:	681b      	ldr	r3, [r3, #0]
    739e:	1c3c      	adds	r4, r7, #0
    73a0:	3427      	adds	r4, #39	; 0x27
    73a2:	1c18      	adds	r0, r3, #0
    73a4:	4b0c      	ldr	r3, [pc, #48]	; (73d8 <usart_init+0x238>)
    73a6:	4798      	blx	r3
    73a8:	1c03      	adds	r3, r0, #0
    73aa:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    73ac:	1c3b      	adds	r3, r7, #0
    73ae:	3327      	adds	r3, #39	; 0x27
    73b0:	781a      	ldrb	r2, [r3, #0]
    73b2:	4b13      	ldr	r3, [pc, #76]	; (7400 <usart_init+0x260>)
    73b4:	1c10      	adds	r0, r2, #0
    73b6:	1c19      	adds	r1, r3, #0
    73b8:	4b12      	ldr	r3, [pc, #72]	; (7404 <usart_init+0x264>)
    73ba:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    73bc:	1c3b      	adds	r3, r7, #0
    73be:	3327      	adds	r3, #39	; 0x27
    73c0:	781a      	ldrb	r2, [r3, #0]
    73c2:	4b11      	ldr	r3, [pc, #68]	; (7408 <usart_init+0x268>)
    73c4:	0092      	lsls	r2, r2, #2
    73c6:	68f9      	ldr	r1, [r7, #12]
    73c8:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    73ca:	1c3b      	adds	r3, r7, #0
    73cc:	333b      	adds	r3, #59	; 0x3b
    73ce:	781b      	ldrb	r3, [r3, #0]
}
    73d0:	1c18      	adds	r0, r3, #0
    73d2:	46bd      	mov	sp, r7
    73d4:	b013      	add	sp, #76	; 0x4c
    73d6:	bd90      	pop	{r4, r7, pc}
    73d8:	00006c45 	.word	0x00006c45
    73dc:	00006ddd 	.word	0x00006ddd
    73e0:	00006dc9 	.word	0x00006dc9
    73e4:	0000807d 	.word	0x0000807d
    73e8:	000080bd 	.word	0x000080bd
    73ec:	000069e9 	.word	0x000069e9
    73f0:	00006ec9 	.word	0x00006ec9
    73f4:	00006e39 	.word	0x00006e39
    73f8:	00006a75 	.word	0x00006a75
    73fc:	00008355 	.word	0x00008355
    7400:	000075bd 	.word	0x000075bd
    7404:	00006c91 	.word	0x00006c91
    7408:	200010a4 	.word	0x200010a4

0000740c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    740c:	b580      	push	{r7, lr}
    740e:	b084      	sub	sp, #16
    7410:	af00      	add	r7, sp, #0
    7412:	6078      	str	r0, [r7, #4]
    7414:	1c0a      	adds	r2, r1, #0
    7416:	1cbb      	adds	r3, r7, #2
    7418:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    741a:	687b      	ldr	r3, [r7, #4]
    741c:	681b      	ldr	r3, [r3, #0]
    741e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    7420:	687b      	ldr	r3, [r7, #4]
    7422:	79db      	ldrb	r3, [r3, #7]
    7424:	2201      	movs	r2, #1
    7426:	4053      	eors	r3, r2
    7428:	b2db      	uxtb	r3, r3
    742a:	2b00      	cmp	r3, #0
    742c:	d001      	beq.n	7432 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    742e:	231c      	movs	r3, #28
    7430:	e018      	b.n	7464 <usart_write_wait+0x58>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    7432:	687b      	ldr	r3, [r7, #4]
    7434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7436:	0c1b      	lsrs	r3, r3, #16
    7438:	b29b      	uxth	r3, r3
    743a:	2b00      	cmp	r3, #0
    743c:	d001      	beq.n	7442 <usart_write_wait+0x36>
		return STATUS_BUSY;
    743e:	2305      	movs	r3, #5
    7440:	e010      	b.n	7464 <usart_write_wait+0x58>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7442:	687b      	ldr	r3, [r7, #4]
    7444:	1c18      	adds	r0, r3, #0
    7446:	4b09      	ldr	r3, [pc, #36]	; (746c <usart_write_wait+0x60>)
    7448:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    744a:	68fb      	ldr	r3, [r7, #12]
    744c:	1cba      	adds	r2, r7, #2
    744e:	8812      	ldrh	r2, [r2, #0]
    7450:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    7452:	46c0      	nop			; (mov r8, r8)
    7454:	68fb      	ldr	r3, [r7, #12]
    7456:	699b      	ldr	r3, [r3, #24]
    7458:	b2db      	uxtb	r3, r3
    745a:	1c1a      	adds	r2, r3, #0
    745c:	2302      	movs	r3, #2
    745e:	4013      	ands	r3, r2
    7460:	d0f8      	beq.n	7454 <usart_write_wait+0x48>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    7462:	2300      	movs	r3, #0
}
    7464:	1c18      	adds	r0, r3, #0
    7466:	46bd      	mov	sp, r7
    7468:	b004      	add	sp, #16
    746a:	bd80      	pop	{r7, pc}
    746c:	00006ea5 	.word	0x00006ea5

00007470 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    7470:	b580      	push	{r7, lr}
    7472:	b084      	sub	sp, #16
    7474:	af00      	add	r7, sp, #0
    7476:	6078      	str	r0, [r7, #4]
    7478:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    747a:	687b      	ldr	r3, [r7, #4]
    747c:	681b      	ldr	r3, [r3, #0]
    747e:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    7480:	687b      	ldr	r3, [r7, #4]
    7482:	799b      	ldrb	r3, [r3, #6]
    7484:	2201      	movs	r2, #1
    7486:	4053      	eors	r3, r2
    7488:	b2db      	uxtb	r3, r3
    748a:	2b00      	cmp	r3, #0
    748c:	d001      	beq.n	7492 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    748e:	231c      	movs	r3, #28
    7490:	e06b      	b.n	756a <usart_read_wait+0xfa>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    7492:	687b      	ldr	r3, [r7, #4]
    7494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7496:	b29b      	uxth	r3, r3
    7498:	2b00      	cmp	r3, #0
    749a:	d001      	beq.n	74a0 <usart_read_wait+0x30>
		return STATUS_BUSY;
    749c:	2305      	movs	r3, #5
    749e:	e064      	b.n	756a <usart_read_wait+0xfa>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    74a0:	68fb      	ldr	r3, [r7, #12]
    74a2:	699b      	ldr	r3, [r3, #24]
    74a4:	b2db      	uxtb	r3, r3
    74a6:	1c1a      	adds	r2, r3, #0
    74a8:	2304      	movs	r3, #4
    74aa:	4013      	ands	r3, r2
    74ac:	d101      	bne.n	74b2 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    74ae:	2305      	movs	r3, #5
    74b0:	e05b      	b.n	756a <usart_read_wait+0xfa>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    74b2:	687b      	ldr	r3, [r7, #4]
    74b4:	1c18      	adds	r0, r3, #0
    74b6:	4b2f      	ldr	r3, [pc, #188]	; (7574 <usart_read_wait+0x104>)
    74b8:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    74ba:	68fb      	ldr	r3, [r7, #12]
    74bc:	699b      	ldr	r3, [r3, #24]
    74be:	0c1b      	lsrs	r3, r3, #16
    74c0:	b29b      	uxth	r3, r3
    74c2:	b2d9      	uxtb	r1, r3
    74c4:	1c3b      	adds	r3, r7, #0
    74c6:	330b      	adds	r3, #11
    74c8:	223f      	movs	r2, #63	; 0x3f
    74ca:	400a      	ands	r2, r1
    74cc:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    74ce:	1c3b      	adds	r3, r7, #0
    74d0:	330b      	adds	r3, #11
    74d2:	781b      	ldrb	r3, [r3, #0]
    74d4:	2b00      	cmp	r3, #0
    74d6:	d042      	beq.n	755e <usart_read_wait+0xee>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    74d8:	1c3b      	adds	r3, r7, #0
    74da:	330b      	adds	r3, #11
    74dc:	781a      	ldrb	r2, [r3, #0]
    74de:	2302      	movs	r3, #2
    74e0:	4013      	ands	r3, r2
    74e2:	d004      	beq.n	74ee <usart_read_wait+0x7e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    74e4:	68fb      	ldr	r3, [r7, #12]
    74e6:	2202      	movs	r2, #2
    74e8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    74ea:	231a      	movs	r3, #26
    74ec:	e03d      	b.n	756a <usart_read_wait+0xfa>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    74ee:	1c3b      	adds	r3, r7, #0
    74f0:	330b      	adds	r3, #11
    74f2:	781a      	ldrb	r2, [r3, #0]
    74f4:	2304      	movs	r3, #4
    74f6:	4013      	ands	r3, r2
    74f8:	d004      	beq.n	7504 <usart_read_wait+0x94>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    74fa:	68fb      	ldr	r3, [r7, #12]
    74fc:	2204      	movs	r2, #4
    74fe:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    7500:	231e      	movs	r3, #30
    7502:	e032      	b.n	756a <usart_read_wait+0xfa>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7504:	1c3b      	adds	r3, r7, #0
    7506:	330b      	adds	r3, #11
    7508:	781a      	ldrb	r2, [r3, #0]
    750a:	2301      	movs	r3, #1
    750c:	4013      	ands	r3, r2
    750e:	d004      	beq.n	751a <usart_read_wait+0xaa>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7510:	68fb      	ldr	r3, [r7, #12]
    7512:	2201      	movs	r2, #1
    7514:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    7516:	2313      	movs	r3, #19
    7518:	e027      	b.n	756a <usart_read_wait+0xfa>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    751a:	1c3b      	adds	r3, r7, #0
    751c:	330b      	adds	r3, #11
    751e:	781a      	ldrb	r2, [r3, #0]
    7520:	2310      	movs	r3, #16
    7522:	4013      	ands	r3, r2
    7524:	d00a      	beq.n	753c <usart_read_wait+0xcc>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    7526:	68fb      	ldr	r3, [r7, #12]
    7528:	699b      	ldr	r3, [r3, #24]
    752a:	0c1b      	lsrs	r3, r3, #16
    752c:	b29b      	uxth	r3, r3
    752e:	2210      	movs	r2, #16
    7530:	4313      	orrs	r3, r2
    7532:	b29a      	uxth	r2, r3
    7534:	68fb      	ldr	r3, [r7, #12]
    7536:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    7538:	2342      	movs	r3, #66	; 0x42
    753a:	e016      	b.n	756a <usart_read_wait+0xfa>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    753c:	1c3b      	adds	r3, r7, #0
    753e:	330b      	adds	r3, #11
    7540:	781a      	ldrb	r2, [r3, #0]
    7542:	2320      	movs	r3, #32
    7544:	4013      	ands	r3, r2
    7546:	d00a      	beq.n	755e <usart_read_wait+0xee>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    7548:	68fb      	ldr	r3, [r7, #12]
    754a:	699b      	ldr	r3, [r3, #24]
    754c:	0c1b      	lsrs	r3, r3, #16
    754e:	b29b      	uxth	r3, r3
    7550:	2220      	movs	r2, #32
    7552:	4313      	orrs	r3, r2
    7554:	b29a      	uxth	r2, r3
    7556:	68fb      	ldr	r3, [r7, #12]
    7558:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    755a:	2341      	movs	r3, #65	; 0x41
    755c:	e005      	b.n	756a <usart_read_wait+0xfa>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    755e:	68fb      	ldr	r3, [r7, #12]
    7560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7562:	b29a      	uxth	r2, r3
    7564:	683b      	ldr	r3, [r7, #0]
    7566:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    7568:	2300      	movs	r3, #0
}
    756a:	1c18      	adds	r0, r3, #0
    756c:	46bd      	mov	sp, r7
    756e:	b004      	add	sp, #16
    7570:	bd80      	pop	{r7, pc}
    7572:	46c0      	nop			; (mov r8, r8)
    7574:	00006ea5 	.word	0x00006ea5

00007578 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    7578:	b580      	push	{r7, lr}
    757a:	b084      	sub	sp, #16
    757c:	af00      	add	r7, sp, #0
    757e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    7580:	687b      	ldr	r3, [r7, #4]
    7582:	681b      	ldr	r3, [r3, #0]
    7584:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    7586:	68fb      	ldr	r3, [r7, #12]
    7588:	69db      	ldr	r3, [r3, #28]
    758a:	1e5a      	subs	r2, r3, #1
    758c:	4193      	sbcs	r3, r2
    758e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    7590:	1c18      	adds	r0, r3, #0
    7592:	46bd      	mov	sp, r7
    7594:	b004      	add	sp, #16
    7596:	bd80      	pop	{r7, pc}

00007598 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    7598:	b580      	push	{r7, lr}
    759a:	b082      	sub	sp, #8
    759c:	af00      	add	r7, sp, #0
    759e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    75a0:	46c0      	nop			; (mov r8, r8)
    75a2:	687b      	ldr	r3, [r7, #4]
    75a4:	1c18      	adds	r0, r3, #0
    75a6:	4b04      	ldr	r3, [pc, #16]	; (75b8 <_usart_wait_for_sync+0x20>)
    75a8:	4798      	blx	r3
    75aa:	1c03      	adds	r3, r0, #0
    75ac:	2b00      	cmp	r3, #0
    75ae:	d1f8      	bne.n	75a2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    75b0:	46bd      	mov	sp, r7
    75b2:	b002      	add	sp, #8
    75b4:	bd80      	pop	{r7, pc}
    75b6:	46c0      	nop			; (mov r8, r8)
    75b8:	00007579 	.word	0x00007579

000075bc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    75bc:	b580      	push	{r7, lr}
    75be:	b088      	sub	sp, #32
    75c0:	af00      	add	r7, sp, #0
    75c2:	1c02      	adds	r2, r0, #0
    75c4:	1dfb      	adds	r3, r7, #7
    75c6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    75c8:	1dfb      	adds	r3, r7, #7
    75ca:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    75cc:	4bae      	ldr	r3, [pc, #696]	; (7888 <_usart_interrupt_handler+0x2cc>)
    75ce:	0092      	lsls	r2, r2, #2
    75d0:	58d3      	ldr	r3, [r2, r3]
    75d2:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    75d4:	69bb      	ldr	r3, [r7, #24]
    75d6:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    75d8:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    75da:	69bb      	ldr	r3, [r7, #24]
    75dc:	1c18      	adds	r0, r3, #0
    75de:	4bab      	ldr	r3, [pc, #684]	; (788c <_usart_interrupt_handler+0x2d0>)
    75e0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    75e2:	697b      	ldr	r3, [r7, #20]
    75e4:	699b      	ldr	r3, [r3, #24]
    75e6:	b2da      	uxtb	r2, r3
    75e8:	1c3b      	adds	r3, r7, #0
    75ea:	3312      	adds	r3, #18
    75ec:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    75ee:	697b      	ldr	r3, [r7, #20]
    75f0:	695b      	ldr	r3, [r3, #20]
    75f2:	021b      	lsls	r3, r3, #8
    75f4:	0e1b      	lsrs	r3, r3, #24
    75f6:	b2db      	uxtb	r3, r3
    75f8:	1c1a      	adds	r2, r3, #0
    75fa:	1c3b      	adds	r3, r7, #0
    75fc:	3312      	adds	r3, #18
    75fe:	1c39      	adds	r1, r7, #0
    7600:	3112      	adds	r1, #18
    7602:	8809      	ldrh	r1, [r1, #0]
    7604:	400a      	ands	r2, r1
    7606:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    7608:	69ba      	ldr	r2, [r7, #24]
    760a:	2330      	movs	r3, #48	; 0x30
    760c:	5cd3      	ldrb	r3, [r2, r3]
			module->callback_enable_mask;
    760e:	69b9      	ldr	r1, [r7, #24]
    7610:	2231      	movs	r2, #49	; 0x31
    7612:	5c8a      	ldrb	r2, [r1, r2]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    7614:	4013      	ands	r3, r2
    7616:	b2da      	uxtb	r2, r3
    7618:	1c3b      	adds	r3, r7, #0
    761a:	3310      	adds	r3, #16
    761c:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    761e:	1c3b      	adds	r3, r7, #0
    7620:	3312      	adds	r3, #18
    7622:	881a      	ldrh	r2, [r3, #0]
    7624:	2301      	movs	r3, #1
    7626:	4013      	ands	r3, r2
    7628:	d046      	beq.n	76b8 <_usart_interrupt_handler+0xfc>
		if (module->remaining_tx_buffer_length) {
    762a:	69bb      	ldr	r3, [r7, #24]
    762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    762e:	0c1b      	lsrs	r3, r3, #16
    7630:	b29b      	uxth	r3, r3
    7632:	2b00      	cmp	r3, #0
    7634:	d03d      	beq.n	76b2 <_usart_interrupt_handler+0xf6>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7636:	69bb      	ldr	r3, [r7, #24]
    7638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    763a:	781b      	ldrb	r3, [r3, #0]
    763c:	b2da      	uxtb	r2, r3
    763e:	1c3b      	adds	r3, r7, #0
    7640:	331e      	adds	r3, #30
    7642:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    7644:	69bb      	ldr	r3, [r7, #24]
    7646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7648:	1c5a      	adds	r2, r3, #1
    764a:	69bb      	ldr	r3, [r7, #24]
    764c:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    764e:	69bb      	ldr	r3, [r7, #24]
    7650:	795b      	ldrb	r3, [r3, #5]
    7652:	2b01      	cmp	r3, #1
    7654:	d112      	bne.n	767c <_usart_interrupt_handler+0xc0>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    7656:	69bb      	ldr	r3, [r7, #24]
    7658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    765a:	781b      	ldrb	r3, [r3, #0]
    765c:	b2db      	uxtb	r3, r3
    765e:	021b      	lsls	r3, r3, #8
    7660:	b29a      	uxth	r2, r3
    7662:	1c3b      	adds	r3, r7, #0
    7664:	331e      	adds	r3, #30
    7666:	881b      	ldrh	r3, [r3, #0]
    7668:	4313      	orrs	r3, r2
    766a:	b29a      	uxth	r2, r3
    766c:	1c3b      	adds	r3, r7, #0
    766e:	331e      	adds	r3, #30
    7670:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    7672:	69bb      	ldr	r3, [r7, #24]
    7674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7676:	1c5a      	adds	r2, r3, #1
    7678:	69bb      	ldr	r3, [r7, #24]
    767a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    767c:	1c3b      	adds	r3, r7, #0
    767e:	331e      	adds	r3, #30
    7680:	881b      	ldrh	r3, [r3, #0]
    7682:	05db      	lsls	r3, r3, #23
    7684:	0ddb      	lsrs	r3, r3, #23
    7686:	b29a      	uxth	r2, r3
    7688:	697b      	ldr	r3, [r7, #20]
    768a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    768c:	69bb      	ldr	r3, [r7, #24]
    768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7690:	0c1b      	lsrs	r3, r3, #16
    7692:	b29b      	uxth	r3, r3
    7694:	3b01      	subs	r3, #1
    7696:	b29b      	uxth	r3, r3
    7698:	69ba      	ldr	r2, [r7, #24]
    769a:	1c19      	adds	r1, r3, #0
    769c:	85d1      	strh	r1, [r2, #46]	; 0x2e
    769e:	2b00      	cmp	r3, #0
    76a0:	d106      	bne.n	76b0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    76a2:	697b      	ldr	r3, [r7, #20]
    76a4:	2201      	movs	r2, #1
    76a6:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    76a8:	697b      	ldr	r3, [r7, #20]
    76aa:	2202      	movs	r2, #2
    76ac:	759a      	strb	r2, [r3, #22]
    76ae:	e003      	b.n	76b8 <_usart_interrupt_handler+0xfc>
    76b0:	e002      	b.n	76b8 <_usart_interrupt_handler+0xfc>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    76b2:	697b      	ldr	r3, [r7, #20]
    76b4:	2201      	movs	r2, #1
    76b6:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    76b8:	1c3b      	adds	r3, r7, #0
    76ba:	3312      	adds	r3, #18
    76bc:	881a      	ldrh	r2, [r3, #0]
    76be:	2302      	movs	r3, #2
    76c0:	4013      	ands	r3, r2
    76c2:	d011      	beq.n	76e8 <_usart_interrupt_handler+0x12c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    76c4:	697b      	ldr	r3, [r7, #20]
    76c6:	2202      	movs	r2, #2
    76c8:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    76ca:	69ba      	ldr	r2, [r7, #24]
    76cc:	2333      	movs	r3, #51	; 0x33
    76ce:	2100      	movs	r1, #0
    76d0:	54d1      	strb	r1, [r2, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    76d2:	1c3b      	adds	r3, r7, #0
    76d4:	3310      	adds	r3, #16
    76d6:	881a      	ldrh	r2, [r3, #0]
    76d8:	2301      	movs	r3, #1
    76da:	4013      	ands	r3, r2
    76dc:	d004      	beq.n	76e8 <_usart_interrupt_handler+0x12c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    76de:	69bb      	ldr	r3, [r7, #24]
    76e0:	68db      	ldr	r3, [r3, #12]
    76e2:	69ba      	ldr	r2, [r7, #24]
    76e4:	1c10      	adds	r0, r2, #0
    76e6:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    76e8:	1c3b      	adds	r3, r7, #0
    76ea:	3312      	adds	r3, #18
    76ec:	881a      	ldrh	r2, [r3, #0]
    76ee:	2304      	movs	r3, #4
    76f0:	4013      	ands	r3, r2
    76f2:	d100      	bne.n	76f6 <_usart_interrupt_handler+0x13a>
    76f4:	e0cf      	b.n	7896 <_usart_interrupt_handler+0x2da>

		if (module->remaining_rx_buffer_length) {
    76f6:	69bb      	ldr	r3, [r7, #24]
    76f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    76fa:	b29b      	uxth	r3, r3
    76fc:	2b00      	cmp	r3, #0
    76fe:	d100      	bne.n	7702 <_usart_interrupt_handler+0x146>
    7700:	e0c6      	b.n	7890 <_usart_interrupt_handler+0x2d4>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7702:	697b      	ldr	r3, [r7, #20]
    7704:	699b      	ldr	r3, [r3, #24]
    7706:	0c1b      	lsrs	r3, r3, #16
    7708:	b29b      	uxth	r3, r3
    770a:	b2d9      	uxtb	r1, r3
    770c:	1c3b      	adds	r3, r7, #0
    770e:	330f      	adds	r3, #15
    7710:	223f      	movs	r2, #63	; 0x3f
    7712:	400a      	ands	r2, r1
    7714:	701a      	strb	r2, [r3, #0]

			/* Check if an error has occurred during the receiving */
			if (error_code) {
    7716:	1c3b      	adds	r3, r7, #0
    7718:	330f      	adds	r3, #15
    771a:	781b      	ldrb	r3, [r3, #0]
    771c:	2b00      	cmp	r3, #0
    771e:	d100      	bne.n	7722 <_usart_interrupt_handler+0x166>
    7720:	e06e      	b.n	7800 <_usart_interrupt_handler+0x244>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    7722:	1c3b      	adds	r3, r7, #0
    7724:	330f      	adds	r3, #15
    7726:	781a      	ldrb	r2, [r3, #0]
    7728:	2302      	movs	r3, #2
    772a:	4013      	ands	r3, r2
    772c:	d00d      	beq.n	774a <_usart_interrupt_handler+0x18e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    772e:	69ba      	ldr	r2, [r7, #24]
    7730:	2332      	movs	r3, #50	; 0x32
    7732:	211a      	movs	r1, #26
    7734:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    7736:	697b      	ldr	r3, [r7, #20]
    7738:	699b      	ldr	r3, [r3, #24]
    773a:	0c1b      	lsrs	r3, r3, #16
    773c:	b29b      	uxth	r3, r3
    773e:	2202      	movs	r2, #2
    7740:	4313      	orrs	r3, r2
    7742:	b29a      	uxth	r2, r3
    7744:	697b      	ldr	r3, [r7, #20]
    7746:	835a      	strh	r2, [r3, #26]
    7748:	e04e      	b.n	77e8 <_usart_interrupt_handler+0x22c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    774a:	1c3b      	adds	r3, r7, #0
    774c:	330f      	adds	r3, #15
    774e:	781a      	ldrb	r2, [r3, #0]
    7750:	2304      	movs	r3, #4
    7752:	4013      	ands	r3, r2
    7754:	d00d      	beq.n	7772 <_usart_interrupt_handler+0x1b6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    7756:	69ba      	ldr	r2, [r7, #24]
    7758:	2332      	movs	r3, #50	; 0x32
    775a:	211e      	movs	r1, #30
    775c:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    775e:	697b      	ldr	r3, [r7, #20]
    7760:	699b      	ldr	r3, [r3, #24]
    7762:	0c1b      	lsrs	r3, r3, #16
    7764:	b29b      	uxth	r3, r3
    7766:	2204      	movs	r2, #4
    7768:	4313      	orrs	r3, r2
    776a:	b29a      	uxth	r2, r3
    776c:	697b      	ldr	r3, [r7, #20]
    776e:	835a      	strh	r2, [r3, #26]
    7770:	e03a      	b.n	77e8 <_usart_interrupt_handler+0x22c>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7772:	1c3b      	adds	r3, r7, #0
    7774:	330f      	adds	r3, #15
    7776:	781a      	ldrb	r2, [r3, #0]
    7778:	2301      	movs	r3, #1
    777a:	4013      	ands	r3, r2
    777c:	d00d      	beq.n	779a <_usart_interrupt_handler+0x1de>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    777e:	69ba      	ldr	r2, [r7, #24]
    7780:	2332      	movs	r3, #50	; 0x32
    7782:	2113      	movs	r1, #19
    7784:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    7786:	697b      	ldr	r3, [r7, #20]
    7788:	699b      	ldr	r3, [r3, #24]
    778a:	0c1b      	lsrs	r3, r3, #16
    778c:	b29b      	uxth	r3, r3
    778e:	2201      	movs	r2, #1
    7790:	4313      	orrs	r3, r2
    7792:	b29a      	uxth	r2, r3
    7794:	697b      	ldr	r3, [r7, #20]
    7796:	835a      	strh	r2, [r3, #26]
    7798:	e026      	b.n	77e8 <_usart_interrupt_handler+0x22c>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    779a:	1c3b      	adds	r3, r7, #0
    779c:	330f      	adds	r3, #15
    779e:	781a      	ldrb	r2, [r3, #0]
    77a0:	2310      	movs	r3, #16
    77a2:	4013      	ands	r3, r2
    77a4:	d00d      	beq.n	77c2 <_usart_interrupt_handler+0x206>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    77a6:	69ba      	ldr	r2, [r7, #24]
    77a8:	2332      	movs	r3, #50	; 0x32
    77aa:	2142      	movs	r1, #66	; 0x42
    77ac:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    77ae:	697b      	ldr	r3, [r7, #20]
    77b0:	699b      	ldr	r3, [r3, #24]
    77b2:	0c1b      	lsrs	r3, r3, #16
    77b4:	b29b      	uxth	r3, r3
    77b6:	2210      	movs	r2, #16
    77b8:	4313      	orrs	r3, r2
    77ba:	b29a      	uxth	r2, r3
    77bc:	697b      	ldr	r3, [r7, #20]
    77be:	835a      	strh	r2, [r3, #26]
    77c0:	e012      	b.n	77e8 <_usart_interrupt_handler+0x22c>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    77c2:	1c3b      	adds	r3, r7, #0
    77c4:	330f      	adds	r3, #15
    77c6:	781a      	ldrb	r2, [r3, #0]
    77c8:	2320      	movs	r3, #32
    77ca:	4013      	ands	r3, r2
    77cc:	d00c      	beq.n	77e8 <_usart_interrupt_handler+0x22c>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    77ce:	69ba      	ldr	r2, [r7, #24]
    77d0:	2332      	movs	r3, #50	; 0x32
    77d2:	2141      	movs	r1, #65	; 0x41
    77d4:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    77d6:	697b      	ldr	r3, [r7, #20]
    77d8:	699b      	ldr	r3, [r3, #24]
    77da:	0c1b      	lsrs	r3, r3, #16
    77dc:	b29b      	uxth	r3, r3
    77de:	2220      	movs	r2, #32
    77e0:	4313      	orrs	r3, r2
    77e2:	b29a      	uxth	r2, r3
    77e4:	697b      	ldr	r3, [r7, #20]
    77e6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    77e8:	1c3b      	adds	r3, r7, #0
    77ea:	3310      	adds	r3, #16
    77ec:	881a      	ldrh	r2, [r3, #0]
    77ee:	2304      	movs	r3, #4
    77f0:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    77f2:	d050      	beq.n	7896 <_usart_interrupt_handler+0x2da>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    77f4:	69bb      	ldr	r3, [r7, #24]
    77f6:	695b      	ldr	r3, [r3, #20]
    77f8:	69ba      	ldr	r2, [r7, #24]
    77fa:	1c10      	adds	r0, r2, #0
    77fc:	4798      	blx	r3
    77fe:	e04a      	b.n	7896 <_usart_interrupt_handler+0x2da>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    7800:	697b      	ldr	r3, [r7, #20]
    7802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7804:	b29a      	uxth	r2, r3
    7806:	1c3b      	adds	r3, r7, #0
    7808:	330c      	adds	r3, #12
    780a:	05d2      	lsls	r2, r2, #23
    780c:	0dd2      	lsrs	r2, r2, #23
    780e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    7810:	69bb      	ldr	r3, [r7, #24]
    7812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7814:	1c3a      	adds	r2, r7, #0
    7816:	320c      	adds	r2, #12
    7818:	8812      	ldrh	r2, [r2, #0]
    781a:	b2d2      	uxtb	r2, r2
    781c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    781e:	69bb      	ldr	r3, [r7, #24]
    7820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7822:	1c5a      	adds	r2, r3, #1
    7824:	69bb      	ldr	r3, [r7, #24]
    7826:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7828:	69bb      	ldr	r3, [r7, #24]
    782a:	795b      	ldrb	r3, [r3, #5]
    782c:	2b01      	cmp	r3, #1
    782e:	d10d      	bne.n	784c <_usart_interrupt_handler+0x290>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    7830:	69bb      	ldr	r3, [r7, #24]
    7832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7834:	1c3a      	adds	r2, r7, #0
    7836:	320c      	adds	r2, #12
    7838:	8812      	ldrh	r2, [r2, #0]
    783a:	0a12      	lsrs	r2, r2, #8
    783c:	b292      	uxth	r2, r2
    783e:	b2d2      	uxtb	r2, r2
    7840:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    7842:	69bb      	ldr	r3, [r7, #24]
    7844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7846:	1c5a      	adds	r2, r3, #1
    7848:	69bb      	ldr	r3, [r7, #24]
    784a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    784c:	69bb      	ldr	r3, [r7, #24]
    784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7850:	b29b      	uxth	r3, r3
    7852:	3b01      	subs	r3, #1
    7854:	b29b      	uxth	r3, r3
    7856:	69ba      	ldr	r2, [r7, #24]
    7858:	1c19      	adds	r1, r3, #0
    785a:	8591      	strh	r1, [r2, #44]	; 0x2c
    785c:	2b00      	cmp	r3, #0
    785e:	d112      	bne.n	7886 <_usart_interrupt_handler+0x2ca>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7860:	697b      	ldr	r3, [r7, #20]
    7862:	2204      	movs	r2, #4
    7864:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    7866:	69ba      	ldr	r2, [r7, #24]
    7868:	2332      	movs	r3, #50	; 0x32
    786a:	2100      	movs	r1, #0
    786c:	54d1      	strb	r1, [r2, r3]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    786e:	1c3b      	adds	r3, r7, #0
    7870:	3310      	adds	r3, #16
    7872:	881a      	ldrh	r2, [r3, #0]
    7874:	2302      	movs	r3, #2
    7876:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    7878:	d005      	beq.n	7886 <_usart_interrupt_handler+0x2ca>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    787a:	69bb      	ldr	r3, [r7, #24]
    787c:	691b      	ldr	r3, [r3, #16]
    787e:	69ba      	ldr	r2, [r7, #24]
    7880:	1c10      	adds	r0, r2, #0
    7882:	4798      	blx	r3
    7884:	e007      	b.n	7896 <_usart_interrupt_handler+0x2da>
    7886:	e006      	b.n	7896 <_usart_interrupt_handler+0x2da>
    7888:	200010a4 	.word	0x200010a4
    788c:	00007599 	.word	0x00007599
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7890:	697b      	ldr	r3, [r7, #20]
    7892:	2204      	movs	r2, #4
    7894:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    7896:	1c3b      	adds	r3, r7, #0
    7898:	3312      	adds	r3, #18
    789a:	881a      	ldrh	r2, [r3, #0]
    789c:	2310      	movs	r3, #16
    789e:	4013      	ands	r3, r2
    78a0:	d010      	beq.n	78c4 <_usart_interrupt_handler+0x308>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    78a2:	697b      	ldr	r3, [r7, #20]
    78a4:	2210      	movs	r2, #16
    78a6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    78a8:	697b      	ldr	r3, [r7, #20]
    78aa:	2210      	movs	r2, #16
    78ac:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    78ae:	1c3b      	adds	r3, r7, #0
    78b0:	3310      	adds	r3, #16
    78b2:	881a      	ldrh	r2, [r3, #0]
    78b4:	2310      	movs	r3, #16
    78b6:	4013      	ands	r3, r2
    78b8:	d004      	beq.n	78c4 <_usart_interrupt_handler+0x308>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    78ba:	69bb      	ldr	r3, [r7, #24]
    78bc:	69db      	ldr	r3, [r3, #28]
    78be:	69ba      	ldr	r2, [r7, #24]
    78c0:	1c10      	adds	r0, r2, #0
    78c2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    78c4:	1c3b      	adds	r3, r7, #0
    78c6:	3312      	adds	r3, #18
    78c8:	881a      	ldrh	r2, [r3, #0]
    78ca:	2320      	movs	r3, #32
    78cc:	4013      	ands	r3, r2
    78ce:	d010      	beq.n	78f2 <_usart_interrupt_handler+0x336>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    78d0:	697b      	ldr	r3, [r7, #20]
    78d2:	2220      	movs	r2, #32
    78d4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    78d6:	697b      	ldr	r3, [r7, #20]
    78d8:	2220      	movs	r2, #32
    78da:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    78dc:	1c3b      	adds	r3, r7, #0
    78de:	3310      	adds	r3, #16
    78e0:	881a      	ldrh	r2, [r3, #0]
    78e2:	2308      	movs	r3, #8
    78e4:	4013      	ands	r3, r2
    78e6:	d004      	beq.n	78f2 <_usart_interrupt_handler+0x336>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    78e8:	69bb      	ldr	r3, [r7, #24]
    78ea:	699b      	ldr	r3, [r3, #24]
    78ec:	69ba      	ldr	r2, [r7, #24]
    78ee:	1c10      	adds	r0, r2, #0
    78f0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    78f2:	1c3b      	adds	r3, r7, #0
    78f4:	3312      	adds	r3, #18
    78f6:	881a      	ldrh	r2, [r3, #0]
    78f8:	2308      	movs	r3, #8
    78fa:	4013      	ands	r3, r2
    78fc:	d010      	beq.n	7920 <_usart_interrupt_handler+0x364>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    78fe:	697b      	ldr	r3, [r7, #20]
    7900:	2208      	movs	r2, #8
    7902:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    7904:	697b      	ldr	r3, [r7, #20]
    7906:	2208      	movs	r2, #8
    7908:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    790a:	1c3b      	adds	r3, r7, #0
    790c:	3310      	adds	r3, #16
    790e:	881a      	ldrh	r2, [r3, #0]
    7910:	2320      	movs	r3, #32
    7912:	4013      	ands	r3, r2
    7914:	d004      	beq.n	7920 <_usart_interrupt_handler+0x364>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    7916:	69bb      	ldr	r3, [r7, #24]
    7918:	6a1b      	ldr	r3, [r3, #32]
    791a:	69ba      	ldr	r2, [r7, #24]
    791c:	1c10      	adds	r0, r2, #0
    791e:	4798      	blx	r3
		}
	}
#endif
}
    7920:	46bd      	mov	sp, r7
    7922:	b008      	add	sp, #32
    7924:	bd80      	pop	{r7, pc}
    7926:	46c0      	nop			; (mov r8, r8)

00007928 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    7928:	b580      	push	{r7, lr}
    792a:	b082      	sub	sp, #8
    792c:	af00      	add	r7, sp, #0
    792e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    7930:	687b      	ldr	r3, [r7, #4]
    7932:	2201      	movs	r2, #1
    7934:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    7936:	687b      	ldr	r3, [r7, #4]
    7938:	2200      	movs	r2, #0
    793a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    793c:	687b      	ldr	r3, [r7, #4]
    793e:	2206      	movs	r2, #6
    7940:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    7942:	687b      	ldr	r3, [r7, #4]
    7944:	2200      	movs	r2, #0
    7946:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    7948:	687b      	ldr	r3, [r7, #4]
    794a:	2200      	movs	r2, #0
    794c:	725a      	strb	r2, [r3, #9]
}
    794e:	46bd      	mov	sp, r7
    7950:	b002      	add	sp, #8
    7952:	bd80      	pop	{r7, pc}

00007954 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    7954:	b580      	push	{r7, lr}
    7956:	b082      	sub	sp, #8
    7958:	af00      	add	r7, sp, #0
    795a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    795c:	687b      	ldr	r3, [r7, #4]
    795e:	2203      	movs	r2, #3
    7960:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    7962:	687b      	ldr	r3, [r7, #4]
    7964:	2200      	movs	r2, #0
    7966:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    7968:	687b      	ldr	r3, [r7, #4]
    796a:	2201      	movs	r2, #1
    796c:	709a      	strb	r2, [r3, #2]
}
    796e:	46bd      	mov	sp, r7
    7970:	b002      	add	sp, #8
    7972:	bd80      	pop	{r7, pc}

00007974 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    7974:	b580      	push	{r7, lr}
    7976:	b082      	sub	sp, #8
    7978:	af00      	add	r7, sp, #0
    797a:	1c02      	adds	r2, r0, #0
    797c:	1dfb      	adds	r3, r7, #7
    797e:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    7980:	4b03      	ldr	r3, [pc, #12]	; (7990 <system_cpu_clock_set_divider+0x1c>)
    7982:	1dfa      	adds	r2, r7, #7
    7984:	7812      	ldrb	r2, [r2, #0]
    7986:	721a      	strb	r2, [r3, #8]
}
    7988:	46bd      	mov	sp, r7
    798a:	b002      	add	sp, #8
    798c:	bd80      	pop	{r7, pc}
    798e:	46c0      	nop			; (mov r8, r8)
    7990:	40000400 	.word	0x40000400

00007994 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    7994:	b580      	push	{r7, lr}
    7996:	b082      	sub	sp, #8
    7998:	af00      	add	r7, sp, #0
    799a:	1c0a      	adds	r2, r1, #0
    799c:	1dfb      	adds	r3, r7, #7
    799e:	1c01      	adds	r1, r0, #0
    79a0:	7019      	strb	r1, [r3, #0]
    79a2:	1dbb      	adds	r3, r7, #6
    79a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    79a6:	1dfb      	adds	r3, r7, #7
    79a8:	781b      	ldrb	r3, [r3, #0]
    79aa:	2b01      	cmp	r3, #1
    79ac:	d008      	beq.n	79c0 <system_apb_clock_set_divider+0x2c>
    79ae:	2b02      	cmp	r3, #2
    79b0:	d00b      	beq.n	79ca <system_apb_clock_set_divider+0x36>
    79b2:	2b00      	cmp	r3, #0
    79b4:	d10e      	bne.n	79d4 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    79b6:	4b0b      	ldr	r3, [pc, #44]	; (79e4 <system_apb_clock_set_divider+0x50>)
    79b8:	1dba      	adds	r2, r7, #6
    79ba:	7812      	ldrb	r2, [r2, #0]
    79bc:	725a      	strb	r2, [r3, #9]
			break;
    79be:	e00b      	b.n	79d8 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    79c0:	4b08      	ldr	r3, [pc, #32]	; (79e4 <system_apb_clock_set_divider+0x50>)
    79c2:	1dba      	adds	r2, r7, #6
    79c4:	7812      	ldrb	r2, [r2, #0]
    79c6:	729a      	strb	r2, [r3, #10]
			break;
    79c8:	e006      	b.n	79d8 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    79ca:	4b06      	ldr	r3, [pc, #24]	; (79e4 <system_apb_clock_set_divider+0x50>)
    79cc:	1dba      	adds	r2, r7, #6
    79ce:	7812      	ldrb	r2, [r2, #0]
    79d0:	72da      	strb	r2, [r3, #11]
			break;
    79d2:	e001      	b.n	79d8 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    79d4:	2317      	movs	r3, #23
    79d6:	e000      	b.n	79da <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    79d8:	2300      	movs	r3, #0
}
    79da:	1c18      	adds	r0, r3, #0
    79dc:	46bd      	mov	sp, r7
    79de:	b002      	add	sp, #8
    79e0:	bd80      	pop	{r7, pc}
    79e2:	46c0      	nop			; (mov r8, r8)
    79e4:	40000400 	.word	0x40000400

000079e8 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    79e8:	b580      	push	{r7, lr}
    79ea:	b082      	sub	sp, #8
    79ec:	af00      	add	r7, sp, #0
    79ee:	1c02      	adds	r2, r0, #0
    79f0:	1dfb      	adds	r3, r7, #7
    79f2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    79f4:	4b08      	ldr	r3, [pc, #32]	; (7a18 <system_flash_set_waitstates+0x30>)
    79f6:	1dfa      	adds	r2, r7, #7
    79f8:	7811      	ldrb	r1, [r2, #0]
    79fa:	220f      	movs	r2, #15
    79fc:	400a      	ands	r2, r1
    79fe:	b2d1      	uxtb	r1, r2
    7a00:	220f      	movs	r2, #15
    7a02:	400a      	ands	r2, r1
    7a04:	0052      	lsls	r2, r2, #1
    7a06:	6859      	ldr	r1, [r3, #4]
    7a08:	201e      	movs	r0, #30
    7a0a:	4381      	bics	r1, r0
    7a0c:	430a      	orrs	r2, r1
    7a0e:	605a      	str	r2, [r3, #4]
}
    7a10:	46bd      	mov	sp, r7
    7a12:	b002      	add	sp, #8
    7a14:	bd80      	pop	{r7, pc}
    7a16:	46c0      	nop			; (mov r8, r8)
    7a18:	41004000 	.word	0x41004000

00007a1c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
    7a1c:	b580      	push	{r7, lr}
    7a1e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7a20:	46c0      	nop			; (mov r8, r8)
    7a22:	4b03      	ldr	r3, [pc, #12]	; (7a30 <_system_dfll_wait_for_sync+0x14>)
    7a24:	68da      	ldr	r2, [r3, #12]
    7a26:	2310      	movs	r3, #16
    7a28:	4013      	ands	r3, r2
    7a2a:	d0fa      	beq.n	7a22 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    7a2c:	46bd      	mov	sp, r7
    7a2e:	bd80      	pop	{r7, pc}
    7a30:	40000800 	.word	0x40000800

00007a34 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    7a34:	b580      	push	{r7, lr}
    7a36:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    7a38:	4a0c      	ldr	r2, [pc, #48]	; (7a6c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7a3a:	4b0d      	ldr	r3, [pc, #52]	; (7a70 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    7a3c:	681b      	ldr	r3, [r3, #0]
    7a3e:	b29b      	uxth	r3, r3
    7a40:	2180      	movs	r1, #128	; 0x80
    7a42:	438b      	bics	r3, r1
    7a44:	b29b      	uxth	r3, r3
    7a46:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    7a48:	4b0a      	ldr	r3, [pc, #40]	; (7a74 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    7a4a:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    7a4c:	4b07      	ldr	r3, [pc, #28]	; (7a6c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7a4e:	4a08      	ldr	r2, [pc, #32]	; (7a70 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    7a50:	6892      	ldr	r2, [r2, #8]
    7a52:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    7a54:	4b05      	ldr	r3, [pc, #20]	; (7a6c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7a56:	4a06      	ldr	r2, [pc, #24]	; (7a70 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    7a58:	6852      	ldr	r2, [r2, #4]
    7a5a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    7a5c:	4a03      	ldr	r2, [pc, #12]	; (7a6c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7a5e:	4b04      	ldr	r3, [pc, #16]	; (7a70 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    7a60:	681b      	ldr	r3, [r3, #0]
    7a62:	b29b      	uxth	r3, r3
    7a64:	8493      	strh	r3, [r2, #36]	; 0x24
}
    7a66:	46bd      	mov	sp, r7
    7a68:	bd80      	pop	{r7, pc}
    7a6a:	46c0      	nop			; (mov r8, r8)
    7a6c:	40000800 	.word	0x40000800
    7a70:	20000964 	.word	0x20000964
    7a74:	00007a1d 	.word	0x00007a1d

00007a78 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    7a78:	b580      	push	{r7, lr}
    7a7a:	b082      	sub	sp, #8
    7a7c:	af00      	add	r7, sp, #0
    7a7e:	1c02      	adds	r2, r0, #0
    7a80:	1dfb      	adds	r3, r7, #7
    7a82:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    7a84:	1dfb      	adds	r3, r7, #7
    7a86:	781b      	ldrb	r3, [r3, #0]
    7a88:	2b08      	cmp	r3, #8
    7a8a:	d840      	bhi.n	7b0e <system_clock_source_get_hz+0x96>
    7a8c:	009a      	lsls	r2, r3, #2
    7a8e:	4b22      	ldr	r3, [pc, #136]	; (7b18 <system_clock_source_get_hz+0xa0>)
    7a90:	18d3      	adds	r3, r2, r3
    7a92:	681b      	ldr	r3, [r3, #0]
    7a94:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    7a96:	4b21      	ldr	r3, [pc, #132]	; (7b1c <system_clock_source_get_hz+0xa4>)
    7a98:	691b      	ldr	r3, [r3, #16]
    7a9a:	e039      	b.n	7b10 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    7a9c:	4b20      	ldr	r3, [pc, #128]	; (7b20 <system_clock_source_get_hz+0xa8>)
    7a9e:	6a1b      	ldr	r3, [r3, #32]
    7aa0:	059b      	lsls	r3, r3, #22
    7aa2:	0f9b      	lsrs	r3, r3, #30
    7aa4:	b2db      	uxtb	r3, r3
    7aa6:	4a1f      	ldr	r2, [pc, #124]	; (7b24 <system_clock_source_get_hz+0xac>)
    7aa8:	1c11      	adds	r1, r2, #0
    7aaa:	40d9      	lsrs	r1, r3
    7aac:	1c0b      	adds	r3, r1, #0
    7aae:	e02f      	b.n	7b10 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    7ab0:	2380      	movs	r3, #128	; 0x80
    7ab2:	021b      	lsls	r3, r3, #8
    7ab4:	e02c      	b.n	7b10 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    7ab6:	2380      	movs	r3, #128	; 0x80
    7ab8:	021b      	lsls	r3, r3, #8
    7aba:	e029      	b.n	7b10 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    7abc:	4b17      	ldr	r3, [pc, #92]	; (7b1c <system_clock_source_get_hz+0xa4>)
    7abe:	695b      	ldr	r3, [r3, #20]
    7ac0:	e026      	b.n	7b10 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    7ac2:	4b16      	ldr	r3, [pc, #88]	; (7b1c <system_clock_source_get_hz+0xa4>)
    7ac4:	681a      	ldr	r2, [r3, #0]
    7ac6:	2302      	movs	r3, #2
    7ac8:	4013      	ands	r3, r2
    7aca:	d101      	bne.n	7ad0 <system_clock_source_get_hz+0x58>
			return 0;
    7acc:	2300      	movs	r3, #0
    7ace:	e01f      	b.n	7b10 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    7ad0:	4b15      	ldr	r3, [pc, #84]	; (7b28 <system_clock_source_get_hz+0xb0>)
    7ad2:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    7ad4:	4b11      	ldr	r3, [pc, #68]	; (7b1c <system_clock_source_get_hz+0xa4>)
    7ad6:	681a      	ldr	r2, [r3, #0]
    7ad8:	2304      	movs	r3, #4
    7ada:	4013      	ands	r3, r2
    7adc:	d009      	beq.n	7af2 <system_clock_source_get_hz+0x7a>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7ade:	2000      	movs	r0, #0
    7ae0:	4b12      	ldr	r3, [pc, #72]	; (7b2c <system_clock_source_get_hz+0xb4>)
    7ae2:	4798      	blx	r3
    7ae4:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    7ae6:	4b0d      	ldr	r3, [pc, #52]	; (7b1c <system_clock_source_get_hz+0xa4>)
    7ae8:	689b      	ldr	r3, [r3, #8]
    7aea:	041b      	lsls	r3, r3, #16
    7aec:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7aee:	4353      	muls	r3, r2
    7af0:	e00e      	b.n	7b10 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    7af2:	4b0f      	ldr	r3, [pc, #60]	; (7b30 <system_clock_source_get_hz+0xb8>)
    7af4:	e00c      	b.n	7b10 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7af6:	4b0a      	ldr	r3, [pc, #40]	; (7b20 <system_clock_source_get_hz+0xa8>)
    7af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7afa:	b2db      	uxtb	r3, r3
    7afc:	1c1a      	adds	r2, r3, #0
    7afe:	2304      	movs	r3, #4
    7b00:	4013      	ands	r3, r2
    7b02:	d101      	bne.n	7b08 <system_clock_source_get_hz+0x90>
			return 0;
    7b04:	2300      	movs	r3, #0
    7b06:	e003      	b.n	7b10 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    7b08:	4b04      	ldr	r3, [pc, #16]	; (7b1c <system_clock_source_get_hz+0xa4>)
    7b0a:	68db      	ldr	r3, [r3, #12]
    7b0c:	e000      	b.n	7b10 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    7b0e:	2300      	movs	r3, #0
	}
}
    7b10:	1c18      	adds	r0, r3, #0
    7b12:	46bd      	mov	sp, r7
    7b14:	b002      	add	sp, #8
    7b16:	bd80      	pop	{r7, pc}
    7b18:	0001071c 	.word	0x0001071c
    7b1c:	20000964 	.word	0x20000964
    7b20:	40000800 	.word	0x40000800
    7b24:	007a1200 	.word	0x007a1200
    7b28:	00007a1d 	.word	0x00007a1d
    7b2c:	00008199 	.word	0x00008199
    7b30:	02dc6c00 	.word	0x02dc6c00

00007b34 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    7b34:	b580      	push	{r7, lr}
    7b36:	b084      	sub	sp, #16
    7b38:	af00      	add	r7, sp, #0
    7b3a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    7b3c:	4b16      	ldr	r3, [pc, #88]	; (7b98 <system_clock_source_osc8m_set_config+0x64>)
    7b3e:	6a1b      	ldr	r3, [r3, #32]
    7b40:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    7b42:	687b      	ldr	r3, [r7, #4]
    7b44:	781b      	ldrb	r3, [r3, #0]
    7b46:	1c1a      	adds	r2, r3, #0
    7b48:	2303      	movs	r3, #3
    7b4a:	4013      	ands	r3, r2
    7b4c:	b2d9      	uxtb	r1, r3
    7b4e:	1c3b      	adds	r3, r7, #0
    7b50:	330d      	adds	r3, #13
    7b52:	2203      	movs	r2, #3
    7b54:	400a      	ands	r2, r1
    7b56:	7819      	ldrb	r1, [r3, #0]
    7b58:	2003      	movs	r0, #3
    7b5a:	4381      	bics	r1, r0
    7b5c:	430a      	orrs	r2, r1
    7b5e:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7b60:	687b      	ldr	r3, [r7, #4]
    7b62:	789a      	ldrb	r2, [r3, #2]
    7b64:	1c3b      	adds	r3, r7, #0
    7b66:	330c      	adds	r3, #12
    7b68:	01d2      	lsls	r2, r2, #7
    7b6a:	7818      	ldrb	r0, [r3, #0]
    7b6c:	217f      	movs	r1, #127	; 0x7f
    7b6e:	4001      	ands	r1, r0
    7b70:	430a      	orrs	r2, r1
    7b72:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7b74:	687b      	ldr	r3, [r7, #4]
    7b76:	7859      	ldrb	r1, [r3, #1]
    7b78:	1c3b      	adds	r3, r7, #0
    7b7a:	330c      	adds	r3, #12
    7b7c:	2201      	movs	r2, #1
    7b7e:	400a      	ands	r2, r1
    7b80:	0192      	lsls	r2, r2, #6
    7b82:	7819      	ldrb	r1, [r3, #0]
    7b84:	2040      	movs	r0, #64	; 0x40
    7b86:	4381      	bics	r1, r0
    7b88:	430a      	orrs	r2, r1
    7b8a:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    7b8c:	4b02      	ldr	r3, [pc, #8]	; (7b98 <system_clock_source_osc8m_set_config+0x64>)
    7b8e:	68fa      	ldr	r2, [r7, #12]
    7b90:	621a      	str	r2, [r3, #32]
}
    7b92:	46bd      	mov	sp, r7
    7b94:	b004      	add	sp, #16
    7b96:	bd80      	pop	{r7, pc}
    7b98:	40000800 	.word	0x40000800

00007b9c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    7b9c:	b580      	push	{r7, lr}
    7b9e:	b082      	sub	sp, #8
    7ba0:	af00      	add	r7, sp, #0
    7ba2:	1c02      	adds	r2, r0, #0
    7ba4:	1dfb      	adds	r3, r7, #7
    7ba6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    7ba8:	1dfb      	adds	r3, r7, #7
    7baa:	781b      	ldrb	r3, [r3, #0]
    7bac:	2b08      	cmp	r3, #8
    7bae:	d83a      	bhi.n	7c26 <system_clock_source_enable+0x8a>
    7bb0:	009a      	lsls	r2, r3, #2
    7bb2:	4b20      	ldr	r3, [pc, #128]	; (7c34 <system_clock_source_enable+0x98>)
    7bb4:	18d3      	adds	r3, r2, r3
    7bb6:	681b      	ldr	r3, [r3, #0]
    7bb8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    7bba:	4b1f      	ldr	r3, [pc, #124]	; (7c38 <system_clock_source_enable+0x9c>)
    7bbc:	4a1e      	ldr	r2, [pc, #120]	; (7c38 <system_clock_source_enable+0x9c>)
    7bbe:	6a12      	ldr	r2, [r2, #32]
    7bc0:	2102      	movs	r1, #2
    7bc2:	430a      	orrs	r2, r1
    7bc4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    7bc6:	2300      	movs	r3, #0
    7bc8:	e030      	b.n	7c2c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    7bca:	4b1b      	ldr	r3, [pc, #108]	; (7c38 <system_clock_source_enable+0x9c>)
    7bcc:	4a1a      	ldr	r2, [pc, #104]	; (7c38 <system_clock_source_enable+0x9c>)
    7bce:	6992      	ldr	r2, [r2, #24]
    7bd0:	2102      	movs	r1, #2
    7bd2:	430a      	orrs	r2, r1
    7bd4:	619a      	str	r2, [r3, #24]
		break;
    7bd6:	e028      	b.n	7c2a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    7bd8:	4a17      	ldr	r2, [pc, #92]	; (7c38 <system_clock_source_enable+0x9c>)
    7bda:	4b17      	ldr	r3, [pc, #92]	; (7c38 <system_clock_source_enable+0x9c>)
    7bdc:	691b      	ldr	r3, [r3, #16]
    7bde:	b29b      	uxth	r3, r3
    7be0:	2102      	movs	r1, #2
    7be2:	430b      	orrs	r3, r1
    7be4:	b29b      	uxth	r3, r3
    7be6:	8213      	strh	r3, [r2, #16]
		break;
    7be8:	e01f      	b.n	7c2a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    7bea:	4a13      	ldr	r2, [pc, #76]	; (7c38 <system_clock_source_enable+0x9c>)
    7bec:	4b12      	ldr	r3, [pc, #72]	; (7c38 <system_clock_source_enable+0x9c>)
    7bee:	695b      	ldr	r3, [r3, #20]
    7bf0:	b29b      	uxth	r3, r3
    7bf2:	2102      	movs	r1, #2
    7bf4:	430b      	orrs	r3, r1
    7bf6:	b29b      	uxth	r3, r3
    7bf8:	8293      	strh	r3, [r2, #20]
		break;
    7bfa:	e016      	b.n	7c2a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    7bfc:	4b0f      	ldr	r3, [pc, #60]	; (7c3c <system_clock_source_enable+0xa0>)
    7bfe:	681b      	ldr	r3, [r3, #0]
    7c00:	2202      	movs	r2, #2
    7c02:	431a      	orrs	r2, r3
    7c04:	4b0d      	ldr	r3, [pc, #52]	; (7c3c <system_clock_source_enable+0xa0>)
    7c06:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    7c08:	4b0d      	ldr	r3, [pc, #52]	; (7c40 <system_clock_source_enable+0xa4>)
    7c0a:	4798      	blx	r3
		break;
    7c0c:	e00d      	b.n	7c2a <system_clock_source_enable+0x8e>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    7c0e:	4a0a      	ldr	r2, [pc, #40]	; (7c38 <system_clock_source_enable+0x9c>)
    7c10:	4b09      	ldr	r3, [pc, #36]	; (7c38 <system_clock_source_enable+0x9c>)
    7c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7c14:	b2db      	uxtb	r3, r3
    7c16:	2102      	movs	r1, #2
    7c18:	430b      	orrs	r3, r1
    7c1a:	b2d9      	uxtb	r1, r3
    7c1c:	2344      	movs	r3, #68	; 0x44
    7c1e:	54d1      	strb	r1, [r2, r3]
		break;
    7c20:	e003      	b.n	7c2a <system_clock_source_enable+0x8e>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    7c22:	2300      	movs	r3, #0
    7c24:	e002      	b.n	7c2c <system_clock_source_enable+0x90>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7c26:	2317      	movs	r3, #23
    7c28:	e000      	b.n	7c2c <system_clock_source_enable+0x90>
	}

	return STATUS_OK;
    7c2a:	2300      	movs	r3, #0
}
    7c2c:	1c18      	adds	r0, r3, #0
    7c2e:	46bd      	mov	sp, r7
    7c30:	b002      	add	sp, #8
    7c32:	bd80      	pop	{r7, pc}
    7c34:	00010740 	.word	0x00010740
    7c38:	40000800 	.word	0x40000800
    7c3c:	20000964 	.word	0x20000964
    7c40:	00007a35 	.word	0x00007a35

00007c44 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    7c44:	b580      	push	{r7, lr}
    7c46:	b09c      	sub	sp, #112	; 0x70
    7c48:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    7c4a:	4b33      	ldr	r3, [pc, #204]	; (7d18 <system_clock_init+0xd4>)
    7c4c:	22c2      	movs	r2, #194	; 0xc2
    7c4e:	00d2      	lsls	r2, r2, #3
    7c50:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    7c52:	2000      	movs	r0, #0
    7c54:	4b31      	ldr	r3, [pc, #196]	; (7d1c <system_clock_init+0xd8>)
    7c56:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    7c58:	1c3b      	adds	r3, r7, #0
    7c5a:	336c      	adds	r3, #108	; 0x6c
    7c5c:	1c18      	adds	r0, r3, #0
    7c5e:	4b30      	ldr	r3, [pc, #192]	; (7d20 <system_clock_init+0xdc>)
    7c60:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    7c62:	1c3b      	adds	r3, r7, #0
    7c64:	336c      	adds	r3, #108	; 0x6c
    7c66:	2200      	movs	r2, #0
    7c68:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    7c6a:	1c3b      	adds	r3, r7, #0
    7c6c:	336c      	adds	r3, #108	; 0x6c
    7c6e:	2201      	movs	r2, #1
    7c70:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    7c72:	1c3b      	adds	r3, r7, #0
    7c74:	336c      	adds	r3, #108	; 0x6c
    7c76:	2200      	movs	r2, #0
    7c78:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    7c7a:	1c3b      	adds	r3, r7, #0
    7c7c:	336c      	adds	r3, #108	; 0x6c
    7c7e:	1c18      	adds	r0, r3, #0
    7c80:	4b28      	ldr	r3, [pc, #160]	; (7d24 <system_clock_init+0xe0>)
    7c82:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    7c84:	2006      	movs	r0, #6
    7c86:	4b28      	ldr	r3, [pc, #160]	; (7d28 <system_clock_init+0xe4>)
    7c88:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    7c8a:	4b28      	ldr	r3, [pc, #160]	; (7d2c <system_clock_init+0xe8>)
    7c8c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    7c8e:	1c3b      	adds	r3, r7, #0
    7c90:	3330      	adds	r3, #48	; 0x30
    7c92:	1c18      	adds	r0, r3, #0
    7c94:	4b26      	ldr	r3, [pc, #152]	; (7d30 <system_clock_init+0xec>)
    7c96:	4798      	blx	r3
    7c98:	1c3b      	adds	r3, r7, #0
    7c9a:	3330      	adds	r3, #48	; 0x30
    7c9c:	2206      	movs	r2, #6
    7c9e:	701a      	strb	r2, [r3, #0]
    7ca0:	1c3b      	adds	r3, r7, #0
    7ca2:	3330      	adds	r3, #48	; 0x30
    7ca4:	2240      	movs	r2, #64	; 0x40
    7ca6:	605a      	str	r2, [r3, #4]
    7ca8:	1c3b      	adds	r3, r7, #0
    7caa:	3330      	adds	r3, #48	; 0x30
    7cac:	2200      	movs	r2, #0
    7cae:	721a      	strb	r2, [r3, #8]
    7cb0:	1c3b      	adds	r3, r7, #0
    7cb2:	3330      	adds	r3, #48	; 0x30
    7cb4:	2200      	movs	r2, #0
    7cb6:	725a      	strb	r2, [r3, #9]
    7cb8:	1c3b      	adds	r3, r7, #0
    7cba:	3330      	adds	r3, #48	; 0x30
    7cbc:	2004      	movs	r0, #4
    7cbe:	1c19      	adds	r1, r3, #0
    7cc0:	4b1c      	ldr	r3, [pc, #112]	; (7d34 <system_clock_init+0xf0>)
    7cc2:	4798      	blx	r3
    7cc4:	2004      	movs	r0, #4
    7cc6:	4b1c      	ldr	r3, [pc, #112]	; (7d38 <system_clock_init+0xf4>)
    7cc8:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    7cca:	2000      	movs	r0, #0
    7ccc:	4b1b      	ldr	r3, [pc, #108]	; (7d3c <system_clock_init+0xf8>)
    7cce:	4798      	blx	r3

#ifdef FEATURE_SYSTEM_CLOCK_FAILURE_DETECT
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
#endif

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    7cd0:	2000      	movs	r0, #0
    7cd2:	2100      	movs	r1, #0
    7cd4:	4b1a      	ldr	r3, [pc, #104]	; (7d40 <system_clock_init+0xfc>)
    7cd6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    7cd8:	2001      	movs	r0, #1
    7cda:	2100      	movs	r1, #0
    7cdc:	4b18      	ldr	r3, [pc, #96]	; (7d40 <system_clock_init+0xfc>)
    7cde:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    7ce0:	1c3b      	adds	r3, r7, #0
    7ce2:	1c18      	adds	r0, r3, #0
    7ce4:	4b12      	ldr	r3, [pc, #72]	; (7d30 <system_clock_init+0xec>)
    7ce6:	4798      	blx	r3
    7ce8:	1c3b      	adds	r3, r7, #0
    7cea:	2206      	movs	r2, #6
    7cec:	701a      	strb	r2, [r3, #0]
    7cee:	1c3b      	adds	r3, r7, #0
    7cf0:	2201      	movs	r2, #1
    7cf2:	605a      	str	r2, [r3, #4]
    7cf4:	1c3b      	adds	r3, r7, #0
    7cf6:	2200      	movs	r2, #0
    7cf8:	721a      	strb	r2, [r3, #8]
    7cfa:	1c3b      	adds	r3, r7, #0
    7cfc:	2200      	movs	r2, #0
    7cfe:	725a      	strb	r2, [r3, #9]
    7d00:	1c3b      	adds	r3, r7, #0
    7d02:	2000      	movs	r0, #0
    7d04:	1c19      	adds	r1, r3, #0
    7d06:	4b0b      	ldr	r3, [pc, #44]	; (7d34 <system_clock_init+0xf0>)
    7d08:	4798      	blx	r3
    7d0a:	2000      	movs	r0, #0
    7d0c:	4b0a      	ldr	r3, [pc, #40]	; (7d38 <system_clock_init+0xf4>)
    7d0e:	4798      	blx	r3
#endif
}
    7d10:	46bd      	mov	sp, r7
    7d12:	b01c      	add	sp, #112	; 0x70
    7d14:	bd80      	pop	{r7, pc}
    7d16:	46c0      	nop			; (mov r8, r8)
    7d18:	40000800 	.word	0x40000800
    7d1c:	000079e9 	.word	0x000079e9
    7d20:	00007955 	.word	0x00007955
    7d24:	00007b35 	.word	0x00007b35
    7d28:	00007b9d 	.word	0x00007b9d
    7d2c:	00007de9 	.word	0x00007de9
    7d30:	00007929 	.word	0x00007929
    7d34:	00007e19 	.word	0x00007e19
    7d38:	00007f41 	.word	0x00007f41
    7d3c:	00007975 	.word	0x00007975
    7d40:	00007995 	.word	0x00007995

00007d44 <system_gclk_is_syncing>:
 *
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    7d44:	b580      	push	{r7, lr}
    7d46:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    7d48:	4b07      	ldr	r3, [pc, #28]	; (7d68 <system_gclk_is_syncing+0x24>)
    7d4a:	681b      	ldr	r3, [r3, #0]
    7d4c:	041b      	lsls	r3, r3, #16
    7d4e:	0e1b      	lsrs	r3, r3, #24
    7d50:	b2db      	uxtb	r3, r3
    7d52:	b2db      	uxtb	r3, r3
    7d54:	b25b      	sxtb	r3, r3
    7d56:	2b00      	cmp	r3, #0
    7d58:	da01      	bge.n	7d5e <system_gclk_is_syncing+0x1a>
		return true;
    7d5a:	2301      	movs	r3, #1
    7d5c:	e000      	b.n	7d60 <system_gclk_is_syncing+0x1c>
	}

	return false;
    7d5e:	2300      	movs	r3, #0
}
    7d60:	1c18      	adds	r0, r3, #0
    7d62:	46bd      	mov	sp, r7
    7d64:	bd80      	pop	{r7, pc}
    7d66:	46c0      	nop			; (mov r8, r8)
    7d68:	40000c00 	.word	0x40000c00

00007d6c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    7d6c:	b580      	push	{r7, lr}
    7d6e:	b082      	sub	sp, #8
    7d70:	af00      	add	r7, sp, #0
    7d72:	1c02      	adds	r2, r0, #0
    7d74:	6039      	str	r1, [r7, #0]
    7d76:	1dfb      	adds	r3, r7, #7
    7d78:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7d7a:	1dfb      	adds	r3, r7, #7
    7d7c:	781b      	ldrb	r3, [r3, #0]
    7d7e:	2b01      	cmp	r3, #1
    7d80:	d00a      	beq.n	7d98 <system_apb_clock_set_mask+0x2c>
    7d82:	2b02      	cmp	r3, #2
    7d84:	d00f      	beq.n	7da6 <system_apb_clock_set_mask+0x3a>
    7d86:	2b00      	cmp	r3, #0
    7d88:	d114      	bne.n	7db4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    7d8a:	4b0e      	ldr	r3, [pc, #56]	; (7dc4 <system_apb_clock_set_mask+0x58>)
    7d8c:	4a0d      	ldr	r2, [pc, #52]	; (7dc4 <system_apb_clock_set_mask+0x58>)
    7d8e:	6991      	ldr	r1, [r2, #24]
    7d90:	683a      	ldr	r2, [r7, #0]
    7d92:	430a      	orrs	r2, r1
    7d94:	619a      	str	r2, [r3, #24]
			break;
    7d96:	e00f      	b.n	7db8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    7d98:	4b0a      	ldr	r3, [pc, #40]	; (7dc4 <system_apb_clock_set_mask+0x58>)
    7d9a:	4a0a      	ldr	r2, [pc, #40]	; (7dc4 <system_apb_clock_set_mask+0x58>)
    7d9c:	69d1      	ldr	r1, [r2, #28]
    7d9e:	683a      	ldr	r2, [r7, #0]
    7da0:	430a      	orrs	r2, r1
    7da2:	61da      	str	r2, [r3, #28]
			break;
    7da4:	e008      	b.n	7db8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    7da6:	4b07      	ldr	r3, [pc, #28]	; (7dc4 <system_apb_clock_set_mask+0x58>)
    7da8:	4a06      	ldr	r2, [pc, #24]	; (7dc4 <system_apb_clock_set_mask+0x58>)
    7daa:	6a11      	ldr	r1, [r2, #32]
    7dac:	683a      	ldr	r2, [r7, #0]
    7dae:	430a      	orrs	r2, r1
    7db0:	621a      	str	r2, [r3, #32]
			break;
    7db2:	e001      	b.n	7db8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    7db4:	2317      	movs	r3, #23
    7db6:	e000      	b.n	7dba <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    7db8:	2300      	movs	r3, #0
}
    7dba:	1c18      	adds	r0, r3, #0
    7dbc:	46bd      	mov	sp, r7
    7dbe:	b002      	add	sp, #8
    7dc0:	bd80      	pop	{r7, pc}
    7dc2:	46c0      	nop			; (mov r8, r8)
    7dc4:	40000400 	.word	0x40000400

00007dc8 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    7dc8:	b580      	push	{r7, lr}
    7dca:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    7dcc:	4b01      	ldr	r3, [pc, #4]	; (7dd4 <system_interrupt_enter_critical_section+0xc>)
    7dce:	4798      	blx	r3
}
    7dd0:	46bd      	mov	sp, r7
    7dd2:	bd80      	pop	{r7, pc}
    7dd4:	00005fb5 	.word	0x00005fb5

00007dd8 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    7dd8:	b580      	push	{r7, lr}
    7dda:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    7ddc:	4b01      	ldr	r3, [pc, #4]	; (7de4 <system_interrupt_leave_critical_section+0xc>)
    7dde:	4798      	blx	r3
}
    7de0:	46bd      	mov	sp, r7
    7de2:	bd80      	pop	{r7, pc}
    7de4:	00006005 	.word	0x00006005

00007de8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    7de8:	b580      	push	{r7, lr}
    7dea:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    7dec:	2000      	movs	r0, #0
    7dee:	2108      	movs	r1, #8
    7df0:	4b07      	ldr	r3, [pc, #28]	; (7e10 <system_gclk_init+0x28>)
    7df2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    7df4:	4b07      	ldr	r3, [pc, #28]	; (7e14 <system_gclk_init+0x2c>)
    7df6:	2201      	movs	r2, #1
    7df8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    7dfa:	46c0      	nop			; (mov r8, r8)
    7dfc:	4b05      	ldr	r3, [pc, #20]	; (7e14 <system_gclk_init+0x2c>)
    7dfe:	681b      	ldr	r3, [r3, #0]
    7e00:	b2db      	uxtb	r3, r3
    7e02:	1c1a      	adds	r2, r3, #0
    7e04:	2301      	movs	r3, #1
    7e06:	4013      	ands	r3, r2
    7e08:	d1f8      	bne.n	7dfc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    7e0a:	46bd      	mov	sp, r7
    7e0c:	bd80      	pop	{r7, pc}
    7e0e:	46c0      	nop			; (mov r8, r8)
    7e10:	00007d6d 	.word	0x00007d6d
    7e14:	40000c00 	.word	0x40000c00

00007e18 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    7e18:	b580      	push	{r7, lr}
    7e1a:	b086      	sub	sp, #24
    7e1c:	af00      	add	r7, sp, #0
    7e1e:	1c02      	adds	r2, r0, #0
    7e20:	6039      	str	r1, [r7, #0]
    7e22:	1dfb      	adds	r3, r7, #7
    7e24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    7e26:	1dfb      	adds	r3, r7, #7
    7e28:	781b      	ldrb	r3, [r3, #0]
    7e2a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    7e2c:	1dfb      	adds	r3, r7, #7
    7e2e:	781b      	ldrb	r3, [r3, #0]
    7e30:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    7e32:	683b      	ldr	r3, [r7, #0]
    7e34:	781b      	ldrb	r3, [r3, #0]
    7e36:	021b      	lsls	r3, r3, #8
    7e38:	697a      	ldr	r2, [r7, #20]
    7e3a:	4313      	orrs	r3, r2
    7e3c:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    7e3e:	683b      	ldr	r3, [r7, #0]
    7e40:	785b      	ldrb	r3, [r3, #1]
    7e42:	2b00      	cmp	r3, #0
    7e44:	d004      	beq.n	7e50 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    7e46:	697b      	ldr	r3, [r7, #20]
    7e48:	2280      	movs	r2, #128	; 0x80
    7e4a:	02d2      	lsls	r2, r2, #11
    7e4c:	4313      	orrs	r3, r2
    7e4e:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    7e50:	683b      	ldr	r3, [r7, #0]
    7e52:	7a5b      	ldrb	r3, [r3, #9]
    7e54:	2b00      	cmp	r3, #0
    7e56:	d004      	beq.n	7e62 <system_gclk_gen_set_config+0x4a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    7e58:	697b      	ldr	r3, [r7, #20]
    7e5a:	2280      	movs	r2, #128	; 0x80
    7e5c:	0312      	lsls	r2, r2, #12
    7e5e:	4313      	orrs	r3, r2
    7e60:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    7e62:	683b      	ldr	r3, [r7, #0]
    7e64:	685b      	ldr	r3, [r3, #4]
    7e66:	2b01      	cmp	r3, #1
    7e68:	d92c      	bls.n	7ec4 <system_gclk_gen_set_config+0xac>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    7e6a:	683b      	ldr	r3, [r7, #0]
    7e6c:	685a      	ldr	r2, [r3, #4]
    7e6e:	683b      	ldr	r3, [r7, #0]
    7e70:	685b      	ldr	r3, [r3, #4]
    7e72:	3b01      	subs	r3, #1
    7e74:	4013      	ands	r3, r2
    7e76:	d11a      	bne.n	7eae <system_gclk_gen_set_config+0x96>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    7e78:	2300      	movs	r3, #0
    7e7a:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    7e7c:	2302      	movs	r3, #2
    7e7e:	60bb      	str	r3, [r7, #8]
    7e80:	e005      	b.n	7e8e <system_gclk_gen_set_config+0x76>
						mask <<= 1) {
				div2_count++;
    7e82:	68fb      	ldr	r3, [r7, #12]
    7e84:	3301      	adds	r3, #1
    7e86:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    7e88:	68bb      	ldr	r3, [r7, #8]
    7e8a:	005b      	lsls	r3, r3, #1
    7e8c:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    7e8e:	683b      	ldr	r3, [r7, #0]
    7e90:	685a      	ldr	r2, [r3, #4]
    7e92:	68bb      	ldr	r3, [r7, #8]
    7e94:	429a      	cmp	r2, r3
    7e96:	d8f4      	bhi.n	7e82 <system_gclk_gen_set_config+0x6a>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    7e98:	68fb      	ldr	r3, [r7, #12]
    7e9a:	021b      	lsls	r3, r3, #8
    7e9c:	693a      	ldr	r2, [r7, #16]
    7e9e:	4313      	orrs	r3, r2
    7ea0:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    7ea2:	697b      	ldr	r3, [r7, #20]
    7ea4:	2280      	movs	r2, #128	; 0x80
    7ea6:	0352      	lsls	r2, r2, #13
    7ea8:	4313      	orrs	r3, r2
    7eaa:	617b      	str	r3, [r7, #20]
    7eac:	e00a      	b.n	7ec4 <system_gclk_gen_set_config+0xac>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    7eae:	683b      	ldr	r3, [r7, #0]
    7eb0:	685b      	ldr	r3, [r3, #4]
    7eb2:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    7eb4:	693a      	ldr	r2, [r7, #16]
    7eb6:	4313      	orrs	r3, r2
    7eb8:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    7eba:	697b      	ldr	r3, [r7, #20]
    7ebc:	2280      	movs	r2, #128	; 0x80
    7ebe:	0292      	lsls	r2, r2, #10
    7ec0:	4313      	orrs	r3, r2
    7ec2:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7ec4:	683b      	ldr	r3, [r7, #0]
    7ec6:	7a1b      	ldrb	r3, [r3, #8]
    7ec8:	2b00      	cmp	r3, #0
    7eca:	d005      	beq.n	7ed8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    7ecc:	697b      	ldr	r3, [r7, #20]
    7ece:	2280      	movs	r2, #128	; 0x80
    7ed0:	0392      	lsls	r2, r2, #14
    7ed2:	4313      	orrs	r3, r2
    7ed4:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    7ed6:	e7ff      	b.n	7ed8 <system_gclk_gen_set_config+0xc0>
    7ed8:	46c0      	nop			; (mov r8, r8)
    7eda:	4b14      	ldr	r3, [pc, #80]	; (7f2c <system_gclk_gen_set_config+0x114>)
    7edc:	4798      	blx	r3
    7ede:	1c03      	adds	r3, r0, #0
    7ee0:	2b00      	cmp	r3, #0
    7ee2:	d1fa      	bne.n	7eda <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7ee4:	4b12      	ldr	r3, [pc, #72]	; (7f30 <system_gclk_gen_set_config+0x118>)
    7ee6:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7ee8:	4b12      	ldr	r3, [pc, #72]	; (7f34 <system_gclk_gen_set_config+0x11c>)
    7eea:	1dfa      	adds	r2, r7, #7
    7eec:	7812      	ldrb	r2, [r2, #0]
    7eee:	701a      	strb	r2, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    7ef0:	46c0      	nop			; (mov r8, r8)
    7ef2:	4b0e      	ldr	r3, [pc, #56]	; (7f2c <system_gclk_gen_set_config+0x114>)
    7ef4:	4798      	blx	r3
    7ef6:	1c03      	adds	r3, r0, #0
    7ef8:	2b00      	cmp	r3, #0
    7efa:	d1fa      	bne.n	7ef2 <system_gclk_gen_set_config+0xda>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    7efc:	4b0e      	ldr	r3, [pc, #56]	; (7f38 <system_gclk_gen_set_config+0x120>)
    7efe:	693a      	ldr	r2, [r7, #16]
    7f00:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    7f02:	46c0      	nop			; (mov r8, r8)
    7f04:	4b09      	ldr	r3, [pc, #36]	; (7f2c <system_gclk_gen_set_config+0x114>)
    7f06:	4798      	blx	r3
    7f08:	1c03      	adds	r3, r0, #0
    7f0a:	2b00      	cmp	r3, #0
    7f0c:	d1fa      	bne.n	7f04 <system_gclk_gen_set_config+0xec>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    7f0e:	4b0a      	ldr	r3, [pc, #40]	; (7f38 <system_gclk_gen_set_config+0x120>)
    7f10:	4a09      	ldr	r2, [pc, #36]	; (7f38 <system_gclk_gen_set_config+0x120>)
    7f12:	6851      	ldr	r1, [r2, #4]
    7f14:	2280      	movs	r2, #128	; 0x80
    7f16:	0252      	lsls	r2, r2, #9
    7f18:	4011      	ands	r1, r2
    7f1a:	697a      	ldr	r2, [r7, #20]
    7f1c:	430a      	orrs	r2, r1
    7f1e:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    7f20:	4b06      	ldr	r3, [pc, #24]	; (7f3c <system_gclk_gen_set_config+0x124>)
    7f22:	4798      	blx	r3
}
    7f24:	46bd      	mov	sp, r7
    7f26:	b006      	add	sp, #24
    7f28:	bd80      	pop	{r7, pc}
    7f2a:	46c0      	nop			; (mov r8, r8)
    7f2c:	00007d45 	.word	0x00007d45
    7f30:	00007dc9 	.word	0x00007dc9
    7f34:	40000c08 	.word	0x40000c08
    7f38:	40000c00 	.word	0x40000c00
    7f3c:	00007dd9 	.word	0x00007dd9

00007f40 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    7f40:	b580      	push	{r7, lr}
    7f42:	b082      	sub	sp, #8
    7f44:	af00      	add	r7, sp, #0
    7f46:	1c02      	adds	r2, r0, #0
    7f48:	1dfb      	adds	r3, r7, #7
    7f4a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7f4c:	46c0      	nop			; (mov r8, r8)
    7f4e:	4b0e      	ldr	r3, [pc, #56]	; (7f88 <system_gclk_gen_enable+0x48>)
    7f50:	4798      	blx	r3
    7f52:	1c03      	adds	r3, r0, #0
    7f54:	2b00      	cmp	r3, #0
    7f56:	d1fa      	bne.n	7f4e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7f58:	4b0c      	ldr	r3, [pc, #48]	; (7f8c <system_gclk_gen_enable+0x4c>)
    7f5a:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7f5c:	4b0c      	ldr	r3, [pc, #48]	; (7f90 <system_gclk_gen_enable+0x50>)
    7f5e:	1dfa      	adds	r2, r7, #7
    7f60:	7812      	ldrb	r2, [r2, #0]
    7f62:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7f64:	46c0      	nop			; (mov r8, r8)
    7f66:	4b08      	ldr	r3, [pc, #32]	; (7f88 <system_gclk_gen_enable+0x48>)
    7f68:	4798      	blx	r3
    7f6a:	1c03      	adds	r3, r0, #0
    7f6c:	2b00      	cmp	r3, #0
    7f6e:	d1fa      	bne.n	7f66 <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    7f70:	4b08      	ldr	r3, [pc, #32]	; (7f94 <system_gclk_gen_enable+0x54>)
    7f72:	4a08      	ldr	r2, [pc, #32]	; (7f94 <system_gclk_gen_enable+0x54>)
    7f74:	6852      	ldr	r2, [r2, #4]
    7f76:	2180      	movs	r1, #128	; 0x80
    7f78:	0249      	lsls	r1, r1, #9
    7f7a:	430a      	orrs	r2, r1
    7f7c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    7f7e:	4b06      	ldr	r3, [pc, #24]	; (7f98 <system_gclk_gen_enable+0x58>)
    7f80:	4798      	blx	r3
}
    7f82:	46bd      	mov	sp, r7
    7f84:	b002      	add	sp, #8
    7f86:	bd80      	pop	{r7, pc}
    7f88:	00007d45 	.word	0x00007d45
    7f8c:	00007dc9 	.word	0x00007dc9
    7f90:	40000c04 	.word	0x40000c04
    7f94:	40000c00 	.word	0x40000c00
    7f98:	00007dd9 	.word	0x00007dd9

00007f9c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7f9c:	b580      	push	{r7, lr}
    7f9e:	b086      	sub	sp, #24
    7fa0:	af00      	add	r7, sp, #0
    7fa2:	1c02      	adds	r2, r0, #0
    7fa4:	1dfb      	adds	r3, r7, #7
    7fa6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7fa8:	46c0      	nop			; (mov r8, r8)
    7faa:	4b2c      	ldr	r3, [pc, #176]	; (805c <system_gclk_gen_get_hz+0xc0>)
    7fac:	4798      	blx	r3
    7fae:	1c03      	adds	r3, r0, #0
    7fb0:	2b00      	cmp	r3, #0
    7fb2:	d1fa      	bne.n	7faa <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7fb4:	4b2a      	ldr	r3, [pc, #168]	; (8060 <system_gclk_gen_get_hz+0xc4>)
    7fb6:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7fb8:	4b2a      	ldr	r3, [pc, #168]	; (8064 <system_gclk_gen_get_hz+0xc8>)
    7fba:	1dfa      	adds	r2, r7, #7
    7fbc:	7812      	ldrb	r2, [r2, #0]
    7fbe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7fc0:	46c0      	nop			; (mov r8, r8)
    7fc2:	4b26      	ldr	r3, [pc, #152]	; (805c <system_gclk_gen_get_hz+0xc0>)
    7fc4:	4798      	blx	r3
    7fc6:	1c03      	adds	r3, r0, #0
    7fc8:	2b00      	cmp	r3, #0
    7fca:	d1fa      	bne.n	7fc2 <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    7fcc:	4b26      	ldr	r3, [pc, #152]	; (8068 <system_gclk_gen_get_hz+0xcc>)
    7fce:	685b      	ldr	r3, [r3, #4]
    7fd0:	04db      	lsls	r3, r3, #19
    7fd2:	0edb      	lsrs	r3, r3, #27
    7fd4:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    7fd6:	1c18      	adds	r0, r3, #0
    7fd8:	4b24      	ldr	r3, [pc, #144]	; (806c <system_gclk_gen_get_hz+0xd0>)
    7fda:	4798      	blx	r3
    7fdc:	1c03      	adds	r3, r0, #0
    7fde:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7fe0:	4b20      	ldr	r3, [pc, #128]	; (8064 <system_gclk_gen_get_hz+0xc8>)
    7fe2:	1dfa      	adds	r2, r7, #7
    7fe4:	7812      	ldrb	r2, [r2, #0]
    7fe6:	701a      	strb	r2, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    7fe8:	4b1f      	ldr	r3, [pc, #124]	; (8068 <system_gclk_gen_get_hz+0xcc>)
    7fea:	685b      	ldr	r3, [r3, #4]
    7fec:	02db      	lsls	r3, r3, #11
    7fee:	0fdb      	lsrs	r3, r3, #31
    7ff0:	b2da      	uxtb	r2, r3
    7ff2:	1c3b      	adds	r3, r7, #0
    7ff4:	3313      	adds	r3, #19
    7ff6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7ff8:	4b1d      	ldr	r3, [pc, #116]	; (8070 <system_gclk_gen_get_hz+0xd4>)
    7ffa:	1dfa      	adds	r2, r7, #7
    7ffc:	7812      	ldrb	r2, [r2, #0]
    7ffe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    8000:	46c0      	nop			; (mov r8, r8)
    8002:	4b16      	ldr	r3, [pc, #88]	; (805c <system_gclk_gen_get_hz+0xc0>)
    8004:	4798      	blx	r3
    8006:	1c03      	adds	r3, r0, #0
    8008:	2b00      	cmp	r3, #0
    800a:	d1fa      	bne.n	8002 <system_gclk_gen_get_hz+0x66>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    800c:	4b16      	ldr	r3, [pc, #88]	; (8068 <system_gclk_gen_get_hz+0xcc>)
    800e:	689b      	ldr	r3, [r3, #8]
    8010:	021b      	lsls	r3, r3, #8
    8012:	0c1b      	lsrs	r3, r3, #16
    8014:	b29b      	uxth	r3, r3
    8016:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    8018:	4b16      	ldr	r3, [pc, #88]	; (8074 <system_gclk_gen_get_hz+0xd8>)
    801a:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    801c:	1c3b      	adds	r3, r7, #0
    801e:	3313      	adds	r3, #19
    8020:	781b      	ldrb	r3, [r3, #0]
    8022:	2b00      	cmp	r3, #0
    8024:	d109      	bne.n	803a <system_gclk_gen_get_hz+0x9e>
    8026:	68fb      	ldr	r3, [r7, #12]
    8028:	2b01      	cmp	r3, #1
    802a:	d906      	bls.n	803a <system_gclk_gen_get_hz+0x9e>
		gen_input_hz /= divider;
    802c:	4b12      	ldr	r3, [pc, #72]	; (8078 <system_gclk_gen_get_hz+0xdc>)
    802e:	6978      	ldr	r0, [r7, #20]
    8030:	68f9      	ldr	r1, [r7, #12]
    8032:	4798      	blx	r3
    8034:	1c03      	adds	r3, r0, #0
    8036:	617b      	str	r3, [r7, #20]
    8038:	e00b      	b.n	8052 <system_gclk_gen_get_hz+0xb6>
	} else if (divsel) {
    803a:	1c3b      	adds	r3, r7, #0
    803c:	3313      	adds	r3, #19
    803e:	781b      	ldrb	r3, [r3, #0]
    8040:	2b00      	cmp	r3, #0
    8042:	d006      	beq.n	8052 <system_gclk_gen_get_hz+0xb6>
		gen_input_hz >>= (divider+1);
    8044:	68fb      	ldr	r3, [r7, #12]
    8046:	3301      	adds	r3, #1
    8048:	697a      	ldr	r2, [r7, #20]
    804a:	1c11      	adds	r1, r2, #0
    804c:	40d9      	lsrs	r1, r3
    804e:	1c0b      	adds	r3, r1, #0
    8050:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    8052:	697b      	ldr	r3, [r7, #20]
}
    8054:	1c18      	adds	r0, r3, #0
    8056:	46bd      	mov	sp, r7
    8058:	b006      	add	sp, #24
    805a:	bd80      	pop	{r7, pc}
    805c:	00007d45 	.word	0x00007d45
    8060:	00007dc9 	.word	0x00007dc9
    8064:	40000c04 	.word	0x40000c04
    8068:	40000c00 	.word	0x40000c00
    806c:	00007a79 	.word	0x00007a79
    8070:	40000c08 	.word	0x40000c08
    8074:	00007dd9 	.word	0x00007dd9
    8078:	0000976d 	.word	0x0000976d

0000807c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    807c:	b580      	push	{r7, lr}
    807e:	b084      	sub	sp, #16
    8080:	af00      	add	r7, sp, #0
    8082:	1c02      	adds	r2, r0, #0
    8084:	6039      	str	r1, [r7, #0]
    8086:	1dfb      	adds	r3, r7, #7
    8088:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    808a:	1dfb      	adds	r3, r7, #7
    808c:	781b      	ldrb	r3, [r3, #0]
    808e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    8090:	683b      	ldr	r3, [r7, #0]
    8092:	781b      	ldrb	r3, [r3, #0]
    8094:	021b      	lsls	r3, r3, #8
    8096:	68fa      	ldr	r2, [r7, #12]
    8098:	4313      	orrs	r3, r2
    809a:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    809c:	1dfb      	adds	r3, r7, #7
    809e:	781b      	ldrb	r3, [r3, #0]
    80a0:	1c18      	adds	r0, r3, #0
    80a2:	4b04      	ldr	r3, [pc, #16]	; (80b4 <system_gclk_chan_set_config+0x38>)
    80a4:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    80a6:	4b04      	ldr	r3, [pc, #16]	; (80b8 <system_gclk_chan_set_config+0x3c>)
    80a8:	68fa      	ldr	r2, [r7, #12]
    80aa:	b292      	uxth	r2, r2
    80ac:	805a      	strh	r2, [r3, #2]
}
    80ae:	46bd      	mov	sp, r7
    80b0:	b004      	add	sp, #16
    80b2:	bd80      	pop	{r7, pc}
    80b4:	00008105 	.word	0x00008105
    80b8:	40000c00 	.word	0x40000c00

000080bc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    80bc:	b580      	push	{r7, lr}
    80be:	b082      	sub	sp, #8
    80c0:	af00      	add	r7, sp, #0
    80c2:	1c02      	adds	r2, r0, #0
    80c4:	1dfb      	adds	r3, r7, #7
    80c6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    80c8:	4b0a      	ldr	r3, [pc, #40]	; (80f4 <system_gclk_chan_enable+0x38>)
    80ca:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    80cc:	4b0a      	ldr	r3, [pc, #40]	; (80f8 <system_gclk_chan_enable+0x3c>)
    80ce:	1dfa      	adds	r2, r7, #7
    80d0:	7812      	ldrb	r2, [r2, #0]
    80d2:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    80d4:	4a09      	ldr	r2, [pc, #36]	; (80fc <system_gclk_chan_enable+0x40>)
    80d6:	4b09      	ldr	r3, [pc, #36]	; (80fc <system_gclk_chan_enable+0x40>)
    80d8:	681b      	ldr	r3, [r3, #0]
    80da:	0c1b      	lsrs	r3, r3, #16
    80dc:	b29b      	uxth	r3, r3
    80de:	2180      	movs	r1, #128	; 0x80
    80e0:	01c9      	lsls	r1, r1, #7
    80e2:	430b      	orrs	r3, r1
    80e4:	b29b      	uxth	r3, r3
    80e6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    80e8:	4b05      	ldr	r3, [pc, #20]	; (8100 <system_gclk_chan_enable+0x44>)
    80ea:	4798      	blx	r3
}
    80ec:	46bd      	mov	sp, r7
    80ee:	b002      	add	sp, #8
    80f0:	bd80      	pop	{r7, pc}
    80f2:	46c0      	nop			; (mov r8, r8)
    80f4:	00007dc9 	.word	0x00007dc9
    80f8:	40000c02 	.word	0x40000c02
    80fc:	40000c00 	.word	0x40000c00
    8100:	00007dd9 	.word	0x00007dd9

00008104 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8104:	b580      	push	{r7, lr}
    8106:	b084      	sub	sp, #16
    8108:	af00      	add	r7, sp, #0
    810a:	1c02      	adds	r2, r0, #0
    810c:	1dfb      	adds	r3, r7, #7
    810e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    8110:	4b1b      	ldr	r3, [pc, #108]	; (8180 <system_gclk_chan_disable+0x7c>)
    8112:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8114:	4b1b      	ldr	r3, [pc, #108]	; (8184 <system_gclk_chan_disable+0x80>)
    8116:	1dfa      	adds	r2, r7, #7
    8118:	7812      	ldrb	r2, [r2, #0]
    811a:	701a      	strb	r2, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    811c:	4b1a      	ldr	r3, [pc, #104]	; (8188 <system_gclk_chan_disable+0x84>)
    811e:	681b      	ldr	r3, [r3, #0]
    8120:	011b      	lsls	r3, r3, #4
    8122:	0f1b      	lsrs	r3, r3, #28
    8124:	b2db      	uxtb	r3, r3
    8126:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    8128:	4b17      	ldr	r3, [pc, #92]	; (8188 <system_gclk_chan_disable+0x84>)
    812a:	8859      	ldrh	r1, [r3, #2]
    812c:	4a17      	ldr	r2, [pc, #92]	; (818c <system_gclk_chan_disable+0x88>)
    812e:	400a      	ands	r2, r1
    8130:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8132:	4a15      	ldr	r2, [pc, #84]	; (8188 <system_gclk_chan_disable+0x84>)
    8134:	4b14      	ldr	r3, [pc, #80]	; (8188 <system_gclk_chan_disable+0x84>)
    8136:	681b      	ldr	r3, [r3, #0]
    8138:	0c1b      	lsrs	r3, r3, #16
    813a:	b299      	uxth	r1, r3
    813c:	4b14      	ldr	r3, [pc, #80]	; (8190 <system_gclk_chan_disable+0x8c>)
    813e:	400b      	ands	r3, r1
    8140:	b29b      	uxth	r3, r3
    8142:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    8144:	46c0      	nop			; (mov r8, r8)
    8146:	4b10      	ldr	r3, [pc, #64]	; (8188 <system_gclk_chan_disable+0x84>)
    8148:	681b      	ldr	r3, [r3, #0]
    814a:	0c1b      	lsrs	r3, r3, #16
    814c:	b29b      	uxth	r3, r3
    814e:	1c1a      	adds	r2, r3, #0
    8150:	2380      	movs	r3, #128	; 0x80
    8152:	01db      	lsls	r3, r3, #7
    8154:	4013      	ands	r3, r2
    8156:	d1f6      	bne.n	8146 <system_gclk_chan_disable+0x42>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8158:	4b0b      	ldr	r3, [pc, #44]	; (8188 <system_gclk_chan_disable+0x84>)
    815a:	68fa      	ldr	r2, [r7, #12]
    815c:	b2d2      	uxtb	r2, r2
    815e:	1c11      	adds	r1, r2, #0
    8160:	220f      	movs	r2, #15
    8162:	400a      	ands	r2, r1
    8164:	b2d1      	uxtb	r1, r2
    8166:	220f      	movs	r2, #15
    8168:	400a      	ands	r2, r1
    816a:	0212      	lsls	r2, r2, #8
    816c:	8858      	ldrh	r0, [r3, #2]
    816e:	4907      	ldr	r1, [pc, #28]	; (818c <system_gclk_chan_disable+0x88>)
    8170:	4001      	ands	r1, r0
    8172:	430a      	orrs	r2, r1
    8174:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    8176:	4b07      	ldr	r3, [pc, #28]	; (8194 <system_gclk_chan_disable+0x90>)
    8178:	4798      	blx	r3
}
    817a:	46bd      	mov	sp, r7
    817c:	b004      	add	sp, #16
    817e:	bd80      	pop	{r7, pc}
    8180:	00007dc9 	.word	0x00007dc9
    8184:	40000c02 	.word	0x40000c02
    8188:	40000c00 	.word	0x40000c00
    818c:	fffff0ff 	.word	0xfffff0ff
    8190:	ffffbfff 	.word	0xffffbfff
    8194:	00007dd9 	.word	0x00007dd9

00008198 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8198:	b580      	push	{r7, lr}
    819a:	b084      	sub	sp, #16
    819c:	af00      	add	r7, sp, #0
    819e:	1c02      	adds	r2, r0, #0
    81a0:	1dfb      	adds	r3, r7, #7
    81a2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    81a4:	4b0d      	ldr	r3, [pc, #52]	; (81dc <system_gclk_chan_get_hz+0x44>)
    81a6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    81a8:	4b0d      	ldr	r3, [pc, #52]	; (81e0 <system_gclk_chan_get_hz+0x48>)
    81aa:	1dfa      	adds	r2, r7, #7
    81ac:	7812      	ldrb	r2, [r2, #0]
    81ae:	701a      	strb	r2, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    81b0:	4b0c      	ldr	r3, [pc, #48]	; (81e4 <system_gclk_chan_get_hz+0x4c>)
    81b2:	681b      	ldr	r3, [r3, #0]
    81b4:	011b      	lsls	r3, r3, #4
    81b6:	0f1b      	lsrs	r3, r3, #28
    81b8:	b2da      	uxtb	r2, r3
    81ba:	1c3b      	adds	r3, r7, #0
    81bc:	330f      	adds	r3, #15
    81be:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    81c0:	4b09      	ldr	r3, [pc, #36]	; (81e8 <system_gclk_chan_get_hz+0x50>)
    81c2:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    81c4:	1c3b      	adds	r3, r7, #0
    81c6:	330f      	adds	r3, #15
    81c8:	781b      	ldrb	r3, [r3, #0]
    81ca:	1c18      	adds	r0, r3, #0
    81cc:	4b07      	ldr	r3, [pc, #28]	; (81ec <system_gclk_chan_get_hz+0x54>)
    81ce:	4798      	blx	r3
    81d0:	1c03      	adds	r3, r0, #0
}
    81d2:	1c18      	adds	r0, r3, #0
    81d4:	46bd      	mov	sp, r7
    81d6:	b004      	add	sp, #16
    81d8:	bd80      	pop	{r7, pc}
    81da:	46c0      	nop			; (mov r8, r8)
    81dc:	00007dc9 	.word	0x00007dc9
    81e0:	40000c02 	.word	0x40000c02
    81e4:	40000c00 	.word	0x40000c00
    81e8:	00007dd9 	.word	0x00007dd9
    81ec:	00007f9d 	.word	0x00007f9d

000081f0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    81f0:	b580      	push	{r7, lr}
    81f2:	b084      	sub	sp, #16
    81f4:	af00      	add	r7, sp, #0
    81f6:	1c02      	adds	r2, r0, #0
    81f8:	1dfb      	adds	r3, r7, #7
    81fa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    81fc:	1c3b      	adds	r3, r7, #0
    81fe:	330f      	adds	r3, #15
    8200:	1dfa      	adds	r2, r7, #7
    8202:	7812      	ldrb	r2, [r2, #0]
    8204:	09d2      	lsrs	r2, r2, #7
    8206:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8208:	1c3b      	adds	r3, r7, #0
    820a:	330e      	adds	r3, #14
    820c:	1dfa      	adds	r2, r7, #7
    820e:	7812      	ldrb	r2, [r2, #0]
    8210:	0952      	lsrs	r2, r2, #5
    8212:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8214:	4b0d      	ldr	r3, [pc, #52]	; (824c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8216:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    8218:	1c3b      	adds	r3, r7, #0
    821a:	330f      	adds	r3, #15
    821c:	781b      	ldrb	r3, [r3, #0]
    821e:	2b00      	cmp	r3, #0
    8220:	d10e      	bne.n	8240 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    8222:	1c3b      	adds	r3, r7, #0
    8224:	330f      	adds	r3, #15
    8226:	781b      	ldrb	r3, [r3, #0]
    8228:	009b      	lsls	r3, r3, #2
    822a:	2210      	movs	r2, #16
    822c:	19d2      	adds	r2, r2, r7
    822e:	18d3      	adds	r3, r2, r3
    8230:	3b08      	subs	r3, #8
    8232:	681a      	ldr	r2, [r3, #0]
    8234:	1c3b      	adds	r3, r7, #0
    8236:	330e      	adds	r3, #14
    8238:	781b      	ldrb	r3, [r3, #0]
    823a:	01db      	lsls	r3, r3, #7
    823c:	18d3      	adds	r3, r2, r3
    823e:	e000      	b.n	8242 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    8240:	2300      	movs	r3, #0
	}
}
    8242:	1c18      	adds	r0, r3, #0
    8244:	46bd      	mov	sp, r7
    8246:	b004      	add	sp, #16
    8248:	bd80      	pop	{r7, pc}
    824a:	46c0      	nop			; (mov r8, r8)
    824c:	41004400 	.word	0x41004400

00008250 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8250:	b580      	push	{r7, lr}
    8252:	b088      	sub	sp, #32
    8254:	af00      	add	r7, sp, #0
    8256:	60f8      	str	r0, [r7, #12]
    8258:	60b9      	str	r1, [r7, #8]
    825a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    825c:	2300      	movs	r3, #0
    825e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    8260:	687b      	ldr	r3, [r7, #4]
    8262:	78db      	ldrb	r3, [r3, #3]
    8264:	2201      	movs	r2, #1
    8266:	4053      	eors	r3, r2
    8268:	b2db      	uxtb	r3, r3
    826a:	2b00      	cmp	r3, #0
    826c:	d033      	beq.n	82d6 <_system_pinmux_config+0x86>
		/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
		 * be written later) and store the new mux mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    826e:	687b      	ldr	r3, [r7, #4]
    8270:	781b      	ldrb	r3, [r3, #0]
    8272:	2b80      	cmp	r3, #128	; 0x80
    8274:	d00a      	beq.n	828c <_system_pinmux_config+0x3c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    8276:	69fb      	ldr	r3, [r7, #28]
    8278:	2280      	movs	r2, #128	; 0x80
    827a:	0252      	lsls	r2, r2, #9
    827c:	4313      	orrs	r3, r2
    827e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8280:	687b      	ldr	r3, [r7, #4]
    8282:	781b      	ldrb	r3, [r3, #0]
    8284:	061b      	lsls	r3, r3, #24
    8286:	69fa      	ldr	r2, [r7, #28]
    8288:	4313      	orrs	r3, r2
    828a:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    828c:	687b      	ldr	r3, [r7, #4]
    828e:	785b      	ldrb	r3, [r3, #1]
    8290:	2b00      	cmp	r3, #0
    8292:	d003      	beq.n	829c <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    8294:	687b      	ldr	r3, [r7, #4]
    8296:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8298:	2b02      	cmp	r3, #2
    829a:	d110      	bne.n	82be <_system_pinmux_config+0x6e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    829c:	69fb      	ldr	r3, [r7, #28]
    829e:	2280      	movs	r2, #128	; 0x80
    82a0:	0292      	lsls	r2, r2, #10
    82a2:	4313      	orrs	r3, r2
    82a4:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    82a6:	687b      	ldr	r3, [r7, #4]
    82a8:	789b      	ldrb	r3, [r3, #2]
    82aa:	2b00      	cmp	r3, #0
    82ac:	d004      	beq.n	82b8 <_system_pinmux_config+0x68>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    82ae:	69fb      	ldr	r3, [r7, #28]
    82b0:	2280      	movs	r2, #128	; 0x80
    82b2:	02d2      	lsls	r2, r2, #11
    82b4:	4313      	orrs	r3, r2
    82b6:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    82b8:	68fb      	ldr	r3, [r7, #12]
    82ba:	68ba      	ldr	r2, [r7, #8]
    82bc:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    82be:	687b      	ldr	r3, [r7, #4]
    82c0:	785b      	ldrb	r3, [r3, #1]
    82c2:	2b01      	cmp	r3, #1
    82c4:	d003      	beq.n	82ce <_system_pinmux_config+0x7e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    82c6:	687b      	ldr	r3, [r7, #4]
    82c8:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    82ca:	2b02      	cmp	r3, #2
    82cc:	d103      	bne.n	82d6 <_system_pinmux_config+0x86>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    82ce:	69fa      	ldr	r2, [r7, #28]
    82d0:	4b1f      	ldr	r3, [pc, #124]	; (8350 <_system_pinmux_config+0x100>)
    82d2:	4013      	ands	r3, r2
    82d4:	61fb      	str	r3, [r7, #28]
		}
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    82d6:	68bb      	ldr	r3, [r7, #8]
    82d8:	041b      	lsls	r3, r3, #16
    82da:	0c1b      	lsrs	r3, r3, #16
    82dc:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    82de:	68bb      	ldr	r3, [r7, #8]
    82e0:	0c1b      	lsrs	r3, r3, #16
    82e2:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    82e4:	69ba      	ldr	r2, [r7, #24]
    82e6:	69fb      	ldr	r3, [r7, #28]
    82e8:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    82ea:	22a0      	movs	r2, #160	; 0xa0
    82ec:	05d2      	lsls	r2, r2, #23
    82ee:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    82f0:	68fb      	ldr	r3, [r7, #12]
    82f2:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    82f4:	697a      	ldr	r2, [r7, #20]
    82f6:	69fb      	ldr	r3, [r7, #28]
    82f8:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    82fa:	22d0      	movs	r2, #208	; 0xd0
    82fc:	0612      	lsls	r2, r2, #24
    82fe:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8300:	68fb      	ldr	r3, [r7, #12]
    8302:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8304:	687b      	ldr	r3, [r7, #4]
    8306:	78db      	ldrb	r3, [r3, #3]
    8308:	2201      	movs	r2, #1
    830a:	4053      	eors	r3, r2
    830c:	b2db      	uxtb	r3, r3
    830e:	2b00      	cmp	r3, #0
    8310:	d01a      	beq.n	8348 <_system_pinmux_config+0xf8>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8312:	69fa      	ldr	r2, [r7, #28]
    8314:	2380      	movs	r3, #128	; 0x80
    8316:	02db      	lsls	r3, r3, #11
    8318:	4013      	ands	r3, r2
    831a:	d00a      	beq.n	8332 <_system_pinmux_config+0xe2>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    831c:	687b      	ldr	r3, [r7, #4]
    831e:	789b      	ldrb	r3, [r3, #2]
    8320:	2b01      	cmp	r3, #1
    8322:	d103      	bne.n	832c <_system_pinmux_config+0xdc>
				port->OUTSET.reg = pin_mask;
    8324:	68fb      	ldr	r3, [r7, #12]
    8326:	68ba      	ldr	r2, [r7, #8]
    8328:	619a      	str	r2, [r3, #24]
    832a:	e002      	b.n	8332 <_system_pinmux_config+0xe2>
			} else {
				port->OUTCLR.reg = pin_mask;
    832c:	68fb      	ldr	r3, [r7, #12]
    832e:	68ba      	ldr	r2, [r7, #8]
    8330:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8332:	687b      	ldr	r3, [r7, #4]
    8334:	785b      	ldrb	r3, [r3, #1]
    8336:	2b01      	cmp	r3, #1
    8338:	d003      	beq.n	8342 <_system_pinmux_config+0xf2>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    833a:	687b      	ldr	r3, [r7, #4]
    833c:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    833e:	2b02      	cmp	r3, #2
    8340:	d102      	bne.n	8348 <_system_pinmux_config+0xf8>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    8342:	68fb      	ldr	r3, [r7, #12]
    8344:	68ba      	ldr	r2, [r7, #8]
    8346:	609a      	str	r2, [r3, #8]
		}
	}
}
    8348:	46bd      	mov	sp, r7
    834a:	b008      	add	sp, #32
    834c:	bd80      	pop	{r7, pc}
    834e:	46c0      	nop			; (mov r8, r8)
    8350:	fffbffff 	.word	0xfffbffff

00008354 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    8354:	b580      	push	{r7, lr}
    8356:	b084      	sub	sp, #16
    8358:	af00      	add	r7, sp, #0
    835a:	1c02      	adds	r2, r0, #0
    835c:	6039      	str	r1, [r7, #0]
    835e:	1dfb      	adds	r3, r7, #7
    8360:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8362:	1dfb      	adds	r3, r7, #7
    8364:	781b      	ldrb	r3, [r3, #0]
    8366:	1c18      	adds	r0, r3, #0
    8368:	4b0b      	ldr	r3, [pc, #44]	; (8398 <system_pinmux_pin_set_config+0x44>)
    836a:	4798      	blx	r3
    836c:	1c03      	adds	r3, r0, #0
    836e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    8370:	1dfb      	adds	r3, r7, #7
    8372:	781a      	ldrb	r2, [r3, #0]
    8374:	231f      	movs	r3, #31
    8376:	4013      	ands	r3, r2
    8378:	2201      	movs	r2, #1
    837a:	1c11      	adds	r1, r2, #0
    837c:	4099      	lsls	r1, r3
    837e:	1c0b      	adds	r3, r1, #0
    8380:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    8382:	68f9      	ldr	r1, [r7, #12]
    8384:	68ba      	ldr	r2, [r7, #8]
    8386:	683b      	ldr	r3, [r7, #0]
    8388:	1c08      	adds	r0, r1, #0
    838a:	1c11      	adds	r1, r2, #0
    838c:	1c1a      	adds	r2, r3, #0
    838e:	4b03      	ldr	r3, [pc, #12]	; (839c <system_pinmux_pin_set_config+0x48>)
    8390:	4798      	blx	r3
}
    8392:	46bd      	mov	sp, r7
    8394:	b004      	add	sp, #16
    8396:	bd80      	pop	{r7, pc}
    8398:	000081f1 	.word	0x000081f1
    839c:	00008251 	.word	0x00008251

000083a0 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    83a0:	b580      	push	{r7, lr}
    83a2:	af00      	add	r7, sp, #0
	return;
    83a4:	46c0      	nop			; (mov r8, r8)
}
    83a6:	46bd      	mov	sp, r7
    83a8:	bd80      	pop	{r7, pc}
    83aa:	46c0      	nop			; (mov r8, r8)

000083ac <HardFault_Handler>:
/**
 * Handler for the CPU Hard Fault interrupt, fired if an illegal access was
 * attempted to a memory address.
 */
void HardFault_Handler(void)
{
    83ac:	b580      	push	{r7, lr}
    83ae:	af00      	add	r7, sp, #0
	while (1) {
		/* Infinite loop if CPU exception is detected */
		Assert(false);
	}
    83b0:	e7fe      	b.n	83b0 <HardFault_Handler+0x4>
    83b2:	46c0      	nop			; (mov r8, r8)

000083b4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    83b4:	b580      	push	{r7, lr}
    83b6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    83b8:	4b04      	ldr	r3, [pc, #16]	; (83cc <system_init+0x18>)
    83ba:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    83bc:	4b04      	ldr	r3, [pc, #16]	; (83d0 <system_init+0x1c>)
    83be:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    83c0:	4b04      	ldr	r3, [pc, #16]	; (83d4 <system_init+0x20>)
    83c2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    83c4:	4b04      	ldr	r3, [pc, #16]	; (83d8 <system_init+0x24>)
    83c6:	4798      	blx	r3
}
    83c8:	46bd      	mov	sp, r7
    83ca:	bd80      	pop	{r7, pc}
    83cc:	00007c45 	.word	0x00007c45
    83d0:	00006139 	.word	0x00006139
    83d4:	000083a1 	.word	0x000083a1
    83d8:	000062e1 	.word	0x000062e1

000083dc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    83dc:	b580      	push	{r7, lr}
    83de:	b082      	sub	sp, #8
    83e0:	af00      	add	r7, sp, #0
    83e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    83e4:	687b      	ldr	r3, [r7, #4]
    83e6:	2200      	movs	r2, #0
    83e8:	701a      	strb	r2, [r3, #0]
}
    83ea:	46bd      	mov	sp, r7
    83ec:	b002      	add	sp, #8
    83ee:	bd80      	pop	{r7, pc}

000083f0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    83f0:	b580      	push	{r7, lr}
    83f2:	b082      	sub	sp, #8
    83f4:	af00      	add	r7, sp, #0
    83f6:	1c02      	adds	r2, r0, #0
    83f8:	6039      	str	r1, [r7, #0]
    83fa:	1dfb      	adds	r3, r7, #7
    83fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    83fe:	1dfb      	adds	r3, r7, #7
    8400:	781b      	ldrb	r3, [r3, #0]
    8402:	2b01      	cmp	r3, #1
    8404:	d00a      	beq.n	841c <system_apb_clock_set_mask+0x2c>
    8406:	2b02      	cmp	r3, #2
    8408:	d00f      	beq.n	842a <system_apb_clock_set_mask+0x3a>
    840a:	2b00      	cmp	r3, #0
    840c:	d114      	bne.n	8438 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    840e:	4b0e      	ldr	r3, [pc, #56]	; (8448 <system_apb_clock_set_mask+0x58>)
    8410:	4a0d      	ldr	r2, [pc, #52]	; (8448 <system_apb_clock_set_mask+0x58>)
    8412:	6991      	ldr	r1, [r2, #24]
    8414:	683a      	ldr	r2, [r7, #0]
    8416:	430a      	orrs	r2, r1
    8418:	619a      	str	r2, [r3, #24]
			break;
    841a:	e00f      	b.n	843c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    841c:	4b0a      	ldr	r3, [pc, #40]	; (8448 <system_apb_clock_set_mask+0x58>)
    841e:	4a0a      	ldr	r2, [pc, #40]	; (8448 <system_apb_clock_set_mask+0x58>)
    8420:	69d1      	ldr	r1, [r2, #28]
    8422:	683a      	ldr	r2, [r7, #0]
    8424:	430a      	orrs	r2, r1
    8426:	61da      	str	r2, [r3, #28]
			break;
    8428:	e008      	b.n	843c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    842a:	4b07      	ldr	r3, [pc, #28]	; (8448 <system_apb_clock_set_mask+0x58>)
    842c:	4a06      	ldr	r2, [pc, #24]	; (8448 <system_apb_clock_set_mask+0x58>)
    842e:	6a11      	ldr	r1, [r2, #32]
    8430:	683a      	ldr	r2, [r7, #0]
    8432:	430a      	orrs	r2, r1
    8434:	621a      	str	r2, [r3, #32]
			break;
    8436:	e001      	b.n	843c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8438:	2317      	movs	r3, #23
    843a:	e000      	b.n	843e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    843c:	2300      	movs	r3, #0
}
    843e:	1c18      	adds	r0, r3, #0
    8440:	46bd      	mov	sp, r7
    8442:	b002      	add	sp, #8
    8444:	bd80      	pop	{r7, pc}
    8446:	46c0      	nop			; (mov r8, r8)
    8448:	40000400 	.word	0x40000400

0000844c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    844c:	b580      	push	{r7, lr}
    844e:	b082      	sub	sp, #8
    8450:	af00      	add	r7, sp, #0
    8452:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8454:	687b      	ldr	r3, [r7, #4]
    8456:	2280      	movs	r2, #128	; 0x80
    8458:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    845a:	687b      	ldr	r3, [r7, #4]
    845c:	2200      	movs	r2, #0
    845e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8460:	687b      	ldr	r3, [r7, #4]
    8462:	2201      	movs	r2, #1
    8464:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8466:	687b      	ldr	r3, [r7, #4]
    8468:	2200      	movs	r2, #0
    846a:	70da      	strb	r2, [r3, #3]
}
    846c:	46bd      	mov	sp, r7
    846e:	b002      	add	sp, #8
    8470:	bd80      	pop	{r7, pc}
    8472:	46c0      	nop			; (mov r8, r8)

00008474 <tc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    8474:	b580      	push	{r7, lr}
    8476:	b084      	sub	sp, #16
    8478:	af00      	add	r7, sp, #0
    847a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    847c:	687b      	ldr	r3, [r7, #4]
    847e:	681b      	ldr	r3, [r3, #0]
    8480:	60fb      	str	r3, [r7, #12]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8482:	68fb      	ldr	r3, [r7, #12]
    8484:	89db      	ldrh	r3, [r3, #14]
    8486:	041b      	lsls	r3, r3, #16
    8488:	0e1b      	lsrs	r3, r3, #24
    848a:	b2db      	uxtb	r3, r3
    848c:	1c1a      	adds	r2, r3, #0
    848e:	2380      	movs	r3, #128	; 0x80
    8490:	4013      	ands	r3, r2
    8492:	1e5a      	subs	r2, r3, #1
    8494:	4193      	sbcs	r3, r2
    8496:	b2db      	uxtb	r3, r3
}
    8498:	1c18      	adds	r0, r3, #0
    849a:	46bd      	mov	sp, r7
    849c:	b004      	add	sp, #16
    849e:	bd80      	pop	{r7, pc}

000084a0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    84a0:	b590      	push	{r4, r7, lr}
    84a2:	b089      	sub	sp, #36	; 0x24
    84a4:	af00      	add	r7, sp, #0
    84a6:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    84a8:	1c3b      	adds	r3, r7, #0
    84aa:	3308      	adds	r3, #8
    84ac:	4a0e      	ldr	r2, [pc, #56]	; (84e8 <_tc_get_inst_index+0x48>)
    84ae:	ca13      	ldmia	r2!, {r0, r1, r4}
    84b0:	c313      	stmia	r3!, {r0, r1, r4}
    84b2:	ca03      	ldmia	r2!, {r0, r1}
    84b4:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    84b6:	2300      	movs	r3, #0
    84b8:	61fb      	str	r3, [r7, #28]
    84ba:	e00d      	b.n	84d8 <_tc_get_inst_index+0x38>
		if (hw == tc_modules[i]) {
    84bc:	1c3b      	adds	r3, r7, #0
    84be:	3308      	adds	r3, #8
    84c0:	69fa      	ldr	r2, [r7, #28]
    84c2:	0092      	lsls	r2, r2, #2
    84c4:	58d2      	ldr	r2, [r2, r3]
    84c6:	687b      	ldr	r3, [r7, #4]
    84c8:	429a      	cmp	r2, r3
    84ca:	d102      	bne.n	84d2 <_tc_get_inst_index+0x32>
			return i;
    84cc:	69fb      	ldr	r3, [r7, #28]
    84ce:	b2db      	uxtb	r3, r3
    84d0:	e006      	b.n	84e0 <_tc_get_inst_index+0x40>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    84d2:	69fb      	ldr	r3, [r7, #28]
    84d4:	3301      	adds	r3, #1
    84d6:	61fb      	str	r3, [r7, #28]
    84d8:	69fb      	ldr	r3, [r7, #28]
    84da:	2b04      	cmp	r3, #4
    84dc:	d9ee      	bls.n	84bc <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    84de:	2300      	movs	r3, #0
}
    84e0:	1c18      	adds	r0, r3, #0
    84e2:	46bd      	mov	sp, r7
    84e4:	b009      	add	sp, #36	; 0x24
    84e6:	bd90      	pop	{r4, r7, pc}
    84e8:	00010764 	.word	0x00010764

000084ec <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    84ec:	b590      	push	{r4, r7, lr}
    84ee:	b08d      	sub	sp, #52	; 0x34
    84f0:	af00      	add	r7, sp, #0
    84f2:	60f8      	str	r0, [r7, #12]
    84f4:	60b9      	str	r1, [r7, #8]
    84f6:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    84f8:	1c3b      	adds	r3, r7, #0
    84fa:	332e      	adds	r3, #46	; 0x2e
    84fc:	2200      	movs	r2, #0
    84fe:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    8500:	1c3b      	adds	r3, r7, #0
    8502:	332d      	adds	r3, #45	; 0x2d
    8504:	2200      	movs	r2, #0
    8506:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    8508:	1c3b      	adds	r3, r7, #0
    850a:	332c      	adds	r3, #44	; 0x2c
    850c:	2200      	movs	r2, #0
    850e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    8510:	1c3c      	adds	r4, r7, #0
    8512:	3429      	adds	r4, #41	; 0x29
    8514:	68bb      	ldr	r3, [r7, #8]
    8516:	1c18      	adds	r0, r3, #0
    8518:	4bc6      	ldr	r3, [pc, #792]	; (8834 <tc_init+0x348>)
    851a:	4798      	blx	r3
    851c:	1c03      	adds	r3, r0, #0
    851e:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    8520:	1c3a      	adds	r2, r7, #0
    8522:	3224      	adds	r2, #36	; 0x24
    8524:	4bc4      	ldr	r3, [pc, #784]	; (8838 <tc_init+0x34c>)
    8526:	1c11      	adds	r1, r2, #0
    8528:	1c1a      	adds	r2, r3, #0
    852a:	2305      	movs	r3, #5
    852c:	1c08      	adds	r0, r1, #0
    852e:	1c11      	adds	r1, r2, #0
    8530:	1c1a      	adds	r2, r3, #0
    8532:	4bc2      	ldr	r3, [pc, #776]	; (883c <tc_init+0x350>)
    8534:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    8536:	1c3a      	adds	r2, r7, #0
    8538:	3218      	adds	r2, #24
    853a:	4bc1      	ldr	r3, [pc, #772]	; (8840 <tc_init+0x354>)
    853c:	1c11      	adds	r1, r2, #0
    853e:	1c1a      	adds	r2, r3, #0
    8540:	230a      	movs	r3, #10
    8542:	1c08      	adds	r0, r1, #0
    8544:	1c11      	adds	r1, r2, #0
    8546:	1c1a      	adds	r2, r3, #0
    8548:	4bbc      	ldr	r3, [pc, #752]	; (883c <tc_init+0x350>)
    854a:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    854c:	1c3b      	adds	r3, r7, #0
    854e:	332b      	adds	r3, #43	; 0x2b
    8550:	2200      	movs	r2, #0
    8552:	701a      	strb	r2, [r3, #0]
    8554:	e00e      	b.n	8574 <tc_init+0x88>
		module_inst->callback[i]        = NULL;
    8556:	1c3b      	adds	r3, r7, #0
    8558:	332b      	adds	r3, #43	; 0x2b
    855a:	781a      	ldrb	r2, [r3, #0]
    855c:	68fb      	ldr	r3, [r7, #12]
    855e:	3202      	adds	r2, #2
    8560:	0092      	lsls	r2, r2, #2
    8562:	2100      	movs	r1, #0
    8564:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    8566:	1c3b      	adds	r3, r7, #0
    8568:	332b      	adds	r3, #43	; 0x2b
    856a:	781a      	ldrb	r2, [r3, #0]
    856c:	1c3b      	adds	r3, r7, #0
    856e:	332b      	adds	r3, #43	; 0x2b
    8570:	3201      	adds	r2, #1
    8572:	701a      	strb	r2, [r3, #0]
    8574:	1c3b      	adds	r3, r7, #0
    8576:	332b      	adds	r3, #43	; 0x2b
    8578:	781b      	ldrb	r3, [r3, #0]
    857a:	2b03      	cmp	r3, #3
    857c:	d9eb      	bls.n	8556 <tc_init+0x6a>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
    857e:	68fb      	ldr	r3, [r7, #12]
    8580:	2200      	movs	r2, #0
    8582:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    8584:	68fb      	ldr	r3, [r7, #12]
    8586:	2200      	movs	r2, #0
    8588:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    858a:	1c3b      	adds	r3, r7, #0
    858c:	3329      	adds	r3, #41	; 0x29
    858e:	781a      	ldrb	r2, [r3, #0]
    8590:	4bac      	ldr	r3, [pc, #688]	; (8844 <tc_init+0x358>)
    8592:	0092      	lsls	r2, r2, #2
    8594:	68f9      	ldr	r1, [r7, #12]
    8596:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    8598:	68fb      	ldr	r3, [r7, #12]
    859a:	68ba      	ldr	r2, [r7, #8]
    859c:	601a      	str	r2, [r3, #0]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    859e:	687b      	ldr	r3, [r7, #4]
    85a0:	789b      	ldrb	r3, [r3, #2]
    85a2:	2b08      	cmp	r3, #8
    85a4:	d108      	bne.n	85b8 <tc_init+0xcc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    85a6:	1c3b      	adds	r3, r7, #0
    85a8:	3329      	adds	r3, #41	; 0x29
    85aa:	781b      	ldrb	r3, [r3, #0]
    85ac:	1cda      	adds	r2, r3, #3
    85ae:	2301      	movs	r3, #1
    85b0:	4013      	ands	r3, r2

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    85b2:	d001      	beq.n	85b8 <tc_init+0xcc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    85b4:	2317      	movs	r3, #23
    85b6:	e1d8      	b.n	896a <tc_init+0x47e>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    85b8:	687b      	ldr	r3, [r7, #4]
    85ba:	789a      	ldrb	r2, [r3, #2]
    85bc:	68fb      	ldr	r3, [r7, #12]
    85be:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    85c0:	68bb      	ldr	r3, [r7, #8]
    85c2:	681b      	ldr	r3, [r3, #0]
    85c4:	b29b      	uxth	r3, r3
    85c6:	1c1a      	adds	r2, r3, #0
    85c8:	2301      	movs	r3, #1
    85ca:	4013      	ands	r3, r2
    85cc:	d001      	beq.n	85d2 <tc_init+0xe6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    85ce:	2305      	movs	r3, #5
    85d0:	e1cb      	b.n	896a <tc_init+0x47e>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    85d2:	68bb      	ldr	r3, [r7, #8]
    85d4:	68db      	ldr	r3, [r3, #12]
    85d6:	0e1b      	lsrs	r3, r3, #24
    85d8:	b2db      	uxtb	r3, r3
    85da:	1c1a      	adds	r2, r3, #0
    85dc:	2310      	movs	r3, #16
    85de:	4013      	ands	r3, r2
    85e0:	d001      	beq.n	85e6 <tc_init+0xfa>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    85e2:	231c      	movs	r3, #28
    85e4:	e1c1      	b.n	896a <tc_init+0x47e>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    85e6:	68bb      	ldr	r3, [r7, #8]
    85e8:	681b      	ldr	r3, [r3, #0]
    85ea:	b29b      	uxth	r3, r3
    85ec:	1c1a      	adds	r2, r3, #0
    85ee:	2302      	movs	r3, #2
    85f0:	4013      	ands	r3, r2
    85f2:	d001      	beq.n	85f8 <tc_init+0x10c>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    85f4:	231c      	movs	r3, #28
    85f6:	e1b8      	b.n	896a <tc_init+0x47e>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    85f8:	687b      	ldr	r3, [r7, #4]
    85fa:	7c1b      	ldrb	r3, [r3, #16]
    85fc:	2b00      	cmp	r3, #0
    85fe:	d017      	beq.n	8630 <tc_init+0x144>
		system_pinmux_get_config_defaults(&pin_config);
    8600:	1c3b      	adds	r3, r7, #0
    8602:	3314      	adds	r3, #20
    8604:	1c18      	adds	r0, r3, #0
    8606:	4b90      	ldr	r3, [pc, #576]	; (8848 <tc_init+0x35c>)
    8608:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    860a:	687b      	ldr	r3, [r7, #4]
    860c:	699b      	ldr	r3, [r3, #24]
    860e:	b2da      	uxtb	r2, r3
    8610:	1c3b      	adds	r3, r7, #0
    8612:	3314      	adds	r3, #20
    8614:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    8616:	1c3b      	adds	r3, r7, #0
    8618:	3314      	adds	r3, #20
    861a:	2201      	movs	r2, #1
    861c:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    861e:	687b      	ldr	r3, [r7, #4]
    8620:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    8622:	b2da      	uxtb	r2, r3
    8624:	1c3b      	adds	r3, r7, #0
    8626:	3314      	adds	r3, #20
    8628:	1c10      	adds	r0, r2, #0
    862a:	1c19      	adds	r1, r3, #0
    862c:	4b87      	ldr	r3, [pc, #540]	; (884c <tc_init+0x360>)
    862e:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    8630:	687b      	ldr	r3, [r7, #4]
    8632:	7f1b      	ldrb	r3, [r3, #28]
    8634:	2b00      	cmp	r3, #0
    8636:	d017      	beq.n	8668 <tc_init+0x17c>
		system_pinmux_get_config_defaults(&pin_config);
    8638:	1c3b      	adds	r3, r7, #0
    863a:	3314      	adds	r3, #20
    863c:	1c18      	adds	r0, r3, #0
    863e:	4b82      	ldr	r3, [pc, #520]	; (8848 <tc_init+0x35c>)
    8640:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    8642:	687b      	ldr	r3, [r7, #4]
    8644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8646:	b2da      	uxtb	r2, r3
    8648:	1c3b      	adds	r3, r7, #0
    864a:	3314      	adds	r3, #20
    864c:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    864e:	1c3b      	adds	r3, r7, #0
    8650:	3314      	adds	r3, #20
    8652:	2201      	movs	r2, #1
    8654:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    8656:	687b      	ldr	r3, [r7, #4]
    8658:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    865a:	b2da      	uxtb	r2, r3
    865c:	1c3b      	adds	r3, r7, #0
    865e:	3314      	adds	r3, #20
    8660:	1c10      	adds	r0, r2, #0
    8662:	1c19      	adds	r1, r3, #0
    8664:	4b79      	ldr	r3, [pc, #484]	; (884c <tc_init+0x360>)
    8666:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    8668:	1c3b      	adds	r3, r7, #0
    866a:	3329      	adds	r3, #41	; 0x29
    866c:	781a      	ldrb	r2, [r3, #0]
    866e:	1c3b      	adds	r3, r7, #0
    8670:	3318      	adds	r3, #24
    8672:	0052      	lsls	r2, r2, #1
    8674:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    8676:	2002      	movs	r0, #2
    8678:	1c19      	adds	r1, r3, #0
    867a:	4b75      	ldr	r3, [pc, #468]	; (8850 <tc_init+0x364>)
    867c:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32 bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    867e:	687b      	ldr	r3, [r7, #4]
    8680:	789b      	ldrb	r3, [r3, #2]
    8682:	2b08      	cmp	r3, #8
    8684:	d10b      	bne.n	869e <tc_init+0x1b2>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    8686:	1c3b      	adds	r3, r7, #0
    8688:	3329      	adds	r3, #41	; 0x29
    868a:	781b      	ldrb	r3, [r3, #0]
    868c:	1c5a      	adds	r2, r3, #1
    868e:	1c3b      	adds	r3, r7, #0
    8690:	3318      	adds	r3, #24
    8692:	0052      	lsls	r2, r2, #1
    8694:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32 bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    8696:	2002      	movs	r0, #2
    8698:	1c19      	adds	r1, r3, #0
    869a:	4b6d      	ldr	r3, [pc, #436]	; (8850 <tc_init+0x364>)
    869c:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    869e:	1c3b      	adds	r3, r7, #0
    86a0:	3310      	adds	r3, #16
    86a2:	1c18      	adds	r0, r3, #0
    86a4:	4b6b      	ldr	r3, [pc, #428]	; (8854 <tc_init+0x368>)
    86a6:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    86a8:	687b      	ldr	r3, [r7, #4]
    86aa:	781a      	ldrb	r2, [r3, #0]
    86ac:	1c3b      	adds	r3, r7, #0
    86ae:	3310      	adds	r3, #16
    86b0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    86b2:	1c3b      	adds	r3, r7, #0
    86b4:	3329      	adds	r3, #41	; 0x29
    86b6:	781b      	ldrb	r3, [r3, #0]
    86b8:	1c3a      	adds	r2, r7, #0
    86ba:	3224      	adds	r2, #36	; 0x24
    86bc:	5cd2      	ldrb	r2, [r2, r3]
    86be:	1c3b      	adds	r3, r7, #0
    86c0:	3310      	adds	r3, #16
    86c2:	1c10      	adds	r0, r2, #0
    86c4:	1c19      	adds	r1, r3, #0
    86c6:	4b64      	ldr	r3, [pc, #400]	; (8858 <tc_init+0x36c>)
    86c8:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    86ca:	1c3b      	adds	r3, r7, #0
    86cc:	3329      	adds	r3, #41	; 0x29
    86ce:	781b      	ldrb	r3, [r3, #0]
    86d0:	1c3a      	adds	r2, r7, #0
    86d2:	3224      	adds	r2, #36	; 0x24
    86d4:	5cd3      	ldrb	r3, [r2, r3]
    86d6:	1c18      	adds	r0, r3, #0
    86d8:	4b60      	ldr	r3, [pc, #384]	; (885c <tc_init+0x370>)
    86da:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    86dc:	687b      	ldr	r3, [r7, #4]
    86de:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    86e0:	687b      	ldr	r3, [r7, #4]
    86e2:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    86e4:	4313      	orrs	r3, r2
    86e6:	b2db      	uxtb	r3, r3
    86e8:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
    86ea:	687b      	ldr	r3, [r7, #4]
    86ec:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    86ee:	4313      	orrs	r3, r2
    86f0:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    86f2:	687b      	ldr	r3, [r7, #4]
    86f4:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    86f6:	1c3b      	adds	r3, r7, #0
    86f8:	332e      	adds	r3, #46	; 0x2e
    86fa:	430a      	orrs	r2, r1
    86fc:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    86fe:	687b      	ldr	r3, [r7, #4]
    8700:	785b      	ldrb	r3, [r3, #1]
    8702:	2b00      	cmp	r3, #0
    8704:	d009      	beq.n	871a <tc_init+0x22e>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    8706:	1c3b      	adds	r3, r7, #0
    8708:	332e      	adds	r3, #46	; 0x2e
    870a:	1c3a      	adds	r2, r7, #0
    870c:	322e      	adds	r2, #46	; 0x2e
    870e:	8812      	ldrh	r2, [r2, #0]
    8710:	2180      	movs	r1, #128	; 0x80
    8712:	0109      	lsls	r1, r1, #4
    8714:	430a      	orrs	r2, r1
    8716:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    8718:	e7ff      	b.n	871a <tc_init+0x22e>
    871a:	46c0      	nop			; (mov r8, r8)
    871c:	68fb      	ldr	r3, [r7, #12]
    871e:	1c18      	adds	r0, r3, #0
    8720:	4b4f      	ldr	r3, [pc, #316]	; (8860 <tc_init+0x374>)
    8722:	4798      	blx	r3
    8724:	1c03      	adds	r3, r0, #0
    8726:	2b00      	cmp	r3, #0
    8728:	d1f8      	bne.n	871c <tc_init+0x230>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    872a:	68bb      	ldr	r3, [r7, #8]
    872c:	1c3a      	adds	r2, r7, #0
    872e:	322e      	adds	r2, #46	; 0x2e
    8730:	8812      	ldrh	r2, [r2, #0]
    8732:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    8734:	687b      	ldr	r3, [r7, #4]
    8736:	7b5b      	ldrb	r3, [r3, #13]
    8738:	2b00      	cmp	r3, #0
    873a:	d003      	beq.n	8744 <tc_init+0x258>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    873c:	1c3b      	adds	r3, r7, #0
    873e:	332d      	adds	r3, #45	; 0x2d
    8740:	2204      	movs	r2, #4
    8742:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    8744:	687b      	ldr	r3, [r7, #4]
    8746:	7b9b      	ldrb	r3, [r3, #14]
    8748:	2b00      	cmp	r3, #0
    874a:	d008      	beq.n	875e <tc_init+0x272>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    874c:	1c3b      	adds	r3, r7, #0
    874e:	332d      	adds	r3, #45	; 0x2d
    8750:	1c3a      	adds	r2, r7, #0
    8752:	322d      	adds	r2, #45	; 0x2d
    8754:	7812      	ldrb	r2, [r2, #0]
    8756:	2101      	movs	r1, #1
    8758:	430a      	orrs	r2, r1
    875a:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    875c:	e7ff      	b.n	875e <tc_init+0x272>
    875e:	46c0      	nop			; (mov r8, r8)
    8760:	68fb      	ldr	r3, [r7, #12]
    8762:	1c18      	adds	r0, r3, #0
    8764:	4b3e      	ldr	r3, [pc, #248]	; (8860 <tc_init+0x374>)
    8766:	4798      	blx	r3
    8768:	1c03      	adds	r3, r0, #0
    876a:	2b00      	cmp	r3, #0
    876c:	d1f8      	bne.n	8760 <tc_init+0x274>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    876e:	68bb      	ldr	r3, [r7, #8]
    8770:	22ff      	movs	r2, #255	; 0xff
    8772:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    8774:	1c3b      	adds	r3, r7, #0
    8776:	332d      	adds	r3, #45	; 0x2d
    8778:	781b      	ldrb	r3, [r3, #0]
    877a:	2b00      	cmp	r3, #0
    877c:	d00c      	beq.n	8798 <tc_init+0x2ac>
		while (tc_is_syncing(module_inst)) {
    877e:	46c0      	nop			; (mov r8, r8)
    8780:	68fb      	ldr	r3, [r7, #12]
    8782:	1c18      	adds	r0, r3, #0
    8784:	4b36      	ldr	r3, [pc, #216]	; (8860 <tc_init+0x374>)
    8786:	4798      	blx	r3
    8788:	1c03      	adds	r3, r0, #0
    878a:	2b00      	cmp	r3, #0
    878c:	d1f8      	bne.n	8780 <tc_init+0x294>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    878e:	68bb      	ldr	r3, [r7, #8]
    8790:	1c3a      	adds	r2, r7, #0
    8792:	322d      	adds	r2, #45	; 0x2d
    8794:	7812      	ldrb	r2, [r2, #0]
    8796:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    8798:	1c3b      	adds	r3, r7, #0
    879a:	332c      	adds	r3, #44	; 0x2c
    879c:	687a      	ldr	r2, [r7, #4]
    879e:	7a92      	ldrb	r2, [r2, #10]
    87a0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    87a2:	1c3b      	adds	r3, r7, #0
    87a4:	332a      	adds	r3, #42	; 0x2a
    87a6:	2200      	movs	r2, #0
    87a8:	701a      	strb	r2, [r3, #0]
    87aa:	e01f      	b.n	87ec <tc_init+0x300>
		if (config->enable_capture_on_channel[i] == true) {
    87ac:	1c3b      	adds	r3, r7, #0
    87ae:	332a      	adds	r3, #42	; 0x2a
    87b0:	781a      	ldrb	r2, [r3, #0]
    87b2:	6879      	ldr	r1, [r7, #4]
    87b4:	2308      	movs	r3, #8
    87b6:	188a      	adds	r2, r1, r2
    87b8:	18d3      	adds	r3, r2, r3
    87ba:	78db      	ldrb	r3, [r3, #3]
    87bc:	2b00      	cmp	r3, #0
    87be:	d00e      	beq.n	87de <tc_init+0x2f2>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    87c0:	1c3b      	adds	r3, r7, #0
    87c2:	332a      	adds	r3, #42	; 0x2a
    87c4:	781b      	ldrb	r3, [r3, #0]
    87c6:	2210      	movs	r2, #16
    87c8:	1c11      	adds	r1, r2, #0
    87ca:	4099      	lsls	r1, r3
    87cc:	1c0b      	adds	r3, r1, #0
    87ce:	b2d9      	uxtb	r1, r3
    87d0:	1c3b      	adds	r3, r7, #0
    87d2:	332c      	adds	r3, #44	; 0x2c
    87d4:	1c3a      	adds	r2, r7, #0
    87d6:	322c      	adds	r2, #44	; 0x2c
    87d8:	7812      	ldrb	r2, [r2, #0]
    87da:	430a      	orrs	r2, r1
    87dc:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    87de:	1c3b      	adds	r3, r7, #0
    87e0:	332a      	adds	r3, #42	; 0x2a
    87e2:	781a      	ldrb	r2, [r3, #0]
    87e4:	1c3b      	adds	r3, r7, #0
    87e6:	332a      	adds	r3, #42	; 0x2a
    87e8:	3201      	adds	r2, #1
    87ea:	701a      	strb	r2, [r3, #0]
    87ec:	1c3b      	adds	r3, r7, #0
    87ee:	332a      	adds	r3, #42	; 0x2a
    87f0:	781b      	ldrb	r3, [r3, #0]
    87f2:	2b01      	cmp	r3, #1
    87f4:	d9da      	bls.n	87ac <tc_init+0x2c0>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    87f6:	46c0      	nop			; (mov r8, r8)
    87f8:	68fb      	ldr	r3, [r7, #12]
    87fa:	1c18      	adds	r0, r3, #0
    87fc:	4b18      	ldr	r3, [pc, #96]	; (8860 <tc_init+0x374>)
    87fe:	4798      	blx	r3
    8800:	1c03      	adds	r3, r0, #0
    8802:	2b00      	cmp	r3, #0
    8804:	d1f8      	bne.n	87f8 <tc_init+0x30c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    8806:	68bb      	ldr	r3, [r7, #8]
    8808:	1c3a      	adds	r2, r7, #0
    880a:	322c      	adds	r2, #44	; 0x2c
    880c:	7812      	ldrb	r2, [r2, #0]
    880e:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    8810:	46c0      	nop			; (mov r8, r8)
    8812:	68fb      	ldr	r3, [r7, #12]
    8814:	1c18      	adds	r0, r3, #0
    8816:	4b12      	ldr	r3, [pc, #72]	; (8860 <tc_init+0x374>)
    8818:	4798      	blx	r3
    881a:	1c03      	adds	r3, r0, #0
    881c:	2b00      	cmp	r3, #0
    881e:	d1f8      	bne.n	8812 <tc_init+0x326>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    8820:	68fb      	ldr	r3, [r7, #12]
    8822:	791b      	ldrb	r3, [r3, #4]
    8824:	2b04      	cmp	r3, #4
    8826:	d01d      	beq.n	8864 <tc_init+0x378>
    8828:	2b08      	cmp	r3, #8
    882a:	d100      	bne.n	882e <tc_init+0x342>
    882c:	e076      	b.n	891c <tc_init+0x430>
    882e:	2b00      	cmp	r3, #0
    8830:	d04e      	beq.n	88d0 <tc_init+0x3e4>
    8832:	e099      	b.n	8968 <tc_init+0x47c>
    8834:	000084a1 	.word	0x000084a1
    8838:	00010778 	.word	0x00010778
    883c:	0000b075 	.word	0x0000b075
    8840:	00010780 	.word	0x00010780
    8844:	200010bc 	.word	0x200010bc
    8848:	0000844d 	.word	0x0000844d
    884c:	00008355 	.word	0x00008355
    8850:	000083f1 	.word	0x000083f1
    8854:	000083dd 	.word	0x000083dd
    8858:	0000807d 	.word	0x0000807d
    885c:	000080bd 	.word	0x000080bd
    8860:	00008475 	.word	0x00008475
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    8864:	46c0      	nop			; (mov r8, r8)
    8866:	68fb      	ldr	r3, [r7, #12]
    8868:	1c18      	adds	r0, r3, #0
    886a:	4b42      	ldr	r3, [pc, #264]	; (8974 <tc_init+0x488>)
    886c:	4798      	blx	r3
    886e:	1c03      	adds	r3, r0, #0
    8870:	2b00      	cmp	r3, #0
    8872:	d1f8      	bne.n	8866 <tc_init+0x37a>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    8874:	687a      	ldr	r2, [r7, #4]
    8876:	2328      	movs	r3, #40	; 0x28
    8878:	5cd2      	ldrb	r2, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    887a:	68bb      	ldr	r3, [r7, #8]
    887c:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    887e:	46c0      	nop			; (mov r8, r8)
    8880:	68fb      	ldr	r3, [r7, #12]
    8882:	1c18      	adds	r0, r3, #0
    8884:	4b3b      	ldr	r3, [pc, #236]	; (8974 <tc_init+0x488>)
    8886:	4798      	blx	r3
    8888:	1c03      	adds	r3, r0, #0
    888a:	2b00      	cmp	r3, #0
    888c:	d1f8      	bne.n	8880 <tc_init+0x394>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    888e:	687a      	ldr	r2, [r7, #4]
    8890:	2329      	movs	r3, #41	; 0x29
    8892:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    8894:	68bb      	ldr	r3, [r7, #8]
    8896:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    8898:	46c0      	nop			; (mov r8, r8)
    889a:	68fb      	ldr	r3, [r7, #12]
    889c:	1c18      	adds	r0, r3, #0
    889e:	4b35      	ldr	r3, [pc, #212]	; (8974 <tc_init+0x488>)
    88a0:	4798      	blx	r3
    88a2:	1c03      	adds	r3, r0, #0
    88a4:	2b00      	cmp	r3, #0
    88a6:	d1f8      	bne.n	889a <tc_init+0x3ae>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    88a8:	687a      	ldr	r2, [r7, #4]
    88aa:	232a      	movs	r3, #42	; 0x2a
    88ac:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    88ae:	68bb      	ldr	r3, [r7, #8]
    88b0:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    88b2:	46c0      	nop			; (mov r8, r8)
    88b4:	68fb      	ldr	r3, [r7, #12]
    88b6:	1c18      	adds	r0, r3, #0
    88b8:	4b2e      	ldr	r3, [pc, #184]	; (8974 <tc_init+0x488>)
    88ba:	4798      	blx	r3
    88bc:	1c03      	adds	r3, r0, #0
    88be:	2b00      	cmp	r3, #0
    88c0:	d1f8      	bne.n	88b4 <tc_init+0x3c8>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    88c2:	687a      	ldr	r2, [r7, #4]
    88c4:	232b      	movs	r3, #43	; 0x2b
    88c6:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    88c8:	68bb      	ldr	r3, [r7, #8]
    88ca:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    88cc:	2300      	movs	r3, #0
    88ce:	e04c      	b.n	896a <tc_init+0x47e>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    88d0:	46c0      	nop			; (mov r8, r8)
    88d2:	68fb      	ldr	r3, [r7, #12]
    88d4:	1c18      	adds	r0, r3, #0
    88d6:	4b27      	ldr	r3, [pc, #156]	; (8974 <tc_init+0x488>)
    88d8:	4798      	blx	r3
    88da:	1c03      	adds	r3, r0, #0
    88dc:	2b00      	cmp	r3, #0
    88de:	d1f8      	bne.n	88d2 <tc_init+0x3e6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    88e0:	687b      	ldr	r3, [r7, #4]
    88e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    88e4:	68bb      	ldr	r3, [r7, #8]
    88e6:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    88e8:	46c0      	nop			; (mov r8, r8)
    88ea:	68fb      	ldr	r3, [r7, #12]
    88ec:	1c18      	adds	r0, r3, #0
    88ee:	4b21      	ldr	r3, [pc, #132]	; (8974 <tc_init+0x488>)
    88f0:	4798      	blx	r3
    88f2:	1c03      	adds	r3, r0, #0
    88f4:	2b00      	cmp	r3, #0
    88f6:	d1f8      	bne.n	88ea <tc_init+0x3fe>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    88f8:	687b      	ldr	r3, [r7, #4]
    88fa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    88fc:	68bb      	ldr	r3, [r7, #8]
    88fe:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    8900:	46c0      	nop			; (mov r8, r8)
    8902:	68fb      	ldr	r3, [r7, #12]
    8904:	1c18      	adds	r0, r3, #0
    8906:	4b1b      	ldr	r3, [pc, #108]	; (8974 <tc_init+0x488>)
    8908:	4798      	blx	r3
    890a:	1c03      	adds	r3, r0, #0
    890c:	2b00      	cmp	r3, #0
    890e:	d1f8      	bne.n	8902 <tc_init+0x416>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    8910:	687b      	ldr	r3, [r7, #4]
    8912:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    8914:	68bb      	ldr	r3, [r7, #8]
    8916:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    8918:	2300      	movs	r3, #0
    891a:	e026      	b.n	896a <tc_init+0x47e>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    891c:	46c0      	nop			; (mov r8, r8)
    891e:	68fb      	ldr	r3, [r7, #12]
    8920:	1c18      	adds	r0, r3, #0
    8922:	4b14      	ldr	r3, [pc, #80]	; (8974 <tc_init+0x488>)
    8924:	4798      	blx	r3
    8926:	1c03      	adds	r3, r0, #0
    8928:	2b00      	cmp	r3, #0
    892a:	d1f8      	bne.n	891e <tc_init+0x432>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    892c:	687b      	ldr	r3, [r7, #4]
    892e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8930:	68bb      	ldr	r3, [r7, #8]
    8932:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    8934:	46c0      	nop			; (mov r8, r8)
    8936:	68fb      	ldr	r3, [r7, #12]
    8938:	1c18      	adds	r0, r3, #0
    893a:	4b0e      	ldr	r3, [pc, #56]	; (8974 <tc_init+0x488>)
    893c:	4798      	blx	r3
    893e:	1c03      	adds	r3, r0, #0
    8940:	2b00      	cmp	r3, #0
    8942:	d1f8      	bne.n	8936 <tc_init+0x44a>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    8944:	687b      	ldr	r3, [r7, #4]
    8946:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    8948:	68bb      	ldr	r3, [r7, #8]
    894a:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    894c:	46c0      	nop			; (mov r8, r8)
    894e:	68fb      	ldr	r3, [r7, #12]
    8950:	1c18      	adds	r0, r3, #0
    8952:	4b08      	ldr	r3, [pc, #32]	; (8974 <tc_init+0x488>)
    8954:	4798      	blx	r3
    8956:	1c03      	adds	r3, r0, #0
    8958:	2b00      	cmp	r3, #0
    895a:	d1f8      	bne.n	894e <tc_init+0x462>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    895c:	687b      	ldr	r3, [r7, #4]
    895e:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    8960:	68bb      	ldr	r3, [r7, #8]
    8962:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    8964:	2300      	movs	r3, #0
    8966:	e000      	b.n	896a <tc_init+0x47e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    8968:	2317      	movs	r3, #23
}
    896a:	1c18      	adds	r0, r3, #0
    896c:	46bd      	mov	sp, r7
    896e:	b00d      	add	sp, #52	; 0x34
    8970:	bd90      	pop	{r4, r7, pc}
    8972:	46c0      	nop			; (mov r8, r8)
    8974:	00008475 	.word	0x00008475

00008978 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    8978:	b580      	push	{r7, lr}
    897a:	b084      	sub	sp, #16
    897c:	af00      	add	r7, sp, #0
    897e:	60f8      	str	r0, [r7, #12]
    8980:	60b9      	str	r1, [r7, #8]
    8982:	1dfb      	adds	r3, r7, #7
    8984:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    8986:	1dfb      	adds	r3, r7, #7
    8988:	781a      	ldrb	r2, [r3, #0]
    898a:	68fb      	ldr	r3, [r7, #12]
    898c:	3202      	adds	r2, #2
    898e:	0092      	lsls	r2, r2, #2
    8990:	68b9      	ldr	r1, [r7, #8]
    8992:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    8994:	1dfb      	adds	r3, r7, #7
    8996:	781b      	ldrb	r3, [r3, #0]
    8998:	2b02      	cmp	r3, #2
    899a:	d107      	bne.n	89ac <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    899c:	68fb      	ldr	r3, [r7, #12]
    899e:	7e1b      	ldrb	r3, [r3, #24]
    89a0:	2210      	movs	r2, #16
    89a2:	4313      	orrs	r3, r2
    89a4:	b2da      	uxtb	r2, r3
    89a6:	68fb      	ldr	r3, [r7, #12]
    89a8:	761a      	strb	r2, [r3, #24]
    89aa:	e01a      	b.n	89e2 <tc_register_callback+0x6a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    89ac:	1dfb      	adds	r3, r7, #7
    89ae:	781b      	ldrb	r3, [r3, #0]
    89b0:	2b03      	cmp	r3, #3
    89b2:	d107      	bne.n	89c4 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    89b4:	68fb      	ldr	r3, [r7, #12]
    89b6:	7e1b      	ldrb	r3, [r3, #24]
    89b8:	2220      	movs	r2, #32
    89ba:	4313      	orrs	r3, r2
    89bc:	b2da      	uxtb	r2, r3
    89be:	68fb      	ldr	r3, [r7, #12]
    89c0:	761a      	strb	r2, [r3, #24]
    89c2:	e00e      	b.n	89e2 <tc_register_callback+0x6a>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    89c4:	68fb      	ldr	r3, [r7, #12]
    89c6:	7e1b      	ldrb	r3, [r3, #24]
    89c8:	b2da      	uxtb	r2, r3
    89ca:	1dfb      	adds	r3, r7, #7
    89cc:	781b      	ldrb	r3, [r3, #0]
    89ce:	2101      	movs	r1, #1
    89d0:	1c08      	adds	r0, r1, #0
    89d2:	4098      	lsls	r0, r3
    89d4:	1c03      	adds	r3, r0, #0
    89d6:	b2db      	uxtb	r3, r3
    89d8:	4313      	orrs	r3, r2
    89da:	b2db      	uxtb	r3, r3
    89dc:	b2da      	uxtb	r2, r3
    89de:	68fb      	ldr	r3, [r7, #12]
    89e0:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    89e2:	2300      	movs	r3, #0
}
    89e4:	1c18      	adds	r0, r3, #0
    89e6:	46bd      	mov	sp, r7
    89e8:	b004      	add	sp, #16
    89ea:	bd80      	pop	{r7, pc}

000089ec <TC3_Handler>:
		void TC##n##_Handler(void) \
		{ \
			_tc_interrupt_handler(m); \
		}

MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    89ec:	b580      	push	{r7, lr}
    89ee:	af00      	add	r7, sp, #0
    89f0:	2000      	movs	r0, #0
    89f2:	4b02      	ldr	r3, [pc, #8]	; (89fc <TC3_Handler+0x10>)
    89f4:	4798      	blx	r3
    89f6:	46bd      	mov	sp, r7
    89f8:	bd80      	pop	{r7, pc}
    89fa:	46c0      	nop			; (mov r8, r8)
    89fc:	00008a51 	.word	0x00008a51

00008a00 <TC4_Handler>:
    8a00:	b580      	push	{r7, lr}
    8a02:	af00      	add	r7, sp, #0
    8a04:	2001      	movs	r0, #1
    8a06:	4b02      	ldr	r3, [pc, #8]	; (8a10 <TC4_Handler+0x10>)
    8a08:	4798      	blx	r3
    8a0a:	46bd      	mov	sp, r7
    8a0c:	bd80      	pop	{r7, pc}
    8a0e:	46c0      	nop			; (mov r8, r8)
    8a10:	00008a51 	.word	0x00008a51

00008a14 <TC5_Handler>:
    8a14:	b580      	push	{r7, lr}
    8a16:	af00      	add	r7, sp, #0
    8a18:	2002      	movs	r0, #2
    8a1a:	4b02      	ldr	r3, [pc, #8]	; (8a24 <TC5_Handler+0x10>)
    8a1c:	4798      	blx	r3
    8a1e:	46bd      	mov	sp, r7
    8a20:	bd80      	pop	{r7, pc}
    8a22:	46c0      	nop			; (mov r8, r8)
    8a24:	00008a51 	.word	0x00008a51

00008a28 <TC6_Handler>:
    8a28:	b580      	push	{r7, lr}
    8a2a:	af00      	add	r7, sp, #0
    8a2c:	2003      	movs	r0, #3
    8a2e:	4b02      	ldr	r3, [pc, #8]	; (8a38 <TC6_Handler+0x10>)
    8a30:	4798      	blx	r3
    8a32:	46bd      	mov	sp, r7
    8a34:	bd80      	pop	{r7, pc}
    8a36:	46c0      	nop			; (mov r8, r8)
    8a38:	00008a51 	.word	0x00008a51

00008a3c <TC7_Handler>:
    8a3c:	b580      	push	{r7, lr}
    8a3e:	af00      	add	r7, sp, #0
    8a40:	2004      	movs	r0, #4
    8a42:	4b02      	ldr	r3, [pc, #8]	; (8a4c <TC7_Handler+0x10>)
    8a44:	4798      	blx	r3
    8a46:	46bd      	mov	sp, r7
    8a48:	bd80      	pop	{r7, pc}
    8a4a:	46c0      	nop			; (mov r8, r8)
    8a4c:	00008a51 	.word	0x00008a51

00008a50 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    8a50:	b580      	push	{r7, lr}
    8a52:	b084      	sub	sp, #16
    8a54:	af00      	add	r7, sp, #0
    8a56:	1c02      	adds	r2, r0, #0
    8a58:	1dfb      	adds	r3, r7, #7
    8a5a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    8a5c:	1dfb      	adds	r3, r7, #7
    8a5e:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    8a60:	4b29      	ldr	r3, [pc, #164]	; (8b08 <_tc_interrupt_handler+0xb8>)
    8a62:	0092      	lsls	r2, r2, #2
    8a64:	58d3      	ldr	r3, [r2, r3]
    8a66:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    8a68:	68fb      	ldr	r3, [r7, #12]
    8a6a:	681b      	ldr	r3, [r3, #0]
    8a6c:	68db      	ldr	r3, [r3, #12]
    8a6e:	021b      	lsls	r3, r3, #8
    8a70:	0e1b      	lsrs	r3, r3, #24
    8a72:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    8a74:	68fa      	ldr	r2, [r7, #12]
    8a76:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    8a78:	4013      	ands	r3, r2
    8a7a:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    8a7c:	68fb      	ldr	r3, [r7, #12]
    8a7e:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    8a80:	1c3b      	adds	r3, r7, #0
    8a82:	330b      	adds	r3, #11
    8a84:	400a      	ands	r2, r1
    8a86:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    8a88:	1c3b      	adds	r3, r7, #0
    8a8a:	330b      	adds	r3, #11
    8a8c:	781a      	ldrb	r2, [r3, #0]
    8a8e:	2301      	movs	r3, #1
    8a90:	4013      	ands	r3, r2
    8a92:	d008      	beq.n	8aa6 <_tc_interrupt_handler+0x56>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    8a94:	68fb      	ldr	r3, [r7, #12]
    8a96:	689b      	ldr	r3, [r3, #8]
    8a98:	68fa      	ldr	r2, [r7, #12]
    8a9a:	1c10      	adds	r0, r2, #0
    8a9c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    8a9e:	68fb      	ldr	r3, [r7, #12]
    8aa0:	681b      	ldr	r3, [r3, #0]
    8aa2:	2201      	movs	r2, #1
    8aa4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    8aa6:	1c3b      	adds	r3, r7, #0
    8aa8:	330b      	adds	r3, #11
    8aaa:	781a      	ldrb	r2, [r3, #0]
    8aac:	2302      	movs	r3, #2
    8aae:	4013      	ands	r3, r2
    8ab0:	d008      	beq.n	8ac4 <_tc_interrupt_handler+0x74>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    8ab2:	68fb      	ldr	r3, [r7, #12]
    8ab4:	68db      	ldr	r3, [r3, #12]
    8ab6:	68fa      	ldr	r2, [r7, #12]
    8ab8:	1c10      	adds	r0, r2, #0
    8aba:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    8abc:	68fb      	ldr	r3, [r7, #12]
    8abe:	681b      	ldr	r3, [r3, #0]
    8ac0:	2202      	movs	r2, #2
    8ac2:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    8ac4:	1c3b      	adds	r3, r7, #0
    8ac6:	330b      	adds	r3, #11
    8ac8:	781a      	ldrb	r2, [r3, #0]
    8aca:	2310      	movs	r3, #16
    8acc:	4013      	ands	r3, r2
    8ace:	d008      	beq.n	8ae2 <_tc_interrupt_handler+0x92>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    8ad0:	68fb      	ldr	r3, [r7, #12]
    8ad2:	691b      	ldr	r3, [r3, #16]
    8ad4:	68fa      	ldr	r2, [r7, #12]
    8ad6:	1c10      	adds	r0, r2, #0
    8ad8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    8ada:	68fb      	ldr	r3, [r7, #12]
    8adc:	681b      	ldr	r3, [r3, #0]
    8ade:	2210      	movs	r2, #16
    8ae0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    8ae2:	1c3b      	adds	r3, r7, #0
    8ae4:	330b      	adds	r3, #11
    8ae6:	781a      	ldrb	r2, [r3, #0]
    8ae8:	2320      	movs	r3, #32
    8aea:	4013      	ands	r3, r2
    8aec:	d008      	beq.n	8b00 <_tc_interrupt_handler+0xb0>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    8aee:	68fb      	ldr	r3, [r7, #12]
    8af0:	695b      	ldr	r3, [r3, #20]
    8af2:	68fa      	ldr	r2, [r7, #12]
    8af4:	1c10      	adds	r0, r2, #0
    8af6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    8af8:	68fb      	ldr	r3, [r7, #12]
    8afa:	681b      	ldr	r3, [r3, #0]
    8afc:	2220      	movs	r2, #32
    8afe:	739a      	strb	r2, [r3, #14]
	}
}
    8b00:	46bd      	mov	sp, r7
    8b02:	b004      	add	sp, #16
    8b04:	bd80      	pop	{r7, pc}
    8b06:	46c0      	nop			; (mov r8, r8)
    8b08:	200010bc 	.word	0x200010bc

00008b0c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    8b0c:	b580      	push	{r7, lr}
    8b0e:	b082      	sub	sp, #8
    8b10:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    8b12:	4b16      	ldr	r3, [pc, #88]	; (8b6c <Reset_Handler+0x60>)
    8b14:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    8b16:	4b16      	ldr	r3, [pc, #88]	; (8b70 <Reset_Handler+0x64>)
    8b18:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    8b1a:	687a      	ldr	r2, [r7, #4]
    8b1c:	683b      	ldr	r3, [r7, #0]
    8b1e:	429a      	cmp	r2, r3
    8b20:	d00c      	beq.n	8b3c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    8b22:	e007      	b.n	8b34 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    8b24:	683b      	ldr	r3, [r7, #0]
    8b26:	1d1a      	adds	r2, r3, #4
    8b28:	603a      	str	r2, [r7, #0]
    8b2a:	687a      	ldr	r2, [r7, #4]
    8b2c:	1d11      	adds	r1, r2, #4
    8b2e:	6079      	str	r1, [r7, #4]
    8b30:	6812      	ldr	r2, [r2, #0]
    8b32:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    8b34:	683a      	ldr	r2, [r7, #0]
    8b36:	4b0f      	ldr	r3, [pc, #60]	; (8b74 <Reset_Handler+0x68>)
    8b38:	429a      	cmp	r2, r3
    8b3a:	d3f3      	bcc.n	8b24 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    8b3c:	4b0e      	ldr	r3, [pc, #56]	; (8b78 <Reset_Handler+0x6c>)
    8b3e:	603b      	str	r3, [r7, #0]
    8b40:	e004      	b.n	8b4c <Reset_Handler+0x40>
                *pDest++ = 0;
    8b42:	683b      	ldr	r3, [r7, #0]
    8b44:	1d1a      	adds	r2, r3, #4
    8b46:	603a      	str	r2, [r7, #0]
    8b48:	2200      	movs	r2, #0
    8b4a:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    8b4c:	683a      	ldr	r2, [r7, #0]
    8b4e:	4b0b      	ldr	r3, [pc, #44]	; (8b7c <Reset_Handler+0x70>)
    8b50:	429a      	cmp	r2, r3
    8b52:	d3f6      	bcc.n	8b42 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    8b54:	4b0a      	ldr	r3, [pc, #40]	; (8b80 <Reset_Handler+0x74>)
    8b56:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8b58:	4b0a      	ldr	r3, [pc, #40]	; (8b84 <Reset_Handler+0x78>)
    8b5a:	687a      	ldr	r2, [r7, #4]
    8b5c:	217f      	movs	r1, #127	; 0x7f
    8b5e:	438a      	bics	r2, r1
    8b60:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    8b62:	4b09      	ldr	r3, [pc, #36]	; (8b88 <Reset_Handler+0x7c>)
    8b64:	4798      	blx	r3

        /* Branch to main function */
        main();
    8b66:	4b09      	ldr	r3, [pc, #36]	; (8b8c <Reset_Handler+0x80>)
    8b68:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    8b6a:	e7fe      	b.n	8b6a <Reset_Handler+0x5e>
    8b6c:	00010ca4 	.word	0x00010ca4
    8b70:	20000000 	.word	0x20000000
    8b74:	20000900 	.word	0x20000900
    8b78:	20000900 	.word	0x20000900
    8b7c:	200010e0 	.word	0x200010e0
    8b80:	00000000 	.word	0x00000000
    8b84:	e000ed00 	.word	0xe000ed00
    8b88:	0000b029 	.word	0x0000b029
    8b8c:	000096f1 	.word	0x000096f1

00008b90 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8b90:	b580      	push	{r7, lr}
    8b92:	af00      	add	r7, sp, #0
        while (1) {
        }
    8b94:	e7fe      	b.n	8b94 <Dummy_Handler+0x4>
    8b96:	46c0      	nop			; (mov r8, r8)

00008b98 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    8b98:	b580      	push	{r7, lr}
    8b9a:	b086      	sub	sp, #24
    8b9c:	af00      	add	r7, sp, #0
    8b9e:	60f8      	str	r0, [r7, #12]
    8ba0:	60b9      	str	r1, [r7, #8]
    8ba2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    8ba4:	2300      	movs	r3, #0
    8ba6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    8ba8:	68fb      	ldr	r3, [r7, #12]
    8baa:	2b00      	cmp	r3, #0
    8bac:	d002      	beq.n	8bb4 <_read+0x1c>
		return -1;
    8bae:	2301      	movs	r3, #1
    8bb0:	425b      	negs	r3, r3
    8bb2:	e015      	b.n	8be0 <_read+0x48>
	}

	for (; len > 0; --len) {
    8bb4:	e010      	b.n	8bd8 <_read+0x40>
		ptr_get(stdio_base, ptr);
    8bb6:	4b0c      	ldr	r3, [pc, #48]	; (8be8 <_read+0x50>)
    8bb8:	681a      	ldr	r2, [r3, #0]
    8bba:	4b0c      	ldr	r3, [pc, #48]	; (8bec <_read+0x54>)
    8bbc:	6819      	ldr	r1, [r3, #0]
    8bbe:	68bb      	ldr	r3, [r7, #8]
    8bc0:	1c08      	adds	r0, r1, #0
    8bc2:	1c19      	adds	r1, r3, #0
    8bc4:	4790      	blx	r2
		ptr++;
    8bc6:	68bb      	ldr	r3, [r7, #8]
    8bc8:	3301      	adds	r3, #1
    8bca:	60bb      	str	r3, [r7, #8]
		nChars++;
    8bcc:	697b      	ldr	r3, [r7, #20]
    8bce:	3301      	adds	r3, #1
    8bd0:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    8bd2:	687b      	ldr	r3, [r7, #4]
    8bd4:	3b01      	subs	r3, #1
    8bd6:	607b      	str	r3, [r7, #4]
    8bd8:	687b      	ldr	r3, [r7, #4]
    8bda:	2b00      	cmp	r3, #0
    8bdc:	dceb      	bgt.n	8bb6 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    8bde:	697b      	ldr	r3, [r7, #20]
}
    8be0:	1c18      	adds	r0, r3, #0
    8be2:	46bd      	mov	sp, r7
    8be4:	b006      	add	sp, #24
    8be6:	bd80      	pop	{r7, pc}
    8be8:	200010d0 	.word	0x200010d0
    8bec:	200010d8 	.word	0x200010d8

00008bf0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    8bf0:	b580      	push	{r7, lr}
    8bf2:	b086      	sub	sp, #24
    8bf4:	af00      	add	r7, sp, #0
    8bf6:	60f8      	str	r0, [r7, #12]
    8bf8:	60b9      	str	r1, [r7, #8]
    8bfa:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    8bfc:	2300      	movs	r3, #0
    8bfe:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    8c00:	68fb      	ldr	r3, [r7, #12]
    8c02:	2b01      	cmp	r3, #1
    8c04:	d008      	beq.n	8c18 <_write+0x28>
    8c06:	68fb      	ldr	r3, [r7, #12]
    8c08:	2b02      	cmp	r3, #2
    8c0a:	d005      	beq.n	8c18 <_write+0x28>
    8c0c:	68fb      	ldr	r3, [r7, #12]
    8c0e:	2b03      	cmp	r3, #3
    8c10:	d002      	beq.n	8c18 <_write+0x28>
		return -1;
    8c12:	2301      	movs	r3, #1
    8c14:	425b      	negs	r3, r3
    8c16:	e01b      	b.n	8c50 <_write+0x60>
	}

	for (; len != 0; --len) {
    8c18:	e016      	b.n	8c48 <_write+0x58>
		if (ptr_put(stdio_base, *ptr++) < 0) {
    8c1a:	4b0f      	ldr	r3, [pc, #60]	; (8c58 <_write+0x68>)
    8c1c:	681a      	ldr	r2, [r3, #0]
    8c1e:	4b0f      	ldr	r3, [pc, #60]	; (8c5c <_write+0x6c>)
    8c20:	6819      	ldr	r1, [r3, #0]
    8c22:	68bb      	ldr	r3, [r7, #8]
    8c24:	1c58      	adds	r0, r3, #1
    8c26:	60b8      	str	r0, [r7, #8]
    8c28:	781b      	ldrb	r3, [r3, #0]
    8c2a:	1c08      	adds	r0, r1, #0
    8c2c:	1c19      	adds	r1, r3, #0
    8c2e:	4790      	blx	r2
    8c30:	1c03      	adds	r3, r0, #0
    8c32:	2b00      	cmp	r3, #0
    8c34:	da02      	bge.n	8c3c <_write+0x4c>
			return -1;
    8c36:	2301      	movs	r3, #1
    8c38:	425b      	negs	r3, r3
    8c3a:	e009      	b.n	8c50 <_write+0x60>
		}
		++nChars;
    8c3c:	697b      	ldr	r3, [r7, #20]
    8c3e:	3301      	adds	r3, #1
    8c40:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    8c42:	687b      	ldr	r3, [r7, #4]
    8c44:	3b01      	subs	r3, #1
    8c46:	607b      	str	r3, [r7, #4]
    8c48:	687b      	ldr	r3, [r7, #4]
    8c4a:	2b00      	cmp	r3, #0
    8c4c:	d1e5      	bne.n	8c1a <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    8c4e:	697b      	ldr	r3, [r7, #20]
}
    8c50:	1c18      	adds	r0, r3, #0
    8c52:	46bd      	mov	sp, r7
    8c54:	b006      	add	sp, #24
    8c56:	bd80      	pop	{r7, pc}
    8c58:	200010d4 	.word	0x200010d4
    8c5c:	200010d8 	.word	0x200010d8

00008c60 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8c60:	b580      	push	{r7, lr}
    8c62:	b084      	sub	sp, #16
    8c64:	af00      	add	r7, sp, #0
    8c66:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8c68:	4b0a      	ldr	r3, [pc, #40]	; (8c94 <_sbrk+0x34>)
    8c6a:	681b      	ldr	r3, [r3, #0]
    8c6c:	2b00      	cmp	r3, #0
    8c6e:	d102      	bne.n	8c76 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    8c70:	4b08      	ldr	r3, [pc, #32]	; (8c94 <_sbrk+0x34>)
    8c72:	4a09      	ldr	r2, [pc, #36]	; (8c98 <_sbrk+0x38>)
    8c74:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    8c76:	4b07      	ldr	r3, [pc, #28]	; (8c94 <_sbrk+0x34>)
    8c78:	681b      	ldr	r3, [r3, #0]
    8c7a:	60fb      	str	r3, [r7, #12]

	heap += incr;
    8c7c:	4b05      	ldr	r3, [pc, #20]	; (8c94 <_sbrk+0x34>)
    8c7e:	681a      	ldr	r2, [r3, #0]
    8c80:	687b      	ldr	r3, [r7, #4]
    8c82:	18d2      	adds	r2, r2, r3
    8c84:	4b03      	ldr	r3, [pc, #12]	; (8c94 <_sbrk+0x34>)
    8c86:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    8c88:	68fb      	ldr	r3, [r7, #12]
}
    8c8a:	1c18      	adds	r0, r3, #0
    8c8c:	46bd      	mov	sp, r7
    8c8e:	b004      	add	sp, #16
    8c90:	bd80      	pop	{r7, pc}
    8c92:	46c0      	nop			; (mov r8, r8)
    8c94:	2000097c 	.word	0x2000097c
    8c98:	200030e0 	.word	0x200030e0

00008c9c <_close>:
{
	return -1;
}

extern int _close(int file)
{
    8c9c:	b580      	push	{r7, lr}
    8c9e:	b082      	sub	sp, #8
    8ca0:	af00      	add	r7, sp, #0
    8ca2:	6078      	str	r0, [r7, #4]
	return -1;
    8ca4:	2301      	movs	r3, #1
    8ca6:	425b      	negs	r3, r3
}
    8ca8:	1c18      	adds	r0, r3, #0
    8caa:	46bd      	mov	sp, r7
    8cac:	b002      	add	sp, #8
    8cae:	bd80      	pop	{r7, pc}

00008cb0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    8cb0:	b580      	push	{r7, lr}
    8cb2:	b082      	sub	sp, #8
    8cb4:	af00      	add	r7, sp, #0
    8cb6:	6078      	str	r0, [r7, #4]
    8cb8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    8cba:	683b      	ldr	r3, [r7, #0]
    8cbc:	2280      	movs	r2, #128	; 0x80
    8cbe:	0192      	lsls	r2, r2, #6
    8cc0:	605a      	str	r2, [r3, #4]

	return 0;
    8cc2:	2300      	movs	r3, #0
}
    8cc4:	1c18      	adds	r0, r3, #0
    8cc6:	46bd      	mov	sp, r7
    8cc8:	b002      	add	sp, #8
    8cca:	bd80      	pop	{r7, pc}

00008ccc <_isatty>:

extern int _isatty(int file)
{
    8ccc:	b580      	push	{r7, lr}
    8cce:	b082      	sub	sp, #8
    8cd0:	af00      	add	r7, sp, #0
    8cd2:	6078      	str	r0, [r7, #4]
	return 1;
    8cd4:	2301      	movs	r3, #1
}
    8cd6:	1c18      	adds	r0, r3, #0
    8cd8:	46bd      	mov	sp, r7
    8cda:	b002      	add	sp, #8
    8cdc:	bd80      	pop	{r7, pc}
    8cde:	46c0      	nop			; (mov r8, r8)

00008ce0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    8ce0:	b580      	push	{r7, lr}
    8ce2:	b084      	sub	sp, #16
    8ce4:	af00      	add	r7, sp, #0
    8ce6:	60f8      	str	r0, [r7, #12]
    8ce8:	60b9      	str	r1, [r7, #8]
    8cea:	607a      	str	r2, [r7, #4]
	return 0;
    8cec:	2300      	movs	r3, #0
}
    8cee:	1c18      	adds	r0, r3, #0
    8cf0:	46bd      	mov	sp, r7
    8cf2:	b004      	add	sp, #16
    8cf4:	bd80      	pop	{r7, pc}
    8cf6:	46c0      	nop			; (mov r8, r8)

00008cf8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8cf8:	b580      	push	{r7, lr}
    8cfa:	b084      	sub	sp, #16
    8cfc:	af00      	add	r7, sp, #0
    8cfe:	1c02      	adds	r2, r0, #0
    8d00:	1dfb      	adds	r3, r7, #7
    8d02:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8d04:	1c3b      	adds	r3, r7, #0
    8d06:	330f      	adds	r3, #15
    8d08:	1dfa      	adds	r2, r7, #7
    8d0a:	7812      	ldrb	r2, [r2, #0]
    8d0c:	09d2      	lsrs	r2, r2, #7
    8d0e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8d10:	1c3b      	adds	r3, r7, #0
    8d12:	330e      	adds	r3, #14
    8d14:	1dfa      	adds	r2, r7, #7
    8d16:	7812      	ldrb	r2, [r2, #0]
    8d18:	0952      	lsrs	r2, r2, #5
    8d1a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8d1c:	4b0d      	ldr	r3, [pc, #52]	; (8d54 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8d1e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    8d20:	1c3b      	adds	r3, r7, #0
    8d22:	330f      	adds	r3, #15
    8d24:	781b      	ldrb	r3, [r3, #0]
    8d26:	2b00      	cmp	r3, #0
    8d28:	d10e      	bne.n	8d48 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    8d2a:	1c3b      	adds	r3, r7, #0
    8d2c:	330f      	adds	r3, #15
    8d2e:	781b      	ldrb	r3, [r3, #0]
    8d30:	009b      	lsls	r3, r3, #2
    8d32:	2210      	movs	r2, #16
    8d34:	19d2      	adds	r2, r2, r7
    8d36:	18d3      	adds	r3, r2, r3
    8d38:	3b08      	subs	r3, #8
    8d3a:	681a      	ldr	r2, [r3, #0]
    8d3c:	1c3b      	adds	r3, r7, #0
    8d3e:	330e      	adds	r3, #14
    8d40:	781b      	ldrb	r3, [r3, #0]
    8d42:	01db      	lsls	r3, r3, #7
    8d44:	18d3      	adds	r3, r2, r3
    8d46:	e000      	b.n	8d4a <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    8d48:	2300      	movs	r3, #0
	}
}
    8d4a:	1c18      	adds	r0, r3, #0
    8d4c:	46bd      	mov	sp, r7
    8d4e:	b004      	add	sp, #16
    8d50:	bd80      	pop	{r7, pc}
    8d52:	46c0      	nop			; (mov r8, r8)
    8d54:	41004400 	.word	0x41004400

00008d58 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8d58:	b580      	push	{r7, lr}
    8d5a:	b082      	sub	sp, #8
    8d5c:	af00      	add	r7, sp, #0
    8d5e:	1c02      	adds	r2, r0, #0
    8d60:	1dfb      	adds	r3, r7, #7
    8d62:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8d64:	1dfb      	adds	r3, r7, #7
    8d66:	781b      	ldrb	r3, [r3, #0]
    8d68:	1c18      	adds	r0, r3, #0
    8d6a:	4b03      	ldr	r3, [pc, #12]	; (8d78 <port_get_group_from_gpio_pin+0x20>)
    8d6c:	4798      	blx	r3
    8d6e:	1c03      	adds	r3, r0, #0
}
    8d70:	1c18      	adds	r0, r3, #0
    8d72:	46bd      	mov	sp, r7
    8d74:	b002      	add	sp, #8
    8d76:	bd80      	pop	{r7, pc}
    8d78:	00008cf9 	.word	0x00008cf9

00008d7c <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    8d7c:	b580      	push	{r7, lr}
    8d7e:	b084      	sub	sp, #16
    8d80:	af00      	add	r7, sp, #0
    8d82:	1c02      	adds	r2, r0, #0
    8d84:	1dfb      	adds	r3, r7, #7
    8d86:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8d88:	1dfb      	adds	r3, r7, #7
    8d8a:	781b      	ldrb	r3, [r3, #0]
    8d8c:	1c18      	adds	r0, r3, #0
    8d8e:	4b0c      	ldr	r3, [pc, #48]	; (8dc0 <port_pin_get_output_level+0x44>)
    8d90:	4798      	blx	r3
    8d92:	1c03      	adds	r3, r0, #0
    8d94:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8d96:	1dfb      	adds	r3, r7, #7
    8d98:	781a      	ldrb	r2, [r3, #0]
    8d9a:	231f      	movs	r3, #31
    8d9c:	4013      	ands	r3, r2
    8d9e:	2201      	movs	r2, #1
    8da0:	1c11      	adds	r1, r2, #0
    8da2:	4099      	lsls	r1, r3
    8da4:	1c0b      	adds	r3, r1, #0
    8da6:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    8da8:	68fb      	ldr	r3, [r7, #12]
    8daa:	691b      	ldr	r3, [r3, #16]
    8dac:	68ba      	ldr	r2, [r7, #8]
    8dae:	4013      	ands	r3, r2
    8db0:	1e5a      	subs	r2, r3, #1
    8db2:	4193      	sbcs	r3, r2
    8db4:	b2db      	uxtb	r3, r3
}
    8db6:	1c18      	adds	r0, r3, #0
    8db8:	46bd      	mov	sp, r7
    8dba:	b004      	add	sp, #16
    8dbc:	bd80      	pop	{r7, pc}
    8dbe:	46c0      	nop			; (mov r8, r8)
    8dc0:	00008d59 	.word	0x00008d59

00008dc4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    8dc4:	b580      	push	{r7, lr}
    8dc6:	b084      	sub	sp, #16
    8dc8:	af00      	add	r7, sp, #0
    8dca:	1c0a      	adds	r2, r1, #0
    8dcc:	1dfb      	adds	r3, r7, #7
    8dce:	1c01      	adds	r1, r0, #0
    8dd0:	7019      	strb	r1, [r3, #0]
    8dd2:	1dbb      	adds	r3, r7, #6
    8dd4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8dd6:	1dfb      	adds	r3, r7, #7
    8dd8:	781b      	ldrb	r3, [r3, #0]
    8dda:	1c18      	adds	r0, r3, #0
    8ddc:	4b0d      	ldr	r3, [pc, #52]	; (8e14 <port_pin_set_output_level+0x50>)
    8dde:	4798      	blx	r3
    8de0:	1c03      	adds	r3, r0, #0
    8de2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8de4:	1dfb      	adds	r3, r7, #7
    8de6:	781a      	ldrb	r2, [r3, #0]
    8de8:	231f      	movs	r3, #31
    8dea:	4013      	ands	r3, r2
    8dec:	2201      	movs	r2, #1
    8dee:	1c11      	adds	r1, r2, #0
    8df0:	4099      	lsls	r1, r3
    8df2:	1c0b      	adds	r3, r1, #0
    8df4:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    8df6:	1dbb      	adds	r3, r7, #6
    8df8:	781b      	ldrb	r3, [r3, #0]
    8dfa:	2b00      	cmp	r3, #0
    8dfc:	d003      	beq.n	8e06 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    8dfe:	68fb      	ldr	r3, [r7, #12]
    8e00:	68ba      	ldr	r2, [r7, #8]
    8e02:	619a      	str	r2, [r3, #24]
    8e04:	e002      	b.n	8e0c <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8e06:	68fb      	ldr	r3, [r7, #12]
    8e08:	68ba      	ldr	r2, [r7, #8]
    8e0a:	615a      	str	r2, [r3, #20]
	}
}
    8e0c:	46bd      	mov	sp, r7
    8e0e:	b004      	add	sp, #16
    8e10:	bd80      	pop	{r7, pc}
    8e12:	46c0      	nop			; (mov r8, r8)
    8e14:	00008d59 	.word	0x00008d59

00008e18 <m2m_wifi_socket_handler>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void m2m_wifi_socket_handler(SOCKET sock, uint8 u8Msg, void *pvMsg)
{
    8e18:	b590      	push	{r4, r7, lr}
    8e1a:	b089      	sub	sp, #36	; 0x24
    8e1c:	af00      	add	r7, sp, #0
    8e1e:	603a      	str	r2, [r7, #0]
    8e20:	1dfb      	adds	r3, r7, #7
    8e22:	1c02      	adds	r2, r0, #0
    8e24:	701a      	strb	r2, [r3, #0]
    8e26:	1dbb      	adds	r3, r7, #6
    8e28:	1c0a      	adds	r2, r1, #0
    8e2a:	701a      	strb	r2, [r3, #0]
	/* Check for socket event on RX socket. */
	if (sock == rx_socket) {
    8e2c:	4b41      	ldr	r3, [pc, #260]	; (8f34 <m2m_wifi_socket_handler+0x11c>)
    8e2e:	781b      	ldrb	r3, [r3, #0]
    8e30:	1dfa      	adds	r2, r7, #7
    8e32:	7812      	ldrb	r2, [r2, #0]
    8e34:	b252      	sxtb	r2, r2
    8e36:	b25b      	sxtb	r3, r3
    8e38:	429a      	cmp	r2, r3
    8e3a:	d000      	beq.n	8e3e <m2m_wifi_socket_handler+0x26>
    8e3c:	e077      	b.n	8f2e <m2m_wifi_socket_handler+0x116>
		if (u8Msg == SOCKET_MSG_BIND) {
    8e3e:	1dbb      	adds	r3, r7, #6
    8e40:	781b      	ldrb	r3, [r3, #0]
    8e42:	2b01      	cmp	r3, #1
    8e44:	d119      	bne.n	8e7a <m2m_wifi_socket_handler+0x62>
			tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg *)pvMsg;
    8e46:	683b      	ldr	r3, [r7, #0]
    8e48:	61fb      	str	r3, [r7, #28]
			if (pstrBind && pstrBind->status == 0) {
    8e4a:	69fb      	ldr	r3, [r7, #28]
    8e4c:	2b00      	cmp	r3, #0
    8e4e:	d00f      	beq.n	8e70 <m2m_wifi_socket_handler+0x58>
    8e50:	69fb      	ldr	r3, [r7, #28]
    8e52:	781b      	ldrb	r3, [r3, #0]
    8e54:	2b00      	cmp	r3, #0
    8e56:	d10b      	bne.n	8e70 <m2m_wifi_socket_handler+0x58>
				/* Prepare next buffer reception. */
				recvfrom(sock, gau8SocketTestBuffer, TEST_BUFFER_SIZE, 0);
    8e58:	1dfb      	adds	r3, r7, #7
    8e5a:	2100      	movs	r1, #0
    8e5c:	5659      	ldrsb	r1, [r3, r1]
    8e5e:	4a36      	ldr	r2, [pc, #216]	; (8f38 <m2m_wifi_socket_handler+0x120>)
    8e60:	4b36      	ldr	r3, [pc, #216]	; (8f3c <m2m_wifi_socket_handler+0x124>)
    8e62:	1c08      	adds	r0, r1, #0
    8e64:	1c11      	adds	r1, r2, #0
    8e66:	1c1a      	adds	r2, r3, #0
    8e68:	2300      	movs	r3, #0
    8e6a:	4c35      	ldr	r4, [pc, #212]	; (8f40 <m2m_wifi_socket_handler+0x128>)
    8e6c:	47a0      	blx	r4
    8e6e:	e05e      	b.n	8f2e <m2m_wifi_socket_handler+0x116>
			}
			else {
				puts("m2m_wifi_socket_handler: bind error!");
    8e70:	4b34      	ldr	r3, [pc, #208]	; (8f44 <m2m_wifi_socket_handler+0x12c>)
    8e72:	1c18      	adds	r0, r3, #0
    8e74:	4b34      	ldr	r3, [pc, #208]	; (8f48 <m2m_wifi_socket_handler+0x130>)
    8e76:	4798      	blx	r3
    8e78:	e059      	b.n	8f2e <m2m_wifi_socket_handler+0x116>
			}
		}
		else if (u8Msg == SOCKET_MSG_RECVFROM) {
    8e7a:	1dbb      	adds	r3, r7, #6
    8e7c:	781b      	ldrb	r3, [r3, #0]
    8e7e:	2b09      	cmp	r3, #9
    8e80:	d155      	bne.n	8f2e <m2m_wifi_socket_handler+0x116>
			tstrSocketRecvMsg *pstrRx = (tstrSocketRecvMsg *)pvMsg;
    8e82:	683b      	ldr	r3, [r7, #0]
    8e84:	61bb      	str	r3, [r7, #24]
			if (pstrRx->pu8Buffer && pstrRx->s16BufferSize) {
    8e86:	69bb      	ldr	r3, [r7, #24]
    8e88:	681b      	ldr	r3, [r3, #0]
    8e8a:	2b00      	cmp	r3, #0
    8e8c:	d03e      	beq.n	8f0c <m2m_wifi_socket_handler+0xf4>
    8e8e:	69bb      	ldr	r3, [r7, #24]
    8e90:	889b      	ldrh	r3, [r3, #4]
    8e92:	2b00      	cmp	r3, #0
    8e94:	d03a      	beq.n	8f0c <m2m_wifi_socket_handler+0xf4>

				/* Check for server report and update led status if necessary. */
				t_msg_temp_report report;
				memcpy(&report, pstrRx->pu8Buffer, sizeof(t_msg_temp_report));
    8e96:	69bb      	ldr	r3, [r7, #24]
    8e98:	681b      	ldr	r3, [r3, #0]
    8e9a:	1c3a      	adds	r2, r7, #0
    8e9c:	3208      	adds	r2, #8
    8e9e:	1c10      	adds	r0, r2, #0
    8ea0:	1c19      	adds	r1, r3, #0
    8ea2:	2210      	movs	r2, #16
    8ea4:	4b29      	ldr	r3, [pc, #164]	; (8f4c <m2m_wifi_socket_handler+0x134>)
    8ea6:	4798      	blx	r3
				if (report.id0 == 0 && report.id1 == 2 && (strcmp((char *)report.name, DEMO_PRODUCT_NAME) == 0)) {
    8ea8:	1c3b      	adds	r3, r7, #0
    8eaa:	3308      	adds	r3, #8
    8eac:	781b      	ldrb	r3, [r3, #0]
    8eae:	2b00      	cmp	r3, #0
    8eb0:	d120      	bne.n	8ef4 <m2m_wifi_socket_handler+0xdc>
    8eb2:	1c3b      	adds	r3, r7, #0
    8eb4:	3308      	adds	r3, #8
    8eb6:	785b      	ldrb	r3, [r3, #1]
    8eb8:	2b02      	cmp	r3, #2
    8eba:	d11b      	bne.n	8ef4 <m2m_wifi_socket_handler+0xdc>
    8ebc:	1c3b      	adds	r3, r7, #0
    8ebe:	3308      	adds	r3, #8
    8ec0:	1c9a      	adds	r2, r3, #2
    8ec2:	4b23      	ldr	r3, [pc, #140]	; (8f50 <m2m_wifi_socket_handler+0x138>)
    8ec4:	1c10      	adds	r0, r2, #0
    8ec6:	1c19      	adds	r1, r3, #0
    8ec8:	4b22      	ldr	r3, [pc, #136]	; (8f54 <m2m_wifi_socket_handler+0x13c>)
    8eca:	4798      	blx	r3
    8ecc:	1c03      	adds	r3, r0, #0
    8ece:	2b00      	cmp	r3, #0
    8ed0:	d110      	bne.n	8ef4 <m2m_wifi_socket_handler+0xdc>
					puts("wifi_nc_data_callback: received app message");
    8ed2:	4b21      	ldr	r3, [pc, #132]	; (8f58 <m2m_wifi_socket_handler+0x140>)
    8ed4:	1c18      	adds	r0, r3, #0
    8ed6:	4b1c      	ldr	r3, [pc, #112]	; (8f48 <m2m_wifi_socket_handler+0x130>)
    8ed8:	4798      	blx	r3
					//port_pin_set_output_level(LED_0_PIN, report.led ? true : false);
					port_pin_set_output_level(LED_0_PIN, false);
    8eda:	203e      	movs	r0, #62	; 0x3e
    8edc:	2100      	movs	r1, #0
    8ede:	4b1f      	ldr	r3, [pc, #124]	; (8f5c <m2m_wifi_socket_handler+0x144>)
    8ee0:	4798      	blx	r3
					port_pin_set_output_level(DOOR_PIN, true);
    8ee2:	2037      	movs	r0, #55	; 0x37
    8ee4:	2101      	movs	r1, #1
    8ee6:	4b1d      	ldr	r3, [pc, #116]	; (8f5c <m2m_wifi_socket_handler+0x144>)
    8ee8:	4798      	blx	r3
					door_timer_start();
    8eea:	4b1d      	ldr	r3, [pc, #116]	; (8f60 <m2m_wifi_socket_handler+0x148>)
    8eec:	4798      	blx	r3
					delay = 0;
    8eee:	4b1d      	ldr	r3, [pc, #116]	; (8f64 <m2m_wifi_socket_handler+0x14c>)
    8ef0:	2200      	movs	r2, #0
    8ef2:	601a      	str	r2, [r3, #0]
				}

				/* Prepare next buffer reception. */
				recvfrom(sock, gau8SocketTestBuffer, TEST_BUFFER_SIZE, 0);
    8ef4:	1dfb      	adds	r3, r7, #7
    8ef6:	2100      	movs	r1, #0
    8ef8:	5659      	ldrsb	r1, [r3, r1]
    8efa:	4a0f      	ldr	r2, [pc, #60]	; (8f38 <m2m_wifi_socket_handler+0x120>)
    8efc:	4b0f      	ldr	r3, [pc, #60]	; (8f3c <m2m_wifi_socket_handler+0x124>)
    8efe:	1c08      	adds	r0, r1, #0
    8f00:	1c11      	adds	r1, r2, #0
    8f02:	1c1a      	adds	r2, r3, #0
    8f04:	2300      	movs	r3, #0
    8f06:	4c0e      	ldr	r4, [pc, #56]	; (8f40 <m2m_wifi_socket_handler+0x128>)
    8f08:	47a0      	blx	r4
				puts("m2m_wifi_socket_handler: bind error!");
			}
		}
		else if (u8Msg == SOCKET_MSG_RECVFROM) {
			tstrSocketRecvMsg *pstrRx = (tstrSocketRecvMsg *)pvMsg;
			if (pstrRx->pu8Buffer && pstrRx->s16BufferSize) {
    8f0a:	e010      	b.n	8f2e <m2m_wifi_socket_handler+0x116>

				/* Prepare next buffer reception. */
				recvfrom(sock, gau8SocketTestBuffer, TEST_BUFFER_SIZE, 0);
			}
			else {
				if (pstrRx->s16BufferSize == SOCK_ERR_TIMEOUT) {
    8f0c:	69bb      	ldr	r3, [r7, #24]
    8f0e:	889b      	ldrh	r3, [r3, #4]
    8f10:	b21b      	sxth	r3, r3
    8f12:	1c1a      	adds	r2, r3, #0
    8f14:	320d      	adds	r2, #13
    8f16:	d10a      	bne.n	8f2e <m2m_wifi_socket_handler+0x116>
					/* Prepare next buffer reception. */
					recvfrom(sock, gau8SocketTestBuffer, TEST_BUFFER_SIZE, 0);
    8f18:	1dfb      	adds	r3, r7, #7
    8f1a:	2100      	movs	r1, #0
    8f1c:	5659      	ldrsb	r1, [r3, r1]
    8f1e:	4a06      	ldr	r2, [pc, #24]	; (8f38 <m2m_wifi_socket_handler+0x120>)
    8f20:	4b06      	ldr	r3, [pc, #24]	; (8f3c <m2m_wifi_socket_handler+0x124>)
    8f22:	1c08      	adds	r0, r1, #0
    8f24:	1c11      	adds	r1, r2, #0
    8f26:	1c1a      	adds	r2, r3, #0
    8f28:	2300      	movs	r3, #0
    8f2a:	4c05      	ldr	r4, [pc, #20]	; (8f40 <m2m_wifi_socket_handler+0x128>)
    8f2c:	47a0      	blx	r4
				}
			}
		}
	}
}
    8f2e:	46bd      	mov	sp, r7
    8f30:	b009      	add	sp, #36	; 0x24
    8f32:	bd90      	pop	{r4, r7, pc}
    8f34:	20000038 	.word	0x20000038
    8f38:	20000980 	.word	0x20000980
    8f3c:	000005b4 	.word	0x000005b4
    8f40:	00005df5 	.word	0x00005df5
    8f44:	0001078c 	.word	0x0001078c
    8f48:	0000b131 	.word	0x0000b131
    8f4c:	0000b075 	.word	0x0000b075
    8f50:	000107b4 	.word	0x000107b4
    8f54:	0000b23d 	.word	0x0000b23d
    8f58:	000107bc 	.word	0x000107bc
    8f5c:	00008dc5 	.word	0x00008dc5
    8f60:	000021ad 	.word	0x000021ad
    8f64:	20000f38 	.word	0x20000f38

00008f68 <m2m_wifi_state>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void m2m_wifi_state(uint8 u8MsgType, void *pvMsg)
{
    8f68:	b590      	push	{r4, r7, lr}
    8f6a:	b087      	sub	sp, #28
    8f6c:	af02      	add	r7, sp, #8
    8f6e:	1c02      	adds	r2, r0, #0
    8f70:	6039      	str	r1, [r7, #0]
    8f72:	1dfb      	adds	r3, r7, #7
    8f74:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
    8f76:	1dfb      	adds	r3, r7, #7
    8f78:	781b      	ldrb	r3, [r3, #0]
    8f7a:	2b2a      	cmp	r3, #42	; 0x2a
    8f7c:	d002      	beq.n	8f84 <m2m_wifi_state+0x1c>
    8f7e:	2b35      	cmp	r3, #53	; 0x35
    8f80:	d023      	beq.n	8fca <m2m_wifi_state+0x62>
			printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\n",
					pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
			break;
		}
	default: {
			break;
    8f82:	e03e      	b.n	9002 <m2m_wifi_state+0x9a>
 */
static void m2m_wifi_state(uint8 u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
		case M2M_WIFI_RESP_CON_STATE_CHANGED: {
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged*) pvMsg;
    8f84:	683b      	ldr	r3, [r7, #0]
    8f86:	60fb      	str	r3, [r7, #12]
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    8f88:	68fb      	ldr	r3, [r7, #12]
    8f8a:	781b      	ldrb	r3, [r3, #0]
    8f8c:	2b01      	cmp	r3, #1
    8f8e:	d106      	bne.n	8f9e <m2m_wifi_state+0x36>
				puts("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED");
    8f90:	4b1d      	ldr	r3, [pc, #116]	; (9008 <m2m_wifi_state+0xa0>)
    8f92:	1c18      	adds	r0, r3, #0
    8f94:	4b1d      	ldr	r3, [pc, #116]	; (900c <m2m_wifi_state+0xa4>)
    8f96:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
    8f98:	4b1d      	ldr	r3, [pc, #116]	; (9010 <m2m_wifi_state+0xa8>)
    8f9a:	4798      	blx	r3
    8f9c:	e014      	b.n	8fc8 <m2m_wifi_state+0x60>
			}
			else if(pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    8f9e:	68fb      	ldr	r3, [r7, #12]
    8fa0:	781b      	ldrb	r3, [r3, #0]
    8fa2:	2b00      	cmp	r3, #0
    8fa4:	d110      	bne.n	8fc8 <m2m_wifi_state+0x60>
				puts("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED");
    8fa6:	4b1b      	ldr	r3, [pc, #108]	; (9014 <m2m_wifi_state+0xac>)
    8fa8:	1c18      	adds	r0, r3, #0
    8faa:	4b18      	ldr	r3, [pc, #96]	; (900c <m2m_wifi_state+0xa4>)
    8fac:	4798      	blx	r3
				wifi_connected = 0;
    8fae:	4b1a      	ldr	r3, [pc, #104]	; (9018 <m2m_wifi_state+0xb0>)
    8fb0:	2200      	movs	r2, #0
    8fb2:	701a      	strb	r2, [r3, #0]
				m2m_wifi_connect((char *)DEMO_WLAN_SSID, sizeof(DEMO_WLAN_SSID),
    8fb4:	4a19      	ldr	r2, [pc, #100]	; (901c <m2m_wifi_state+0xb4>)
    8fb6:	4b1a      	ldr	r3, [pc, #104]	; (9020 <m2m_wifi_state+0xb8>)
    8fb8:	21ff      	movs	r1, #255	; 0xff
    8fba:	9100      	str	r1, [sp, #0]
    8fbc:	1c10      	adds	r0, r2, #0
    8fbe:	2110      	movs	r1, #16
    8fc0:	2202      	movs	r2, #2
    8fc2:	4c18      	ldr	r4, [pc, #96]	; (9024 <m2m_wifi_state+0xbc>)
    8fc4:	47a0      	blx	r4
						DEMO_WLAN_AUTH, (char *)DEMO_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
			break;
    8fc6:	e01c      	b.n	9002 <m2m_wifi_state+0x9a>
    8fc8:	e01b      	b.n	9002 <m2m_wifi_state+0x9a>
		}
		case M2M_WIFI_REQ_DHCP_CONF: {
			uint8 *pu8IPAddress = (uint8*) pvMsg;
    8fca:	683b      	ldr	r3, [r7, #0]
    8fcc:	60bb      	str	r3, [r7, #8]
			wifi_connected = 1;
    8fce:	4b12      	ldr	r3, [pc, #72]	; (9018 <m2m_wifi_state+0xb0>)
    8fd0:	2201      	movs	r2, #1
    8fd2:	701a      	strb	r2, [r3, #0]
			/* Turn LED0 on to declare that IP address received. */
			port_pin_set_output_level(LED_0_PIN, false);
    8fd4:	203e      	movs	r0, #62	; 0x3e
    8fd6:	2100      	movs	r1, #0
    8fd8:	4b13      	ldr	r3, [pc, #76]	; (9028 <m2m_wifi_state+0xc0>)
    8fda:	4798      	blx	r3
			printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\n",
					pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    8fdc:	68bb      	ldr	r3, [r7, #8]
    8fde:	781b      	ldrb	r3, [r3, #0]
		case M2M_WIFI_REQ_DHCP_CONF: {
			uint8 *pu8IPAddress = (uint8*) pvMsg;
			wifi_connected = 1;
			/* Turn LED0 on to declare that IP address received. */
			port_pin_set_output_level(LED_0_PIN, false);
			printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\n",
    8fe0:	1c19      	adds	r1, r3, #0
					pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    8fe2:	68bb      	ldr	r3, [r7, #8]
    8fe4:	3301      	adds	r3, #1
    8fe6:	781b      	ldrb	r3, [r3, #0]
		case M2M_WIFI_REQ_DHCP_CONF: {
			uint8 *pu8IPAddress = (uint8*) pvMsg;
			wifi_connected = 1;
			/* Turn LED0 on to declare that IP address received. */
			port_pin_set_output_level(LED_0_PIN, false);
			printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\n",
    8fe8:	1c1a      	adds	r2, r3, #0
					pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    8fea:	68bb      	ldr	r3, [r7, #8]
    8fec:	3302      	adds	r3, #2
    8fee:	781b      	ldrb	r3, [r3, #0]
    8ff0:	68b8      	ldr	r0, [r7, #8]
    8ff2:	3003      	adds	r0, #3
    8ff4:	7800      	ldrb	r0, [r0, #0]
		case M2M_WIFI_REQ_DHCP_CONF: {
			uint8 *pu8IPAddress = (uint8*) pvMsg;
			wifi_connected = 1;
			/* Turn LED0 on to declare that IP address received. */
			port_pin_set_output_level(LED_0_PIN, false);
			printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\n",
    8ff6:	1c04      	adds	r4, r0, #0
    8ff8:	480c      	ldr	r0, [pc, #48]	; (902c <m2m_wifi_state+0xc4>)
    8ffa:	9400      	str	r4, [sp, #0]
    8ffc:	4c0c      	ldr	r4, [pc, #48]	; (9030 <m2m_wifi_state+0xc8>)
    8ffe:	47a0      	blx	r4
					pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
			break;
    9000:	46c0      	nop			; (mov r8, r8)
		}
	default: {
			break;
		}
	}
}
    9002:	46bd      	mov	sp, r7
    9004:	b005      	add	sp, #20
    9006:	bd90      	pop	{r4, r7, pc}
    9008:	000107e8 	.word	0x000107e8
    900c:	0000b131 	.word	0x0000b131
    9010:	00003911 	.word	0x00003911
    9014:	00010824 	.word	0x00010824
    9018:	20000f34 	.word	0x20000f34
    901c:	00010864 	.word	0x00010864
    9020:	00010874 	.word	0x00010874
    9024:	000036c9 	.word	0x000036c9
    9028:	00008dc5 	.word	0x00008dc5
    902c:	00010884 	.word	0x00010884
    9030:	0000b0b1 	.word	0x0000b0b1
    9034:	00000000 	.word	0x00000000

00009038 <demo_start>:
 * \brief Sensor thread entry.
 *
 * \param[in] params unused parameter.
 */
void demo_start(void)
{
    9038:	b5b0      	push	{r4, r5, r7, lr}
    903a:	b088      	sub	sp, #32
    903c:	af02      	add	r7, sp, #8
	tstrWifiInitParam param;
	struct sockaddr_in addr;
	sint8 ret;
	
	/* Initialize Wi-Fi parameters structure. */
	param.pfAppWifiCb = m2m_wifi_state;
    903e:	4b6e      	ldr	r3, [pc, #440]	; (91f8 <demo_start+0x1c0>)
    9040:	613b      	str	r3, [r7, #16]

	/* Initialize socket address structure. */
	addr.sin_family	= AF_INET;
    9042:	1c3b      	adds	r3, r7, #0
    9044:	2202      	movs	r2, #2
    9046:	801a      	strh	r2, [r3, #0]
	addr.sin_port = _htons(DEMO_SERVER_PORT);
    9048:	1c3b      	adds	r3, r7, #0
    904a:	4a6c      	ldr	r2, [pc, #432]	; (91fc <demo_start+0x1c4>)
    904c:	805a      	strh	r2, [r3, #2]
	addr.sin_addr.s_addr = 0xFFFFFFFF;
    904e:	1c3b      	adds	r3, r7, #0
    9050:	2201      	movs	r2, #1
    9052:	4252      	negs	r2, r2
    9054:	605a      	str	r2, [r3, #4]
	
	/* Turn LED0 off initially. */
	port_pin_set_output_level(LED_0_PIN, true);
    9056:	203e      	movs	r0, #62	; 0x3e
    9058:	2101      	movs	r1, #1
    905a:	4b69      	ldr	r3, [pc, #420]	; (9200 <demo_start+0x1c8>)
    905c:	4798      	blx	r3
	
	door_init();
    905e:	4b69      	ldr	r3, [pc, #420]	; (9204 <demo_start+0x1cc>)
    9060:	4798      	blx	r3

	/* Initialize temperature sensor. */
	at30tse_init();
    9062:	4b69      	ldr	r3, [pc, #420]	; (9208 <demo_start+0x1d0>)
    9064:	4798      	blx	r3
	
	/* Reset network controller */
	nm_bsp_init();
    9066:	4b69      	ldr	r3, [pc, #420]	; (920c <demo_start+0x1d4>)
    9068:	4798      	blx	r3
	
	/* Initialize Wifi driver with data and Wifi status callbacks. */
	ret = m2m_wifi_init(&param);
    906a:	1c3c      	adds	r4, r7, #0
    906c:	3417      	adds	r4, #23
    906e:	1c3b      	adds	r3, r7, #0
    9070:	3310      	adds	r3, #16
    9072:	1c18      	adds	r0, r3, #0
    9074:	4b66      	ldr	r3, [pc, #408]	; (9210 <demo_start+0x1d8>)
    9076:	4798      	blx	r3
    9078:	1c03      	adds	r3, r0, #0
    907a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    907c:	1c3b      	adds	r3, r7, #0
    907e:	3317      	adds	r3, #23
    9080:	781b      	ldrb	r3, [r3, #0]
    9082:	b25b      	sxtb	r3, r3
    9084:	2b00      	cmp	r3, #0
    9086:	d004      	beq.n	9092 <demo_start+0x5a>
		puts("demo_start: nm_drv_init call error!");
    9088:	4b62      	ldr	r3, [pc, #392]	; (9214 <demo_start+0x1dc>)
    908a:	1c18      	adds	r0, r3, #0
    908c:	4b62      	ldr	r3, [pc, #392]	; (9218 <demo_start+0x1e0>)
    908e:	4798      	blx	r3
		while (1)
			;
    9090:	e7fe      	b.n	9090 <demo_start+0x58>
	}
	
	/* Initialize Socket module */
	socketInit();
    9092:	4b62      	ldr	r3, [pc, #392]	; (921c <demo_start+0x1e4>)
    9094:	4798      	blx	r3
	registerSocketCallback(m2m_wifi_socket_handler, NULL);
    9096:	4b62      	ldr	r3, [pc, #392]	; (9220 <demo_start+0x1e8>)
    9098:	1c18      	adds	r0, r3, #0
    909a:	2100      	movs	r1, #0
    909c:	4b61      	ldr	r3, [pc, #388]	; (9224 <demo_start+0x1ec>)
    909e:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)DEMO_WLAN_SSID, sizeof(DEMO_WLAN_SSID),
    90a0:	4a61      	ldr	r2, [pc, #388]	; (9228 <demo_start+0x1f0>)
    90a2:	4b62      	ldr	r3, [pc, #392]	; (922c <demo_start+0x1f4>)
    90a4:	21ff      	movs	r1, #255	; 0xff
    90a6:	9100      	str	r1, [sp, #0]
    90a8:	1c10      	adds	r0, r2, #0
    90aa:	2110      	movs	r1, #16
    90ac:	2202      	movs	r2, #2
    90ae:	4c60      	ldr	r4, [pc, #384]	; (9230 <demo_start+0x1f8>)
    90b0:	47a0      	blx	r4
			DEMO_WLAN_AUTH, (char *)DEMO_WLAN_PSK, M2M_WIFI_CH_ALL);

	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    90b2:	2000      	movs	r0, #0
    90b4:	4b5f      	ldr	r3, [pc, #380]	; (9234 <demo_start+0x1fc>)
    90b6:	4798      	blx	r3

		if ((wifi_connected == 1) && (ms_ticks - delay > DEMO_REPORT_INTERVAL)) {
    90b8:	4b5f      	ldr	r3, [pc, #380]	; (9238 <demo_start+0x200>)
    90ba:	781b      	ldrb	r3, [r3, #0]
    90bc:	b2db      	uxtb	r3, r3
    90be:	2b01      	cmp	r3, #1
    90c0:	d000      	beq.n	90c4 <demo_start+0x8c>
    90c2:	e094      	b.n	91ee <demo_start+0x1b6>
    90c4:	4b5d      	ldr	r3, [pc, #372]	; (923c <demo_start+0x204>)
    90c6:	681a      	ldr	r2, [r3, #0]
    90c8:	4b5d      	ldr	r3, [pc, #372]	; (9240 <demo_start+0x208>)
    90ca:	681b      	ldr	r3, [r3, #0]
    90cc:	1ad2      	subs	r2, r2, r3
    90ce:	23fa      	movs	r3, #250	; 0xfa
    90d0:	009b      	lsls	r3, r3, #2
    90d2:	429a      	cmp	r2, r3
    90d4:	d800      	bhi.n	90d8 <demo_start+0xa0>
    90d6:	e08a      	b.n	91ee <demo_start+0x1b6>
			delay = ms_ticks;
    90d8:	4b58      	ldr	r3, [pc, #352]	; (923c <demo_start+0x204>)
    90da:	681a      	ldr	r2, [r3, #0]
    90dc:	4b58      	ldr	r3, [pc, #352]	; (9240 <demo_start+0x208>)
    90de:	601a      	str	r2, [r3, #0]

			/* Open server socket. */
			if (rx_socket < 0) {
    90e0:	4b58      	ldr	r3, [pc, #352]	; (9244 <demo_start+0x20c>)
    90e2:	781b      	ldrb	r3, [r3, #0]
    90e4:	b25b      	sxtb	r3, r3
    90e6:	2b00      	cmp	r3, #0
    90e8:	da1b      	bge.n	9122 <demo_start+0xea>
				if ((rx_socket = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
    90ea:	2002      	movs	r0, #2
    90ec:	2102      	movs	r1, #2
    90ee:	2200      	movs	r2, #0
    90f0:	4b55      	ldr	r3, [pc, #340]	; (9248 <demo_start+0x210>)
    90f2:	4798      	blx	r3
    90f4:	1c03      	adds	r3, r0, #0
    90f6:	1c1a      	adds	r2, r3, #0
    90f8:	4b52      	ldr	r3, [pc, #328]	; (9244 <demo_start+0x20c>)
    90fa:	701a      	strb	r2, [r3, #0]
    90fc:	4b51      	ldr	r3, [pc, #324]	; (9244 <demo_start+0x20c>)
    90fe:	781b      	ldrb	r3, [r3, #0]
    9100:	b25b      	sxtb	r3, r3
    9102:	2b00      	cmp	r3, #0
    9104:	da04      	bge.n	9110 <demo_start+0xd8>
					puts("demo_start: failed to create RX UDP client socket error!");
    9106:	4b51      	ldr	r3, [pc, #324]	; (924c <demo_start+0x214>)
    9108:	1c18      	adds	r0, r3, #0
    910a:	4b43      	ldr	r3, [pc, #268]	; (9218 <demo_start+0x1e0>)
    910c:	4798      	blx	r3
					continue;
    910e:	e06e      	b.n	91ee <demo_start+0x1b6>
				}
				bind(rx_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
    9110:	4b4c      	ldr	r3, [pc, #304]	; (9244 <demo_start+0x20c>)
    9112:	781b      	ldrb	r3, [r3, #0]
    9114:	b25a      	sxtb	r2, r3
    9116:	1c3b      	adds	r3, r7, #0
    9118:	1c10      	adds	r0, r2, #0
    911a:	1c19      	adds	r1, r3, #0
    911c:	2210      	movs	r2, #16
    911e:	4b4c      	ldr	r3, [pc, #304]	; (9250 <demo_start+0x218>)
    9120:	4798      	blx	r3
			}
			
			/* Open client socket. */
			if (tx_socket < 0) {
    9122:	4b4c      	ldr	r3, [pc, #304]	; (9254 <demo_start+0x21c>)
    9124:	781b      	ldrb	r3, [r3, #0]
    9126:	b25b      	sxtb	r3, r3
    9128:	2b00      	cmp	r3, #0
    912a:	da12      	bge.n	9152 <demo_start+0x11a>
				if ((tx_socket = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
    912c:	2002      	movs	r0, #2
    912e:	2102      	movs	r1, #2
    9130:	2200      	movs	r2, #0
    9132:	4b45      	ldr	r3, [pc, #276]	; (9248 <demo_start+0x210>)
    9134:	4798      	blx	r3
    9136:	1c03      	adds	r3, r0, #0
    9138:	1c1a      	adds	r2, r3, #0
    913a:	4b46      	ldr	r3, [pc, #280]	; (9254 <demo_start+0x21c>)
    913c:	701a      	strb	r2, [r3, #0]
    913e:	4b45      	ldr	r3, [pc, #276]	; (9254 <demo_start+0x21c>)
    9140:	781b      	ldrb	r3, [r3, #0]
    9142:	b25b      	sxtb	r3, r3
    9144:	2b00      	cmp	r3, #0
    9146:	da04      	bge.n	9152 <demo_start+0x11a>
					puts("demo_start: failed to create TX UDP client socket error!");
    9148:	4b43      	ldr	r3, [pc, #268]	; (9258 <demo_start+0x220>)
    914a:	1c18      	adds	r0, r3, #0
    914c:	4b32      	ldr	r3, [pc, #200]	; (9218 <demo_start+0x1e0>)
    914e:	4798      	blx	r3
					continue;
    9150:	e04d      	b.n	91ee <demo_start+0x1b6>
				}
			}
			
			/* Send client discovery frame. */
			sendto(tx_socket, &msg_temp_keepalive, sizeof(t_msg_temp_keepalive), 0,
    9152:	4b40      	ldr	r3, [pc, #256]	; (9254 <demo_start+0x21c>)
    9154:	781b      	ldrb	r3, [r3, #0]
    9156:	b25a      	sxtb	r2, r3
    9158:	4b40      	ldr	r3, [pc, #256]	; (925c <demo_start+0x224>)
    915a:	1c39      	adds	r1, r7, #0
    915c:	9100      	str	r1, [sp, #0]
    915e:	2110      	movs	r1, #16
    9160:	9101      	str	r1, [sp, #4]
    9162:	1c10      	adds	r0, r2, #0
    9164:	1c19      	adds	r1, r3, #0
    9166:	220c      	movs	r2, #12
    9168:	2300      	movs	r3, #0
    916a:	4c3d      	ldr	r4, [pc, #244]	; (9260 <demo_start+0x228>)
    916c:	47a0      	blx	r4
					(struct sockaddr *)&addr, sizeof(addr));
			
			/* Send client report. */
			msg_temp_report.temp = (uint32_t)(at30tse_read_temperature() * 100);
    916e:	4b3d      	ldr	r3, [pc, #244]	; (9264 <demo_start+0x22c>)
    9170:	4798      	blx	r3
    9172:	1c03      	adds	r3, r0, #0
    9174:	1c0c      	adds	r4, r1, #0
    9176:	4d3c      	ldr	r5, [pc, #240]	; (9268 <demo_start+0x230>)
    9178:	1c18      	adds	r0, r3, #0
    917a:	1c21      	adds	r1, r4, #0
    917c:	4b1d      	ldr	r3, [pc, #116]	; (91f4 <demo_start+0x1bc>)
    917e:	4a1c      	ldr	r2, [pc, #112]	; (91f0 <demo_start+0x1b8>)
    9180:	47a8      	blx	r5
    9182:	1c03      	adds	r3, r0, #0
    9184:	1c0c      	adds	r4, r1, #0
    9186:	4a39      	ldr	r2, [pc, #228]	; (926c <demo_start+0x234>)
    9188:	1c18      	adds	r0, r3, #0
    918a:	1c21      	adds	r1, r4, #0
    918c:	4790      	blx	r2
    918e:	1c02      	adds	r2, r0, #0
    9190:	4b37      	ldr	r3, [pc, #220]	; (9270 <demo_start+0x238>)
    9192:	60da      	str	r2, [r3, #12]
			msg_temp_report.led = !port_pin_get_output_level(LED_0_PIN);
    9194:	203e      	movs	r0, #62	; 0x3e
    9196:	4b37      	ldr	r3, [pc, #220]	; (9274 <demo_start+0x23c>)
    9198:	4798      	blx	r3
    919a:	1c03      	adds	r3, r0, #0
    919c:	2201      	movs	r2, #1
    919e:	4053      	eors	r3, r2
    91a0:	b2db      	uxtb	r3, r3
    91a2:	1c1a      	adds	r2, r3, #0
    91a4:	4b32      	ldr	r3, [pc, #200]	; (9270 <demo_start+0x238>)
    91a6:	72da      	strb	r2, [r3, #11]
			ret = sendto(tx_socket, &msg_temp_report, sizeof(t_msg_temp_report), 0,
    91a8:	4b2a      	ldr	r3, [pc, #168]	; (9254 <demo_start+0x21c>)
    91aa:	781b      	ldrb	r3, [r3, #0]
    91ac:	b25a      	sxtb	r2, r3
    91ae:	4b30      	ldr	r3, [pc, #192]	; (9270 <demo_start+0x238>)
    91b0:	1c39      	adds	r1, r7, #0
    91b2:	9100      	str	r1, [sp, #0]
    91b4:	2110      	movs	r1, #16
    91b6:	9101      	str	r1, [sp, #4]
    91b8:	1c10      	adds	r0, r2, #0
    91ba:	1c19      	adds	r1, r3, #0
    91bc:	2210      	movs	r2, #16
    91be:	2300      	movs	r3, #0
    91c0:	4c27      	ldr	r4, [pc, #156]	; (9260 <demo_start+0x228>)
    91c2:	47a0      	blx	r4
    91c4:	1c03      	adds	r3, r0, #0
    91c6:	1c1a      	adds	r2, r3, #0
    91c8:	1c3b      	adds	r3, r7, #0
    91ca:	3317      	adds	r3, #23
    91cc:	701a      	strb	r2, [r3, #0]
					(struct sockaddr *)&addr, sizeof(addr));

			if (ret == M2M_SUCCESS) {
    91ce:	1c3b      	adds	r3, r7, #0
    91d0:	3317      	adds	r3, #23
    91d2:	781b      	ldrb	r3, [r3, #0]
    91d4:	b25b      	sxtb	r3, r3
    91d6:	2b00      	cmp	r3, #0
    91d8:	d104      	bne.n	91e4 <demo_start+0x1ac>
				puts("demo_start: sensor report sent");
    91da:	4b27      	ldr	r3, [pc, #156]	; (9278 <demo_start+0x240>)
    91dc:	1c18      	adds	r0, r3, #0
    91de:	4b0e      	ldr	r3, [pc, #56]	; (9218 <demo_start+0x1e0>)
    91e0:	4798      	blx	r3
    91e2:	e004      	b.n	91ee <demo_start+0x1b6>
			} else {
				puts("demo_start: failed to send status report error!");
    91e4:	4b25      	ldr	r3, [pc, #148]	; (927c <demo_start+0x244>)
    91e6:	1c18      	adds	r0, r3, #0
    91e8:	4b0b      	ldr	r3, [pc, #44]	; (9218 <demo_start+0x1e0>)
    91ea:	4798      	blx	r3
			}

		}
	}
    91ec:	e761      	b.n	90b2 <demo_start+0x7a>
    91ee:	e760      	b.n	90b2 <demo_start+0x7a>
    91f0:	00000000 	.word	0x00000000
    91f4:	40590000 	.word	0x40590000
    91f8:	00008f69 	.word	0x00008f69
    91fc:	00000a1a 	.word	0x00000a1a
    9200:	00008dc5 	.word	0x00008dc5
    9204:	00002141 	.word	0x00002141
    9208:	000002d5 	.word	0x000002d5
    920c:	00002405 	.word	0x00002405
    9210:	000035e5 	.word	0x000035e5
    9214:	000108c0 	.word	0x000108c0
    9218:	0000b131 	.word	0x0000b131
    921c:	00005af9 	.word	0x00005af9
    9220:	00008e19 	.word	0x00008e19
    9224:	00005b25 	.word	0x00005b25
    9228:	00010864 	.word	0x00010864
    922c:	00010874 	.word	0x00010874
    9230:	000036c9 	.word	0x000036c9
    9234:	000036ad 	.word	0x000036ad
    9238:	20000f34 	.word	0x20000f34
    923c:	20000f70 	.word	0x20000f70
    9240:	20000f38 	.word	0x20000f38
    9244:	20000038 	.word	0x20000038
    9248:	00005b49 	.word	0x00005b49
    924c:	000108e4 	.word	0x000108e4
    9250:	00005c35 	.word	0x00005c35
    9254:	20000039 	.word	0x20000039
    9258:	00010920 	.word	0x00010920
    925c:	2000001c 	.word	0x2000001c
    9260:	00005ced 	.word	0x00005ced
    9264:	00000411 	.word	0x00000411
    9268:	0000993d 	.word	0x0000993d
    926c:	00009891 	.word	0x00009891
    9270:	20000028 	.word	0x20000028
    9274:	00008d7d 	.word	0x00008d7d
    9278:	0001095c 	.word	0x0001095c
    927c:	0001097c 	.word	0x0001097c

00009280 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    9280:	b5b0      	push	{r4, r5, r7, lr}
    9282:	b082      	sub	sp, #8
    9284:	af00      	add	r7, sp, #0
    9286:	1c02      	adds	r2, r0, #0
    9288:	6039      	str	r1, [r7, #0]
    928a:	1dfb      	adds	r3, r7, #7
    928c:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    928e:	1dfb      	adds	r3, r7, #7
    9290:	781b      	ldrb	r3, [r3, #0]
    9292:	2b7f      	cmp	r3, #127	; 0x7f
    9294:	d932      	bls.n	92fc <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    9296:	4930      	ldr	r1, [pc, #192]	; (9358 <NVIC_SetPriority+0xd8>)
    9298:	1dfb      	adds	r3, r7, #7
    929a:	781b      	ldrb	r3, [r3, #0]
    929c:	1c1a      	adds	r2, r3, #0
    929e:	230f      	movs	r3, #15
    92a0:	4013      	ands	r3, r2
    92a2:	3b08      	subs	r3, #8
    92a4:	0898      	lsrs	r0, r3, #2
    92a6:	4a2c      	ldr	r2, [pc, #176]	; (9358 <NVIC_SetPriority+0xd8>)
    92a8:	1dfb      	adds	r3, r7, #7
    92aa:	781b      	ldrb	r3, [r3, #0]
    92ac:	1c1c      	adds	r4, r3, #0
    92ae:	230f      	movs	r3, #15
    92b0:	4023      	ands	r3, r4
    92b2:	3b08      	subs	r3, #8
    92b4:	089b      	lsrs	r3, r3, #2
    92b6:	3306      	adds	r3, #6
    92b8:	009b      	lsls	r3, r3, #2
    92ba:	18d3      	adds	r3, r2, r3
    92bc:	685b      	ldr	r3, [r3, #4]
    92be:	1dfa      	adds	r2, r7, #7
    92c0:	7812      	ldrb	r2, [r2, #0]
    92c2:	1c14      	adds	r4, r2, #0
    92c4:	2203      	movs	r2, #3
    92c6:	4022      	ands	r2, r4
    92c8:	00d2      	lsls	r2, r2, #3
    92ca:	24ff      	movs	r4, #255	; 0xff
    92cc:	1c25      	adds	r5, r4, #0
    92ce:	4095      	lsls	r5, r2
    92d0:	1c2a      	adds	r2, r5, #0
    92d2:	43d2      	mvns	r2, r2
    92d4:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    92d6:	683b      	ldr	r3, [r7, #0]
    92d8:	019c      	lsls	r4, r3, #6
    92da:	23ff      	movs	r3, #255	; 0xff
    92dc:	401c      	ands	r4, r3
    92de:	1dfb      	adds	r3, r7, #7
    92e0:	781b      	ldrb	r3, [r3, #0]
    92e2:	1c1d      	adds	r5, r3, #0
    92e4:	2303      	movs	r3, #3
    92e6:	402b      	ands	r3, r5
    92e8:	00db      	lsls	r3, r3, #3
    92ea:	1c25      	adds	r5, r4, #0
    92ec:	409d      	lsls	r5, r3
    92ee:	1c2b      	adds	r3, r5, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    92f0:	431a      	orrs	r2, r3
    92f2:	1d83      	adds	r3, r0, #6
    92f4:	009b      	lsls	r3, r3, #2
    92f6:	18cb      	adds	r3, r1, r3
    92f8:	605a      	str	r2, [r3, #4]
    92fa:	e029      	b.n	9350 <NVIC_SetPriority+0xd0>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    92fc:	4b17      	ldr	r3, [pc, #92]	; (935c <NVIC_SetPriority+0xdc>)
    92fe:	1dfa      	adds	r2, r7, #7
    9300:	7812      	ldrb	r2, [r2, #0]
    9302:	b252      	sxtb	r2, r2
    9304:	0892      	lsrs	r2, r2, #2
    9306:	4915      	ldr	r1, [pc, #84]	; (935c <NVIC_SetPriority+0xdc>)
    9308:	1df8      	adds	r0, r7, #7
    930a:	7800      	ldrb	r0, [r0, #0]
    930c:	b240      	sxtb	r0, r0
    930e:	0880      	lsrs	r0, r0, #2
    9310:	30c0      	adds	r0, #192	; 0xc0
    9312:	0080      	lsls	r0, r0, #2
    9314:	5841      	ldr	r1, [r0, r1]
    9316:	1df8      	adds	r0, r7, #7
    9318:	7800      	ldrb	r0, [r0, #0]
    931a:	1c04      	adds	r4, r0, #0
    931c:	2003      	movs	r0, #3
    931e:	4020      	ands	r0, r4
    9320:	00c0      	lsls	r0, r0, #3
    9322:	24ff      	movs	r4, #255	; 0xff
    9324:	1c25      	adds	r5, r4, #0
    9326:	4085      	lsls	r5, r0
    9328:	1c28      	adds	r0, r5, #0
    932a:	43c0      	mvns	r0, r0
    932c:	4008      	ands	r0, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    932e:	6839      	ldr	r1, [r7, #0]
    9330:	018c      	lsls	r4, r1, #6
    9332:	21ff      	movs	r1, #255	; 0xff
    9334:	400c      	ands	r4, r1
    9336:	1df9      	adds	r1, r7, #7
    9338:	7809      	ldrb	r1, [r1, #0]
    933a:	1c0d      	adds	r5, r1, #0
    933c:	2103      	movs	r1, #3
    933e:	4029      	ands	r1, r5
    9340:	00c9      	lsls	r1, r1, #3
    9342:	1c25      	adds	r5, r4, #0
    9344:	408d      	lsls	r5, r1
    9346:	1c29      	adds	r1, r5, #0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    9348:	4301      	orrs	r1, r0
    934a:	32c0      	adds	r2, #192	; 0xc0
    934c:	0092      	lsls	r2, r2, #2
    934e:	50d1      	str	r1, [r2, r3]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    9350:	46bd      	mov	sp, r7
    9352:	b002      	add	sp, #8
    9354:	bdb0      	pop	{r4, r5, r7, pc}
    9356:	46c0      	nop			; (mov r8, r8)
    9358:	e000ed00 	.word	0xe000ed00
    935c:	e000e100 	.word	0xe000e100

00009360 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    9360:	b580      	push	{r7, lr}
    9362:	b082      	sub	sp, #8
    9364:	af00      	add	r7, sp, #0
    9366:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
    9368:	687a      	ldr	r2, [r7, #4]
    936a:	4b0e      	ldr	r3, [pc, #56]	; (93a4 <SysTick_Config+0x44>)
    936c:	429a      	cmp	r2, r3
    936e:	d901      	bls.n	9374 <SysTick_Config+0x14>
    9370:	2301      	movs	r3, #1
    9372:	e012      	b.n	939a <SysTick_Config+0x3a>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
    9374:	4b0c      	ldr	r3, [pc, #48]	; (93a8 <SysTick_Config+0x48>)
    9376:	687a      	ldr	r2, [r7, #4]
    9378:	0212      	lsls	r2, r2, #8
    937a:	0a12      	lsrs	r2, r2, #8
    937c:	3a01      	subs	r2, #1
    937e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
    9380:	2301      	movs	r3, #1
    9382:	425b      	negs	r3, r3
    9384:	1c18      	adds	r0, r3, #0
    9386:	2103      	movs	r1, #3
    9388:	4b08      	ldr	r3, [pc, #32]	; (93ac <SysTick_Config+0x4c>)
    938a:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    938c:	4b06      	ldr	r3, [pc, #24]	; (93a8 <SysTick_Config+0x48>)
    938e:	2200      	movs	r2, #0
    9390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9392:	4b05      	ldr	r3, [pc, #20]	; (93a8 <SysTick_Config+0x48>)
    9394:	2207      	movs	r2, #7
    9396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    9398:	2300      	movs	r3, #0
}
    939a:	1c18      	adds	r0, r3, #0
    939c:	46bd      	mov	sp, r7
    939e:	b002      	add	sp, #8
    93a0:	bd80      	pop	{r7, pc}
    93a2:	46c0      	nop			; (mov r8, r8)
    93a4:	00ffffff 	.word	0x00ffffff
    93a8:	e000e010 	.word	0xe000e010
    93ac:	00009281 	.word	0x00009281

000093b0 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
    93b0:	b580      	push	{r7, lr}
    93b2:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    93b4:	2000      	movs	r0, #0
    93b6:	4b06      	ldr	r3, [pc, #24]	; (93d0 <system_cpu_clock_get_hz+0x20>)
    93b8:	4798      	blx	r3
    93ba:	1c02      	adds	r2, r0, #0
    93bc:	4b05      	ldr	r3, [pc, #20]	; (93d4 <system_cpu_clock_get_hz+0x24>)
    93be:	689b      	ldr	r3, [r3, #8]
    93c0:	b2db      	uxtb	r3, r3
    93c2:	1c11      	adds	r1, r2, #0
    93c4:	40d9      	lsrs	r1, r3
    93c6:	1c0b      	adds	r3, r1, #0
}
    93c8:	1c18      	adds	r0, r3, #0
    93ca:	46bd      	mov	sp, r7
    93cc:	bd80      	pop	{r7, pc}
    93ce:	46c0      	nop			; (mov r8, r8)
    93d0:	00007f9d 	.word	0x00007f9d
    93d4:	40000400 	.word	0x40000400

000093d8 <system_interrupt_enable_global>:
 * \brief Enables global interrupts
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    93d8:	b580      	push	{r7, lr}
    93da:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    93dc:	4b03      	ldr	r3, [pc, #12]	; (93ec <system_interrupt_enable_global+0x14>)
    93de:	2201      	movs	r2, #1
    93e0:	701a      	strb	r2, [r3, #0]
    93e2:	f3bf 8f5f 	dmb	sy
    93e6:	b662      	cpsie	i
}
    93e8:	46bd      	mov	sp, r7
    93ea:	bd80      	pop	{r7, pc}
    93ec:	20000018 	.word	0x20000018

000093f0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    93f0:	b580      	push	{r7, lr}
    93f2:	b082      	sub	sp, #8
    93f4:	af00      	add	r7, sp, #0
    93f6:	1c02      	adds	r2, r0, #0
    93f8:	1dfb      	adds	r3, r7, #7
    93fa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    93fc:	4b06      	ldr	r3, [pc, #24]	; (9418 <system_interrupt_enable+0x28>)
    93fe:	1dfa      	adds	r2, r7, #7
    9400:	7812      	ldrb	r2, [r2, #0]
    9402:	1c11      	adds	r1, r2, #0
    9404:	221f      	movs	r2, #31
    9406:	400a      	ands	r2, r1
    9408:	2101      	movs	r1, #1
    940a:	1c08      	adds	r0, r1, #0
    940c:	4090      	lsls	r0, r2
    940e:	1c02      	adds	r2, r0, #0
    9410:	601a      	str	r2, [r3, #0]
}
    9412:	46bd      	mov	sp, r7
    9414:	b002      	add	sp, #8
    9416:	bd80      	pop	{r7, pc}
    9418:	e000e100 	.word	0xe000e100

0000941c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    941c:	b580      	push	{r7, lr}
    941e:	b084      	sub	sp, #16
    9420:	af00      	add	r7, sp, #0
    9422:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    9424:	687b      	ldr	r3, [r7, #4]
    9426:	681b      	ldr	r3, [r3, #0]
    9428:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    942a:	68fb      	ldr	r3, [r7, #12]
    942c:	69db      	ldr	r3, [r3, #28]
    942e:	1e5a      	subs	r2, r3, #1
    9430:	4193      	sbcs	r3, r2
    9432:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    9434:	1c18      	adds	r0, r3, #0
    9436:	46bd      	mov	sp, r7
    9438:	b004      	add	sp, #16
    943a:	bd80      	pop	{r7, pc}

0000943c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    943c:	b580      	push	{r7, lr}
    943e:	b082      	sub	sp, #8
    9440:	af00      	add	r7, sp, #0
    9442:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    9444:	46c0      	nop			; (mov r8, r8)
    9446:	687b      	ldr	r3, [r7, #4]
    9448:	1c18      	adds	r0, r3, #0
    944a:	4b04      	ldr	r3, [pc, #16]	; (945c <_usart_wait_for_sync+0x20>)
    944c:	4798      	blx	r3
    944e:	1c03      	adds	r3, r0, #0
    9450:	2b00      	cmp	r3, #0
    9452:	d1f8      	bne.n	9446 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    9454:	46bd      	mov	sp, r7
    9456:	b002      	add	sp, #8
    9458:	bd80      	pop	{r7, pc}
    945a:	46c0      	nop			; (mov r8, r8)
    945c:	0000941d 	.word	0x0000941d

00009460 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    9460:	b580      	push	{r7, lr}
    9462:	b082      	sub	sp, #8
    9464:	af00      	add	r7, sp, #0
    9466:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    9468:	687b      	ldr	r3, [r7, #4]
    946a:	2280      	movs	r2, #128	; 0x80
    946c:	05d2      	lsls	r2, r2, #23
    946e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    9470:	687b      	ldr	r3, [r7, #4]
    9472:	2200      	movs	r2, #0
    9474:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    9476:	687b      	ldr	r3, [r7, #4]
    9478:	22ff      	movs	r2, #255	; 0xff
    947a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    947c:	687b      	ldr	r3, [r7, #4]
    947e:	2200      	movs	r2, #0
    9480:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    9482:	687b      	ldr	r3, [r7, #4]
    9484:	2200      	movs	r2, #0
    9486:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    9488:	687b      	ldr	r3, [r7, #4]
    948a:	2296      	movs	r2, #150	; 0x96
    948c:	0192      	lsls	r2, r2, #6
    948e:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    9490:	687a      	ldr	r2, [r7, #4]
    9492:	2324      	movs	r3, #36	; 0x24
    9494:	2101      	movs	r1, #1
    9496:	54d1      	strb	r1, [r2, r3]
	config->transmitter_enable = true;
    9498:	687a      	ldr	r2, [r7, #4]
    949a:	2325      	movs	r3, #37	; 0x25
    949c:	2101      	movs	r1, #1
    949e:	54d1      	strb	r1, [r2, r3]
	config->clock_polarity_inverted = false;
    94a0:	687a      	ldr	r2, [r7, #4]
    94a2:	2326      	movs	r3, #38	; 0x26
    94a4:	2100      	movs	r1, #0
    94a6:	54d1      	strb	r1, [r2, r3]
	config->use_external_clock = false;
    94a8:	687a      	ldr	r2, [r7, #4]
    94aa:	2327      	movs	r3, #39	; 0x27
    94ac:	2100      	movs	r1, #0
    94ae:	54d1      	strb	r1, [r2, r3]
	config->ext_clock_freq   = 0;
    94b0:	687b      	ldr	r3, [r7, #4]
    94b2:	2200      	movs	r2, #0
    94b4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    94b6:	687b      	ldr	r3, [r7, #4]
    94b8:	2288      	movs	r2, #136	; 0x88
    94ba:	0352      	lsls	r2, r2, #13
    94bc:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    94be:	687a      	ldr	r2, [r7, #4]
    94c0:	232c      	movs	r3, #44	; 0x2c
    94c2:	2100      	movs	r1, #0
    94c4:	54d1      	strb	r1, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    94c6:	687a      	ldr	r2, [r7, #4]
    94c8:	232d      	movs	r3, #45	; 0x2d
    94ca:	2100      	movs	r1, #0
    94cc:	54d1      	strb	r1, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    94ce:	687b      	ldr	r3, [r7, #4]
    94d0:	2200      	movs	r2, #0
    94d2:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    94d4:	687b      	ldr	r3, [r7, #4]
    94d6:	2200      	movs	r2, #0
    94d8:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    94da:	687b      	ldr	r3, [r7, #4]
    94dc:	2200      	movs	r2, #0
    94de:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    94e0:	687b      	ldr	r3, [r7, #4]
    94e2:	2200      	movs	r2, #0
    94e4:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    94e6:	687b      	ldr	r3, [r7, #4]
    94e8:	2200      	movs	r2, #0
    94ea:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    94ec:	687b      	ldr	r3, [r7, #4]
    94ee:	2200      	movs	r2, #0
    94f0:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    94f2:	687b      	ldr	r3, [r7, #4]
    94f4:	2200      	movs	r2, #0
    94f6:	76da      	strb	r2, [r3, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    94f8:	687b      	ldr	r3, [r7, #4]
    94fa:	2200      	movs	r2, #0
    94fc:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    94fe:	687b      	ldr	r3, [r7, #4]
    9500:	2200      	movs	r2, #0
    9502:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    9504:	687b      	ldr	r3, [r7, #4]
    9506:	2200      	movs	r2, #0
    9508:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                        = 19;
    950a:	687b      	ldr	r3, [r7, #4]
    950c:	2213      	movs	r2, #19
    950e:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    9510:	687b      	ldr	r3, [r7, #4]
    9512:	2200      	movs	r2, #0
    9514:	775a      	strb	r2, [r3, #29]
#endif
}
    9516:	46bd      	mov	sp, r7
    9518:	b002      	add	sp, #8
    951a:	bd80      	pop	{r7, pc}

0000951c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    951c:	b580      	push	{r7, lr}
    951e:	b084      	sub	sp, #16
    9520:	af00      	add	r7, sp, #0
    9522:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9524:	687b      	ldr	r3, [r7, #4]
    9526:	681b      	ldr	r3, [r3, #0]
    9528:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    952a:	687b      	ldr	r3, [r7, #4]
    952c:	681b      	ldr	r3, [r3, #0]
    952e:	1c18      	adds	r0, r3, #0
    9530:	4b09      	ldr	r3, [pc, #36]	; (9558 <usart_enable+0x3c>)
    9532:	4798      	blx	r3
    9534:	1c03      	adds	r3, r0, #0
    9536:	1c18      	adds	r0, r3, #0
    9538:	4b08      	ldr	r3, [pc, #32]	; (955c <usart_enable+0x40>)
    953a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    953c:	687b      	ldr	r3, [r7, #4]
    953e:	1c18      	adds	r0, r3, #0
    9540:	4b07      	ldr	r3, [pc, #28]	; (9560 <usart_enable+0x44>)
    9542:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    9544:	68fb      	ldr	r3, [r7, #12]
    9546:	681b      	ldr	r3, [r3, #0]
    9548:	2202      	movs	r2, #2
    954a:	431a      	orrs	r2, r3
    954c:	68fb      	ldr	r3, [r7, #12]
    954e:	601a      	str	r2, [r3, #0]
}
    9550:	46bd      	mov	sp, r7
    9552:	b004      	add	sp, #16
    9554:	bd80      	pop	{r7, pc}
    9556:	46c0      	nop			; (mov r8, r8)
    9558:	00006cfd 	.word	0x00006cfd
    955c:	000093f1 	.word	0x000093f1
    9560:	0000943d 	.word	0x0000943d

00009564 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    9564:	b580      	push	{r7, lr}
    9566:	b084      	sub	sp, #16
    9568:	af00      	add	r7, sp, #0
    956a:	60f8      	str	r0, [r7, #12]
    956c:	60b9      	str	r1, [r7, #8]
    956e:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    9570:	68f9      	ldr	r1, [r7, #12]
    9572:	68ba      	ldr	r2, [r7, #8]
    9574:	687b      	ldr	r3, [r7, #4]
    9576:	1c08      	adds	r0, r1, #0
    9578:	1c11      	adds	r1, r2, #0
    957a:	1c1a      	adds	r2, r3, #0
    957c:	4b05      	ldr	r3, [pc, #20]	; (9594 <usart_serial_init+0x30>)
    957e:	4798      	blx	r3
    9580:	1c03      	adds	r3, r0, #0
    9582:	2b00      	cmp	r3, #0
    9584:	d101      	bne.n	958a <usart_serial_init+0x26>
		return true;
    9586:	2301      	movs	r3, #1
    9588:	e000      	b.n	958c <usart_serial_init+0x28>
	}
	else {
		return false;
    958a:	2300      	movs	r3, #0
	}
}
    958c:	1c18      	adds	r0, r3, #0
    958e:	46bd      	mov	sp, r7
    9590:	b004      	add	sp, #16
    9592:	bd80      	pop	{r7, pc}
    9594:	000071a1 	.word	0x000071a1

00009598 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    9598:	b580      	push	{r7, lr}
    959a:	b082      	sub	sp, #8
    959c:	af00      	add	r7, sp, #0
    959e:	6078      	str	r0, [r7, #4]
    95a0:	1c0a      	adds	r2, r1, #0
    95a2:	1cfb      	adds	r3, r7, #3
    95a4:	701a      	strb	r2, [r3, #0]
	return usart_write_wait(module, c);
    95a6:	1cfb      	adds	r3, r7, #3
    95a8:	781b      	ldrb	r3, [r3, #0]
    95aa:	b29b      	uxth	r3, r3
    95ac:	687a      	ldr	r2, [r7, #4]
    95ae:	1c10      	adds	r0, r2, #0
    95b0:	1c19      	adds	r1, r3, #0
    95b2:	4b03      	ldr	r3, [pc, #12]	; (95c0 <usart_serial_putchar+0x28>)
    95b4:	4798      	blx	r3
    95b6:	1c03      	adds	r3, r0, #0
}
    95b8:	1c18      	adds	r0, r3, #0
    95ba:	46bd      	mov	sp, r7
    95bc:	b002      	add	sp, #8
    95be:	bd80      	pop	{r7, pc}
    95c0:	0000740d 	.word	0x0000740d

000095c4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    95c4:	b580      	push	{r7, lr}
    95c6:	b084      	sub	sp, #16
    95c8:	af00      	add	r7, sp, #0
    95ca:	6078      	str	r0, [r7, #4]
    95cc:	6039      	str	r1, [r7, #0]
	uint16_t temp;

	usart_read_wait(module, &temp);
    95ce:	687a      	ldr	r2, [r7, #4]
    95d0:	1c3b      	adds	r3, r7, #0
    95d2:	330e      	adds	r3, #14
    95d4:	1c10      	adds	r0, r2, #0
    95d6:	1c19      	adds	r1, r3, #0
    95d8:	4b05      	ldr	r3, [pc, #20]	; (95f0 <usart_serial_getchar+0x2c>)
    95da:	4798      	blx	r3

	*c = temp;
    95dc:	1c3b      	adds	r3, r7, #0
    95de:	330e      	adds	r3, #14
    95e0:	881b      	ldrh	r3, [r3, #0]
    95e2:	b2da      	uxtb	r2, r3
    95e4:	683b      	ldr	r3, [r7, #0]
    95e6:	701a      	strb	r2, [r3, #0]
}
    95e8:	46bd      	mov	sp, r7
    95ea:	b004      	add	sp, #16
    95ec:	bd80      	pop	{r7, pc}
    95ee:	46c0      	nop			; (mov r8, r8)
    95f0:	00007471 	.word	0x00007471

000095f4 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    95f4:	b580      	push	{r7, lr}
    95f6:	b084      	sub	sp, #16
    95f8:	af00      	add	r7, sp, #0
    95fa:	60f8      	str	r0, [r7, #12]
    95fc:	60b9      	str	r1, [r7, #8]
    95fe:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    9600:	4b10      	ldr	r3, [pc, #64]	; (9644 <stdio_serial_init+0x50>)
    9602:	68fa      	ldr	r2, [r7, #12]
    9604:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    9606:	4b10      	ldr	r3, [pc, #64]	; (9648 <stdio_serial_init+0x54>)
    9608:	4a10      	ldr	r2, [pc, #64]	; (964c <stdio_serial_init+0x58>)
    960a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    960c:	4b10      	ldr	r3, [pc, #64]	; (9650 <stdio_serial_init+0x5c>)
    960e:	4a11      	ldr	r2, [pc, #68]	; (9654 <stdio_serial_init+0x60>)
    9610:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    9612:	68f9      	ldr	r1, [r7, #12]
    9614:	68ba      	ldr	r2, [r7, #8]
    9616:	687b      	ldr	r3, [r7, #4]
    9618:	1c08      	adds	r0, r1, #0
    961a:	1c11      	adds	r1, r2, #0
    961c:	1c1a      	adds	r2, r3, #0
    961e:	4b0e      	ldr	r3, [pc, #56]	; (9658 <stdio_serial_init+0x64>)
    9620:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    9622:	4b0e      	ldr	r3, [pc, #56]	; (965c <stdio_serial_init+0x68>)
    9624:	681b      	ldr	r3, [r3, #0]
    9626:	689b      	ldr	r3, [r3, #8]
    9628:	1c18      	adds	r0, r3, #0
    962a:	2100      	movs	r1, #0
    962c:	4b0c      	ldr	r3, [pc, #48]	; (9660 <stdio_serial_init+0x6c>)
    962e:	4798      	blx	r3
	setbuf(stdin, NULL);
    9630:	4b0a      	ldr	r3, [pc, #40]	; (965c <stdio_serial_init+0x68>)
    9632:	681b      	ldr	r3, [r3, #0]
    9634:	685b      	ldr	r3, [r3, #4]
    9636:	1c18      	adds	r0, r3, #0
    9638:	2100      	movs	r1, #0
    963a:	4b09      	ldr	r3, [pc, #36]	; (9660 <stdio_serial_init+0x6c>)
    963c:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    963e:	46bd      	mov	sp, r7
    9640:	b004      	add	sp, #16
    9642:	bd80      	pop	{r7, pc}
    9644:	200010d8 	.word	0x200010d8
    9648:	200010d4 	.word	0x200010d4
    964c:	00009599 	.word	0x00009599
    9650:	200010d0 	.word	0x200010d0
    9654:	000095c5 	.word	0x000095c5
    9658:	00009565 	.word	0x00009565
    965c:	20000040 	.word	0x20000040
    9660:	0000b145 	.word	0x0000b145

00009664 <configure_console>:

/**
 *  Configure UART console.
 */
static void configure_console(void)
{
    9664:	b580      	push	{r7, lr}
    9666:	b090      	sub	sp, #64	; 0x40
    9668:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    966a:	1c3b      	adds	r3, r7, #0
    966c:	1c18      	adds	r0, r3, #0
    966e:	4b13      	ldr	r3, [pc, #76]	; (96bc <configure_console+0x58>)
    9670:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    9672:	1c3b      	adds	r3, r7, #0
    9674:	2280      	movs	r2, #128	; 0x80
    9676:	0352      	lsls	r2, r2, #13
    9678:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    967a:	1c3b      	adds	r3, r7, #0
    967c:	4a10      	ldr	r2, [pc, #64]	; (96c0 <configure_console+0x5c>)
    967e:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    9680:	1c3b      	adds	r3, r7, #0
    9682:	4a10      	ldr	r2, [pc, #64]	; (96c4 <configure_console+0x60>)
    9684:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    9686:	1c3b      	adds	r3, r7, #0
    9688:	2201      	movs	r2, #1
    968a:	4252      	negs	r2, r2
    968c:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    968e:	1c3b      	adds	r3, r7, #0
    9690:	2201      	movs	r2, #1
    9692:	4252      	negs	r2, r2
    9694:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    9696:	1c3b      	adds	r3, r7, #0
    9698:	22e1      	movs	r2, #225	; 0xe1
    969a:	0252      	lsls	r2, r2, #9
    969c:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &usart_conf);
    969e:	490a      	ldr	r1, [pc, #40]	; (96c8 <configure_console+0x64>)
    96a0:	4a0a      	ldr	r2, [pc, #40]	; (96cc <configure_console+0x68>)
    96a2:	1c3b      	adds	r3, r7, #0
    96a4:	1c08      	adds	r0, r1, #0
    96a6:	1c11      	adds	r1, r2, #0
    96a8:	1c1a      	adds	r2, r3, #0
    96aa:	4b09      	ldr	r3, [pc, #36]	; (96d0 <configure_console+0x6c>)
    96ac:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    96ae:	4b06      	ldr	r3, [pc, #24]	; (96c8 <configure_console+0x64>)
    96b0:	1c18      	adds	r0, r3, #0
    96b2:	4b08      	ldr	r3, [pc, #32]	; (96d4 <configure_console+0x70>)
    96b4:	4798      	blx	r3
}
    96b6:	46bd      	mov	sp, r7
    96b8:	b010      	add	sp, #64	; 0x40
    96ba:	bd80      	pop	{r7, pc}
    96bc:	00009461 	.word	0x00009461
    96c0:	00160002 	.word	0x00160002
    96c4:	00170002 	.word	0x00170002
    96c8:	20000f3c 	.word	0x20000f3c
    96cc:	42001400 	.word	0x42001400
    96d0:	000095f5 	.word	0x000095f5
    96d4:	0000951d 	.word	0x0000951d

000096d8 <SysTick_Handler>:

/**
 * \brief SysTick handler used to measure precise delay. 
 */
void SysTick_Handler(void)
{
    96d8:	b580      	push	{r7, lr}
    96da:	af00      	add	r7, sp, #0
	ms_ticks++;
    96dc:	4b03      	ldr	r3, [pc, #12]	; (96ec <SysTick_Handler+0x14>)
    96de:	681b      	ldr	r3, [r3, #0]
    96e0:	1c5a      	adds	r2, r3, #1
    96e2:	4b02      	ldr	r3, [pc, #8]	; (96ec <SysTick_Handler+0x14>)
    96e4:	601a      	str	r2, [r3, #0]
}
    96e6:	46bd      	mov	sp, r7
    96e8:	bd80      	pop	{r7, pc}
    96ea:	46c0      	nop			; (mov r8, r8)
    96ec:	20000f70 	.word	0x20000f70

000096f0 <main>:
 * Start the sensor task then start the scheduler.
 *
 * \return program return value.
 */
int main(void)
{
    96f0:	b580      	push	{r7, lr}
    96f2:	af00      	add	r7, sp, #0
	system_init();
    96f4:	4b12      	ldr	r3, [pc, #72]	; (9740 <main+0x50>)
    96f6:	4798      	blx	r3
	system_interrupt_enable_global();
    96f8:	4b12      	ldr	r3, [pc, #72]	; (9744 <main+0x54>)
    96fa:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    96fc:	4b12      	ldr	r3, [pc, #72]	; (9748 <main+0x58>)
    96fe:	4798      	blx	r3

	/* Initialize the delay driver. */
	delay_init();
    9700:	4b12      	ldr	r3, [pc, #72]	; (974c <main+0x5c>)
    9702:	4798      	blx	r3
	
	/* Enable SysTick interrupt for non busy wait delay. */
	if (SysTick_Config(system_cpu_clock_get_hz() / 1000)) {
    9704:	4b12      	ldr	r3, [pc, #72]	; (9750 <main+0x60>)
    9706:	4798      	blx	r3
    9708:	1c02      	adds	r2, r0, #0
    970a:	4b12      	ldr	r3, [pc, #72]	; (9754 <main+0x64>)
    970c:	1c10      	adds	r0, r2, #0
    970e:	22fa      	movs	r2, #250	; 0xfa
    9710:	0091      	lsls	r1, r2, #2
    9712:	4798      	blx	r3
    9714:	1c03      	adds	r3, r0, #0
    9716:	1c18      	adds	r0, r3, #0
    9718:	4b0f      	ldr	r3, [pc, #60]	; (9758 <main+0x68>)
    971a:	4798      	blx	r3
    971c:	1c03      	adds	r3, r0, #0
    971e:	2b00      	cmp	r3, #0
    9720:	d004      	beq.n	972c <main+0x3c>
		puts("main: SysTick configuration error!");
    9722:	4b0e      	ldr	r3, [pc, #56]	; (975c <main+0x6c>)
    9724:	1c18      	adds	r0, r3, #0
    9726:	4b0e      	ldr	r3, [pc, #56]	; (9760 <main+0x70>)
    9728:	4798      	blx	r3
		while (1);
    972a:	e7fe      	b.n	972a <main+0x3a>
	}

	/* Output example information */
	puts(STRING_HEADER);
    972c:	4b0d      	ldr	r3, [pc, #52]	; (9764 <main+0x74>)
    972e:	1c18      	adds	r0, r3, #0
    9730:	4b0b      	ldr	r3, [pc, #44]	; (9760 <main+0x70>)
    9732:	4798      	blx	r3

	/* Start the demo task. */
	demo_start();
    9734:	4b0c      	ldr	r3, [pc, #48]	; (9768 <main+0x78>)
    9736:	4798      	blx	r3
	
	return 0;
    9738:	2300      	movs	r3, #0
}
    973a:	1c18      	adds	r0, r3, #0
    973c:	46bd      	mov	sp, r7
    973e:	bd80      	pop	{r7, pc}
    9740:	000083b5 	.word	0x000083b5
    9744:	000093d9 	.word	0x000093d9
    9748:	00009665 	.word	0x00009665
    974c:	00005f2d 	.word	0x00005f2d
    9750:	000093b1 	.word	0x000093b1
    9754:	0000976d 	.word	0x0000976d
    9758:	00009361 	.word	0x00009361
    975c:	000109ac 	.word	0x000109ac
    9760:	0000b131 	.word	0x0000b131
    9764:	000109d0 	.word	0x000109d0
    9768:	00009039 	.word	0x00009039

0000976c <__aeabi_uidiv>:
    976c:	2900      	cmp	r1, #0
    976e:	d034      	beq.n	97da <.udivsi3_skip_div0_test+0x6a>

00009770 <.udivsi3_skip_div0_test>:
    9770:	2301      	movs	r3, #1
    9772:	2200      	movs	r2, #0
    9774:	b410      	push	{r4}
    9776:	4288      	cmp	r0, r1
    9778:	d32c      	bcc.n	97d4 <.udivsi3_skip_div0_test+0x64>
    977a:	2401      	movs	r4, #1
    977c:	0724      	lsls	r4, r4, #28
    977e:	42a1      	cmp	r1, r4
    9780:	d204      	bcs.n	978c <.udivsi3_skip_div0_test+0x1c>
    9782:	4281      	cmp	r1, r0
    9784:	d202      	bcs.n	978c <.udivsi3_skip_div0_test+0x1c>
    9786:	0109      	lsls	r1, r1, #4
    9788:	011b      	lsls	r3, r3, #4
    978a:	e7f8      	b.n	977e <.udivsi3_skip_div0_test+0xe>
    978c:	00e4      	lsls	r4, r4, #3
    978e:	42a1      	cmp	r1, r4
    9790:	d204      	bcs.n	979c <.udivsi3_skip_div0_test+0x2c>
    9792:	4281      	cmp	r1, r0
    9794:	d202      	bcs.n	979c <.udivsi3_skip_div0_test+0x2c>
    9796:	0049      	lsls	r1, r1, #1
    9798:	005b      	lsls	r3, r3, #1
    979a:	e7f8      	b.n	978e <.udivsi3_skip_div0_test+0x1e>
    979c:	4288      	cmp	r0, r1
    979e:	d301      	bcc.n	97a4 <.udivsi3_skip_div0_test+0x34>
    97a0:	1a40      	subs	r0, r0, r1
    97a2:	431a      	orrs	r2, r3
    97a4:	084c      	lsrs	r4, r1, #1
    97a6:	42a0      	cmp	r0, r4
    97a8:	d302      	bcc.n	97b0 <.udivsi3_skip_div0_test+0x40>
    97aa:	1b00      	subs	r0, r0, r4
    97ac:	085c      	lsrs	r4, r3, #1
    97ae:	4322      	orrs	r2, r4
    97b0:	088c      	lsrs	r4, r1, #2
    97b2:	42a0      	cmp	r0, r4
    97b4:	d302      	bcc.n	97bc <.udivsi3_skip_div0_test+0x4c>
    97b6:	1b00      	subs	r0, r0, r4
    97b8:	089c      	lsrs	r4, r3, #2
    97ba:	4322      	orrs	r2, r4
    97bc:	08cc      	lsrs	r4, r1, #3
    97be:	42a0      	cmp	r0, r4
    97c0:	d302      	bcc.n	97c8 <.udivsi3_skip_div0_test+0x58>
    97c2:	1b00      	subs	r0, r0, r4
    97c4:	08dc      	lsrs	r4, r3, #3
    97c6:	4322      	orrs	r2, r4
    97c8:	2800      	cmp	r0, #0
    97ca:	d003      	beq.n	97d4 <.udivsi3_skip_div0_test+0x64>
    97cc:	091b      	lsrs	r3, r3, #4
    97ce:	d001      	beq.n	97d4 <.udivsi3_skip_div0_test+0x64>
    97d0:	0909      	lsrs	r1, r1, #4
    97d2:	e7e3      	b.n	979c <.udivsi3_skip_div0_test+0x2c>
    97d4:	1c10      	adds	r0, r2, #0
    97d6:	bc10      	pop	{r4}
    97d8:	4770      	bx	lr
    97da:	2800      	cmp	r0, #0
    97dc:	d001      	beq.n	97e2 <.udivsi3_skip_div0_test+0x72>
    97de:	2000      	movs	r0, #0
    97e0:	43c0      	mvns	r0, r0
    97e2:	b407      	push	{r0, r1, r2}
    97e4:	4802      	ldr	r0, [pc, #8]	; (97f0 <.udivsi3_skip_div0_test+0x80>)
    97e6:	a102      	add	r1, pc, #8	; (adr r1, 97f0 <.udivsi3_skip_div0_test+0x80>)
    97e8:	1840      	adds	r0, r0, r1
    97ea:	9002      	str	r0, [sp, #8]
    97ec:	bd03      	pop	{r0, r1, pc}
    97ee:	46c0      	nop			; (mov r8, r8)
    97f0:	00000019 	.word	0x00000019

000097f4 <__aeabi_uidivmod>:
    97f4:	2900      	cmp	r1, #0
    97f6:	d0f0      	beq.n	97da <.udivsi3_skip_div0_test+0x6a>
    97f8:	b503      	push	{r0, r1, lr}
    97fa:	f7ff ffb9 	bl	9770 <.udivsi3_skip_div0_test>
    97fe:	bc0e      	pop	{r1, r2, r3}
    9800:	4342      	muls	r2, r0
    9802:	1a89      	subs	r1, r1, r2
    9804:	4718      	bx	r3
    9806:	46c0      	nop			; (mov r8, r8)

00009808 <__aeabi_idiv0>:
    9808:	4770      	bx	lr
    980a:	46c0      	nop			; (mov r8, r8)

0000980c <__aeabi_uldivmod>:
    980c:	2b00      	cmp	r3, #0
    980e:	d111      	bne.n	9834 <__aeabi_uldivmod+0x28>
    9810:	2a00      	cmp	r2, #0
    9812:	d10f      	bne.n	9834 <__aeabi_uldivmod+0x28>
    9814:	2900      	cmp	r1, #0
    9816:	d100      	bne.n	981a <__aeabi_uldivmod+0xe>
    9818:	2800      	cmp	r0, #0
    981a:	d002      	beq.n	9822 <__aeabi_uldivmod+0x16>
    981c:	2100      	movs	r1, #0
    981e:	43c9      	mvns	r1, r1
    9820:	1c08      	adds	r0, r1, #0
    9822:	b407      	push	{r0, r1, r2}
    9824:	4802      	ldr	r0, [pc, #8]	; (9830 <__aeabi_uldivmod+0x24>)
    9826:	a102      	add	r1, pc, #8	; (adr r1, 9830 <__aeabi_uldivmod+0x24>)
    9828:	1840      	adds	r0, r0, r1
    982a:	9002      	str	r0, [sp, #8]
    982c:	bd03      	pop	{r0, r1, pc}
    982e:	46c0      	nop			; (mov r8, r8)
    9830:	ffffffd9 	.word	0xffffffd9
    9834:	b403      	push	{r0, r1}
    9836:	4668      	mov	r0, sp
    9838:	b501      	push	{r0, lr}
    983a:	9802      	ldr	r0, [sp, #8]
    983c:	f000 f864 	bl	9908 <__gnu_uldivmod_helper>
    9840:	9b01      	ldr	r3, [sp, #4]
    9842:	469e      	mov	lr, r3
    9844:	b002      	add	sp, #8
    9846:	bc0c      	pop	{r2, r3}
    9848:	4770      	bx	lr
    984a:	46c0      	nop			; (mov r8, r8)

0000984c <__aeabi_lmul>:
    984c:	469c      	mov	ip, r3
    984e:	0403      	lsls	r3, r0, #16
    9850:	b5f0      	push	{r4, r5, r6, r7, lr}
    9852:	0c1b      	lsrs	r3, r3, #16
    9854:	0417      	lsls	r7, r2, #16
    9856:	0c3f      	lsrs	r7, r7, #16
    9858:	0c15      	lsrs	r5, r2, #16
    985a:	1c1e      	adds	r6, r3, #0
    985c:	1c04      	adds	r4, r0, #0
    985e:	0c00      	lsrs	r0, r0, #16
    9860:	437e      	muls	r6, r7
    9862:	436b      	muls	r3, r5
    9864:	4347      	muls	r7, r0
    9866:	4345      	muls	r5, r0
    9868:	18fb      	adds	r3, r7, r3
    986a:	0c30      	lsrs	r0, r6, #16
    986c:	1818      	adds	r0, r3, r0
    986e:	4287      	cmp	r7, r0
    9870:	d902      	bls.n	9878 <__aeabi_lmul+0x2c>
    9872:	2380      	movs	r3, #128	; 0x80
    9874:	025b      	lsls	r3, r3, #9
    9876:	18ed      	adds	r5, r5, r3
    9878:	0c03      	lsrs	r3, r0, #16
    987a:	18ed      	adds	r5, r5, r3
    987c:	4663      	mov	r3, ip
    987e:	435c      	muls	r4, r3
    9880:	434a      	muls	r2, r1
    9882:	0436      	lsls	r6, r6, #16
    9884:	0c36      	lsrs	r6, r6, #16
    9886:	18a1      	adds	r1, r4, r2
    9888:	0400      	lsls	r0, r0, #16
    988a:	1980      	adds	r0, r0, r6
    988c:	1949      	adds	r1, r1, r5
    988e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009890 <__aeabi_d2uiz>:
    9890:	b538      	push	{r3, r4, r5, lr}
    9892:	4b0e      	ldr	r3, [pc, #56]	; (98cc <__aeabi_d2uiz+0x3c>)
    9894:	4a0c      	ldr	r2, [pc, #48]	; (98c8 <__aeabi_d2uiz+0x38>)
    9896:	1c04      	adds	r4, r0, #0
    9898:	1c0d      	adds	r5, r1, #0
    989a:	f000 febd 	bl	a618 <__aeabi_dcmpge>
    989e:	2800      	cmp	r0, #0
    98a0:	d104      	bne.n	98ac <__aeabi_d2uiz+0x1c>
    98a2:	1c20      	adds	r0, r4, #0
    98a4:	1c29      	adds	r1, r5, #0
    98a6:	f000 fe11 	bl	a4cc <__aeabi_d2iz>
    98aa:	bd38      	pop	{r3, r4, r5, pc}
    98ac:	4b07      	ldr	r3, [pc, #28]	; (98cc <__aeabi_d2uiz+0x3c>)
    98ae:	4a06      	ldr	r2, [pc, #24]	; (98c8 <__aeabi_d2uiz+0x38>)
    98b0:	1c20      	adds	r0, r4, #0
    98b2:	1c29      	adds	r1, r5, #0
    98b4:	f000 fad4 	bl	9e60 <__aeabi_dsub>
    98b8:	f000 fe08 	bl	a4cc <__aeabi_d2iz>
    98bc:	2380      	movs	r3, #128	; 0x80
    98be:	061b      	lsls	r3, r3, #24
    98c0:	18c0      	adds	r0, r0, r3
    98c2:	e7f2      	b.n	98aa <__aeabi_d2uiz+0x1a>
    98c4:	46c0      	nop			; (mov r8, r8)
    98c6:	46c0      	nop			; (mov r8, r8)
    98c8:	00000000 	.word	0x00000000
    98cc:	41e00000 	.word	0x41e00000

000098d0 <__gnu_ldivmod_helper>:
    98d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    98d2:	b083      	sub	sp, #12
    98d4:	1c16      	adds	r6, r2, #0
    98d6:	1c1f      	adds	r7, r3, #0
    98d8:	9000      	str	r0, [sp, #0]
    98da:	9101      	str	r1, [sp, #4]
    98dc:	f000 fec4 	bl	a668 <__divdi3>
    98e0:	1c04      	adds	r4, r0, #0
    98e2:	1c0d      	adds	r5, r1, #0
    98e4:	1c22      	adds	r2, r4, #0
    98e6:	1c2b      	adds	r3, r5, #0
    98e8:	1c30      	adds	r0, r6, #0
    98ea:	1c39      	adds	r1, r7, #0
    98ec:	f7ff ffae 	bl	984c <__aeabi_lmul>
    98f0:	9a00      	ldr	r2, [sp, #0]
    98f2:	9b01      	ldr	r3, [sp, #4]
    98f4:	1a12      	subs	r2, r2, r0
    98f6:	418b      	sbcs	r3, r1
    98f8:	9908      	ldr	r1, [sp, #32]
    98fa:	1c20      	adds	r0, r4, #0
    98fc:	600a      	str	r2, [r1, #0]
    98fe:	604b      	str	r3, [r1, #4]
    9900:	1c29      	adds	r1, r5, #0
    9902:	b003      	add	sp, #12
    9904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9906:	46c0      	nop			; (mov r8, r8)

00009908 <__gnu_uldivmod_helper>:
    9908:	b5f0      	push	{r4, r5, r6, r7, lr}
    990a:	b083      	sub	sp, #12
    990c:	1c14      	adds	r4, r2, #0
    990e:	1c1d      	adds	r5, r3, #0
    9910:	9000      	str	r0, [sp, #0]
    9912:	9101      	str	r1, [sp, #4]
    9914:	f001 f880 	bl	aa18 <__udivdi3>
    9918:	1c22      	adds	r2, r4, #0
    991a:	1c2b      	adds	r3, r5, #0
    991c:	1c06      	adds	r6, r0, #0
    991e:	1c0f      	adds	r7, r1, #0
    9920:	f7ff ff94 	bl	984c <__aeabi_lmul>
    9924:	9a00      	ldr	r2, [sp, #0]
    9926:	9b01      	ldr	r3, [sp, #4]
    9928:	1a12      	subs	r2, r2, r0
    992a:	418b      	sbcs	r3, r1
    992c:	9908      	ldr	r1, [sp, #32]
    992e:	1c30      	adds	r0, r6, #0
    9930:	600a      	str	r2, [r1, #0]
    9932:	604b      	str	r3, [r1, #4]
    9934:	1c39      	adds	r1, r7, #0
    9936:	b003      	add	sp, #12
    9938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    993a:	46c0      	nop			; (mov r8, r8)

0000993c <__aeabi_dmul>:
    993c:	b5f0      	push	{r4, r5, r6, r7, lr}
    993e:	4656      	mov	r6, sl
    9940:	4644      	mov	r4, r8
    9942:	465f      	mov	r7, fp
    9944:	464d      	mov	r5, r9
    9946:	b4f0      	push	{r4, r5, r6, r7}
    9948:	1c1f      	adds	r7, r3, #0
    994a:	030b      	lsls	r3, r1, #12
    994c:	0b1b      	lsrs	r3, r3, #12
    994e:	469a      	mov	sl, r3
    9950:	004b      	lsls	r3, r1, #1
    9952:	b087      	sub	sp, #28
    9954:	1c04      	adds	r4, r0, #0
    9956:	4680      	mov	r8, r0
    9958:	0d5b      	lsrs	r3, r3, #21
    995a:	0fc8      	lsrs	r0, r1, #31
    995c:	1c16      	adds	r6, r2, #0
    995e:	9302      	str	r3, [sp, #8]
    9960:	4681      	mov	r9, r0
    9962:	2b00      	cmp	r3, #0
    9964:	d068      	beq.n	9a38 <__aeabi_dmul+0xfc>
    9966:	4b69      	ldr	r3, [pc, #420]	; (9b0c <__aeabi_dmul+0x1d0>)
    9968:	9902      	ldr	r1, [sp, #8]
    996a:	4299      	cmp	r1, r3
    996c:	d032      	beq.n	99d4 <__aeabi_dmul+0x98>
    996e:	2280      	movs	r2, #128	; 0x80
    9970:	4653      	mov	r3, sl
    9972:	0352      	lsls	r2, r2, #13
    9974:	431a      	orrs	r2, r3
    9976:	00d2      	lsls	r2, r2, #3
    9978:	0f63      	lsrs	r3, r4, #29
    997a:	431a      	orrs	r2, r3
    997c:	4692      	mov	sl, r2
    997e:	4a64      	ldr	r2, [pc, #400]	; (9b10 <__aeabi_dmul+0x1d4>)
    9980:	00e0      	lsls	r0, r4, #3
    9982:	1889      	adds	r1, r1, r2
    9984:	4680      	mov	r8, r0
    9986:	9102      	str	r1, [sp, #8]
    9988:	2400      	movs	r4, #0
    998a:	2500      	movs	r5, #0
    998c:	033b      	lsls	r3, r7, #12
    998e:	0b1b      	lsrs	r3, r3, #12
    9990:	469b      	mov	fp, r3
    9992:	0078      	lsls	r0, r7, #1
    9994:	0ffb      	lsrs	r3, r7, #31
    9996:	1c32      	adds	r2, r6, #0
    9998:	0d40      	lsrs	r0, r0, #21
    999a:	9303      	str	r3, [sp, #12]
    999c:	d100      	bne.n	99a0 <__aeabi_dmul+0x64>
    999e:	e075      	b.n	9a8c <__aeabi_dmul+0x150>
    99a0:	4b5a      	ldr	r3, [pc, #360]	; (9b0c <__aeabi_dmul+0x1d0>)
    99a2:	4298      	cmp	r0, r3
    99a4:	d069      	beq.n	9a7a <__aeabi_dmul+0x13e>
    99a6:	2280      	movs	r2, #128	; 0x80
    99a8:	4659      	mov	r1, fp
    99aa:	0352      	lsls	r2, r2, #13
    99ac:	430a      	orrs	r2, r1
    99ae:	0f73      	lsrs	r3, r6, #29
    99b0:	00d2      	lsls	r2, r2, #3
    99b2:	431a      	orrs	r2, r3
    99b4:	4b56      	ldr	r3, [pc, #344]	; (9b10 <__aeabi_dmul+0x1d4>)
    99b6:	4693      	mov	fp, r2
    99b8:	18c0      	adds	r0, r0, r3
    99ba:	00f2      	lsls	r2, r6, #3
    99bc:	2300      	movs	r3, #0
    99be:	9903      	ldr	r1, [sp, #12]
    99c0:	464e      	mov	r6, r9
    99c2:	4071      	eors	r1, r6
    99c4:	431c      	orrs	r4, r3
    99c6:	2c0f      	cmp	r4, #15
    99c8:	d900      	bls.n	99cc <__aeabi_dmul+0x90>
    99ca:	e0ab      	b.n	9b24 <__aeabi_dmul+0x1e8>
    99cc:	4e51      	ldr	r6, [pc, #324]	; (9b14 <__aeabi_dmul+0x1d8>)
    99ce:	00a4      	lsls	r4, r4, #2
    99d0:	5934      	ldr	r4, [r6, r4]
    99d2:	46a7      	mov	pc, r4
    99d4:	4653      	mov	r3, sl
    99d6:	431c      	orrs	r4, r3
    99d8:	d000      	beq.n	99dc <__aeabi_dmul+0xa0>
    99da:	e087      	b.n	9aec <__aeabi_dmul+0x1b0>
    99dc:	2500      	movs	r5, #0
    99de:	46aa      	mov	sl, r5
    99e0:	46a8      	mov	r8, r5
    99e2:	2408      	movs	r4, #8
    99e4:	2502      	movs	r5, #2
    99e6:	e7d1      	b.n	998c <__aeabi_dmul+0x50>
    99e8:	4649      	mov	r1, r9
    99ea:	2d02      	cmp	r5, #2
    99ec:	d06c      	beq.n	9ac8 <__aeabi_dmul+0x18c>
    99ee:	2d03      	cmp	r5, #3
    99f0:	d100      	bne.n	99f4 <__aeabi_dmul+0xb8>
    99f2:	e219      	b.n	9e28 <__aeabi_dmul+0x4ec>
    99f4:	2d01      	cmp	r5, #1
    99f6:	d000      	beq.n	99fa <__aeabi_dmul+0xbe>
    99f8:	e15a      	b.n	9cb0 <__aeabi_dmul+0x374>
    99fa:	400d      	ands	r5, r1
    99fc:	b2ed      	uxtb	r5, r5
    99fe:	2400      	movs	r4, #0
    9a00:	46a9      	mov	r9, r5
    9a02:	2300      	movs	r3, #0
    9a04:	46a0      	mov	r8, r4
    9a06:	2000      	movs	r0, #0
    9a08:	2100      	movs	r1, #0
    9a0a:	0325      	lsls	r5, r4, #12
    9a0c:	0d0a      	lsrs	r2, r1, #20
    9a0e:	051c      	lsls	r4, r3, #20
    9a10:	0b2d      	lsrs	r5, r5, #12
    9a12:	0512      	lsls	r2, r2, #20
    9a14:	4b40      	ldr	r3, [pc, #256]	; (9b18 <__aeabi_dmul+0x1dc>)
    9a16:	432a      	orrs	r2, r5
    9a18:	4013      	ands	r3, r2
    9a1a:	4323      	orrs	r3, r4
    9a1c:	005b      	lsls	r3, r3, #1
    9a1e:	464c      	mov	r4, r9
    9a20:	085b      	lsrs	r3, r3, #1
    9a22:	07e2      	lsls	r2, r4, #31
    9a24:	1c19      	adds	r1, r3, #0
    9a26:	4640      	mov	r0, r8
    9a28:	4311      	orrs	r1, r2
    9a2a:	b007      	add	sp, #28
    9a2c:	bc3c      	pop	{r2, r3, r4, r5}
    9a2e:	4690      	mov	r8, r2
    9a30:	4699      	mov	r9, r3
    9a32:	46a2      	mov	sl, r4
    9a34:	46ab      	mov	fp, r5
    9a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a38:	4653      	mov	r3, sl
    9a3a:	4323      	orrs	r3, r4
    9a3c:	d050      	beq.n	9ae0 <__aeabi_dmul+0x1a4>
    9a3e:	4653      	mov	r3, sl
    9a40:	2b00      	cmp	r3, #0
    9a42:	d100      	bne.n	9a46 <__aeabi_dmul+0x10a>
    9a44:	e186      	b.n	9d54 <__aeabi_dmul+0x418>
    9a46:	4650      	mov	r0, sl
    9a48:	f000 fdf0 	bl	a62c <__clzsi2>
    9a4c:	1e03      	subs	r3, r0, #0
    9a4e:	2b27      	cmp	r3, #39	; 0x27
    9a50:	dd00      	ble.n	9a54 <__aeabi_dmul+0x118>
    9a52:	e178      	b.n	9d46 <__aeabi_dmul+0x40a>
    9a54:	2128      	movs	r1, #40	; 0x28
    9a56:	1a0d      	subs	r5, r1, r0
    9a58:	1c21      	adds	r1, r4, #0
    9a5a:	3b08      	subs	r3, #8
    9a5c:	4652      	mov	r2, sl
    9a5e:	40e9      	lsrs	r1, r5
    9a60:	409a      	lsls	r2, r3
    9a62:	1c0d      	adds	r5, r1, #0
    9a64:	4315      	orrs	r5, r2
    9a66:	1c22      	adds	r2, r4, #0
    9a68:	409a      	lsls	r2, r3
    9a6a:	46aa      	mov	sl, r5
    9a6c:	4690      	mov	r8, r2
    9a6e:	4b2b      	ldr	r3, [pc, #172]	; (9b1c <__aeabi_dmul+0x1e0>)
    9a70:	2400      	movs	r4, #0
    9a72:	1a1b      	subs	r3, r3, r0
    9a74:	9302      	str	r3, [sp, #8]
    9a76:	2500      	movs	r5, #0
    9a78:	e788      	b.n	998c <__aeabi_dmul+0x50>
    9a7a:	465b      	mov	r3, fp
    9a7c:	431e      	orrs	r6, r3
    9a7e:	2303      	movs	r3, #3
    9a80:	2e00      	cmp	r6, #0
    9a82:	d19c      	bne.n	99be <__aeabi_dmul+0x82>
    9a84:	46b3      	mov	fp, r6
    9a86:	2200      	movs	r2, #0
    9a88:	2302      	movs	r3, #2
    9a8a:	e798      	b.n	99be <__aeabi_dmul+0x82>
    9a8c:	465b      	mov	r3, fp
    9a8e:	4333      	orrs	r3, r6
    9a90:	d021      	beq.n	9ad6 <__aeabi_dmul+0x19a>
    9a92:	4658      	mov	r0, fp
    9a94:	2800      	cmp	r0, #0
    9a96:	d100      	bne.n	9a9a <__aeabi_dmul+0x15e>
    9a98:	e150      	b.n	9d3c <__aeabi_dmul+0x400>
    9a9a:	f000 fdc7 	bl	a62c <__clzsi2>
    9a9e:	2827      	cmp	r0, #39	; 0x27
    9aa0:	dd00      	ble.n	9aa4 <__aeabi_dmul+0x168>
    9aa2:	e144      	b.n	9d2e <__aeabi_dmul+0x3f2>
    9aa4:	2128      	movs	r1, #40	; 0x28
    9aa6:	1a0f      	subs	r7, r1, r0
    9aa8:	1c02      	adds	r2, r0, #0
    9aaa:	1c31      	adds	r1, r6, #0
    9aac:	3a08      	subs	r2, #8
    9aae:	465b      	mov	r3, fp
    9ab0:	40f9      	lsrs	r1, r7
    9ab2:	4093      	lsls	r3, r2
    9ab4:	1c0f      	adds	r7, r1, #0
    9ab6:	431f      	orrs	r7, r3
    9ab8:	1c33      	adds	r3, r6, #0
    9aba:	4093      	lsls	r3, r2
    9abc:	46bb      	mov	fp, r7
    9abe:	1c1a      	adds	r2, r3, #0
    9ac0:	4b16      	ldr	r3, [pc, #88]	; (9b1c <__aeabi_dmul+0x1e0>)
    9ac2:	1a18      	subs	r0, r3, r0
    9ac4:	2300      	movs	r3, #0
    9ac6:	e77a      	b.n	99be <__aeabi_dmul+0x82>
    9ac8:	2301      	movs	r3, #1
    9aca:	400b      	ands	r3, r1
    9acc:	2400      	movs	r4, #0
    9ace:	4699      	mov	r9, r3
    9ad0:	46a0      	mov	r8, r4
    9ad2:	4b0e      	ldr	r3, [pc, #56]	; (9b0c <__aeabi_dmul+0x1d0>)
    9ad4:	e797      	b.n	9a06 <__aeabi_dmul+0xca>
    9ad6:	2700      	movs	r7, #0
    9ad8:	46bb      	mov	fp, r7
    9ada:	2200      	movs	r2, #0
    9adc:	2301      	movs	r3, #1
    9ade:	e76e      	b.n	99be <__aeabi_dmul+0x82>
    9ae0:	2100      	movs	r1, #0
    9ae2:	2404      	movs	r4, #4
    9ae4:	468a      	mov	sl, r1
    9ae6:	4688      	mov	r8, r1
    9ae8:	2501      	movs	r5, #1
    9aea:	e74f      	b.n	998c <__aeabi_dmul+0x50>
    9aec:	240c      	movs	r4, #12
    9aee:	2503      	movs	r5, #3
    9af0:	e74c      	b.n	998c <__aeabi_dmul+0x50>
    9af2:	2301      	movs	r3, #1
    9af4:	425b      	negs	r3, r3
    9af6:	2500      	movs	r5, #0
    9af8:	4698      	mov	r8, r3
    9afa:	46a9      	mov	r9, r5
    9afc:	4c08      	ldr	r4, [pc, #32]	; (9b20 <__aeabi_dmul+0x1e4>)
    9afe:	4b03      	ldr	r3, [pc, #12]	; (9b0c <__aeabi_dmul+0x1d0>)
    9b00:	e781      	b.n	9a06 <__aeabi_dmul+0xca>
    9b02:	46da      	mov	sl, fp
    9b04:	4690      	mov	r8, r2
    9b06:	9903      	ldr	r1, [sp, #12]
    9b08:	1c1d      	adds	r5, r3, #0
    9b0a:	e76e      	b.n	99ea <__aeabi_dmul+0xae>
    9b0c:	000007ff 	.word	0x000007ff
    9b10:	fffffc01 	.word	0xfffffc01
    9b14:	00010a3c 	.word	0x00010a3c
    9b18:	800fffff 	.word	0x800fffff
    9b1c:	fffffc0d 	.word	0xfffffc0d
    9b20:	000fffff 	.word	0x000fffff
    9b24:	9f02      	ldr	r7, [sp, #8]
    9b26:	0c16      	lsrs	r6, r2, #16
    9b28:	1838      	adds	r0, r7, r0
    9b2a:	9004      	str	r0, [sp, #16]
    9b2c:	4640      	mov	r0, r8
    9b2e:	0c07      	lsrs	r7, r0, #16
    9b30:	0400      	lsls	r0, r0, #16
    9b32:	0c00      	lsrs	r0, r0, #16
    9b34:	0412      	lsls	r2, r2, #16
    9b36:	0c12      	lsrs	r2, r2, #16
    9b38:	1c03      	adds	r3, r0, #0
    9b3a:	4353      	muls	r3, r2
    9b3c:	1c04      	adds	r4, r0, #0
    9b3e:	1c3d      	adds	r5, r7, #0
    9b40:	4374      	muls	r4, r6
    9b42:	4355      	muls	r5, r2
    9b44:	4698      	mov	r8, r3
    9b46:	1c3b      	adds	r3, r7, #0
    9b48:	4373      	muls	r3, r6
    9b4a:	1964      	adds	r4, r4, r5
    9b4c:	46a4      	mov	ip, r4
    9b4e:	4644      	mov	r4, r8
    9b50:	9302      	str	r3, [sp, #8]
    9b52:	0c23      	lsrs	r3, r4, #16
    9b54:	4463      	add	r3, ip
    9b56:	429d      	cmp	r5, r3
    9b58:	d904      	bls.n	9b64 <__aeabi_dmul+0x228>
    9b5a:	9d02      	ldr	r5, [sp, #8]
    9b5c:	2480      	movs	r4, #128	; 0x80
    9b5e:	0264      	lsls	r4, r4, #9
    9b60:	192d      	adds	r5, r5, r4
    9b62:	9502      	str	r5, [sp, #8]
    9b64:	0c1d      	lsrs	r5, r3, #16
    9b66:	9503      	str	r5, [sp, #12]
    9b68:	4645      	mov	r5, r8
    9b6a:	042c      	lsls	r4, r5, #16
    9b6c:	041b      	lsls	r3, r3, #16
    9b6e:	0c24      	lsrs	r4, r4, #16
    9b70:	191c      	adds	r4, r3, r4
    9b72:	9405      	str	r4, [sp, #20]
    9b74:	465c      	mov	r4, fp
    9b76:	0c23      	lsrs	r3, r4, #16
    9b78:	1c05      	adds	r5, r0, #0
    9b7a:	4358      	muls	r0, r3
    9b7c:	0424      	lsls	r4, r4, #16
    9b7e:	0c24      	lsrs	r4, r4, #16
    9b80:	4684      	mov	ip, r0
    9b82:	1c38      	adds	r0, r7, #0
    9b84:	4360      	muls	r0, r4
    9b86:	4365      	muls	r5, r4
    9b88:	435f      	muls	r7, r3
    9b8a:	4681      	mov	r9, r0
    9b8c:	44cc      	add	ip, r9
    9b8e:	0c28      	lsrs	r0, r5, #16
    9b90:	4460      	add	r0, ip
    9b92:	46bb      	mov	fp, r7
    9b94:	4581      	cmp	r9, r0
    9b96:	d902      	bls.n	9b9e <__aeabi_dmul+0x262>
    9b98:	2780      	movs	r7, #128	; 0x80
    9b9a:	027f      	lsls	r7, r7, #9
    9b9c:	44bb      	add	fp, r7
    9b9e:	042d      	lsls	r5, r5, #16
    9ba0:	0c07      	lsrs	r7, r0, #16
    9ba2:	0c2d      	lsrs	r5, r5, #16
    9ba4:	0400      	lsls	r0, r0, #16
    9ba6:	1940      	adds	r0, r0, r5
    9ba8:	4655      	mov	r5, sl
    9baa:	46bc      	mov	ip, r7
    9bac:	042f      	lsls	r7, r5, #16
    9bae:	44e3      	add	fp, ip
    9bb0:	4684      	mov	ip, r0
    9bb2:	0c28      	lsrs	r0, r5, #16
    9bb4:	0c3d      	lsrs	r5, r7, #16
    9bb6:	1c2f      	adds	r7, r5, #0
    9bb8:	4357      	muls	r7, r2
    9bba:	46b8      	mov	r8, r7
    9bbc:	1c2f      	adds	r7, r5, #0
    9bbe:	4377      	muls	r7, r6
    9bc0:	4342      	muls	r2, r0
    9bc2:	46b9      	mov	r9, r7
    9bc4:	4647      	mov	r7, r8
    9bc6:	0c3f      	lsrs	r7, r7, #16
    9bc8:	4491      	add	r9, r2
    9bca:	46ba      	mov	sl, r7
    9bcc:	44d1      	add	r9, sl
    9bce:	4346      	muls	r6, r0
    9bd0:	454a      	cmp	r2, r9
    9bd2:	d902      	bls.n	9bda <__aeabi_dmul+0x29e>
    9bd4:	2280      	movs	r2, #128	; 0x80
    9bd6:	0252      	lsls	r2, r2, #9
    9bd8:	18b6      	adds	r6, r6, r2
    9bda:	464f      	mov	r7, r9
    9bdc:	0c3a      	lsrs	r2, r7, #16
    9bde:	18b6      	adds	r6, r6, r2
    9be0:	043a      	lsls	r2, r7, #16
    9be2:	4647      	mov	r7, r8
    9be4:	043f      	lsls	r7, r7, #16
    9be6:	0c3f      	lsrs	r7, r7, #16
    9be8:	46b8      	mov	r8, r7
    9bea:	1c2f      	adds	r7, r5, #0
    9bec:	4367      	muls	r7, r4
    9bee:	435d      	muls	r5, r3
    9bf0:	4344      	muls	r4, r0
    9bf2:	4358      	muls	r0, r3
    9bf4:	1965      	adds	r5, r4, r5
    9bf6:	9001      	str	r0, [sp, #4]
    9bf8:	0c38      	lsrs	r0, r7, #16
    9bfa:	182d      	adds	r5, r5, r0
    9bfc:	4442      	add	r2, r8
    9bfe:	46b8      	mov	r8, r7
    9c00:	42ac      	cmp	r4, r5
    9c02:	d904      	bls.n	9c0e <__aeabi_dmul+0x2d2>
    9c04:	9801      	ldr	r0, [sp, #4]
    9c06:	2380      	movs	r3, #128	; 0x80
    9c08:	025b      	lsls	r3, r3, #9
    9c0a:	18c0      	adds	r0, r0, r3
    9c0c:	9001      	str	r0, [sp, #4]
    9c0e:	9c03      	ldr	r4, [sp, #12]
    9c10:	9f02      	ldr	r7, [sp, #8]
    9c12:	1c20      	adds	r0, r4, #0
    9c14:	4460      	add	r0, ip
    9c16:	19c0      	adds	r0, r0, r7
    9c18:	4560      	cmp	r0, ip
    9c1a:	41a4      	sbcs	r4, r4
    9c1c:	4647      	mov	r7, r8
    9c1e:	4264      	negs	r4, r4
    9c20:	46a4      	mov	ip, r4
    9c22:	042b      	lsls	r3, r5, #16
    9c24:	043c      	lsls	r4, r7, #16
    9c26:	4699      	mov	r9, r3
    9c28:	0c24      	lsrs	r4, r4, #16
    9c2a:	444c      	add	r4, r9
    9c2c:	46a0      	mov	r8, r4
    9c2e:	44d8      	add	r8, fp
    9c30:	1880      	adds	r0, r0, r2
    9c32:	46c2      	mov	sl, r8
    9c34:	44e2      	add	sl, ip
    9c36:	4290      	cmp	r0, r2
    9c38:	4192      	sbcs	r2, r2
    9c3a:	4657      	mov	r7, sl
    9c3c:	4252      	negs	r2, r2
    9c3e:	4691      	mov	r9, r2
    9c40:	19f2      	adds	r2, r6, r7
    9c42:	45e2      	cmp	sl, ip
    9c44:	41bf      	sbcs	r7, r7
    9c46:	427f      	negs	r7, r7
    9c48:	464b      	mov	r3, r9
    9c4a:	46bc      	mov	ip, r7
    9c4c:	45d8      	cmp	r8, fp
    9c4e:	41bf      	sbcs	r7, r7
    9c50:	18d4      	adds	r4, r2, r3
    9c52:	427f      	negs	r7, r7
    9c54:	4663      	mov	r3, ip
    9c56:	431f      	orrs	r7, r3
    9c58:	0c2d      	lsrs	r5, r5, #16
    9c5a:	197f      	adds	r7, r7, r5
    9c5c:	42b2      	cmp	r2, r6
    9c5e:	4192      	sbcs	r2, r2
    9c60:	454c      	cmp	r4, r9
    9c62:	41ad      	sbcs	r5, r5
    9c64:	4252      	negs	r2, r2
    9c66:	426d      	negs	r5, r5
    9c68:	4315      	orrs	r5, r2
    9c6a:	9e01      	ldr	r6, [sp, #4]
    9c6c:	197d      	adds	r5, r7, r5
    9c6e:	19ab      	adds	r3, r5, r6
    9c70:	0de2      	lsrs	r2, r4, #23
    9c72:	025b      	lsls	r3, r3, #9
    9c74:	9f05      	ldr	r7, [sp, #20]
    9c76:	4313      	orrs	r3, r2
    9c78:	0242      	lsls	r2, r0, #9
    9c7a:	433a      	orrs	r2, r7
    9c7c:	469a      	mov	sl, r3
    9c7e:	1e53      	subs	r3, r2, #1
    9c80:	419a      	sbcs	r2, r3
    9c82:	0dc3      	lsrs	r3, r0, #23
    9c84:	1c10      	adds	r0, r2, #0
    9c86:	4318      	orrs	r0, r3
    9c88:	0264      	lsls	r4, r4, #9
    9c8a:	4320      	orrs	r0, r4
    9c8c:	4680      	mov	r8, r0
    9c8e:	4650      	mov	r0, sl
    9c90:	01c0      	lsls	r0, r0, #7
    9c92:	d50d      	bpl.n	9cb0 <__aeabi_dmul+0x374>
    9c94:	4645      	mov	r5, r8
    9c96:	2201      	movs	r2, #1
    9c98:	4656      	mov	r6, sl
    9c9a:	9c04      	ldr	r4, [sp, #16]
    9c9c:	086b      	lsrs	r3, r5, #1
    9c9e:	402a      	ands	r2, r5
    9ca0:	431a      	orrs	r2, r3
    9ca2:	07f3      	lsls	r3, r6, #31
    9ca4:	3401      	adds	r4, #1
    9ca6:	431a      	orrs	r2, r3
    9ca8:	0876      	lsrs	r6, r6, #1
    9caa:	9404      	str	r4, [sp, #16]
    9cac:	4690      	mov	r8, r2
    9cae:	46b2      	mov	sl, r6
    9cb0:	9e04      	ldr	r6, [sp, #16]
    9cb2:	4f63      	ldr	r7, [pc, #396]	; (9e40 <__aeabi_dmul+0x504>)
    9cb4:	19f3      	adds	r3, r6, r7
    9cb6:	2b00      	cmp	r3, #0
    9cb8:	dd61      	ble.n	9d7e <__aeabi_dmul+0x442>
    9cba:	4640      	mov	r0, r8
    9cbc:	0740      	lsls	r0, r0, #29
    9cbe:	d00b      	beq.n	9cd8 <__aeabi_dmul+0x39c>
    9cc0:	220f      	movs	r2, #15
    9cc2:	4644      	mov	r4, r8
    9cc4:	4022      	ands	r2, r4
    9cc6:	2a04      	cmp	r2, #4
    9cc8:	d006      	beq.n	9cd8 <__aeabi_dmul+0x39c>
    9cca:	4642      	mov	r2, r8
    9ccc:	3204      	adds	r2, #4
    9cce:	4542      	cmp	r2, r8
    9cd0:	4180      	sbcs	r0, r0
    9cd2:	4240      	negs	r0, r0
    9cd4:	4482      	add	sl, r0
    9cd6:	4690      	mov	r8, r2
    9cd8:	4655      	mov	r5, sl
    9cda:	01ed      	lsls	r5, r5, #7
    9cdc:	d507      	bpl.n	9cee <__aeabi_dmul+0x3b2>
    9cde:	4b59      	ldr	r3, [pc, #356]	; (9e44 <__aeabi_dmul+0x508>)
    9ce0:	4656      	mov	r6, sl
    9ce2:	9f04      	ldr	r7, [sp, #16]
    9ce4:	2080      	movs	r0, #128	; 0x80
    9ce6:	401e      	ands	r6, r3
    9ce8:	00c0      	lsls	r0, r0, #3
    9cea:	46b2      	mov	sl, r6
    9cec:	183b      	adds	r3, r7, r0
    9cee:	4a56      	ldr	r2, [pc, #344]	; (9e48 <__aeabi_dmul+0x50c>)
    9cf0:	4293      	cmp	r3, r2
    9cf2:	dd00      	ble.n	9cf6 <__aeabi_dmul+0x3ba>
    9cf4:	e6e8      	b.n	9ac8 <__aeabi_dmul+0x18c>
    9cf6:	4644      	mov	r4, r8
    9cf8:	4655      	mov	r5, sl
    9cfa:	08e2      	lsrs	r2, r4, #3
    9cfc:	0768      	lsls	r0, r5, #29
    9cfe:	4310      	orrs	r0, r2
    9d00:	2201      	movs	r2, #1
    9d02:	026c      	lsls	r4, r5, #9
    9d04:	055b      	lsls	r3, r3, #21
    9d06:	400a      	ands	r2, r1
    9d08:	4680      	mov	r8, r0
    9d0a:	0b24      	lsrs	r4, r4, #12
    9d0c:	0d5b      	lsrs	r3, r3, #21
    9d0e:	4691      	mov	r9, r2
    9d10:	e679      	b.n	9a06 <__aeabi_dmul+0xca>
    9d12:	46da      	mov	sl, fp
    9d14:	4690      	mov	r8, r2
    9d16:	1c1d      	adds	r5, r3, #0
    9d18:	e667      	b.n	99ea <__aeabi_dmul+0xae>
    9d1a:	2480      	movs	r4, #128	; 0x80
    9d1c:	0324      	lsls	r4, r4, #12
    9d1e:	4657      	mov	r7, sl
    9d20:	4227      	tst	r7, r4
    9d22:	d11c      	bne.n	9d5e <__aeabi_dmul+0x422>
    9d24:	433c      	orrs	r4, r7
    9d26:	0324      	lsls	r4, r4, #12
    9d28:	0b24      	lsrs	r4, r4, #12
    9d2a:	4b48      	ldr	r3, [pc, #288]	; (9e4c <__aeabi_dmul+0x510>)
    9d2c:	e66b      	b.n	9a06 <__aeabi_dmul+0xca>
    9d2e:	1c03      	adds	r3, r0, #0
    9d30:	3b28      	subs	r3, #40	; 0x28
    9d32:	1c31      	adds	r1, r6, #0
    9d34:	4099      	lsls	r1, r3
    9d36:	468b      	mov	fp, r1
    9d38:	2200      	movs	r2, #0
    9d3a:	e6c1      	b.n	9ac0 <__aeabi_dmul+0x184>
    9d3c:	1c30      	adds	r0, r6, #0
    9d3e:	f000 fc75 	bl	a62c <__clzsi2>
    9d42:	3020      	adds	r0, #32
    9d44:	e6ab      	b.n	9a9e <__aeabi_dmul+0x162>
    9d46:	3b28      	subs	r3, #40	; 0x28
    9d48:	1c21      	adds	r1, r4, #0
    9d4a:	4099      	lsls	r1, r3
    9d4c:	2200      	movs	r2, #0
    9d4e:	468a      	mov	sl, r1
    9d50:	4690      	mov	r8, r2
    9d52:	e68c      	b.n	9a6e <__aeabi_dmul+0x132>
    9d54:	1c20      	adds	r0, r4, #0
    9d56:	f000 fc69 	bl	a62c <__clzsi2>
    9d5a:	3020      	adds	r0, #32
    9d5c:	e676      	b.n	9a4c <__aeabi_dmul+0x110>
    9d5e:	4658      	mov	r0, fp
    9d60:	4220      	tst	r0, r4
    9d62:	d107      	bne.n	9d74 <__aeabi_dmul+0x438>
    9d64:	4304      	orrs	r4, r0
    9d66:	9903      	ldr	r1, [sp, #12]
    9d68:	0324      	lsls	r4, r4, #12
    9d6a:	0b24      	lsrs	r4, r4, #12
    9d6c:	4689      	mov	r9, r1
    9d6e:	4690      	mov	r8, r2
    9d70:	4b36      	ldr	r3, [pc, #216]	; (9e4c <__aeabi_dmul+0x510>)
    9d72:	e648      	b.n	9a06 <__aeabi_dmul+0xca>
    9d74:	433c      	orrs	r4, r7
    9d76:	0324      	lsls	r4, r4, #12
    9d78:	0b24      	lsrs	r4, r4, #12
    9d7a:	4b34      	ldr	r3, [pc, #208]	; (9e4c <__aeabi_dmul+0x510>)
    9d7c:	e643      	b.n	9a06 <__aeabi_dmul+0xca>
    9d7e:	4b34      	ldr	r3, [pc, #208]	; (9e50 <__aeabi_dmul+0x514>)
    9d80:	9e04      	ldr	r6, [sp, #16]
    9d82:	1b9b      	subs	r3, r3, r6
    9d84:	2b38      	cmp	r3, #56	; 0x38
    9d86:	dd06      	ble.n	9d96 <__aeabi_dmul+0x45a>
    9d88:	2301      	movs	r3, #1
    9d8a:	400b      	ands	r3, r1
    9d8c:	2400      	movs	r4, #0
    9d8e:	4699      	mov	r9, r3
    9d90:	46a0      	mov	r8, r4
    9d92:	2300      	movs	r3, #0
    9d94:	e637      	b.n	9a06 <__aeabi_dmul+0xca>
    9d96:	2b1f      	cmp	r3, #31
    9d98:	dc25      	bgt.n	9de6 <__aeabi_dmul+0x4aa>
    9d9a:	9c04      	ldr	r4, [sp, #16]
    9d9c:	4d2d      	ldr	r5, [pc, #180]	; (9e54 <__aeabi_dmul+0x518>)
    9d9e:	4646      	mov	r6, r8
    9da0:	1960      	adds	r0, r4, r5
    9da2:	4652      	mov	r2, sl
    9da4:	4644      	mov	r4, r8
    9da6:	4086      	lsls	r6, r0
    9da8:	40dc      	lsrs	r4, r3
    9daa:	4082      	lsls	r2, r0
    9dac:	4657      	mov	r7, sl
    9dae:	1c30      	adds	r0, r6, #0
    9db0:	4322      	orrs	r2, r4
    9db2:	40df      	lsrs	r7, r3
    9db4:	1e44      	subs	r4, r0, #1
    9db6:	41a0      	sbcs	r0, r4
    9db8:	4302      	orrs	r2, r0
    9dba:	1c3b      	adds	r3, r7, #0
    9dbc:	0754      	lsls	r4, r2, #29
    9dbe:	d009      	beq.n	9dd4 <__aeabi_dmul+0x498>
    9dc0:	200f      	movs	r0, #15
    9dc2:	4010      	ands	r0, r2
    9dc4:	2804      	cmp	r0, #4
    9dc6:	d005      	beq.n	9dd4 <__aeabi_dmul+0x498>
    9dc8:	1d10      	adds	r0, r2, #4
    9dca:	4290      	cmp	r0, r2
    9dcc:	4192      	sbcs	r2, r2
    9dce:	4252      	negs	r2, r2
    9dd0:	189b      	adds	r3, r3, r2
    9dd2:	1c02      	adds	r2, r0, #0
    9dd4:	021d      	lsls	r5, r3, #8
    9dd6:	d51a      	bpl.n	9e0e <__aeabi_dmul+0x4d2>
    9dd8:	2301      	movs	r3, #1
    9dda:	400b      	ands	r3, r1
    9ddc:	2400      	movs	r4, #0
    9dde:	4699      	mov	r9, r3
    9de0:	46a0      	mov	r8, r4
    9de2:	2301      	movs	r3, #1
    9de4:	e60f      	b.n	9a06 <__aeabi_dmul+0xca>
    9de6:	481c      	ldr	r0, [pc, #112]	; (9e58 <__aeabi_dmul+0x51c>)
    9de8:	9c04      	ldr	r4, [sp, #16]
    9dea:	4655      	mov	r5, sl
    9dec:	1b00      	subs	r0, r0, r4
    9dee:	40c5      	lsrs	r5, r0
    9df0:	1c28      	adds	r0, r5, #0
    9df2:	2b20      	cmp	r3, #32
    9df4:	d016      	beq.n	9e24 <__aeabi_dmul+0x4e8>
    9df6:	4e19      	ldr	r6, [pc, #100]	; (9e5c <__aeabi_dmul+0x520>)
    9df8:	4657      	mov	r7, sl
    9dfa:	19a2      	adds	r2, r4, r6
    9dfc:	4097      	lsls	r7, r2
    9dfe:	1c3a      	adds	r2, r7, #0
    9e00:	4643      	mov	r3, r8
    9e02:	431a      	orrs	r2, r3
    9e04:	1e53      	subs	r3, r2, #1
    9e06:	419a      	sbcs	r2, r3
    9e08:	4302      	orrs	r2, r0
    9e0a:	2300      	movs	r3, #0
    9e0c:	e7d6      	b.n	9dbc <__aeabi_dmul+0x480>
    9e0e:	0758      	lsls	r0, r3, #29
    9e10:	025b      	lsls	r3, r3, #9
    9e12:	08d2      	lsrs	r2, r2, #3
    9e14:	0b1c      	lsrs	r4, r3, #12
    9e16:	2301      	movs	r3, #1
    9e18:	400b      	ands	r3, r1
    9e1a:	4310      	orrs	r0, r2
    9e1c:	4699      	mov	r9, r3
    9e1e:	4680      	mov	r8, r0
    9e20:	2300      	movs	r3, #0
    9e22:	e5f0      	b.n	9a06 <__aeabi_dmul+0xca>
    9e24:	2200      	movs	r2, #0
    9e26:	e7eb      	b.n	9e00 <__aeabi_dmul+0x4c4>
    9e28:	2480      	movs	r4, #128	; 0x80
    9e2a:	0324      	lsls	r4, r4, #12
    9e2c:	4650      	mov	r0, sl
    9e2e:	2301      	movs	r3, #1
    9e30:	4304      	orrs	r4, r0
    9e32:	4019      	ands	r1, r3
    9e34:	0324      	lsls	r4, r4, #12
    9e36:	0b24      	lsrs	r4, r4, #12
    9e38:	4689      	mov	r9, r1
    9e3a:	4b04      	ldr	r3, [pc, #16]	; (9e4c <__aeabi_dmul+0x510>)
    9e3c:	e5e3      	b.n	9a06 <__aeabi_dmul+0xca>
    9e3e:	46c0      	nop			; (mov r8, r8)
    9e40:	000003ff 	.word	0x000003ff
    9e44:	feffffff 	.word	0xfeffffff
    9e48:	000007fe 	.word	0x000007fe
    9e4c:	000007ff 	.word	0x000007ff
    9e50:	fffffc02 	.word	0xfffffc02
    9e54:	0000041e 	.word	0x0000041e
    9e58:	fffffbe2 	.word	0xfffffbe2
    9e5c:	0000043e 	.word	0x0000043e

00009e60 <__aeabi_dsub>:
    9e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e62:	465f      	mov	r7, fp
    9e64:	4656      	mov	r6, sl
    9e66:	4644      	mov	r4, r8
    9e68:	464d      	mov	r5, r9
    9e6a:	b4f0      	push	{r4, r5, r6, r7}
    9e6c:	030c      	lsls	r4, r1, #12
    9e6e:	004d      	lsls	r5, r1, #1
    9e70:	0fcf      	lsrs	r7, r1, #31
    9e72:	0a61      	lsrs	r1, r4, #9
    9e74:	0f44      	lsrs	r4, r0, #29
    9e76:	4321      	orrs	r1, r4
    9e78:	00c4      	lsls	r4, r0, #3
    9e7a:	0318      	lsls	r0, r3, #12
    9e7c:	0fde      	lsrs	r6, r3, #31
    9e7e:	4680      	mov	r8, r0
    9e80:	46b4      	mov	ip, r6
    9e82:	4646      	mov	r6, r8
    9e84:	0058      	lsls	r0, r3, #1
    9e86:	0a76      	lsrs	r6, r6, #9
    9e88:	0f53      	lsrs	r3, r2, #29
    9e8a:	4333      	orrs	r3, r6
    9e8c:	00d6      	lsls	r6, r2, #3
    9e8e:	4ad1      	ldr	r2, [pc, #836]	; (a1d4 <__aeabi_dsub+0x374>)
    9e90:	0d6d      	lsrs	r5, r5, #21
    9e92:	46ba      	mov	sl, r7
    9e94:	0d40      	lsrs	r0, r0, #21
    9e96:	46b3      	mov	fp, r6
    9e98:	4290      	cmp	r0, r2
    9e9a:	d100      	bne.n	9e9e <__aeabi_dsub+0x3e>
    9e9c:	e0f5      	b.n	a08a <__aeabi_dsub+0x22a>
    9e9e:	4662      	mov	r2, ip
    9ea0:	2601      	movs	r6, #1
    9ea2:	4072      	eors	r2, r6
    9ea4:	4694      	mov	ip, r2
    9ea6:	4567      	cmp	r7, ip
    9ea8:	d100      	bne.n	9eac <__aeabi_dsub+0x4c>
    9eaa:	e0ab      	b.n	a004 <__aeabi_dsub+0x1a4>
    9eac:	1a2f      	subs	r7, r5, r0
    9eae:	2f00      	cmp	r7, #0
    9eb0:	dc00      	bgt.n	9eb4 <__aeabi_dsub+0x54>
    9eb2:	e111      	b.n	a0d8 <__aeabi_dsub+0x278>
    9eb4:	2800      	cmp	r0, #0
    9eb6:	d13e      	bne.n	9f36 <__aeabi_dsub+0xd6>
    9eb8:	4658      	mov	r0, fp
    9eba:	4318      	orrs	r0, r3
    9ebc:	d000      	beq.n	9ec0 <__aeabi_dsub+0x60>
    9ebe:	e0f1      	b.n	a0a4 <__aeabi_dsub+0x244>
    9ec0:	0760      	lsls	r0, r4, #29
    9ec2:	d100      	bne.n	9ec6 <__aeabi_dsub+0x66>
    9ec4:	e097      	b.n	9ff6 <__aeabi_dsub+0x196>
    9ec6:	230f      	movs	r3, #15
    9ec8:	4023      	ands	r3, r4
    9eca:	2b04      	cmp	r3, #4
    9ecc:	d100      	bne.n	9ed0 <__aeabi_dsub+0x70>
    9ece:	e122      	b.n	a116 <__aeabi_dsub+0x2b6>
    9ed0:	1d22      	adds	r2, r4, #4
    9ed2:	42a2      	cmp	r2, r4
    9ed4:	41a4      	sbcs	r4, r4
    9ed6:	4264      	negs	r4, r4
    9ed8:	2380      	movs	r3, #128	; 0x80
    9eda:	1909      	adds	r1, r1, r4
    9edc:	041b      	lsls	r3, r3, #16
    9ede:	2701      	movs	r7, #1
    9ee0:	4650      	mov	r0, sl
    9ee2:	400b      	ands	r3, r1
    9ee4:	4007      	ands	r7, r0
    9ee6:	1c14      	adds	r4, r2, #0
    9ee8:	2b00      	cmp	r3, #0
    9eea:	d100      	bne.n	9eee <__aeabi_dsub+0x8e>
    9eec:	e079      	b.n	9fe2 <__aeabi_dsub+0x182>
    9eee:	4bb9      	ldr	r3, [pc, #740]	; (a1d4 <__aeabi_dsub+0x374>)
    9ef0:	3501      	adds	r5, #1
    9ef2:	429d      	cmp	r5, r3
    9ef4:	d100      	bne.n	9ef8 <__aeabi_dsub+0x98>
    9ef6:	e10b      	b.n	a110 <__aeabi_dsub+0x2b0>
    9ef8:	4bb7      	ldr	r3, [pc, #732]	; (a1d8 <__aeabi_dsub+0x378>)
    9efa:	08e4      	lsrs	r4, r4, #3
    9efc:	4019      	ands	r1, r3
    9efe:	0748      	lsls	r0, r1, #29
    9f00:	0249      	lsls	r1, r1, #9
    9f02:	4304      	orrs	r4, r0
    9f04:	0b0b      	lsrs	r3, r1, #12
    9f06:	2000      	movs	r0, #0
    9f08:	2100      	movs	r1, #0
    9f0a:	031b      	lsls	r3, r3, #12
    9f0c:	0b1a      	lsrs	r2, r3, #12
    9f0e:	0d0b      	lsrs	r3, r1, #20
    9f10:	056d      	lsls	r5, r5, #21
    9f12:	051b      	lsls	r3, r3, #20
    9f14:	4313      	orrs	r3, r2
    9f16:	086a      	lsrs	r2, r5, #1
    9f18:	4db0      	ldr	r5, [pc, #704]	; (a1dc <__aeabi_dsub+0x37c>)
    9f1a:	07ff      	lsls	r7, r7, #31
    9f1c:	401d      	ands	r5, r3
    9f1e:	4315      	orrs	r5, r2
    9f20:	006d      	lsls	r5, r5, #1
    9f22:	086d      	lsrs	r5, r5, #1
    9f24:	1c29      	adds	r1, r5, #0
    9f26:	4339      	orrs	r1, r7
    9f28:	1c20      	adds	r0, r4, #0
    9f2a:	bc3c      	pop	{r2, r3, r4, r5}
    9f2c:	4690      	mov	r8, r2
    9f2e:	4699      	mov	r9, r3
    9f30:	46a2      	mov	sl, r4
    9f32:	46ab      	mov	fp, r5
    9f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f36:	48a7      	ldr	r0, [pc, #668]	; (a1d4 <__aeabi_dsub+0x374>)
    9f38:	4285      	cmp	r5, r0
    9f3a:	d0c1      	beq.n	9ec0 <__aeabi_dsub+0x60>
    9f3c:	2080      	movs	r0, #128	; 0x80
    9f3e:	0400      	lsls	r0, r0, #16
    9f40:	4303      	orrs	r3, r0
    9f42:	2f38      	cmp	r7, #56	; 0x38
    9f44:	dd00      	ble.n	9f48 <__aeabi_dsub+0xe8>
    9f46:	e0fd      	b.n	a144 <__aeabi_dsub+0x2e4>
    9f48:	2f1f      	cmp	r7, #31
    9f4a:	dd00      	ble.n	9f4e <__aeabi_dsub+0xee>
    9f4c:	e131      	b.n	a1b2 <__aeabi_dsub+0x352>
    9f4e:	2020      	movs	r0, #32
    9f50:	1bc0      	subs	r0, r0, r7
    9f52:	1c1a      	adds	r2, r3, #0
    9f54:	465e      	mov	r6, fp
    9f56:	4082      	lsls	r2, r0
    9f58:	40fe      	lsrs	r6, r7
    9f5a:	4332      	orrs	r2, r6
    9f5c:	4694      	mov	ip, r2
    9f5e:	465a      	mov	r2, fp
    9f60:	4082      	lsls	r2, r0
    9f62:	1c10      	adds	r0, r2, #0
    9f64:	1e42      	subs	r2, r0, #1
    9f66:	4190      	sbcs	r0, r2
    9f68:	40fb      	lsrs	r3, r7
    9f6a:	4662      	mov	r2, ip
    9f6c:	4302      	orrs	r2, r0
    9f6e:	1c1f      	adds	r7, r3, #0
    9f70:	1aa2      	subs	r2, r4, r2
    9f72:	4294      	cmp	r4, r2
    9f74:	41a4      	sbcs	r4, r4
    9f76:	4264      	negs	r4, r4
    9f78:	1bc9      	subs	r1, r1, r7
    9f7a:	1b09      	subs	r1, r1, r4
    9f7c:	1c14      	adds	r4, r2, #0
    9f7e:	020a      	lsls	r2, r1, #8
    9f80:	d59e      	bpl.n	9ec0 <__aeabi_dsub+0x60>
    9f82:	0249      	lsls	r1, r1, #9
    9f84:	0a4f      	lsrs	r7, r1, #9
    9f86:	2f00      	cmp	r7, #0
    9f88:	d100      	bne.n	9f8c <__aeabi_dsub+0x12c>
    9f8a:	e0d6      	b.n	a13a <__aeabi_dsub+0x2da>
    9f8c:	1c38      	adds	r0, r7, #0
    9f8e:	f000 fb4d 	bl	a62c <__clzsi2>
    9f92:	1c02      	adds	r2, r0, #0
    9f94:	3a08      	subs	r2, #8
    9f96:	2a1f      	cmp	r2, #31
    9f98:	dd00      	ble.n	9f9c <__aeabi_dsub+0x13c>
    9f9a:	e0c3      	b.n	a124 <__aeabi_dsub+0x2c4>
    9f9c:	2128      	movs	r1, #40	; 0x28
    9f9e:	1c23      	adds	r3, r4, #0
    9fa0:	1a09      	subs	r1, r1, r0
    9fa2:	4097      	lsls	r7, r2
    9fa4:	40cb      	lsrs	r3, r1
    9fa6:	431f      	orrs	r7, r3
    9fa8:	4094      	lsls	r4, r2
    9faa:	4295      	cmp	r5, r2
    9fac:	dd00      	ble.n	9fb0 <__aeabi_dsub+0x150>
    9fae:	e0c0      	b.n	a132 <__aeabi_dsub+0x2d2>
    9fb0:	1b55      	subs	r5, r2, r5
    9fb2:	1c69      	adds	r1, r5, #1
    9fb4:	291f      	cmp	r1, #31
    9fb6:	dd00      	ble.n	9fba <__aeabi_dsub+0x15a>
    9fb8:	e0ea      	b.n	a190 <__aeabi_dsub+0x330>
    9fba:	221f      	movs	r2, #31
    9fbc:	1b55      	subs	r5, r2, r5
    9fbe:	1c3b      	adds	r3, r7, #0
    9fc0:	1c22      	adds	r2, r4, #0
    9fc2:	40ab      	lsls	r3, r5
    9fc4:	40ca      	lsrs	r2, r1
    9fc6:	40ac      	lsls	r4, r5
    9fc8:	1e65      	subs	r5, r4, #1
    9fca:	41ac      	sbcs	r4, r5
    9fcc:	4313      	orrs	r3, r2
    9fce:	40cf      	lsrs	r7, r1
    9fd0:	431c      	orrs	r4, r3
    9fd2:	1c39      	adds	r1, r7, #0
    9fd4:	2500      	movs	r5, #0
    9fd6:	e773      	b.n	9ec0 <__aeabi_dsub+0x60>
    9fd8:	2408      	movs	r4, #8
    9fda:	4981      	ldr	r1, [pc, #516]	; (a1e0 <__aeabi_dsub+0x380>)
    9fdc:	4d7d      	ldr	r5, [pc, #500]	; (a1d4 <__aeabi_dsub+0x374>)
    9fde:	2700      	movs	r7, #0
    9fe0:	4264      	negs	r4, r4
    9fe2:	4b7c      	ldr	r3, [pc, #496]	; (a1d4 <__aeabi_dsub+0x374>)
    9fe4:	0748      	lsls	r0, r1, #29
    9fe6:	08e4      	lsrs	r4, r4, #3
    9fe8:	4304      	orrs	r4, r0
    9fea:	08c9      	lsrs	r1, r1, #3
    9fec:	429d      	cmp	r5, r3
    9fee:	d050      	beq.n	a092 <__aeabi_dsub+0x232>
    9ff0:	0309      	lsls	r1, r1, #12
    9ff2:	0b0b      	lsrs	r3, r1, #12
    9ff4:	e787      	b.n	9f06 <__aeabi_dsub+0xa6>
    9ff6:	2380      	movs	r3, #128	; 0x80
    9ff8:	041b      	lsls	r3, r3, #16
    9ffa:	2701      	movs	r7, #1
    9ffc:	4652      	mov	r2, sl
    9ffe:	400b      	ands	r3, r1
    a000:	4017      	ands	r7, r2
    a002:	e771      	b.n	9ee8 <__aeabi_dsub+0x88>
    a004:	1a2a      	subs	r2, r5, r0
    a006:	4694      	mov	ip, r2
    a008:	2a00      	cmp	r2, #0
    a00a:	dc00      	bgt.n	a00e <__aeabi_dsub+0x1ae>
    a00c:	e0a1      	b.n	a152 <__aeabi_dsub+0x2f2>
    a00e:	2800      	cmp	r0, #0
    a010:	d054      	beq.n	a0bc <__aeabi_dsub+0x25c>
    a012:	4870      	ldr	r0, [pc, #448]	; (a1d4 <__aeabi_dsub+0x374>)
    a014:	4285      	cmp	r5, r0
    a016:	d100      	bne.n	a01a <__aeabi_dsub+0x1ba>
    a018:	e752      	b.n	9ec0 <__aeabi_dsub+0x60>
    a01a:	2080      	movs	r0, #128	; 0x80
    a01c:	0400      	lsls	r0, r0, #16
    a01e:	4303      	orrs	r3, r0
    a020:	4660      	mov	r0, ip
    a022:	2838      	cmp	r0, #56	; 0x38
    a024:	dd00      	ble.n	a028 <__aeabi_dsub+0x1c8>
    a026:	e110      	b.n	a24a <__aeabi_dsub+0x3ea>
    a028:	281f      	cmp	r0, #31
    a02a:	dd00      	ble.n	a02e <__aeabi_dsub+0x1ce>
    a02c:	e159      	b.n	a2e2 <__aeabi_dsub+0x482>
    a02e:	4662      	mov	r2, ip
    a030:	2020      	movs	r0, #32
    a032:	1a80      	subs	r0, r0, r2
    a034:	1c1e      	adds	r6, r3, #0
    a036:	4086      	lsls	r6, r0
    a038:	46b1      	mov	r9, r6
    a03a:	465e      	mov	r6, fp
    a03c:	40d6      	lsrs	r6, r2
    a03e:	464a      	mov	r2, r9
    a040:	4332      	orrs	r2, r6
    a042:	465e      	mov	r6, fp
    a044:	4086      	lsls	r6, r0
    a046:	4690      	mov	r8, r2
    a048:	1c30      	adds	r0, r6, #0
    a04a:	1e42      	subs	r2, r0, #1
    a04c:	4190      	sbcs	r0, r2
    a04e:	4642      	mov	r2, r8
    a050:	4302      	orrs	r2, r0
    a052:	4660      	mov	r0, ip
    a054:	40c3      	lsrs	r3, r0
    a056:	1912      	adds	r2, r2, r4
    a058:	42a2      	cmp	r2, r4
    a05a:	41a4      	sbcs	r4, r4
    a05c:	4264      	negs	r4, r4
    a05e:	1859      	adds	r1, r3, r1
    a060:	1909      	adds	r1, r1, r4
    a062:	1c14      	adds	r4, r2, #0
    a064:	0208      	lsls	r0, r1, #8
    a066:	d400      	bmi.n	a06a <__aeabi_dsub+0x20a>
    a068:	e72a      	b.n	9ec0 <__aeabi_dsub+0x60>
    a06a:	4b5a      	ldr	r3, [pc, #360]	; (a1d4 <__aeabi_dsub+0x374>)
    a06c:	3501      	adds	r5, #1
    a06e:	429d      	cmp	r5, r3
    a070:	d100      	bne.n	a074 <__aeabi_dsub+0x214>
    a072:	e133      	b.n	a2dc <__aeabi_dsub+0x47c>
    a074:	4b58      	ldr	r3, [pc, #352]	; (a1d8 <__aeabi_dsub+0x378>)
    a076:	0860      	lsrs	r0, r4, #1
    a078:	4019      	ands	r1, r3
    a07a:	2301      	movs	r3, #1
    a07c:	4023      	ands	r3, r4
    a07e:	1c1c      	adds	r4, r3, #0
    a080:	4304      	orrs	r4, r0
    a082:	07cb      	lsls	r3, r1, #31
    a084:	431c      	orrs	r4, r3
    a086:	0849      	lsrs	r1, r1, #1
    a088:	e71a      	b.n	9ec0 <__aeabi_dsub+0x60>
    a08a:	431e      	orrs	r6, r3
    a08c:	d000      	beq.n	a090 <__aeabi_dsub+0x230>
    a08e:	e70a      	b.n	9ea6 <__aeabi_dsub+0x46>
    a090:	e705      	b.n	9e9e <__aeabi_dsub+0x3e>
    a092:	1c23      	adds	r3, r4, #0
    a094:	430b      	orrs	r3, r1
    a096:	d03b      	beq.n	a110 <__aeabi_dsub+0x2b0>
    a098:	2380      	movs	r3, #128	; 0x80
    a09a:	031b      	lsls	r3, r3, #12
    a09c:	430b      	orrs	r3, r1
    a09e:	031b      	lsls	r3, r3, #12
    a0a0:	0b1b      	lsrs	r3, r3, #12
    a0a2:	e730      	b.n	9f06 <__aeabi_dsub+0xa6>
    a0a4:	3f01      	subs	r7, #1
    a0a6:	2f00      	cmp	r7, #0
    a0a8:	d16d      	bne.n	a186 <__aeabi_dsub+0x326>
    a0aa:	465e      	mov	r6, fp
    a0ac:	1ba2      	subs	r2, r4, r6
    a0ae:	4294      	cmp	r4, r2
    a0b0:	41a4      	sbcs	r4, r4
    a0b2:	4264      	negs	r4, r4
    a0b4:	1ac9      	subs	r1, r1, r3
    a0b6:	1b09      	subs	r1, r1, r4
    a0b8:	1c14      	adds	r4, r2, #0
    a0ba:	e760      	b.n	9f7e <__aeabi_dsub+0x11e>
    a0bc:	4658      	mov	r0, fp
    a0be:	4318      	orrs	r0, r3
    a0c0:	d100      	bne.n	a0c4 <__aeabi_dsub+0x264>
    a0c2:	e6fd      	b.n	9ec0 <__aeabi_dsub+0x60>
    a0c4:	2601      	movs	r6, #1
    a0c6:	4276      	negs	r6, r6
    a0c8:	44b4      	add	ip, r6
    a0ca:	4660      	mov	r0, ip
    a0cc:	2800      	cmp	r0, #0
    a0ce:	d000      	beq.n	a0d2 <__aeabi_dsub+0x272>
    a0d0:	e0d2      	b.n	a278 <__aeabi_dsub+0x418>
    a0d2:	465e      	mov	r6, fp
    a0d4:	1932      	adds	r2, r6, r4
    a0d6:	e7bf      	b.n	a058 <__aeabi_dsub+0x1f8>
    a0d8:	2f00      	cmp	r7, #0
    a0da:	d000      	beq.n	a0de <__aeabi_dsub+0x27e>
    a0dc:	e082      	b.n	a1e4 <__aeabi_dsub+0x384>
    a0de:	1c68      	adds	r0, r5, #1
    a0e0:	0540      	lsls	r0, r0, #21
    a0e2:	0d40      	lsrs	r0, r0, #21
    a0e4:	2801      	cmp	r0, #1
    a0e6:	dc00      	bgt.n	a0ea <__aeabi_dsub+0x28a>
    a0e8:	e0ea      	b.n	a2c0 <__aeabi_dsub+0x460>
    a0ea:	465a      	mov	r2, fp
    a0ec:	1aa2      	subs	r2, r4, r2
    a0ee:	4294      	cmp	r4, r2
    a0f0:	41bf      	sbcs	r7, r7
    a0f2:	1ac8      	subs	r0, r1, r3
    a0f4:	427f      	negs	r7, r7
    a0f6:	1bc7      	subs	r7, r0, r7
    a0f8:	023e      	lsls	r6, r7, #8
    a0fa:	d400      	bmi.n	a0fe <__aeabi_dsub+0x29e>
    a0fc:	e09a      	b.n	a234 <__aeabi_dsub+0x3d4>
    a0fe:	4658      	mov	r0, fp
    a100:	1b04      	subs	r4, r0, r4
    a102:	45a3      	cmp	fp, r4
    a104:	4192      	sbcs	r2, r2
    a106:	1a59      	subs	r1, r3, r1
    a108:	4252      	negs	r2, r2
    a10a:	1a8f      	subs	r7, r1, r2
    a10c:	46e2      	mov	sl, ip
    a10e:	e73a      	b.n	9f86 <__aeabi_dsub+0x126>
    a110:	2300      	movs	r3, #0
    a112:	2400      	movs	r4, #0
    a114:	e6f7      	b.n	9f06 <__aeabi_dsub+0xa6>
    a116:	2380      	movs	r3, #128	; 0x80
    a118:	041b      	lsls	r3, r3, #16
    a11a:	2701      	movs	r7, #1
    a11c:	4656      	mov	r6, sl
    a11e:	400b      	ands	r3, r1
    a120:	4037      	ands	r7, r6
    a122:	e6e1      	b.n	9ee8 <__aeabi_dsub+0x88>
    a124:	1c27      	adds	r7, r4, #0
    a126:	3828      	subs	r0, #40	; 0x28
    a128:	4087      	lsls	r7, r0
    a12a:	2400      	movs	r4, #0
    a12c:	4295      	cmp	r5, r2
    a12e:	dc00      	bgt.n	a132 <__aeabi_dsub+0x2d2>
    a130:	e73e      	b.n	9fb0 <__aeabi_dsub+0x150>
    a132:	4929      	ldr	r1, [pc, #164]	; (a1d8 <__aeabi_dsub+0x378>)
    a134:	1aad      	subs	r5, r5, r2
    a136:	4039      	ands	r1, r7
    a138:	e6c2      	b.n	9ec0 <__aeabi_dsub+0x60>
    a13a:	1c20      	adds	r0, r4, #0
    a13c:	f000 fa76 	bl	a62c <__clzsi2>
    a140:	3020      	adds	r0, #32
    a142:	e726      	b.n	9f92 <__aeabi_dsub+0x132>
    a144:	465a      	mov	r2, fp
    a146:	431a      	orrs	r2, r3
    a148:	1e53      	subs	r3, r2, #1
    a14a:	419a      	sbcs	r2, r3
    a14c:	b2d2      	uxtb	r2, r2
    a14e:	2700      	movs	r7, #0
    a150:	e70e      	b.n	9f70 <__aeabi_dsub+0x110>
    a152:	2a00      	cmp	r2, #0
    a154:	d000      	beq.n	a158 <__aeabi_dsub+0x2f8>
    a156:	e0e0      	b.n	a31a <__aeabi_dsub+0x4ba>
    a158:	1c68      	adds	r0, r5, #1
    a15a:	0546      	lsls	r6, r0, #21
    a15c:	0d76      	lsrs	r6, r6, #21
    a15e:	2e01      	cmp	r6, #1
    a160:	dc00      	bgt.n	a164 <__aeabi_dsub+0x304>
    a162:	e092      	b.n	a28a <__aeabi_dsub+0x42a>
    a164:	4d1b      	ldr	r5, [pc, #108]	; (a1d4 <__aeabi_dsub+0x374>)
    a166:	42a8      	cmp	r0, r5
    a168:	d100      	bne.n	a16c <__aeabi_dsub+0x30c>
    a16a:	e0f7      	b.n	a35c <__aeabi_dsub+0x4fc>
    a16c:	465e      	mov	r6, fp
    a16e:	1932      	adds	r2, r6, r4
    a170:	42a2      	cmp	r2, r4
    a172:	41a4      	sbcs	r4, r4
    a174:	4264      	negs	r4, r4
    a176:	1859      	adds	r1, r3, r1
    a178:	1909      	adds	r1, r1, r4
    a17a:	07cc      	lsls	r4, r1, #31
    a17c:	0852      	lsrs	r2, r2, #1
    a17e:	4314      	orrs	r4, r2
    a180:	0849      	lsrs	r1, r1, #1
    a182:	1c05      	adds	r5, r0, #0
    a184:	e69c      	b.n	9ec0 <__aeabi_dsub+0x60>
    a186:	4813      	ldr	r0, [pc, #76]	; (a1d4 <__aeabi_dsub+0x374>)
    a188:	4285      	cmp	r5, r0
    a18a:	d000      	beq.n	a18e <__aeabi_dsub+0x32e>
    a18c:	e6d9      	b.n	9f42 <__aeabi_dsub+0xe2>
    a18e:	e697      	b.n	9ec0 <__aeabi_dsub+0x60>
    a190:	1c2b      	adds	r3, r5, #0
    a192:	3b1f      	subs	r3, #31
    a194:	1c3e      	adds	r6, r7, #0
    a196:	40de      	lsrs	r6, r3
    a198:	1c33      	adds	r3, r6, #0
    a19a:	2920      	cmp	r1, #32
    a19c:	d071      	beq.n	a282 <__aeabi_dsub+0x422>
    a19e:	223f      	movs	r2, #63	; 0x3f
    a1a0:	1b55      	subs	r5, r2, r5
    a1a2:	40af      	lsls	r7, r5
    a1a4:	433c      	orrs	r4, r7
    a1a6:	1e60      	subs	r0, r4, #1
    a1a8:	4184      	sbcs	r4, r0
    a1aa:	431c      	orrs	r4, r3
    a1ac:	2100      	movs	r1, #0
    a1ae:	2500      	movs	r5, #0
    a1b0:	e686      	b.n	9ec0 <__aeabi_dsub+0x60>
    a1b2:	1c38      	adds	r0, r7, #0
    a1b4:	3820      	subs	r0, #32
    a1b6:	1c1e      	adds	r6, r3, #0
    a1b8:	40c6      	lsrs	r6, r0
    a1ba:	1c30      	adds	r0, r6, #0
    a1bc:	2f20      	cmp	r7, #32
    a1be:	d062      	beq.n	a286 <__aeabi_dsub+0x426>
    a1c0:	2240      	movs	r2, #64	; 0x40
    a1c2:	1bd7      	subs	r7, r2, r7
    a1c4:	40bb      	lsls	r3, r7
    a1c6:	465a      	mov	r2, fp
    a1c8:	431a      	orrs	r2, r3
    a1ca:	1e53      	subs	r3, r2, #1
    a1cc:	419a      	sbcs	r2, r3
    a1ce:	4302      	orrs	r2, r0
    a1d0:	2700      	movs	r7, #0
    a1d2:	e6cd      	b.n	9f70 <__aeabi_dsub+0x110>
    a1d4:	000007ff 	.word	0x000007ff
    a1d8:	ff7fffff 	.word	0xff7fffff
    a1dc:	800fffff 	.word	0x800fffff
    a1e0:	007fffff 	.word	0x007fffff
    a1e4:	2d00      	cmp	r5, #0
    a1e6:	d037      	beq.n	a258 <__aeabi_dsub+0x3f8>
    a1e8:	4db6      	ldr	r5, [pc, #728]	; (a4c4 <__aeabi_dsub+0x664>)
    a1ea:	42a8      	cmp	r0, r5
    a1ec:	d100      	bne.n	a1f0 <__aeabi_dsub+0x390>
    a1ee:	e08f      	b.n	a310 <__aeabi_dsub+0x4b0>
    a1f0:	2580      	movs	r5, #128	; 0x80
    a1f2:	042d      	lsls	r5, r5, #16
    a1f4:	427f      	negs	r7, r7
    a1f6:	4329      	orrs	r1, r5
    a1f8:	2f38      	cmp	r7, #56	; 0x38
    a1fa:	dd00      	ble.n	a1fe <__aeabi_dsub+0x39e>
    a1fc:	e0a8      	b.n	a350 <__aeabi_dsub+0x4f0>
    a1fe:	2f1f      	cmp	r7, #31
    a200:	dd00      	ble.n	a204 <__aeabi_dsub+0x3a4>
    a202:	e124      	b.n	a44e <__aeabi_dsub+0x5ee>
    a204:	2520      	movs	r5, #32
    a206:	1bed      	subs	r5, r5, r7
    a208:	1c0e      	adds	r6, r1, #0
    a20a:	40ae      	lsls	r6, r5
    a20c:	46b0      	mov	r8, r6
    a20e:	1c26      	adds	r6, r4, #0
    a210:	40fe      	lsrs	r6, r7
    a212:	4642      	mov	r2, r8
    a214:	40ac      	lsls	r4, r5
    a216:	4316      	orrs	r6, r2
    a218:	1e65      	subs	r5, r4, #1
    a21a:	41ac      	sbcs	r4, r5
    a21c:	4334      	orrs	r4, r6
    a21e:	40f9      	lsrs	r1, r7
    a220:	465a      	mov	r2, fp
    a222:	1b14      	subs	r4, r2, r4
    a224:	45a3      	cmp	fp, r4
    a226:	4192      	sbcs	r2, r2
    a228:	1a5b      	subs	r3, r3, r1
    a22a:	4252      	negs	r2, r2
    a22c:	1a99      	subs	r1, r3, r2
    a22e:	1c05      	adds	r5, r0, #0
    a230:	46e2      	mov	sl, ip
    a232:	e6a4      	b.n	9f7e <__aeabi_dsub+0x11e>
    a234:	1c13      	adds	r3, r2, #0
    a236:	433b      	orrs	r3, r7
    a238:	1c14      	adds	r4, r2, #0
    a23a:	2b00      	cmp	r3, #0
    a23c:	d000      	beq.n	a240 <__aeabi_dsub+0x3e0>
    a23e:	e6a2      	b.n	9f86 <__aeabi_dsub+0x126>
    a240:	2700      	movs	r7, #0
    a242:	2100      	movs	r1, #0
    a244:	2400      	movs	r4, #0
    a246:	2500      	movs	r5, #0
    a248:	e6cb      	b.n	9fe2 <__aeabi_dsub+0x182>
    a24a:	465a      	mov	r2, fp
    a24c:	431a      	orrs	r2, r3
    a24e:	1e53      	subs	r3, r2, #1
    a250:	419a      	sbcs	r2, r3
    a252:	b2d2      	uxtb	r2, r2
    a254:	2300      	movs	r3, #0
    a256:	e6fe      	b.n	a056 <__aeabi_dsub+0x1f6>
    a258:	1c0d      	adds	r5, r1, #0
    a25a:	4325      	orrs	r5, r4
    a25c:	d058      	beq.n	a310 <__aeabi_dsub+0x4b0>
    a25e:	43ff      	mvns	r7, r7
    a260:	2f00      	cmp	r7, #0
    a262:	d151      	bne.n	a308 <__aeabi_dsub+0x4a8>
    a264:	465a      	mov	r2, fp
    a266:	1b14      	subs	r4, r2, r4
    a268:	45a3      	cmp	fp, r4
    a26a:	4192      	sbcs	r2, r2
    a26c:	1a59      	subs	r1, r3, r1
    a26e:	4252      	negs	r2, r2
    a270:	1a89      	subs	r1, r1, r2
    a272:	1c05      	adds	r5, r0, #0
    a274:	46e2      	mov	sl, ip
    a276:	e682      	b.n	9f7e <__aeabi_dsub+0x11e>
    a278:	4892      	ldr	r0, [pc, #584]	; (a4c4 <__aeabi_dsub+0x664>)
    a27a:	4285      	cmp	r5, r0
    a27c:	d000      	beq.n	a280 <__aeabi_dsub+0x420>
    a27e:	e6cf      	b.n	a020 <__aeabi_dsub+0x1c0>
    a280:	e61e      	b.n	9ec0 <__aeabi_dsub+0x60>
    a282:	2700      	movs	r7, #0
    a284:	e78e      	b.n	a1a4 <__aeabi_dsub+0x344>
    a286:	2300      	movs	r3, #0
    a288:	e79d      	b.n	a1c6 <__aeabi_dsub+0x366>
    a28a:	1c08      	adds	r0, r1, #0
    a28c:	4320      	orrs	r0, r4
    a28e:	2d00      	cmp	r5, #0
    a290:	d000      	beq.n	a294 <__aeabi_dsub+0x434>
    a292:	e0c2      	b.n	a41a <__aeabi_dsub+0x5ba>
    a294:	2800      	cmp	r0, #0
    a296:	d100      	bne.n	a29a <__aeabi_dsub+0x43a>
    a298:	e0ef      	b.n	a47a <__aeabi_dsub+0x61a>
    a29a:	4658      	mov	r0, fp
    a29c:	4318      	orrs	r0, r3
    a29e:	d100      	bne.n	a2a2 <__aeabi_dsub+0x442>
    a2a0:	e60e      	b.n	9ec0 <__aeabi_dsub+0x60>
    a2a2:	4658      	mov	r0, fp
    a2a4:	1902      	adds	r2, r0, r4
    a2a6:	42a2      	cmp	r2, r4
    a2a8:	41a4      	sbcs	r4, r4
    a2aa:	4264      	negs	r4, r4
    a2ac:	1859      	adds	r1, r3, r1
    a2ae:	1909      	adds	r1, r1, r4
    a2b0:	1c14      	adds	r4, r2, #0
    a2b2:	020a      	lsls	r2, r1, #8
    a2b4:	d400      	bmi.n	a2b8 <__aeabi_dsub+0x458>
    a2b6:	e603      	b.n	9ec0 <__aeabi_dsub+0x60>
    a2b8:	4b83      	ldr	r3, [pc, #524]	; (a4c8 <__aeabi_dsub+0x668>)
    a2ba:	2501      	movs	r5, #1
    a2bc:	4019      	ands	r1, r3
    a2be:	e5ff      	b.n	9ec0 <__aeabi_dsub+0x60>
    a2c0:	1c08      	adds	r0, r1, #0
    a2c2:	4320      	orrs	r0, r4
    a2c4:	2d00      	cmp	r5, #0
    a2c6:	d138      	bne.n	a33a <__aeabi_dsub+0x4da>
    a2c8:	2800      	cmp	r0, #0
    a2ca:	d16f      	bne.n	a3ac <__aeabi_dsub+0x54c>
    a2cc:	4659      	mov	r1, fp
    a2ce:	4319      	orrs	r1, r3
    a2d0:	d003      	beq.n	a2da <__aeabi_dsub+0x47a>
    a2d2:	1c19      	adds	r1, r3, #0
    a2d4:	465c      	mov	r4, fp
    a2d6:	46e2      	mov	sl, ip
    a2d8:	e5f2      	b.n	9ec0 <__aeabi_dsub+0x60>
    a2da:	2700      	movs	r7, #0
    a2dc:	2100      	movs	r1, #0
    a2de:	2400      	movs	r4, #0
    a2e0:	e67f      	b.n	9fe2 <__aeabi_dsub+0x182>
    a2e2:	4660      	mov	r0, ip
    a2e4:	3820      	subs	r0, #32
    a2e6:	1c1a      	adds	r2, r3, #0
    a2e8:	40c2      	lsrs	r2, r0
    a2ea:	4666      	mov	r6, ip
    a2ec:	1c10      	adds	r0, r2, #0
    a2ee:	2e20      	cmp	r6, #32
    a2f0:	d100      	bne.n	a2f4 <__aeabi_dsub+0x494>
    a2f2:	e0aa      	b.n	a44a <__aeabi_dsub+0x5ea>
    a2f4:	2240      	movs	r2, #64	; 0x40
    a2f6:	1b92      	subs	r2, r2, r6
    a2f8:	4093      	lsls	r3, r2
    a2fa:	465a      	mov	r2, fp
    a2fc:	431a      	orrs	r2, r3
    a2fe:	1e53      	subs	r3, r2, #1
    a300:	419a      	sbcs	r2, r3
    a302:	4302      	orrs	r2, r0
    a304:	2300      	movs	r3, #0
    a306:	e6a6      	b.n	a056 <__aeabi_dsub+0x1f6>
    a308:	4d6e      	ldr	r5, [pc, #440]	; (a4c4 <__aeabi_dsub+0x664>)
    a30a:	42a8      	cmp	r0, r5
    a30c:	d000      	beq.n	a310 <__aeabi_dsub+0x4b0>
    a30e:	e773      	b.n	a1f8 <__aeabi_dsub+0x398>
    a310:	1c19      	adds	r1, r3, #0
    a312:	465c      	mov	r4, fp
    a314:	1c05      	adds	r5, r0, #0
    a316:	46e2      	mov	sl, ip
    a318:	e5d2      	b.n	9ec0 <__aeabi_dsub+0x60>
    a31a:	2d00      	cmp	r5, #0
    a31c:	d122      	bne.n	a364 <__aeabi_dsub+0x504>
    a31e:	1c0d      	adds	r5, r1, #0
    a320:	4325      	orrs	r5, r4
    a322:	d076      	beq.n	a412 <__aeabi_dsub+0x5b2>
    a324:	43d5      	mvns	r5, r2
    a326:	2d00      	cmp	r5, #0
    a328:	d170      	bne.n	a40c <__aeabi_dsub+0x5ac>
    a32a:	445c      	add	r4, fp
    a32c:	455c      	cmp	r4, fp
    a32e:	4192      	sbcs	r2, r2
    a330:	1859      	adds	r1, r3, r1
    a332:	4252      	negs	r2, r2
    a334:	1889      	adds	r1, r1, r2
    a336:	1c05      	adds	r5, r0, #0
    a338:	e694      	b.n	a064 <__aeabi_dsub+0x204>
    a33a:	2800      	cmp	r0, #0
    a33c:	d14c      	bne.n	a3d8 <__aeabi_dsub+0x578>
    a33e:	4659      	mov	r1, fp
    a340:	4319      	orrs	r1, r3
    a342:	d100      	bne.n	a346 <__aeabi_dsub+0x4e6>
    a344:	e648      	b.n	9fd8 <__aeabi_dsub+0x178>
    a346:	1c19      	adds	r1, r3, #0
    a348:	465c      	mov	r4, fp
    a34a:	46e2      	mov	sl, ip
    a34c:	4d5d      	ldr	r5, [pc, #372]	; (a4c4 <__aeabi_dsub+0x664>)
    a34e:	e5b7      	b.n	9ec0 <__aeabi_dsub+0x60>
    a350:	430c      	orrs	r4, r1
    a352:	1e61      	subs	r1, r4, #1
    a354:	418c      	sbcs	r4, r1
    a356:	b2e4      	uxtb	r4, r4
    a358:	2100      	movs	r1, #0
    a35a:	e761      	b.n	a220 <__aeabi_dsub+0x3c0>
    a35c:	1c05      	adds	r5, r0, #0
    a35e:	2100      	movs	r1, #0
    a360:	2400      	movs	r4, #0
    a362:	e63e      	b.n	9fe2 <__aeabi_dsub+0x182>
    a364:	4d57      	ldr	r5, [pc, #348]	; (a4c4 <__aeabi_dsub+0x664>)
    a366:	42a8      	cmp	r0, r5
    a368:	d053      	beq.n	a412 <__aeabi_dsub+0x5b2>
    a36a:	4255      	negs	r5, r2
    a36c:	2280      	movs	r2, #128	; 0x80
    a36e:	0416      	lsls	r6, r2, #16
    a370:	4331      	orrs	r1, r6
    a372:	2d38      	cmp	r5, #56	; 0x38
    a374:	dc7b      	bgt.n	a46e <__aeabi_dsub+0x60e>
    a376:	2d1f      	cmp	r5, #31
    a378:	dd00      	ble.n	a37c <__aeabi_dsub+0x51c>
    a37a:	e08c      	b.n	a496 <__aeabi_dsub+0x636>
    a37c:	2220      	movs	r2, #32
    a37e:	1b56      	subs	r6, r2, r5
    a380:	1c0a      	adds	r2, r1, #0
    a382:	46b4      	mov	ip, r6
    a384:	40b2      	lsls	r2, r6
    a386:	1c26      	adds	r6, r4, #0
    a388:	40ee      	lsrs	r6, r5
    a38a:	4332      	orrs	r2, r6
    a38c:	4690      	mov	r8, r2
    a38e:	4662      	mov	r2, ip
    a390:	4094      	lsls	r4, r2
    a392:	1e66      	subs	r6, r4, #1
    a394:	41b4      	sbcs	r4, r6
    a396:	4642      	mov	r2, r8
    a398:	4314      	orrs	r4, r2
    a39a:	40e9      	lsrs	r1, r5
    a39c:	445c      	add	r4, fp
    a39e:	455c      	cmp	r4, fp
    a3a0:	4192      	sbcs	r2, r2
    a3a2:	18cb      	adds	r3, r1, r3
    a3a4:	4252      	negs	r2, r2
    a3a6:	1899      	adds	r1, r3, r2
    a3a8:	1c05      	adds	r5, r0, #0
    a3aa:	e65b      	b.n	a064 <__aeabi_dsub+0x204>
    a3ac:	4658      	mov	r0, fp
    a3ae:	4318      	orrs	r0, r3
    a3b0:	d100      	bne.n	a3b4 <__aeabi_dsub+0x554>
    a3b2:	e585      	b.n	9ec0 <__aeabi_dsub+0x60>
    a3b4:	465e      	mov	r6, fp
    a3b6:	1ba7      	subs	r7, r4, r6
    a3b8:	42bc      	cmp	r4, r7
    a3ba:	4192      	sbcs	r2, r2
    a3bc:	1ac8      	subs	r0, r1, r3
    a3be:	4252      	negs	r2, r2
    a3c0:	1a80      	subs	r0, r0, r2
    a3c2:	0206      	lsls	r6, r0, #8
    a3c4:	d560      	bpl.n	a488 <__aeabi_dsub+0x628>
    a3c6:	4658      	mov	r0, fp
    a3c8:	1b04      	subs	r4, r0, r4
    a3ca:	45a3      	cmp	fp, r4
    a3cc:	4192      	sbcs	r2, r2
    a3ce:	1a59      	subs	r1, r3, r1
    a3d0:	4252      	negs	r2, r2
    a3d2:	1a89      	subs	r1, r1, r2
    a3d4:	46e2      	mov	sl, ip
    a3d6:	e573      	b.n	9ec0 <__aeabi_dsub+0x60>
    a3d8:	4658      	mov	r0, fp
    a3da:	4318      	orrs	r0, r3
    a3dc:	d033      	beq.n	a446 <__aeabi_dsub+0x5e6>
    a3de:	0748      	lsls	r0, r1, #29
    a3e0:	08e4      	lsrs	r4, r4, #3
    a3e2:	4304      	orrs	r4, r0
    a3e4:	2080      	movs	r0, #128	; 0x80
    a3e6:	08c9      	lsrs	r1, r1, #3
    a3e8:	0300      	lsls	r0, r0, #12
    a3ea:	4201      	tst	r1, r0
    a3ec:	d008      	beq.n	a400 <__aeabi_dsub+0x5a0>
    a3ee:	08dd      	lsrs	r5, r3, #3
    a3f0:	4205      	tst	r5, r0
    a3f2:	d105      	bne.n	a400 <__aeabi_dsub+0x5a0>
    a3f4:	4659      	mov	r1, fp
    a3f6:	08ca      	lsrs	r2, r1, #3
    a3f8:	075c      	lsls	r4, r3, #29
    a3fa:	4314      	orrs	r4, r2
    a3fc:	1c29      	adds	r1, r5, #0
    a3fe:	46e2      	mov	sl, ip
    a400:	0f63      	lsrs	r3, r4, #29
    a402:	00c9      	lsls	r1, r1, #3
    a404:	4319      	orrs	r1, r3
    a406:	00e4      	lsls	r4, r4, #3
    a408:	4d2e      	ldr	r5, [pc, #184]	; (a4c4 <__aeabi_dsub+0x664>)
    a40a:	e559      	b.n	9ec0 <__aeabi_dsub+0x60>
    a40c:	4a2d      	ldr	r2, [pc, #180]	; (a4c4 <__aeabi_dsub+0x664>)
    a40e:	4290      	cmp	r0, r2
    a410:	d1af      	bne.n	a372 <__aeabi_dsub+0x512>
    a412:	1c19      	adds	r1, r3, #0
    a414:	465c      	mov	r4, fp
    a416:	1c05      	adds	r5, r0, #0
    a418:	e552      	b.n	9ec0 <__aeabi_dsub+0x60>
    a41a:	2800      	cmp	r0, #0
    a41c:	d030      	beq.n	a480 <__aeabi_dsub+0x620>
    a41e:	4658      	mov	r0, fp
    a420:	4318      	orrs	r0, r3
    a422:	d010      	beq.n	a446 <__aeabi_dsub+0x5e6>
    a424:	2580      	movs	r5, #128	; 0x80
    a426:	0748      	lsls	r0, r1, #29
    a428:	08e4      	lsrs	r4, r4, #3
    a42a:	08c9      	lsrs	r1, r1, #3
    a42c:	032d      	lsls	r5, r5, #12
    a42e:	4304      	orrs	r4, r0
    a430:	4229      	tst	r1, r5
    a432:	d0e5      	beq.n	a400 <__aeabi_dsub+0x5a0>
    a434:	08d8      	lsrs	r0, r3, #3
    a436:	4228      	tst	r0, r5
    a438:	d1e2      	bne.n	a400 <__aeabi_dsub+0x5a0>
    a43a:	465d      	mov	r5, fp
    a43c:	08ea      	lsrs	r2, r5, #3
    a43e:	075c      	lsls	r4, r3, #29
    a440:	4314      	orrs	r4, r2
    a442:	1c01      	adds	r1, r0, #0
    a444:	e7dc      	b.n	a400 <__aeabi_dsub+0x5a0>
    a446:	4d1f      	ldr	r5, [pc, #124]	; (a4c4 <__aeabi_dsub+0x664>)
    a448:	e53a      	b.n	9ec0 <__aeabi_dsub+0x60>
    a44a:	2300      	movs	r3, #0
    a44c:	e755      	b.n	a2fa <__aeabi_dsub+0x49a>
    a44e:	1c3d      	adds	r5, r7, #0
    a450:	3d20      	subs	r5, #32
    a452:	1c0e      	adds	r6, r1, #0
    a454:	40ee      	lsrs	r6, r5
    a456:	1c35      	adds	r5, r6, #0
    a458:	2f20      	cmp	r7, #32
    a45a:	d02e      	beq.n	a4ba <__aeabi_dsub+0x65a>
    a45c:	2640      	movs	r6, #64	; 0x40
    a45e:	1bf7      	subs	r7, r6, r7
    a460:	40b9      	lsls	r1, r7
    a462:	430c      	orrs	r4, r1
    a464:	1e61      	subs	r1, r4, #1
    a466:	418c      	sbcs	r4, r1
    a468:	432c      	orrs	r4, r5
    a46a:	2100      	movs	r1, #0
    a46c:	e6d8      	b.n	a220 <__aeabi_dsub+0x3c0>
    a46e:	430c      	orrs	r4, r1
    a470:	1e61      	subs	r1, r4, #1
    a472:	418c      	sbcs	r4, r1
    a474:	b2e4      	uxtb	r4, r4
    a476:	2100      	movs	r1, #0
    a478:	e790      	b.n	a39c <__aeabi_dsub+0x53c>
    a47a:	1c19      	adds	r1, r3, #0
    a47c:	465c      	mov	r4, fp
    a47e:	e51f      	b.n	9ec0 <__aeabi_dsub+0x60>
    a480:	1c19      	adds	r1, r3, #0
    a482:	465c      	mov	r4, fp
    a484:	4d0f      	ldr	r5, [pc, #60]	; (a4c4 <__aeabi_dsub+0x664>)
    a486:	e51b      	b.n	9ec0 <__aeabi_dsub+0x60>
    a488:	1c03      	adds	r3, r0, #0
    a48a:	433b      	orrs	r3, r7
    a48c:	d100      	bne.n	a490 <__aeabi_dsub+0x630>
    a48e:	e724      	b.n	a2da <__aeabi_dsub+0x47a>
    a490:	1c01      	adds	r1, r0, #0
    a492:	1c3c      	adds	r4, r7, #0
    a494:	e514      	b.n	9ec0 <__aeabi_dsub+0x60>
    a496:	2620      	movs	r6, #32
    a498:	4276      	negs	r6, r6
    a49a:	1976      	adds	r6, r6, r5
    a49c:	1c0a      	adds	r2, r1, #0
    a49e:	40f2      	lsrs	r2, r6
    a4a0:	4690      	mov	r8, r2
    a4a2:	2d20      	cmp	r5, #32
    a4a4:	d00b      	beq.n	a4be <__aeabi_dsub+0x65e>
    a4a6:	2640      	movs	r6, #64	; 0x40
    a4a8:	1b75      	subs	r5, r6, r5
    a4aa:	40a9      	lsls	r1, r5
    a4ac:	430c      	orrs	r4, r1
    a4ae:	1e61      	subs	r1, r4, #1
    a4b0:	418c      	sbcs	r4, r1
    a4b2:	4645      	mov	r5, r8
    a4b4:	432c      	orrs	r4, r5
    a4b6:	2100      	movs	r1, #0
    a4b8:	e770      	b.n	a39c <__aeabi_dsub+0x53c>
    a4ba:	2100      	movs	r1, #0
    a4bc:	e7d1      	b.n	a462 <__aeabi_dsub+0x602>
    a4be:	2100      	movs	r1, #0
    a4c0:	e7f4      	b.n	a4ac <__aeabi_dsub+0x64c>
    a4c2:	46c0      	nop			; (mov r8, r8)
    a4c4:	000007ff 	.word	0x000007ff
    a4c8:	ff7fffff 	.word	0xff7fffff

0000a4cc <__aeabi_d2iz>:
    a4cc:	b570      	push	{r4, r5, r6, lr}
    a4ce:	1c0b      	adds	r3, r1, #0
    a4d0:	4c12      	ldr	r4, [pc, #72]	; (a51c <__aeabi_d2iz+0x50>)
    a4d2:	0309      	lsls	r1, r1, #12
    a4d4:	0b0e      	lsrs	r6, r1, #12
    a4d6:	0059      	lsls	r1, r3, #1
    a4d8:	1c02      	adds	r2, r0, #0
    a4da:	0d49      	lsrs	r1, r1, #21
    a4dc:	0fdd      	lsrs	r5, r3, #31
    a4de:	2000      	movs	r0, #0
    a4e0:	42a1      	cmp	r1, r4
    a4e2:	dd11      	ble.n	a508 <__aeabi_d2iz+0x3c>
    a4e4:	480e      	ldr	r0, [pc, #56]	; (a520 <__aeabi_d2iz+0x54>)
    a4e6:	4281      	cmp	r1, r0
    a4e8:	dc0f      	bgt.n	a50a <__aeabi_d2iz+0x3e>
    a4ea:	2080      	movs	r0, #128	; 0x80
    a4ec:	0340      	lsls	r0, r0, #13
    a4ee:	4306      	orrs	r6, r0
    a4f0:	480c      	ldr	r0, [pc, #48]	; (a524 <__aeabi_d2iz+0x58>)
    a4f2:	1a40      	subs	r0, r0, r1
    a4f4:	281f      	cmp	r0, #31
    a4f6:	dd0b      	ble.n	a510 <__aeabi_d2iz+0x44>
    a4f8:	4a0b      	ldr	r2, [pc, #44]	; (a528 <__aeabi_d2iz+0x5c>)
    a4fa:	1a52      	subs	r2, r2, r1
    a4fc:	40d6      	lsrs	r6, r2
    a4fe:	1c32      	adds	r2, r6, #0
    a500:	4250      	negs	r0, r2
    a502:	2d00      	cmp	r5, #0
    a504:	d100      	bne.n	a508 <__aeabi_d2iz+0x3c>
    a506:	1c10      	adds	r0, r2, #0
    a508:	bd70      	pop	{r4, r5, r6, pc}
    a50a:	4b08      	ldr	r3, [pc, #32]	; (a52c <__aeabi_d2iz+0x60>)
    a50c:	18e8      	adds	r0, r5, r3
    a50e:	e7fb      	b.n	a508 <__aeabi_d2iz+0x3c>
    a510:	4b07      	ldr	r3, [pc, #28]	; (a530 <__aeabi_d2iz+0x64>)
    a512:	40c2      	lsrs	r2, r0
    a514:	18c9      	adds	r1, r1, r3
    a516:	408e      	lsls	r6, r1
    a518:	4332      	orrs	r2, r6
    a51a:	e7f1      	b.n	a500 <__aeabi_d2iz+0x34>
    a51c:	000003fe 	.word	0x000003fe
    a520:	0000041d 	.word	0x0000041d
    a524:	00000433 	.word	0x00000433
    a528:	00000413 	.word	0x00000413
    a52c:	7fffffff 	.word	0x7fffffff
    a530:	fffffbed 	.word	0xfffffbed

0000a534 <__aeabi_i2d>:
    a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a536:	1e04      	subs	r4, r0, #0
    a538:	d031      	beq.n	a59e <__aeabi_i2d+0x6a>
    a53a:	0fc7      	lsrs	r7, r0, #31
    a53c:	d000      	beq.n	a540 <__aeabi_i2d+0xc>
    a53e:	4244      	negs	r4, r0
    a540:	1c20      	adds	r0, r4, #0
    a542:	f000 f873 	bl	a62c <__clzsi2>
    a546:	4d18      	ldr	r5, [pc, #96]	; (a5a8 <__aeabi_i2d+0x74>)
    a548:	1a2d      	subs	r5, r5, r0
    a54a:	280a      	cmp	r0, #10
    a54c:	dd19      	ble.n	a582 <__aeabi_i2d+0x4e>
    a54e:	380b      	subs	r0, #11
    a550:	4084      	lsls	r4, r0
    a552:	0324      	lsls	r4, r4, #12
    a554:	056d      	lsls	r5, r5, #21
    a556:	0b24      	lsrs	r4, r4, #12
    a558:	0d6d      	lsrs	r5, r5, #21
    a55a:	1c3a      	adds	r2, r7, #0
    a55c:	2600      	movs	r6, #0
    a55e:	2000      	movs	r0, #0
    a560:	2100      	movs	r1, #0
    a562:	0d0b      	lsrs	r3, r1, #20
    a564:	0324      	lsls	r4, r4, #12
    a566:	0b24      	lsrs	r4, r4, #12
    a568:	051b      	lsls	r3, r3, #20
    a56a:	4323      	orrs	r3, r4
    a56c:	4c0f      	ldr	r4, [pc, #60]	; (a5ac <__aeabi_i2d+0x78>)
    a56e:	052d      	lsls	r5, r5, #20
    a570:	401c      	ands	r4, r3
    a572:	432c      	orrs	r4, r5
    a574:	0064      	lsls	r4, r4, #1
    a576:	0864      	lsrs	r4, r4, #1
    a578:	07d3      	lsls	r3, r2, #31
    a57a:	1c21      	adds	r1, r4, #0
    a57c:	1c30      	adds	r0, r6, #0
    a57e:	4319      	orrs	r1, r3
    a580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a582:	1c06      	adds	r6, r0, #0
    a584:	3615      	adds	r6, #21
    a586:	1c23      	adds	r3, r4, #0
    a588:	40b3      	lsls	r3, r6
    a58a:	1c1e      	adds	r6, r3, #0
    a58c:	230b      	movs	r3, #11
    a58e:	1a18      	subs	r0, r3, r0
    a590:	40c4      	lsrs	r4, r0
    a592:	0324      	lsls	r4, r4, #12
    a594:	056d      	lsls	r5, r5, #21
    a596:	0b24      	lsrs	r4, r4, #12
    a598:	0d6d      	lsrs	r5, r5, #21
    a59a:	1c3a      	adds	r2, r7, #0
    a59c:	e7df      	b.n	a55e <__aeabi_i2d+0x2a>
    a59e:	2200      	movs	r2, #0
    a5a0:	2500      	movs	r5, #0
    a5a2:	2400      	movs	r4, #0
    a5a4:	2600      	movs	r6, #0
    a5a6:	e7da      	b.n	a55e <__aeabi_i2d+0x2a>
    a5a8:	0000041e 	.word	0x0000041e
    a5ac:	800fffff 	.word	0x800fffff

0000a5b0 <__aeabi_cdrcmple>:
    a5b0:	4684      	mov	ip, r0
    a5b2:	1c10      	adds	r0, r2, #0
    a5b4:	4662      	mov	r2, ip
    a5b6:	468c      	mov	ip, r1
    a5b8:	1c19      	adds	r1, r3, #0
    a5ba:	4663      	mov	r3, ip
    a5bc:	e000      	b.n	a5c0 <__aeabi_cdcmpeq>
    a5be:	46c0      	nop			; (mov r8, r8)

0000a5c0 <__aeabi_cdcmpeq>:
    a5c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a5c2:	f000 fcad 	bl	af20 <__ledf2>
    a5c6:	2800      	cmp	r0, #0
    a5c8:	d401      	bmi.n	a5ce <__aeabi_cdcmpeq+0xe>
    a5ca:	2100      	movs	r1, #0
    a5cc:	42c8      	cmn	r0, r1
    a5ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000a5d0 <__aeabi_dcmpeq>:
    a5d0:	b510      	push	{r4, lr}
    a5d2:	f000 fbe1 	bl	ad98 <__eqdf2>
    a5d6:	4240      	negs	r0, r0
    a5d8:	3001      	adds	r0, #1
    a5da:	bd10      	pop	{r4, pc}

0000a5dc <__aeabi_dcmplt>:
    a5dc:	b510      	push	{r4, lr}
    a5de:	f000 fc9f 	bl	af20 <__ledf2>
    a5e2:	2800      	cmp	r0, #0
    a5e4:	db01      	blt.n	a5ea <__aeabi_dcmplt+0xe>
    a5e6:	2000      	movs	r0, #0
    a5e8:	bd10      	pop	{r4, pc}
    a5ea:	2001      	movs	r0, #1
    a5ec:	bd10      	pop	{r4, pc}
    a5ee:	46c0      	nop			; (mov r8, r8)

0000a5f0 <__aeabi_dcmple>:
    a5f0:	b510      	push	{r4, lr}
    a5f2:	f000 fc95 	bl	af20 <__ledf2>
    a5f6:	2800      	cmp	r0, #0
    a5f8:	dd01      	ble.n	a5fe <__aeabi_dcmple+0xe>
    a5fa:	2000      	movs	r0, #0
    a5fc:	bd10      	pop	{r4, pc}
    a5fe:	2001      	movs	r0, #1
    a600:	bd10      	pop	{r4, pc}
    a602:	46c0      	nop			; (mov r8, r8)

0000a604 <__aeabi_dcmpgt>:
    a604:	b510      	push	{r4, lr}
    a606:	f000 fc11 	bl	ae2c <__gedf2>
    a60a:	2800      	cmp	r0, #0
    a60c:	dc01      	bgt.n	a612 <__aeabi_dcmpgt+0xe>
    a60e:	2000      	movs	r0, #0
    a610:	bd10      	pop	{r4, pc}
    a612:	2001      	movs	r0, #1
    a614:	bd10      	pop	{r4, pc}
    a616:	46c0      	nop			; (mov r8, r8)

0000a618 <__aeabi_dcmpge>:
    a618:	b510      	push	{r4, lr}
    a61a:	f000 fc07 	bl	ae2c <__gedf2>
    a61e:	2800      	cmp	r0, #0
    a620:	da01      	bge.n	a626 <__aeabi_dcmpge+0xe>
    a622:	2000      	movs	r0, #0
    a624:	bd10      	pop	{r4, pc}
    a626:	2001      	movs	r0, #1
    a628:	bd10      	pop	{r4, pc}
    a62a:	46c0      	nop			; (mov r8, r8)

0000a62c <__clzsi2>:
    a62c:	211c      	movs	r1, #28
    a62e:	2301      	movs	r3, #1
    a630:	041b      	lsls	r3, r3, #16
    a632:	4298      	cmp	r0, r3
    a634:	d301      	bcc.n	a63a <__clzsi2+0xe>
    a636:	0c00      	lsrs	r0, r0, #16
    a638:	3910      	subs	r1, #16
    a63a:	0a1b      	lsrs	r3, r3, #8
    a63c:	4298      	cmp	r0, r3
    a63e:	d301      	bcc.n	a644 <__clzsi2+0x18>
    a640:	0a00      	lsrs	r0, r0, #8
    a642:	3908      	subs	r1, #8
    a644:	091b      	lsrs	r3, r3, #4
    a646:	4298      	cmp	r0, r3
    a648:	d301      	bcc.n	a64e <__clzsi2+0x22>
    a64a:	0900      	lsrs	r0, r0, #4
    a64c:	3904      	subs	r1, #4
    a64e:	a202      	add	r2, pc, #8	; (adr r2, a658 <__clzsi2+0x2c>)
    a650:	5c10      	ldrb	r0, [r2, r0]
    a652:	1840      	adds	r0, r0, r1
    a654:	4770      	bx	lr
    a656:	46c0      	nop			; (mov r8, r8)
    a658:	02020304 	.word	0x02020304
    a65c:	01010101 	.word	0x01010101
	...

0000a668 <__divdi3>:
    a668:	b5f0      	push	{r4, r5, r6, r7, lr}
    a66a:	4644      	mov	r4, r8
    a66c:	465f      	mov	r7, fp
    a66e:	4656      	mov	r6, sl
    a670:	464d      	mov	r5, r9
    a672:	b4f0      	push	{r4, r5, r6, r7}
    a674:	1c1c      	adds	r4, r3, #0
    a676:	b085      	sub	sp, #20
    a678:	2900      	cmp	r1, #0
    a67a:	da00      	bge.n	a67e <__divdi3+0x16>
    a67c:	e0d9      	b.n	a832 <__divdi3+0x1ca>
    a67e:	1c0f      	adds	r7, r1, #0
    a680:	2100      	movs	r1, #0
    a682:	1c06      	adds	r6, r0, #0
    a684:	468a      	mov	sl, r1
    a686:	1c10      	adds	r0, r2, #0
    a688:	1c19      	adds	r1, r3, #0
    a68a:	2c00      	cmp	r4, #0
    a68c:	da00      	bge.n	a690 <__divdi3+0x28>
    a68e:	e0c7      	b.n	a820 <__divdi3+0x1b8>
    a690:	9601      	str	r6, [sp, #4]
    a692:	9000      	str	r0, [sp, #0]
    a694:	4689      	mov	r9, r1
    a696:	4680      	mov	r8, r0
    a698:	2900      	cmp	r1, #0
    a69a:	d150      	bne.n	a73e <__divdi3+0xd6>
    a69c:	42b8      	cmp	r0, r7
    a69e:	d962      	bls.n	a766 <__divdi3+0xfe>
    a6a0:	f7ff ffc4 	bl	a62c <__clzsi2>
    a6a4:	2800      	cmp	r0, #0
    a6a6:	d009      	beq.n	a6bc <__divdi3+0x54>
    a6a8:	2320      	movs	r3, #32
    a6aa:	4645      	mov	r5, r8
    a6ac:	1c31      	adds	r1, r6, #0
    a6ae:	1a1b      	subs	r3, r3, r0
    a6b0:	4085      	lsls	r5, r0
    a6b2:	4087      	lsls	r7, r0
    a6b4:	40d9      	lsrs	r1, r3
    a6b6:	46a8      	mov	r8, r5
    a6b8:	430f      	orrs	r7, r1
    a6ba:	4086      	lsls	r6, r0
    a6bc:	4642      	mov	r2, r8
    a6be:	0c14      	lsrs	r4, r2, #16
    a6c0:	0413      	lsls	r3, r2, #16
    a6c2:	0c1b      	lsrs	r3, r3, #16
    a6c4:	1c21      	adds	r1, r4, #0
    a6c6:	1c38      	adds	r0, r7, #0
    a6c8:	469b      	mov	fp, r3
    a6ca:	f7ff f84f 	bl	976c <__aeabi_uidiv>
    a6ce:	465b      	mov	r3, fp
    a6d0:	4343      	muls	r3, r0
    a6d2:	1c05      	adds	r5, r0, #0
    a6d4:	1c21      	adds	r1, r4, #0
    a6d6:	1c38      	adds	r0, r7, #0
    a6d8:	4699      	mov	r9, r3
    a6da:	f7ff f88b 	bl	97f4 <__aeabi_uidivmod>
    a6de:	0c33      	lsrs	r3, r6, #16
    a6e0:	0408      	lsls	r0, r1, #16
    a6e2:	4318      	orrs	r0, r3
    a6e4:	4581      	cmp	r9, r0
    a6e6:	d909      	bls.n	a6fc <__divdi3+0x94>
    a6e8:	4440      	add	r0, r8
    a6ea:	1e6b      	subs	r3, r5, #1
    a6ec:	4580      	cmp	r8, r0
    a6ee:	d900      	bls.n	a6f2 <__divdi3+0x8a>
    a6f0:	e177      	b.n	a9e2 <__divdi3+0x37a>
    a6f2:	4581      	cmp	r9, r0
    a6f4:	d800      	bhi.n	a6f8 <__divdi3+0x90>
    a6f6:	e174      	b.n	a9e2 <__divdi3+0x37a>
    a6f8:	3d02      	subs	r5, #2
    a6fa:	4440      	add	r0, r8
    a6fc:	4649      	mov	r1, r9
    a6fe:	1a41      	subs	r1, r0, r1
    a700:	4689      	mov	r9, r1
    a702:	1c08      	adds	r0, r1, #0
    a704:	1c21      	adds	r1, r4, #0
    a706:	f7ff f831 	bl	976c <__aeabi_uidiv>
    a70a:	465a      	mov	r2, fp
    a70c:	4342      	muls	r2, r0
    a70e:	1c07      	adds	r7, r0, #0
    a710:	1c21      	adds	r1, r4, #0
    a712:	4648      	mov	r0, r9
    a714:	4693      	mov	fp, r2
    a716:	f7ff f86d 	bl	97f4 <__aeabi_uidivmod>
    a71a:	0436      	lsls	r6, r6, #16
    a71c:	0409      	lsls	r1, r1, #16
    a71e:	0c36      	lsrs	r6, r6, #16
    a720:	430e      	orrs	r6, r1
    a722:	45b3      	cmp	fp, r6
    a724:	d907      	bls.n	a736 <__divdi3+0xce>
    a726:	4446      	add	r6, r8
    a728:	1e7b      	subs	r3, r7, #1
    a72a:	45b0      	cmp	r8, r6
    a72c:	d802      	bhi.n	a734 <__divdi3+0xcc>
    a72e:	3f02      	subs	r7, #2
    a730:	45b3      	cmp	fp, r6
    a732:	d800      	bhi.n	a736 <__divdi3+0xce>
    a734:	1c1f      	adds	r7, r3, #0
    a736:	042d      	lsls	r5, r5, #16
    a738:	432f      	orrs	r7, r5
    a73a:	2400      	movs	r4, #0
    a73c:	e003      	b.n	a746 <__divdi3+0xde>
    a73e:	42b9      	cmp	r1, r7
    a740:	d960      	bls.n	a804 <__divdi3+0x19c>
    a742:	2400      	movs	r4, #0
    a744:	2700      	movs	r7, #0
    a746:	4652      	mov	r2, sl
    a748:	1c38      	adds	r0, r7, #0
    a74a:	1c21      	adds	r1, r4, #0
    a74c:	2a00      	cmp	r2, #0
    a74e:	d003      	beq.n	a758 <__divdi3+0xf0>
    a750:	1c3b      	adds	r3, r7, #0
    a752:	2100      	movs	r1, #0
    a754:	4258      	negs	r0, r3
    a756:	41a1      	sbcs	r1, r4
    a758:	b005      	add	sp, #20
    a75a:	bc3c      	pop	{r2, r3, r4, r5}
    a75c:	4690      	mov	r8, r2
    a75e:	4699      	mov	r9, r3
    a760:	46a2      	mov	sl, r4
    a762:	46ab      	mov	fp, r5
    a764:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a766:	2800      	cmp	r0, #0
    a768:	d104      	bne.n	a774 <__divdi3+0x10c>
    a76a:	2001      	movs	r0, #1
    a76c:	2100      	movs	r1, #0
    a76e:	f7fe fffd 	bl	976c <__aeabi_uidiv>
    a772:	4680      	mov	r8, r0
    a774:	4640      	mov	r0, r8
    a776:	f7ff ff59 	bl	a62c <__clzsi2>
    a77a:	2800      	cmp	r0, #0
    a77c:	d160      	bne.n	a840 <__divdi3+0x1d8>
    a77e:	4641      	mov	r1, r8
    a780:	4644      	mov	r4, r8
    a782:	040b      	lsls	r3, r1, #16
    a784:	1b3c      	subs	r4, r7, r4
    a786:	0c1b      	lsrs	r3, r3, #16
    a788:	46a3      	mov	fp, r4
    a78a:	0c0d      	lsrs	r5, r1, #16
    a78c:	9300      	str	r3, [sp, #0]
    a78e:	2401      	movs	r4, #1
    a790:	1c29      	adds	r1, r5, #0
    a792:	4658      	mov	r0, fp
    a794:	f7fe ffea 	bl	976c <__aeabi_uidiv>
    a798:	9f00      	ldr	r7, [sp, #0]
    a79a:	4681      	mov	r9, r0
    a79c:	4347      	muls	r7, r0
    a79e:	1c29      	adds	r1, r5, #0
    a7a0:	4658      	mov	r0, fp
    a7a2:	f7ff f827 	bl	97f4 <__aeabi_uidivmod>
    a7a6:	0c33      	lsrs	r3, r6, #16
    a7a8:	0409      	lsls	r1, r1, #16
    a7aa:	4319      	orrs	r1, r3
    a7ac:	428f      	cmp	r7, r1
    a7ae:	d908      	bls.n	a7c2 <__divdi3+0x15a>
    a7b0:	464b      	mov	r3, r9
    a7b2:	4441      	add	r1, r8
    a7b4:	3b01      	subs	r3, #1
    a7b6:	4588      	cmp	r8, r1
    a7b8:	d802      	bhi.n	a7c0 <__divdi3+0x158>
    a7ba:	428f      	cmp	r7, r1
    a7bc:	d900      	bls.n	a7c0 <__divdi3+0x158>
    a7be:	e125      	b.n	aa0c <__divdi3+0x3a4>
    a7c0:	4699      	mov	r9, r3
    a7c2:	1bc9      	subs	r1, r1, r7
    a7c4:	468b      	mov	fp, r1
    a7c6:	1c08      	adds	r0, r1, #0
    a7c8:	1c29      	adds	r1, r5, #0
    a7ca:	f7fe ffcf 	bl	976c <__aeabi_uidiv>
    a7ce:	9b00      	ldr	r3, [sp, #0]
    a7d0:	1c29      	adds	r1, r5, #0
    a7d2:	4343      	muls	r3, r0
    a7d4:	1c07      	adds	r7, r0, #0
    a7d6:	4658      	mov	r0, fp
    a7d8:	9300      	str	r3, [sp, #0]
    a7da:	f7ff f80b 	bl	97f4 <__aeabi_uidivmod>
    a7de:	0436      	lsls	r6, r6, #16
    a7e0:	9d00      	ldr	r5, [sp, #0]
    a7e2:	0409      	lsls	r1, r1, #16
    a7e4:	0c36      	lsrs	r6, r6, #16
    a7e6:	430e      	orrs	r6, r1
    a7e8:	42b5      	cmp	r5, r6
    a7ea:	d907      	bls.n	a7fc <__divdi3+0x194>
    a7ec:	4446      	add	r6, r8
    a7ee:	1e7b      	subs	r3, r7, #1
    a7f0:	45b0      	cmp	r8, r6
    a7f2:	d802      	bhi.n	a7fa <__divdi3+0x192>
    a7f4:	3f02      	subs	r7, #2
    a7f6:	42b5      	cmp	r5, r6
    a7f8:	d800      	bhi.n	a7fc <__divdi3+0x194>
    a7fa:	1c1f      	adds	r7, r3, #0
    a7fc:	4649      	mov	r1, r9
    a7fe:	040b      	lsls	r3, r1, #16
    a800:	431f      	orrs	r7, r3
    a802:	e7a0      	b.n	a746 <__divdi3+0xde>
    a804:	1c08      	adds	r0, r1, #0
    a806:	f7ff ff11 	bl	a62c <__clzsi2>
    a80a:	1e04      	subs	r4, r0, #0
    a80c:	d170      	bne.n	a8f0 <__divdi3+0x288>
    a80e:	45b9      	cmp	r9, r7
    a810:	d303      	bcc.n	a81a <__divdi3+0x1b2>
    a812:	9c00      	ldr	r4, [sp, #0]
    a814:	9d01      	ldr	r5, [sp, #4]
    a816:	42ac      	cmp	r4, r5
    a818:	d893      	bhi.n	a742 <__divdi3+0xda>
    a81a:	2400      	movs	r4, #0
    a81c:	2701      	movs	r7, #1
    a81e:	e792      	b.n	a746 <__divdi3+0xde>
    a820:	4652      	mov	r2, sl
    a822:	43d2      	mvns	r2, r2
    a824:	1c03      	adds	r3, r0, #0
    a826:	1c0c      	adds	r4, r1, #0
    a828:	4692      	mov	sl, r2
    a82a:	2100      	movs	r1, #0
    a82c:	4258      	negs	r0, r3
    a82e:	41a1      	sbcs	r1, r4
    a830:	e72e      	b.n	a690 <__divdi3+0x28>
    a832:	2700      	movs	r7, #0
    a834:	4246      	negs	r6, r0
    a836:	418f      	sbcs	r7, r1
    a838:	2101      	movs	r1, #1
    a83a:	4249      	negs	r1, r1
    a83c:	468a      	mov	sl, r1
    a83e:	e722      	b.n	a686 <__divdi3+0x1e>
    a840:	2320      	movs	r3, #32
    a842:	1a1b      	subs	r3, r3, r0
    a844:	4642      	mov	r2, r8
    a846:	1c35      	adds	r5, r6, #0
    a848:	4082      	lsls	r2, r0
    a84a:	1c3c      	adds	r4, r7, #0
    a84c:	40dd      	lsrs	r5, r3
    a84e:	40dc      	lsrs	r4, r3
    a850:	4087      	lsls	r7, r0
    a852:	1c2b      	adds	r3, r5, #0
    a854:	0c15      	lsrs	r5, r2, #16
    a856:	433b      	orrs	r3, r7
    a858:	1c29      	adds	r1, r5, #0
    a85a:	4086      	lsls	r6, r0
    a85c:	1c20      	adds	r0, r4, #0
    a85e:	9300      	str	r3, [sp, #0]
    a860:	0417      	lsls	r7, r2, #16
    a862:	4690      	mov	r8, r2
    a864:	f7fe ff82 	bl	976c <__aeabi_uidiv>
    a868:	0c3f      	lsrs	r7, r7, #16
    a86a:	1c01      	adds	r1, r0, #0
    a86c:	4379      	muls	r1, r7
    a86e:	4681      	mov	r9, r0
    a870:	468b      	mov	fp, r1
    a872:	1c20      	adds	r0, r4, #0
    a874:	1c29      	adds	r1, r5, #0
    a876:	f7fe ffbd 	bl	97f4 <__aeabi_uidivmod>
    a87a:	9c00      	ldr	r4, [sp, #0]
    a87c:	0409      	lsls	r1, r1, #16
    a87e:	0c23      	lsrs	r3, r4, #16
    a880:	4319      	orrs	r1, r3
    a882:	458b      	cmp	fp, r1
    a884:	d90c      	bls.n	a8a0 <__divdi3+0x238>
    a886:	464b      	mov	r3, r9
    a888:	4441      	add	r1, r8
    a88a:	3b01      	subs	r3, #1
    a88c:	4588      	cmp	r8, r1
    a88e:	d900      	bls.n	a892 <__divdi3+0x22a>
    a890:	e0ba      	b.n	aa08 <__divdi3+0x3a0>
    a892:	458b      	cmp	fp, r1
    a894:	d800      	bhi.n	a898 <__divdi3+0x230>
    a896:	e0b7      	b.n	aa08 <__divdi3+0x3a0>
    a898:	2202      	movs	r2, #2
    a89a:	4252      	negs	r2, r2
    a89c:	4491      	add	r9, r2
    a89e:	4441      	add	r1, r8
    a8a0:	465c      	mov	r4, fp
    a8a2:	1b0c      	subs	r4, r1, r4
    a8a4:	1c20      	adds	r0, r4, #0
    a8a6:	1c29      	adds	r1, r5, #0
    a8a8:	9401      	str	r4, [sp, #4]
    a8aa:	f7fe ff5f 	bl	976c <__aeabi_uidiv>
    a8ae:	1c39      	adds	r1, r7, #0
    a8b0:	4341      	muls	r1, r0
    a8b2:	1c04      	adds	r4, r0, #0
    a8b4:	468b      	mov	fp, r1
    a8b6:	9801      	ldr	r0, [sp, #4]
    a8b8:	1c29      	adds	r1, r5, #0
    a8ba:	f7fe ff9b 	bl	97f4 <__aeabi_uidivmod>
    a8be:	9a00      	ldr	r2, [sp, #0]
    a8c0:	0409      	lsls	r1, r1, #16
    a8c2:	0413      	lsls	r3, r2, #16
    a8c4:	0c1b      	lsrs	r3, r3, #16
    a8c6:	4319      	orrs	r1, r3
    a8c8:	458b      	cmp	fp, r1
    a8ca:	d909      	bls.n	a8e0 <__divdi3+0x278>
    a8cc:	4441      	add	r1, r8
    a8ce:	1e63      	subs	r3, r4, #1
    a8d0:	4588      	cmp	r8, r1
    a8d2:	d900      	bls.n	a8d6 <__divdi3+0x26e>
    a8d4:	e094      	b.n	aa00 <__divdi3+0x398>
    a8d6:	458b      	cmp	fp, r1
    a8d8:	d800      	bhi.n	a8dc <__divdi3+0x274>
    a8da:	e091      	b.n	aa00 <__divdi3+0x398>
    a8dc:	3c02      	subs	r4, #2
    a8de:	4441      	add	r1, r8
    a8e0:	465b      	mov	r3, fp
    a8e2:	1acb      	subs	r3, r1, r3
    a8e4:	4649      	mov	r1, r9
    a8e6:	469b      	mov	fp, r3
    a8e8:	040b      	lsls	r3, r1, #16
    a8ea:	431c      	orrs	r4, r3
    a8ec:	9700      	str	r7, [sp, #0]
    a8ee:	e74f      	b.n	a790 <__divdi3+0x128>
    a8f0:	9d00      	ldr	r5, [sp, #0]
    a8f2:	2320      	movs	r3, #32
    a8f4:	1a1b      	subs	r3, r3, r0
    a8f6:	464a      	mov	r2, r9
    a8f8:	9900      	ldr	r1, [sp, #0]
    a8fa:	4082      	lsls	r2, r0
    a8fc:	40dd      	lsrs	r5, r3
    a8fe:	4315      	orrs	r5, r2
    a900:	4081      	lsls	r1, r0
    a902:	1c3a      	adds	r2, r7, #0
    a904:	40da      	lsrs	r2, r3
    a906:	9100      	str	r1, [sp, #0]
    a908:	1c31      	adds	r1, r6, #0
    a90a:	4690      	mov	r8, r2
    a90c:	40d9      	lsrs	r1, r3
    a90e:	1c3a      	adds	r2, r7, #0
    a910:	4082      	lsls	r2, r0
    a912:	1c0b      	adds	r3, r1, #0
    a914:	4313      	orrs	r3, r2
    a916:	9301      	str	r3, [sp, #4]
    a918:	0c2f      	lsrs	r7, r5, #16
    a91a:	042b      	lsls	r3, r5, #16
    a91c:	0c1b      	lsrs	r3, r3, #16
    a91e:	1c39      	adds	r1, r7, #0
    a920:	4640      	mov	r0, r8
    a922:	9302      	str	r3, [sp, #8]
    a924:	f7fe ff22 	bl	976c <__aeabi_uidiv>
    a928:	9a02      	ldr	r2, [sp, #8]
    a92a:	4681      	mov	r9, r0
    a92c:	4342      	muls	r2, r0
    a92e:	1c39      	adds	r1, r7, #0
    a930:	4640      	mov	r0, r8
    a932:	4693      	mov	fp, r2
    a934:	f7fe ff5e 	bl	97f4 <__aeabi_uidivmod>
    a938:	9a01      	ldr	r2, [sp, #4]
    a93a:	0409      	lsls	r1, r1, #16
    a93c:	0c13      	lsrs	r3, r2, #16
    a93e:	4319      	orrs	r1, r3
    a940:	458b      	cmp	fp, r1
    a942:	d90a      	bls.n	a95a <__divdi3+0x2f2>
    a944:	464b      	mov	r3, r9
    a946:	1949      	adds	r1, r1, r5
    a948:	3b01      	subs	r3, #1
    a94a:	428d      	cmp	r5, r1
    a94c:	d85a      	bhi.n	aa04 <__divdi3+0x39c>
    a94e:	458b      	cmp	fp, r1
    a950:	d958      	bls.n	aa04 <__divdi3+0x39c>
    a952:	2302      	movs	r3, #2
    a954:	425b      	negs	r3, r3
    a956:	4499      	add	r9, r3
    a958:	1949      	adds	r1, r1, r5
    a95a:	465a      	mov	r2, fp
    a95c:	1a8a      	subs	r2, r1, r2
    a95e:	1c10      	adds	r0, r2, #0
    a960:	1c39      	adds	r1, r7, #0
    a962:	9203      	str	r2, [sp, #12]
    a964:	f7fe ff02 	bl	976c <__aeabi_uidiv>
    a968:	9b02      	ldr	r3, [sp, #8]
    a96a:	4680      	mov	r8, r0
    a96c:	4343      	muls	r3, r0
    a96e:	1c39      	adds	r1, r7, #0
    a970:	9803      	ldr	r0, [sp, #12]
    a972:	469b      	mov	fp, r3
    a974:	f7fe ff3e 	bl	97f4 <__aeabi_uidivmod>
    a978:	9a01      	ldr	r2, [sp, #4]
    a97a:	0409      	lsls	r1, r1, #16
    a97c:	0413      	lsls	r3, r2, #16
    a97e:	0c1b      	lsrs	r3, r3, #16
    a980:	4319      	orrs	r1, r3
    a982:	458b      	cmp	fp, r1
    a984:	d90a      	bls.n	a99c <__divdi3+0x334>
    a986:	4643      	mov	r3, r8
    a988:	1949      	adds	r1, r1, r5
    a98a:	3b01      	subs	r3, #1
    a98c:	428d      	cmp	r5, r1
    a98e:	d835      	bhi.n	a9fc <__divdi3+0x394>
    a990:	458b      	cmp	fp, r1
    a992:	d933      	bls.n	a9fc <__divdi3+0x394>
    a994:	2302      	movs	r3, #2
    a996:	425b      	negs	r3, r3
    a998:	4498      	add	r8, r3
    a99a:	1949      	adds	r1, r1, r5
    a99c:	465d      	mov	r5, fp
    a99e:	1b4d      	subs	r5, r1, r5
    a9a0:	46ab      	mov	fp, r5
    a9a2:	4649      	mov	r1, r9
    a9a4:	9d00      	ldr	r5, [sp, #0]
    a9a6:	040f      	lsls	r7, r1, #16
    a9a8:	4642      	mov	r2, r8
    a9aa:	4317      	orrs	r7, r2
    a9ac:	042a      	lsls	r2, r5, #16
    a9ae:	0c12      	lsrs	r2, r2, #16
    a9b0:	043b      	lsls	r3, r7, #16
    a9b2:	0c2d      	lsrs	r5, r5, #16
    a9b4:	0c1b      	lsrs	r3, r3, #16
    a9b6:	0c38      	lsrs	r0, r7, #16
    a9b8:	1c11      	adds	r1, r2, #0
    a9ba:	4359      	muls	r1, r3
    a9bc:	4342      	muls	r2, r0
    a9be:	436b      	muls	r3, r5
    a9c0:	4368      	muls	r0, r5
    a9c2:	18d3      	adds	r3, r2, r3
    a9c4:	0c0d      	lsrs	r5, r1, #16
    a9c6:	195b      	adds	r3, r3, r5
    a9c8:	468c      	mov	ip, r1
    a9ca:	429a      	cmp	r2, r3
    a9cc:	d902      	bls.n	a9d4 <__divdi3+0x36c>
    a9ce:	2280      	movs	r2, #128	; 0x80
    a9d0:	0252      	lsls	r2, r2, #9
    a9d2:	1880      	adds	r0, r0, r2
    a9d4:	0c1d      	lsrs	r5, r3, #16
    a9d6:	1940      	adds	r0, r0, r5
    a9d8:	4583      	cmp	fp, r0
    a9da:	d30c      	bcc.n	a9f6 <__divdi3+0x38e>
    a9dc:	d003      	beq.n	a9e6 <__divdi3+0x37e>
    a9de:	2400      	movs	r4, #0
    a9e0:	e6b1      	b.n	a746 <__divdi3+0xde>
    a9e2:	1c1d      	adds	r5, r3, #0
    a9e4:	e68a      	b.n	a6fc <__divdi3+0x94>
    a9e6:	4665      	mov	r5, ip
    a9e8:	042a      	lsls	r2, r5, #16
    a9ea:	041b      	lsls	r3, r3, #16
    a9ec:	0c12      	lsrs	r2, r2, #16
    a9ee:	189b      	adds	r3, r3, r2
    a9f0:	40a6      	lsls	r6, r4
    a9f2:	429e      	cmp	r6, r3
    a9f4:	d2f3      	bcs.n	a9de <__divdi3+0x376>
    a9f6:	3f01      	subs	r7, #1
    a9f8:	2400      	movs	r4, #0
    a9fa:	e6a4      	b.n	a746 <__divdi3+0xde>
    a9fc:	4698      	mov	r8, r3
    a9fe:	e7cd      	b.n	a99c <__divdi3+0x334>
    aa00:	1c1c      	adds	r4, r3, #0
    aa02:	e76d      	b.n	a8e0 <__divdi3+0x278>
    aa04:	4699      	mov	r9, r3
    aa06:	e7a8      	b.n	a95a <__divdi3+0x2f2>
    aa08:	4699      	mov	r9, r3
    aa0a:	e749      	b.n	a8a0 <__divdi3+0x238>
    aa0c:	2202      	movs	r2, #2
    aa0e:	4252      	negs	r2, r2
    aa10:	4491      	add	r9, r2
    aa12:	4441      	add	r1, r8
    aa14:	e6d5      	b.n	a7c2 <__divdi3+0x15a>
    aa16:	46c0      	nop			; (mov r8, r8)

0000aa18 <__udivdi3>:
    aa18:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa1a:	465f      	mov	r7, fp
    aa1c:	4656      	mov	r6, sl
    aa1e:	464d      	mov	r5, r9
    aa20:	4644      	mov	r4, r8
    aa22:	b4f0      	push	{r4, r5, r6, r7}
    aa24:	1c0d      	adds	r5, r1, #0
    aa26:	b085      	sub	sp, #20
    aa28:	1c06      	adds	r6, r0, #0
    aa2a:	4692      	mov	sl, r2
    aa2c:	4698      	mov	r8, r3
    aa2e:	9002      	str	r0, [sp, #8]
    aa30:	9101      	str	r1, [sp, #4]
    aa32:	9203      	str	r2, [sp, #12]
    aa34:	1c1f      	adds	r7, r3, #0
    aa36:	1c14      	adds	r4, r2, #0
    aa38:	4683      	mov	fp, r0
    aa3a:	46a9      	mov	r9, r5
    aa3c:	2b00      	cmp	r3, #0
    aa3e:	d152      	bne.n	aae6 <__udivdi3+0xce>
    aa40:	42aa      	cmp	r2, r5
    aa42:	d96b      	bls.n	ab1c <__udivdi3+0x104>
    aa44:	1c10      	adds	r0, r2, #0
    aa46:	f7ff fdf1 	bl	a62c <__clzsi2>
    aa4a:	2800      	cmp	r0, #0
    aa4c:	d00a      	beq.n	aa64 <__udivdi3+0x4c>
    aa4e:	2320      	movs	r3, #32
    aa50:	1a1b      	subs	r3, r3, r0
    aa52:	1c31      	adds	r1, r6, #0
    aa54:	40d9      	lsrs	r1, r3
    aa56:	4085      	lsls	r5, r0
    aa58:	1c0b      	adds	r3, r1, #0
    aa5a:	432b      	orrs	r3, r5
    aa5c:	4086      	lsls	r6, r0
    aa5e:	4084      	lsls	r4, r0
    aa60:	4699      	mov	r9, r3
    aa62:	46b3      	mov	fp, r6
    aa64:	0c25      	lsrs	r5, r4, #16
    aa66:	0423      	lsls	r3, r4, #16
    aa68:	0c1b      	lsrs	r3, r3, #16
    aa6a:	1c29      	adds	r1, r5, #0
    aa6c:	4648      	mov	r0, r9
    aa6e:	4698      	mov	r8, r3
    aa70:	f7fe fe7c 	bl	976c <__aeabi_uidiv>
    aa74:	4646      	mov	r6, r8
    aa76:	1c07      	adds	r7, r0, #0
    aa78:	4346      	muls	r6, r0
    aa7a:	1c29      	adds	r1, r5, #0
    aa7c:	4648      	mov	r0, r9
    aa7e:	f7fe feb9 	bl	97f4 <__aeabi_uidivmod>
    aa82:	465a      	mov	r2, fp
    aa84:	0409      	lsls	r1, r1, #16
    aa86:	0c13      	lsrs	r3, r2, #16
    aa88:	4319      	orrs	r1, r3
    aa8a:	428e      	cmp	r6, r1
    aa8c:	d909      	bls.n	aaa2 <__udivdi3+0x8a>
    aa8e:	1909      	adds	r1, r1, r4
    aa90:	1e7b      	subs	r3, r7, #1
    aa92:	428c      	cmp	r4, r1
    aa94:	d900      	bls.n	aa98 <__udivdi3+0x80>
    aa96:	e159      	b.n	ad4c <__udivdi3+0x334>
    aa98:	428e      	cmp	r6, r1
    aa9a:	d800      	bhi.n	aa9e <__udivdi3+0x86>
    aa9c:	e156      	b.n	ad4c <__udivdi3+0x334>
    aa9e:	3f02      	subs	r7, #2
    aaa0:	1909      	adds	r1, r1, r4
    aaa2:	1b89      	subs	r1, r1, r6
    aaa4:	4689      	mov	r9, r1
    aaa6:	1c08      	adds	r0, r1, #0
    aaa8:	1c29      	adds	r1, r5, #0
    aaaa:	f7fe fe5f 	bl	976c <__aeabi_uidiv>
    aaae:	4643      	mov	r3, r8
    aab0:	4343      	muls	r3, r0
    aab2:	1c06      	adds	r6, r0, #0
    aab4:	1c29      	adds	r1, r5, #0
    aab6:	4648      	mov	r0, r9
    aab8:	4698      	mov	r8, r3
    aaba:	f7fe fe9b 	bl	97f4 <__aeabi_uidivmod>
    aabe:	465a      	mov	r2, fp
    aac0:	0413      	lsls	r3, r2, #16
    aac2:	0409      	lsls	r1, r1, #16
    aac4:	0c1b      	lsrs	r3, r3, #16
    aac6:	4319      	orrs	r1, r3
    aac8:	4588      	cmp	r8, r1
    aaca:	d908      	bls.n	aade <__udivdi3+0xc6>
    aacc:	1909      	adds	r1, r1, r4
    aace:	1e73      	subs	r3, r6, #1
    aad0:	428c      	cmp	r4, r1
    aad2:	d900      	bls.n	aad6 <__udivdi3+0xbe>
    aad4:	e138      	b.n	ad48 <__udivdi3+0x330>
    aad6:	3e02      	subs	r6, #2
    aad8:	4588      	cmp	r8, r1
    aada:	d800      	bhi.n	aade <__udivdi3+0xc6>
    aadc:	e134      	b.n	ad48 <__udivdi3+0x330>
    aade:	0438      	lsls	r0, r7, #16
    aae0:	4330      	orrs	r0, r6
    aae2:	2700      	movs	r7, #0
    aae4:	e012      	b.n	ab0c <__udivdi3+0xf4>
    aae6:	9a01      	ldr	r2, [sp, #4]
    aae8:	4293      	cmp	r3, r2
    aaea:	d80d      	bhi.n	ab08 <__udivdi3+0xf0>
    aaec:	1c18      	adds	r0, r3, #0
    aaee:	f7ff fd9d 	bl	a62c <__clzsi2>
    aaf2:	1e04      	subs	r4, r0, #0
    aaf4:	d166      	bne.n	abc4 <__udivdi3+0x1ac>
    aaf6:	9b01      	ldr	r3, [sp, #4]
    aaf8:	429f      	cmp	r7, r3
    aafa:	d200      	bcs.n	aafe <__udivdi3+0xe6>
    aafc:	e121      	b.n	ad42 <__udivdi3+0x32a>
    aafe:	9f03      	ldr	r7, [sp, #12]
    ab00:	9902      	ldr	r1, [sp, #8]
    ab02:	428f      	cmp	r7, r1
    ab04:	d800      	bhi.n	ab08 <__udivdi3+0xf0>
    ab06:	e11c      	b.n	ad42 <__udivdi3+0x32a>
    ab08:	2700      	movs	r7, #0
    ab0a:	2000      	movs	r0, #0
    ab0c:	1c39      	adds	r1, r7, #0
    ab0e:	b005      	add	sp, #20
    ab10:	bc3c      	pop	{r2, r3, r4, r5}
    ab12:	4690      	mov	r8, r2
    ab14:	4699      	mov	r9, r3
    ab16:	46a2      	mov	sl, r4
    ab18:	46ab      	mov	fp, r5
    ab1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab1c:	2a00      	cmp	r2, #0
    ab1e:	d104      	bne.n	ab2a <__udivdi3+0x112>
    ab20:	2001      	movs	r0, #1
    ab22:	2100      	movs	r1, #0
    ab24:	f7fe fe22 	bl	976c <__aeabi_uidiv>
    ab28:	1c04      	adds	r4, r0, #0
    ab2a:	1c20      	adds	r0, r4, #0
    ab2c:	f7ff fd7e 	bl	a62c <__clzsi2>
    ab30:	2800      	cmp	r0, #0
    ab32:	d000      	beq.n	ab36 <__udivdi3+0x11e>
    ab34:	e0b6      	b.n	aca4 <__udivdi3+0x28c>
    ab36:	0423      	lsls	r3, r4, #16
    ab38:	1b2d      	subs	r5, r5, r4
    ab3a:	0c1b      	lsrs	r3, r3, #16
    ab3c:	46a9      	mov	r9, r5
    ab3e:	0c26      	lsrs	r6, r4, #16
    ab40:	4698      	mov	r8, r3
    ab42:	2701      	movs	r7, #1
    ab44:	1c31      	adds	r1, r6, #0
    ab46:	4648      	mov	r0, r9
    ab48:	f7fe fe10 	bl	976c <__aeabi_uidiv>
    ab4c:	4641      	mov	r1, r8
    ab4e:	4341      	muls	r1, r0
    ab50:	1c05      	adds	r5, r0, #0
    ab52:	468a      	mov	sl, r1
    ab54:	4648      	mov	r0, r9
    ab56:	1c31      	adds	r1, r6, #0
    ab58:	f7fe fe4c 	bl	97f4 <__aeabi_uidivmod>
    ab5c:	465a      	mov	r2, fp
    ab5e:	0408      	lsls	r0, r1, #16
    ab60:	0c13      	lsrs	r3, r2, #16
    ab62:	4318      	orrs	r0, r3
    ab64:	4582      	cmp	sl, r0
    ab66:	d907      	bls.n	ab78 <__udivdi3+0x160>
    ab68:	1900      	adds	r0, r0, r4
    ab6a:	1e6b      	subs	r3, r5, #1
    ab6c:	4284      	cmp	r4, r0
    ab6e:	d802      	bhi.n	ab76 <__udivdi3+0x15e>
    ab70:	4582      	cmp	sl, r0
    ab72:	d900      	bls.n	ab76 <__udivdi3+0x15e>
    ab74:	e10d      	b.n	ad92 <__udivdi3+0x37a>
    ab76:	1c1d      	adds	r5, r3, #0
    ab78:	4653      	mov	r3, sl
    ab7a:	1ac3      	subs	r3, r0, r3
    ab7c:	1c18      	adds	r0, r3, #0
    ab7e:	1c31      	adds	r1, r6, #0
    ab80:	469a      	mov	sl, r3
    ab82:	f7fe fdf3 	bl	976c <__aeabi_uidiv>
    ab86:	4641      	mov	r1, r8
    ab88:	4341      	muls	r1, r0
    ab8a:	4681      	mov	r9, r0
    ab8c:	4688      	mov	r8, r1
    ab8e:	4650      	mov	r0, sl
    ab90:	1c31      	adds	r1, r6, #0
    ab92:	f7fe fe2f 	bl	97f4 <__aeabi_uidivmod>
    ab96:	465a      	mov	r2, fp
    ab98:	0413      	lsls	r3, r2, #16
    ab9a:	0409      	lsls	r1, r1, #16
    ab9c:	0c1b      	lsrs	r3, r3, #16
    ab9e:	4319      	orrs	r1, r3
    aba0:	4588      	cmp	r8, r1
    aba2:	d90b      	bls.n	abbc <__udivdi3+0x1a4>
    aba4:	464b      	mov	r3, r9
    aba6:	1909      	adds	r1, r1, r4
    aba8:	3b01      	subs	r3, #1
    abaa:	428c      	cmp	r4, r1
    abac:	d900      	bls.n	abb0 <__udivdi3+0x198>
    abae:	e0cf      	b.n	ad50 <__udivdi3+0x338>
    abb0:	4588      	cmp	r8, r1
    abb2:	d800      	bhi.n	abb6 <__udivdi3+0x19e>
    abb4:	e0cc      	b.n	ad50 <__udivdi3+0x338>
    abb6:	2302      	movs	r3, #2
    abb8:	425b      	negs	r3, r3
    abba:	4499      	add	r9, r3
    abbc:	0428      	lsls	r0, r5, #16
    abbe:	4649      	mov	r1, r9
    abc0:	4308      	orrs	r0, r1
    abc2:	e7a3      	b.n	ab0c <__udivdi3+0xf4>
    abc4:	2320      	movs	r3, #32
    abc6:	1a1b      	subs	r3, r3, r0
    abc8:	4642      	mov	r2, r8
    abca:	4657      	mov	r7, sl
    abcc:	4082      	lsls	r2, r0
    abce:	40df      	lsrs	r7, r3
    abd0:	4317      	orrs	r7, r2
    abd2:	4652      	mov	r2, sl
    abd4:	4082      	lsls	r2, r0
    abd6:	9201      	str	r2, [sp, #4]
    abd8:	1c32      	adds	r2, r6, #0
    abda:	40da      	lsrs	r2, r3
    abdc:	1c29      	adds	r1, r5, #0
    abde:	40d9      	lsrs	r1, r3
    abe0:	4085      	lsls	r5, r0
    abe2:	1c13      	adds	r3, r2, #0
    abe4:	432b      	orrs	r3, r5
    abe6:	9302      	str	r3, [sp, #8]
    abe8:	0c3d      	lsrs	r5, r7, #16
    abea:	043b      	lsls	r3, r7, #16
    abec:	0c1b      	lsrs	r3, r3, #16
    abee:	4688      	mov	r8, r1
    abf0:	1c08      	adds	r0, r1, #0
    abf2:	1c29      	adds	r1, r5, #0
    abf4:	469a      	mov	sl, r3
    abf6:	f7fe fdb9 	bl	976c <__aeabi_uidiv>
    abfa:	4653      	mov	r3, sl
    abfc:	4343      	muls	r3, r0
    abfe:	4681      	mov	r9, r0
    ac00:	1c29      	adds	r1, r5, #0
    ac02:	4640      	mov	r0, r8
    ac04:	469b      	mov	fp, r3
    ac06:	f7fe fdf5 	bl	97f4 <__aeabi_uidivmod>
    ac0a:	9a02      	ldr	r2, [sp, #8]
    ac0c:	0409      	lsls	r1, r1, #16
    ac0e:	0c13      	lsrs	r3, r2, #16
    ac10:	4319      	orrs	r1, r3
    ac12:	458b      	cmp	fp, r1
    ac14:	d906      	bls.n	ac24 <__udivdi3+0x20c>
    ac16:	464b      	mov	r3, r9
    ac18:	19c9      	adds	r1, r1, r7
    ac1a:	3b01      	subs	r3, #1
    ac1c:	428f      	cmp	r7, r1
    ac1e:	d800      	bhi.n	ac22 <__udivdi3+0x20a>
    ac20:	e0ab      	b.n	ad7a <__udivdi3+0x362>
    ac22:	4699      	mov	r9, r3
    ac24:	465a      	mov	r2, fp
    ac26:	1a8a      	subs	r2, r1, r2
    ac28:	1c10      	adds	r0, r2, #0
    ac2a:	1c29      	adds	r1, r5, #0
    ac2c:	4693      	mov	fp, r2
    ac2e:	f7fe fd9d 	bl	976c <__aeabi_uidiv>
    ac32:	4653      	mov	r3, sl
    ac34:	4343      	muls	r3, r0
    ac36:	1c29      	adds	r1, r5, #0
    ac38:	4680      	mov	r8, r0
    ac3a:	4658      	mov	r0, fp
    ac3c:	469a      	mov	sl, r3
    ac3e:	f7fe fdd9 	bl	97f4 <__aeabi_uidivmod>
    ac42:	9a02      	ldr	r2, [sp, #8]
    ac44:	0409      	lsls	r1, r1, #16
    ac46:	0415      	lsls	r5, r2, #16
    ac48:	0c2d      	lsrs	r5, r5, #16
    ac4a:	4329      	orrs	r1, r5
    ac4c:	458a      	cmp	sl, r1
    ac4e:	d906      	bls.n	ac5e <__udivdi3+0x246>
    ac50:	4643      	mov	r3, r8
    ac52:	19c9      	adds	r1, r1, r7
    ac54:	3b01      	subs	r3, #1
    ac56:	428f      	cmp	r7, r1
    ac58:	d800      	bhi.n	ac5c <__udivdi3+0x244>
    ac5a:	e086      	b.n	ad6a <__udivdi3+0x352>
    ac5c:	4698      	mov	r8, r3
    ac5e:	4657      	mov	r7, sl
    ac60:	1bcf      	subs	r7, r1, r7
    ac62:	46ba      	mov	sl, r7
    ac64:	4649      	mov	r1, r9
    ac66:	9f01      	ldr	r7, [sp, #4]
    ac68:	0408      	lsls	r0, r1, #16
    ac6a:	4642      	mov	r2, r8
    ac6c:	4310      	orrs	r0, r2
    ac6e:	043d      	lsls	r5, r7, #16
    ac70:	0c2d      	lsrs	r5, r5, #16
    ac72:	0403      	lsls	r3, r0, #16
    ac74:	0c3f      	lsrs	r7, r7, #16
    ac76:	0c1b      	lsrs	r3, r3, #16
    ac78:	0c02      	lsrs	r2, r0, #16
    ac7a:	1c29      	adds	r1, r5, #0
    ac7c:	4359      	muls	r1, r3
    ac7e:	4355      	muls	r5, r2
    ac80:	437b      	muls	r3, r7
    ac82:	437a      	muls	r2, r7
    ac84:	18eb      	adds	r3, r5, r3
    ac86:	0c0f      	lsrs	r7, r1, #16
    ac88:	19db      	adds	r3, r3, r7
    ac8a:	468c      	mov	ip, r1
    ac8c:	429d      	cmp	r5, r3
    ac8e:	d902      	bls.n	ac96 <__udivdi3+0x27e>
    ac90:	2780      	movs	r7, #128	; 0x80
    ac92:	027f      	lsls	r7, r7, #9
    ac94:	19d2      	adds	r2, r2, r7
    ac96:	0c1d      	lsrs	r5, r3, #16
    ac98:	1952      	adds	r2, r2, r5
    ac9a:	4592      	cmp	sl, r2
    ac9c:	d362      	bcc.n	ad64 <__udivdi3+0x34c>
    ac9e:	d059      	beq.n	ad54 <__udivdi3+0x33c>
    aca0:	2700      	movs	r7, #0
    aca2:	e733      	b.n	ab0c <__udivdi3+0xf4>
    aca4:	2320      	movs	r3, #32
    aca6:	1a1b      	subs	r3, r3, r0
    aca8:	1c31      	adds	r1, r6, #0
    acaa:	1c2f      	adds	r7, r5, #0
    acac:	40d9      	lsrs	r1, r3
    acae:	40df      	lsrs	r7, r3
    acb0:	4085      	lsls	r5, r0
    acb2:	1c0b      	adds	r3, r1, #0
    acb4:	4084      	lsls	r4, r0
    acb6:	432b      	orrs	r3, r5
    acb8:	4086      	lsls	r6, r0
    acba:	9301      	str	r3, [sp, #4]
    acbc:	46b3      	mov	fp, r6
    acbe:	0423      	lsls	r3, r4, #16
    acc0:	0c26      	lsrs	r6, r4, #16
    acc2:	0c1b      	lsrs	r3, r3, #16
    acc4:	1c38      	adds	r0, r7, #0
    acc6:	1c31      	adds	r1, r6, #0
    acc8:	4698      	mov	r8, r3
    acca:	f7fe fd4f 	bl	976c <__aeabi_uidiv>
    acce:	4642      	mov	r2, r8
    acd0:	4342      	muls	r2, r0
    acd2:	1c05      	adds	r5, r0, #0
    acd4:	1c31      	adds	r1, r6, #0
    acd6:	1c38      	adds	r0, r7, #0
    acd8:	4691      	mov	r9, r2
    acda:	f7fe fd8b 	bl	97f4 <__aeabi_uidivmod>
    acde:	9f01      	ldr	r7, [sp, #4]
    ace0:	0409      	lsls	r1, r1, #16
    ace2:	0c3b      	lsrs	r3, r7, #16
    ace4:	4319      	orrs	r1, r3
    ace6:	4589      	cmp	r9, r1
    ace8:	d907      	bls.n	acfa <__udivdi3+0x2e2>
    acea:	1909      	adds	r1, r1, r4
    acec:	1e6b      	subs	r3, r5, #1
    acee:	428c      	cmp	r4, r1
    acf0:	d84d      	bhi.n	ad8e <__udivdi3+0x376>
    acf2:	4589      	cmp	r9, r1
    acf4:	d94b      	bls.n	ad8e <__udivdi3+0x376>
    acf6:	3d02      	subs	r5, #2
    acf8:	1909      	adds	r1, r1, r4
    acfa:	464a      	mov	r2, r9
    acfc:	1a8a      	subs	r2, r1, r2
    acfe:	1c10      	adds	r0, r2, #0
    ad00:	1c31      	adds	r1, r6, #0
    ad02:	4692      	mov	sl, r2
    ad04:	f7fe fd32 	bl	976c <__aeabi_uidiv>
    ad08:	4643      	mov	r3, r8
    ad0a:	4343      	muls	r3, r0
    ad0c:	1c07      	adds	r7, r0, #0
    ad0e:	1c31      	adds	r1, r6, #0
    ad10:	4650      	mov	r0, sl
    ad12:	4699      	mov	r9, r3
    ad14:	f7fe fd6e 	bl	97f4 <__aeabi_uidivmod>
    ad18:	9a01      	ldr	r2, [sp, #4]
    ad1a:	0409      	lsls	r1, r1, #16
    ad1c:	0413      	lsls	r3, r2, #16
    ad1e:	0c1b      	lsrs	r3, r3, #16
    ad20:	4319      	orrs	r1, r3
    ad22:	4589      	cmp	r9, r1
    ad24:	d907      	bls.n	ad36 <__udivdi3+0x31e>
    ad26:	1909      	adds	r1, r1, r4
    ad28:	1e7b      	subs	r3, r7, #1
    ad2a:	428c      	cmp	r4, r1
    ad2c:	d82d      	bhi.n	ad8a <__udivdi3+0x372>
    ad2e:	4589      	cmp	r9, r1
    ad30:	d92b      	bls.n	ad8a <__udivdi3+0x372>
    ad32:	3f02      	subs	r7, #2
    ad34:	1909      	adds	r1, r1, r4
    ad36:	464b      	mov	r3, r9
    ad38:	1acb      	subs	r3, r1, r3
    ad3a:	042d      	lsls	r5, r5, #16
    ad3c:	4699      	mov	r9, r3
    ad3e:	432f      	orrs	r7, r5
    ad40:	e700      	b.n	ab44 <__udivdi3+0x12c>
    ad42:	2700      	movs	r7, #0
    ad44:	2001      	movs	r0, #1
    ad46:	e6e1      	b.n	ab0c <__udivdi3+0xf4>
    ad48:	1c1e      	adds	r6, r3, #0
    ad4a:	e6c8      	b.n	aade <__udivdi3+0xc6>
    ad4c:	1c1f      	adds	r7, r3, #0
    ad4e:	e6a8      	b.n	aaa2 <__udivdi3+0x8a>
    ad50:	4699      	mov	r9, r3
    ad52:	e733      	b.n	abbc <__udivdi3+0x1a4>
    ad54:	4661      	mov	r1, ip
    ad56:	040a      	lsls	r2, r1, #16
    ad58:	041b      	lsls	r3, r3, #16
    ad5a:	0c12      	lsrs	r2, r2, #16
    ad5c:	189b      	adds	r3, r3, r2
    ad5e:	40a6      	lsls	r6, r4
    ad60:	429e      	cmp	r6, r3
    ad62:	d29d      	bcs.n	aca0 <__udivdi3+0x288>
    ad64:	3801      	subs	r0, #1
    ad66:	2700      	movs	r7, #0
    ad68:	e6d0      	b.n	ab0c <__udivdi3+0xf4>
    ad6a:	458a      	cmp	sl, r1
    ad6c:	d800      	bhi.n	ad70 <__udivdi3+0x358>
    ad6e:	e775      	b.n	ac5c <__udivdi3+0x244>
    ad70:	2302      	movs	r3, #2
    ad72:	425b      	negs	r3, r3
    ad74:	4498      	add	r8, r3
    ad76:	19c9      	adds	r1, r1, r7
    ad78:	e771      	b.n	ac5e <__udivdi3+0x246>
    ad7a:	458b      	cmp	fp, r1
    ad7c:	d800      	bhi.n	ad80 <__udivdi3+0x368>
    ad7e:	e750      	b.n	ac22 <__udivdi3+0x20a>
    ad80:	2302      	movs	r3, #2
    ad82:	425b      	negs	r3, r3
    ad84:	4499      	add	r9, r3
    ad86:	19c9      	adds	r1, r1, r7
    ad88:	e74c      	b.n	ac24 <__udivdi3+0x20c>
    ad8a:	1c1f      	adds	r7, r3, #0
    ad8c:	e7d3      	b.n	ad36 <__udivdi3+0x31e>
    ad8e:	1c1d      	adds	r5, r3, #0
    ad90:	e7b3      	b.n	acfa <__udivdi3+0x2e2>
    ad92:	3d02      	subs	r5, #2
    ad94:	1900      	adds	r0, r0, r4
    ad96:	e6ef      	b.n	ab78 <__udivdi3+0x160>

0000ad98 <__eqdf2>:
    ad98:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad9a:	465f      	mov	r7, fp
    ad9c:	4656      	mov	r6, sl
    ad9e:	464d      	mov	r5, r9
    ada0:	4644      	mov	r4, r8
    ada2:	b4f0      	push	{r4, r5, r6, r7}
    ada4:	1c0d      	adds	r5, r1, #0
    ada6:	1c04      	adds	r4, r0, #0
    ada8:	4680      	mov	r8, r0
    adaa:	0fe8      	lsrs	r0, r5, #31
    adac:	4681      	mov	r9, r0
    adae:	0318      	lsls	r0, r3, #12
    adb0:	030f      	lsls	r7, r1, #12
    adb2:	0b00      	lsrs	r0, r0, #12
    adb4:	0b3f      	lsrs	r7, r7, #12
    adb6:	b083      	sub	sp, #12
    adb8:	4684      	mov	ip, r0
    adba:	481b      	ldr	r0, [pc, #108]	; (ae28 <__eqdf2+0x90>)
    adbc:	9700      	str	r7, [sp, #0]
    adbe:	0049      	lsls	r1, r1, #1
    adc0:	005e      	lsls	r6, r3, #1
    adc2:	0fdf      	lsrs	r7, r3, #31
    adc4:	0d49      	lsrs	r1, r1, #21
    adc6:	4692      	mov	sl, r2
    adc8:	0d76      	lsrs	r6, r6, #21
    adca:	46bb      	mov	fp, r7
    adcc:	4281      	cmp	r1, r0
    adce:	d00c      	beq.n	adea <__eqdf2+0x52>
    add0:	4815      	ldr	r0, [pc, #84]	; (ae28 <__eqdf2+0x90>)
    add2:	4286      	cmp	r6, r0
    add4:	d010      	beq.n	adf8 <__eqdf2+0x60>
    add6:	2001      	movs	r0, #1
    add8:	42b1      	cmp	r1, r6
    adda:	d015      	beq.n	ae08 <__eqdf2+0x70>
    addc:	b003      	add	sp, #12
    adde:	bc3c      	pop	{r2, r3, r4, r5}
    ade0:	4690      	mov	r8, r2
    ade2:	4699      	mov	r9, r3
    ade4:	46a2      	mov	sl, r4
    ade6:	46ab      	mov	fp, r5
    ade8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    adea:	9f00      	ldr	r7, [sp, #0]
    adec:	2001      	movs	r0, #1
    adee:	4327      	orrs	r7, r4
    adf0:	d1f4      	bne.n	addc <__eqdf2+0x44>
    adf2:	480d      	ldr	r0, [pc, #52]	; (ae28 <__eqdf2+0x90>)
    adf4:	4286      	cmp	r6, r0
    adf6:	d1ee      	bne.n	add6 <__eqdf2+0x3e>
    adf8:	4660      	mov	r0, ip
    adfa:	4302      	orrs	r2, r0
    adfc:	2001      	movs	r0, #1
    adfe:	2a00      	cmp	r2, #0
    ae00:	d1ec      	bne.n	addc <__eqdf2+0x44>
    ae02:	2001      	movs	r0, #1
    ae04:	42b1      	cmp	r1, r6
    ae06:	d1e9      	bne.n	addc <__eqdf2+0x44>
    ae08:	9b00      	ldr	r3, [sp, #0]
    ae0a:	4563      	cmp	r3, ip
    ae0c:	d1e6      	bne.n	addc <__eqdf2+0x44>
    ae0e:	45d0      	cmp	r8, sl
    ae10:	d1e4      	bne.n	addc <__eqdf2+0x44>
    ae12:	45d9      	cmp	r9, fp
    ae14:	d006      	beq.n	ae24 <__eqdf2+0x8c>
    ae16:	2900      	cmp	r1, #0
    ae18:	d1e0      	bne.n	addc <__eqdf2+0x44>
    ae1a:	431c      	orrs	r4, r3
    ae1c:	1c20      	adds	r0, r4, #0
    ae1e:	1e44      	subs	r4, r0, #1
    ae20:	41a0      	sbcs	r0, r4
    ae22:	e7db      	b.n	addc <__eqdf2+0x44>
    ae24:	2000      	movs	r0, #0
    ae26:	e7d9      	b.n	addc <__eqdf2+0x44>
    ae28:	000007ff 	.word	0x000007ff

0000ae2c <__gedf2>:
    ae2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae2e:	465f      	mov	r7, fp
    ae30:	4656      	mov	r6, sl
    ae32:	464d      	mov	r5, r9
    ae34:	4644      	mov	r4, r8
    ae36:	b4f0      	push	{r4, r5, r6, r7}
    ae38:	0fcd      	lsrs	r5, r1, #31
    ae3a:	0fde      	lsrs	r6, r3, #31
    ae3c:	46ac      	mov	ip, r5
    ae3e:	031d      	lsls	r5, r3, #12
    ae40:	0b2d      	lsrs	r5, r5, #12
    ae42:	46b1      	mov	r9, r6
    ae44:	4e35      	ldr	r6, [pc, #212]	; (af1c <__gedf2+0xf0>)
    ae46:	030f      	lsls	r7, r1, #12
    ae48:	004c      	lsls	r4, r1, #1
    ae4a:	46ab      	mov	fp, r5
    ae4c:	005d      	lsls	r5, r3, #1
    ae4e:	4680      	mov	r8, r0
    ae50:	0b3f      	lsrs	r7, r7, #12
    ae52:	0d64      	lsrs	r4, r4, #21
    ae54:	4692      	mov	sl, r2
    ae56:	0d6d      	lsrs	r5, r5, #21
    ae58:	42b4      	cmp	r4, r6
    ae5a:	d031      	beq.n	aec0 <__gedf2+0x94>
    ae5c:	4e2f      	ldr	r6, [pc, #188]	; (af1c <__gedf2+0xf0>)
    ae5e:	42b5      	cmp	r5, r6
    ae60:	d034      	beq.n	aecc <__gedf2+0xa0>
    ae62:	2c00      	cmp	r4, #0
    ae64:	d10e      	bne.n	ae84 <__gedf2+0x58>
    ae66:	4338      	orrs	r0, r7
    ae68:	4241      	negs	r1, r0
    ae6a:	4141      	adcs	r1, r0
    ae6c:	1c08      	adds	r0, r1, #0
    ae6e:	2d00      	cmp	r5, #0
    ae70:	d00b      	beq.n	ae8a <__gedf2+0x5e>
    ae72:	2900      	cmp	r1, #0
    ae74:	d119      	bne.n	aeaa <__gedf2+0x7e>
    ae76:	45cc      	cmp	ip, r9
    ae78:	d02c      	beq.n	aed4 <__gedf2+0xa8>
    ae7a:	4666      	mov	r6, ip
    ae7c:	2e00      	cmp	r6, #0
    ae7e:	d117      	bne.n	aeb0 <__gedf2+0x84>
    ae80:	2001      	movs	r0, #1
    ae82:	e017      	b.n	aeb4 <__gedf2+0x88>
    ae84:	2d00      	cmp	r5, #0
    ae86:	d1f6      	bne.n	ae76 <__gedf2+0x4a>
    ae88:	1c28      	adds	r0, r5, #0
    ae8a:	4659      	mov	r1, fp
    ae8c:	430a      	orrs	r2, r1
    ae8e:	4253      	negs	r3, r2
    ae90:	4153      	adcs	r3, r2
    ae92:	2800      	cmp	r0, #0
    ae94:	d106      	bne.n	aea4 <__gedf2+0x78>
    ae96:	2b00      	cmp	r3, #0
    ae98:	d0ed      	beq.n	ae76 <__gedf2+0x4a>
    ae9a:	4665      	mov	r5, ip
    ae9c:	2001      	movs	r0, #1
    ae9e:	2d00      	cmp	r5, #0
    aea0:	d008      	beq.n	aeb4 <__gedf2+0x88>
    aea2:	e005      	b.n	aeb0 <__gedf2+0x84>
    aea4:	2000      	movs	r0, #0
    aea6:	2b00      	cmp	r3, #0
    aea8:	d104      	bne.n	aeb4 <__gedf2+0x88>
    aeaa:	464b      	mov	r3, r9
    aeac:	2b00      	cmp	r3, #0
    aeae:	d1e7      	bne.n	ae80 <__gedf2+0x54>
    aeb0:	2001      	movs	r0, #1
    aeb2:	4240      	negs	r0, r0
    aeb4:	bc3c      	pop	{r2, r3, r4, r5}
    aeb6:	4690      	mov	r8, r2
    aeb8:	4699      	mov	r9, r3
    aeba:	46a2      	mov	sl, r4
    aebc:	46ab      	mov	fp, r5
    aebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aec0:	1c3e      	adds	r6, r7, #0
    aec2:	4306      	orrs	r6, r0
    aec4:	d0ca      	beq.n	ae5c <__gedf2+0x30>
    aec6:	2002      	movs	r0, #2
    aec8:	4240      	negs	r0, r0
    aeca:	e7f3      	b.n	aeb4 <__gedf2+0x88>
    aecc:	465e      	mov	r6, fp
    aece:	4316      	orrs	r6, r2
    aed0:	d0c7      	beq.n	ae62 <__gedf2+0x36>
    aed2:	e7f8      	b.n	aec6 <__gedf2+0x9a>
    aed4:	42ac      	cmp	r4, r5
    aed6:	dc05      	bgt.n	aee4 <__gedf2+0xb8>
    aed8:	da09      	bge.n	aeee <__gedf2+0xc2>
    aeda:	4663      	mov	r3, ip
    aedc:	2b00      	cmp	r3, #0
    aede:	d0e7      	beq.n	aeb0 <__gedf2+0x84>
    aee0:	2001      	movs	r0, #1
    aee2:	e7e7      	b.n	aeb4 <__gedf2+0x88>
    aee4:	4661      	mov	r1, ip
    aee6:	2900      	cmp	r1, #0
    aee8:	d1e2      	bne.n	aeb0 <__gedf2+0x84>
    aeea:	2001      	movs	r0, #1
    aeec:	e7e2      	b.n	aeb4 <__gedf2+0x88>
    aeee:	455f      	cmp	r7, fp
    aef0:	d808      	bhi.n	af04 <__gedf2+0xd8>
    aef2:	d00c      	beq.n	af0e <__gedf2+0xe2>
    aef4:	2000      	movs	r0, #0
    aef6:	455f      	cmp	r7, fp
    aef8:	d2dc      	bcs.n	aeb4 <__gedf2+0x88>
    aefa:	4666      	mov	r6, ip
    aefc:	2e00      	cmp	r6, #0
    aefe:	d0d7      	beq.n	aeb0 <__gedf2+0x84>
    af00:	2001      	movs	r0, #1
    af02:	e7d7      	b.n	aeb4 <__gedf2+0x88>
    af04:	4665      	mov	r5, ip
    af06:	2d00      	cmp	r5, #0
    af08:	d1d2      	bne.n	aeb0 <__gedf2+0x84>
    af0a:	2001      	movs	r0, #1
    af0c:	e7d2      	b.n	aeb4 <__gedf2+0x88>
    af0e:	45d0      	cmp	r8, sl
    af10:	d8f8      	bhi.n	af04 <__gedf2+0xd8>
    af12:	2000      	movs	r0, #0
    af14:	45d0      	cmp	r8, sl
    af16:	d3f0      	bcc.n	aefa <__gedf2+0xce>
    af18:	e7cc      	b.n	aeb4 <__gedf2+0x88>
    af1a:	46c0      	nop			; (mov r8, r8)
    af1c:	000007ff 	.word	0x000007ff

0000af20 <__ledf2>:
    af20:	b5f0      	push	{r4, r5, r6, r7, lr}
    af22:	4656      	mov	r6, sl
    af24:	464d      	mov	r5, r9
    af26:	4644      	mov	r4, r8
    af28:	465f      	mov	r7, fp
    af2a:	b4f0      	push	{r4, r5, r6, r7}
    af2c:	1c0d      	adds	r5, r1, #0
    af2e:	b083      	sub	sp, #12
    af30:	1c04      	adds	r4, r0, #0
    af32:	9001      	str	r0, [sp, #4]
    af34:	0fe8      	lsrs	r0, r5, #31
    af36:	4681      	mov	r9, r0
    af38:	0318      	lsls	r0, r3, #12
    af3a:	030f      	lsls	r7, r1, #12
    af3c:	0b00      	lsrs	r0, r0, #12
    af3e:	0b3f      	lsrs	r7, r7, #12
    af40:	4684      	mov	ip, r0
    af42:	4838      	ldr	r0, [pc, #224]	; (b024 <__ledf2+0x104>)
    af44:	9700      	str	r7, [sp, #0]
    af46:	0049      	lsls	r1, r1, #1
    af48:	005e      	lsls	r6, r3, #1
    af4a:	0fdf      	lsrs	r7, r3, #31
    af4c:	0d49      	lsrs	r1, r1, #21
    af4e:	4692      	mov	sl, r2
    af50:	0d76      	lsrs	r6, r6, #21
    af52:	46b8      	mov	r8, r7
    af54:	4281      	cmp	r1, r0
    af56:	d033      	beq.n	afc0 <__ledf2+0xa0>
    af58:	4832      	ldr	r0, [pc, #200]	; (b024 <__ledf2+0x104>)
    af5a:	4286      	cmp	r6, r0
    af5c:	d035      	beq.n	afca <__ledf2+0xaa>
    af5e:	2900      	cmp	r1, #0
    af60:	d017      	beq.n	af92 <__ledf2+0x72>
    af62:	2e00      	cmp	r6, #0
    af64:	d11e      	bne.n	afa4 <__ledf2+0x84>
    af66:	1c34      	adds	r4, r6, #0
    af68:	4667      	mov	r7, ip
    af6a:	433a      	orrs	r2, r7
    af6c:	4253      	negs	r3, r2
    af6e:	4153      	adcs	r3, r2
    af70:	2c00      	cmp	r4, #0
    af72:	d01e      	beq.n	afb2 <__ledf2+0x92>
    af74:	2000      	movs	r0, #0
    af76:	2b00      	cmp	r3, #0
    af78:	d104      	bne.n	af84 <__ledf2+0x64>
    af7a:	4640      	mov	r0, r8
    af7c:	2800      	cmp	r0, #0
    af7e:	d116      	bne.n	afae <__ledf2+0x8e>
    af80:	2001      	movs	r0, #1
    af82:	4240      	negs	r0, r0
    af84:	b003      	add	sp, #12
    af86:	bc3c      	pop	{r2, r3, r4, r5}
    af88:	4690      	mov	r8, r2
    af8a:	4699      	mov	r9, r3
    af8c:	46a2      	mov	sl, r4
    af8e:	46ab      	mov	fp, r5
    af90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af92:	9800      	ldr	r0, [sp, #0]
    af94:	4304      	orrs	r4, r0
    af96:	4260      	negs	r0, r4
    af98:	4160      	adcs	r0, r4
    af9a:	1c04      	adds	r4, r0, #0
    af9c:	2e00      	cmp	r6, #0
    af9e:	d0e3      	beq.n	af68 <__ledf2+0x48>
    afa0:	2800      	cmp	r0, #0
    afa2:	d1ea      	bne.n	af7a <__ledf2+0x5a>
    afa4:	45c1      	cmp	r9, r8
    afa6:	d015      	beq.n	afd4 <__ledf2+0xb4>
    afa8:	464f      	mov	r7, r9
    afaa:	2f00      	cmp	r7, #0
    afac:	d1e8      	bne.n	af80 <__ledf2+0x60>
    afae:	2001      	movs	r0, #1
    afb0:	e7e8      	b.n	af84 <__ledf2+0x64>
    afb2:	2b00      	cmp	r3, #0
    afb4:	d0f6      	beq.n	afa4 <__ledf2+0x84>
    afb6:	464b      	mov	r3, r9
    afb8:	2001      	movs	r0, #1
    afba:	2b00      	cmp	r3, #0
    afbc:	d0e2      	beq.n	af84 <__ledf2+0x64>
    afbe:	e7df      	b.n	af80 <__ledf2+0x60>
    afc0:	9f00      	ldr	r7, [sp, #0]
    afc2:	2002      	movs	r0, #2
    afc4:	4327      	orrs	r7, r4
    afc6:	d1dd      	bne.n	af84 <__ledf2+0x64>
    afc8:	e7c6      	b.n	af58 <__ledf2+0x38>
    afca:	4667      	mov	r7, ip
    afcc:	2002      	movs	r0, #2
    afce:	4317      	orrs	r7, r2
    afd0:	d1d8      	bne.n	af84 <__ledf2+0x64>
    afd2:	e7c4      	b.n	af5e <__ledf2+0x3e>
    afd4:	42b1      	cmp	r1, r6
    afd6:	dd04      	ble.n	afe2 <__ledf2+0xc2>
    afd8:	4648      	mov	r0, r9
    afda:	2800      	cmp	r0, #0
    afdc:	d1d0      	bne.n	af80 <__ledf2+0x60>
    afde:	2001      	movs	r0, #1
    afe0:	e7d0      	b.n	af84 <__ledf2+0x64>
    afe2:	42b1      	cmp	r1, r6
    afe4:	da04      	bge.n	aff0 <__ledf2+0xd0>
    afe6:	464b      	mov	r3, r9
    afe8:	2b00      	cmp	r3, #0
    afea:	d0c9      	beq.n	af80 <__ledf2+0x60>
    afec:	2001      	movs	r0, #1
    afee:	e7c9      	b.n	af84 <__ledf2+0x64>
    aff0:	9f00      	ldr	r7, [sp, #0]
    aff2:	4567      	cmp	r7, ip
    aff4:	d809      	bhi.n	b00a <__ledf2+0xea>
    aff6:	d00d      	beq.n	b014 <__ledf2+0xf4>
    aff8:	9f00      	ldr	r7, [sp, #0]
    affa:	2000      	movs	r0, #0
    affc:	4567      	cmp	r7, ip
    affe:	d2c1      	bcs.n	af84 <__ledf2+0x64>
    b000:	464f      	mov	r7, r9
    b002:	2f00      	cmp	r7, #0
    b004:	d0bc      	beq.n	af80 <__ledf2+0x60>
    b006:	2001      	movs	r0, #1
    b008:	e7bc      	b.n	af84 <__ledf2+0x64>
    b00a:	464b      	mov	r3, r9
    b00c:	2b00      	cmp	r3, #0
    b00e:	d1b7      	bne.n	af80 <__ledf2+0x60>
    b010:	2001      	movs	r0, #1
    b012:	e7b7      	b.n	af84 <__ledf2+0x64>
    b014:	9801      	ldr	r0, [sp, #4]
    b016:	4550      	cmp	r0, sl
    b018:	d8f7      	bhi.n	b00a <__ledf2+0xea>
    b01a:	9b01      	ldr	r3, [sp, #4]
    b01c:	2000      	movs	r0, #0
    b01e:	4553      	cmp	r3, sl
    b020:	d3ee      	bcc.n	b000 <__ledf2+0xe0>
    b022:	e7af      	b.n	af84 <__ledf2+0x64>
    b024:	000007ff 	.word	0x000007ff

0000b028 <__libc_init_array>:
    b028:	b570      	push	{r4, r5, r6, lr}
    b02a:	4b0e      	ldr	r3, [pc, #56]	; (b064 <__libc_init_array+0x3c>)
    b02c:	4d0e      	ldr	r5, [pc, #56]	; (b068 <__libc_init_array+0x40>)
    b02e:	2400      	movs	r4, #0
    b030:	1aed      	subs	r5, r5, r3
    b032:	10ad      	asrs	r5, r5, #2
    b034:	1c1e      	adds	r6, r3, #0
    b036:	42ac      	cmp	r4, r5
    b038:	d004      	beq.n	b044 <__libc_init_array+0x1c>
    b03a:	00a3      	lsls	r3, r4, #2
    b03c:	58f3      	ldr	r3, [r6, r3]
    b03e:	4798      	blx	r3
    b040:	3401      	adds	r4, #1
    b042:	e7f8      	b.n	b036 <__libc_init_array+0xe>
    b044:	f005 fe18 	bl	10c78 <_init>
    b048:	4b08      	ldr	r3, [pc, #32]	; (b06c <__libc_init_array+0x44>)
    b04a:	4d09      	ldr	r5, [pc, #36]	; (b070 <__libc_init_array+0x48>)
    b04c:	2400      	movs	r4, #0
    b04e:	1aed      	subs	r5, r5, r3
    b050:	10ad      	asrs	r5, r5, #2
    b052:	1c1e      	adds	r6, r3, #0
    b054:	42ac      	cmp	r4, r5
    b056:	d004      	beq.n	b062 <__libc_init_array+0x3a>
    b058:	00a3      	lsls	r3, r4, #2
    b05a:	58f3      	ldr	r3, [r6, r3]
    b05c:	4798      	blx	r3
    b05e:	3401      	adds	r4, #1
    b060:	e7f8      	b.n	b054 <__libc_init_array+0x2c>
    b062:	bd70      	pop	{r4, r5, r6, pc}
    b064:	00010c84 	.word	0x00010c84
    b068:	00010c84 	.word	0x00010c84
    b06c:	00010c84 	.word	0x00010c84
    b070:	00010c8c 	.word	0x00010c8c

0000b074 <memcpy>:
    b074:	b510      	push	{r4, lr}
    b076:	2300      	movs	r3, #0
    b078:	4293      	cmp	r3, r2
    b07a:	d003      	beq.n	b084 <memcpy+0x10>
    b07c:	5ccc      	ldrb	r4, [r1, r3]
    b07e:	54c4      	strb	r4, [r0, r3]
    b080:	3301      	adds	r3, #1
    b082:	e7f9      	b.n	b078 <memcpy+0x4>
    b084:	bd10      	pop	{r4, pc}

0000b086 <memset>:
    b086:	1c03      	adds	r3, r0, #0
    b088:	1882      	adds	r2, r0, r2
    b08a:	4293      	cmp	r3, r2
    b08c:	d002      	beq.n	b094 <memset+0xe>
    b08e:	7019      	strb	r1, [r3, #0]
    b090:	3301      	adds	r3, #1
    b092:	e7fa      	b.n	b08a <memset+0x4>
    b094:	4770      	bx	lr
	...

0000b098 <_printf_r>:
    b098:	b40e      	push	{r1, r2, r3}
    b09a:	b503      	push	{r0, r1, lr}
    b09c:	ab03      	add	r3, sp, #12
    b09e:	cb04      	ldmia	r3!, {r2}
    b0a0:	6881      	ldr	r1, [r0, #8]
    b0a2:	9301      	str	r3, [sp, #4]
    b0a4:	f000 f8dc 	bl	b260 <_vfprintf_r>
    b0a8:	b002      	add	sp, #8
    b0aa:	bc08      	pop	{r3}
    b0ac:	b003      	add	sp, #12
    b0ae:	4718      	bx	r3

0000b0b0 <printf>:
    b0b0:	b40f      	push	{r0, r1, r2, r3}
    b0b2:	b507      	push	{r0, r1, r2, lr}
    b0b4:	ab04      	add	r3, sp, #16
    b0b6:	cb04      	ldmia	r3!, {r2}
    b0b8:	4a05      	ldr	r2, [pc, #20]	; (b0d0 <printf+0x20>)
    b0ba:	9301      	str	r3, [sp, #4]
    b0bc:	6810      	ldr	r0, [r2, #0]
    b0be:	9a04      	ldr	r2, [sp, #16]
    b0c0:	6881      	ldr	r1, [r0, #8]
    b0c2:	f000 f8cd 	bl	b260 <_vfprintf_r>
    b0c6:	b003      	add	sp, #12
    b0c8:	bc08      	pop	{r3}
    b0ca:	b004      	add	sp, #16
    b0cc:	4718      	bx	r3
    b0ce:	46c0      	nop			; (mov r8, r8)
    b0d0:	20000040 	.word	0x20000040

0000b0d4 <_puts_r>:
    b0d4:	b530      	push	{r4, r5, lr}
    b0d6:	1c04      	adds	r4, r0, #0
    b0d8:	b089      	sub	sp, #36	; 0x24
    b0da:	1c08      	adds	r0, r1, #0
    b0dc:	1c0d      	adds	r5, r1, #0
    b0de:	f000 f8b7 	bl	b250 <strlen>
    b0e2:	4a11      	ldr	r2, [pc, #68]	; (b128 <_puts_r+0x54>)
    b0e4:	ab04      	add	r3, sp, #16
    b0e6:	68a1      	ldr	r1, [r4, #8]
    b0e8:	9206      	str	r2, [sp, #24]
    b0ea:	9301      	str	r3, [sp, #4]
    b0ec:	2201      	movs	r2, #1
    b0ee:	2302      	movs	r3, #2
    b0f0:	9005      	str	r0, [sp, #20]
    b0f2:	9207      	str	r2, [sp, #28]
    b0f4:	1880      	adds	r0, r0, r2
    b0f6:	9302      	str	r3, [sp, #8]
    b0f8:	2280      	movs	r2, #128	; 0x80
    b0fa:	898b      	ldrh	r3, [r1, #12]
    b0fc:	0192      	lsls	r2, r2, #6
    b0fe:	9504      	str	r5, [sp, #16]
    b100:	9003      	str	r0, [sp, #12]
    b102:	4213      	tst	r3, r2
    b104:	d105      	bne.n	b112 <_puts_r+0x3e>
    b106:	4313      	orrs	r3, r2
    b108:	818b      	strh	r3, [r1, #12]
    b10a:	6e4a      	ldr	r2, [r1, #100]	; 0x64
    b10c:	4b07      	ldr	r3, [pc, #28]	; (b12c <_puts_r+0x58>)
    b10e:	4013      	ands	r3, r2
    b110:	664b      	str	r3, [r1, #100]	; 0x64
    b112:	1c20      	adds	r0, r4, #0
    b114:	aa01      	add	r2, sp, #4
    b116:	f002 fa5b 	bl	d5d0 <__sfvwrite_r>
    b11a:	1e43      	subs	r3, r0, #1
    b11c:	4198      	sbcs	r0, r3
    b11e:	4240      	negs	r0, r0
    b120:	230a      	movs	r3, #10
    b122:	4318      	orrs	r0, r3
    b124:	b009      	add	sp, #36	; 0x24
    b126:	bd30      	pop	{r4, r5, pc}
    b128:	00010a82 	.word	0x00010a82
    b12c:	ffffdfff 	.word	0xffffdfff

0000b130 <puts>:
    b130:	b508      	push	{r3, lr}
    b132:	4b03      	ldr	r3, [pc, #12]	; (b140 <puts+0x10>)
    b134:	1c01      	adds	r1, r0, #0
    b136:	6818      	ldr	r0, [r3, #0]
    b138:	f7ff ffcc 	bl	b0d4 <_puts_r>
    b13c:	bd08      	pop	{r3, pc}
    b13e:	46c0      	nop			; (mov r8, r8)
    b140:	20000040 	.word	0x20000040

0000b144 <setbuf>:
    b144:	b508      	push	{r3, lr}
    b146:	424a      	negs	r2, r1
    b148:	414a      	adcs	r2, r1
    b14a:	2380      	movs	r3, #128	; 0x80
    b14c:	0052      	lsls	r2, r2, #1
    b14e:	00db      	lsls	r3, r3, #3
    b150:	f000 f802 	bl	b158 <setvbuf>
    b154:	bd08      	pop	{r3, pc}
	...

0000b158 <setvbuf>:
    b158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b15a:	1c1d      	adds	r5, r3, #0
    b15c:	4b35      	ldr	r3, [pc, #212]	; (b234 <setvbuf+0xdc>)
    b15e:	1c04      	adds	r4, r0, #0
    b160:	681f      	ldr	r7, [r3, #0]
    b162:	1c0e      	adds	r6, r1, #0
    b164:	9201      	str	r2, [sp, #4]
    b166:	2f00      	cmp	r7, #0
    b168:	d005      	beq.n	b176 <setvbuf+0x1e>
    b16a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b16c:	2a00      	cmp	r2, #0
    b16e:	d102      	bne.n	b176 <setvbuf+0x1e>
    b170:	1c38      	adds	r0, r7, #0
    b172:	f002 f83f 	bl	d1f4 <__sinit>
    b176:	9b01      	ldr	r3, [sp, #4]
    b178:	2b02      	cmp	r3, #2
    b17a:	d857      	bhi.n	b22c <setvbuf+0xd4>
    b17c:	2d00      	cmp	r5, #0
    b17e:	db55      	blt.n	b22c <setvbuf+0xd4>
    b180:	1c38      	adds	r0, r7, #0
    b182:	1c21      	adds	r1, r4, #0
    b184:	f001 ffe4 	bl	d150 <_fflush_r>
    b188:	2300      	movs	r3, #0
    b18a:	6063      	str	r3, [r4, #4]
    b18c:	61a3      	str	r3, [r4, #24]
    b18e:	89a3      	ldrh	r3, [r4, #12]
    b190:	061a      	lsls	r2, r3, #24
    b192:	d503      	bpl.n	b19c <setvbuf+0x44>
    b194:	1c38      	adds	r0, r7, #0
    b196:	6921      	ldr	r1, [r4, #16]
    b198:	f002 f95c 	bl	d454 <_free_r>
    b19c:	89a3      	ldrh	r3, [r4, #12]
    b19e:	2283      	movs	r2, #131	; 0x83
    b1a0:	4393      	bics	r3, r2
    b1a2:	81a3      	strh	r3, [r4, #12]
    b1a4:	9b01      	ldr	r3, [sp, #4]
    b1a6:	2b02      	cmp	r3, #2
    b1a8:	d013      	beq.n	b1d2 <setvbuf+0x7a>
    b1aa:	2e00      	cmp	r6, #0
    b1ac:	d125      	bne.n	b1fa <setvbuf+0xa2>
    b1ae:	2d00      	cmp	r5, #0
    b1b0:	d101      	bne.n	b1b6 <setvbuf+0x5e>
    b1b2:	2580      	movs	r5, #128	; 0x80
    b1b4:	00ed      	lsls	r5, r5, #3
    b1b6:	1c28      	adds	r0, r5, #0
    b1b8:	f002 fc5c 	bl	da74 <malloc>
    b1bc:	1e06      	subs	r6, r0, #0
    b1be:	d118      	bne.n	b1f2 <setvbuf+0x9a>
    b1c0:	2080      	movs	r0, #128	; 0x80
    b1c2:	00c0      	lsls	r0, r0, #3
    b1c4:	f002 fc56 	bl	da74 <malloc>
    b1c8:	1e06      	subs	r6, r0, #0
    b1ca:	d110      	bne.n	b1ee <setvbuf+0x96>
    b1cc:	2001      	movs	r0, #1
    b1ce:	4240      	negs	r0, r0
    b1d0:	e000      	b.n	b1d4 <setvbuf+0x7c>
    b1d2:	2000      	movs	r0, #0
    b1d4:	89a3      	ldrh	r3, [r4, #12]
    b1d6:	2202      	movs	r2, #2
    b1d8:	4313      	orrs	r3, r2
    b1da:	81a3      	strh	r3, [r4, #12]
    b1dc:	2300      	movs	r3, #0
    b1de:	60a3      	str	r3, [r4, #8]
    b1e0:	1c23      	adds	r3, r4, #0
    b1e2:	3343      	adds	r3, #67	; 0x43
    b1e4:	6023      	str	r3, [r4, #0]
    b1e6:	6123      	str	r3, [r4, #16]
    b1e8:	2301      	movs	r3, #1
    b1ea:	6163      	str	r3, [r4, #20]
    b1ec:	e020      	b.n	b230 <setvbuf+0xd8>
    b1ee:	2580      	movs	r5, #128	; 0x80
    b1f0:	00ed      	lsls	r5, r5, #3
    b1f2:	89a3      	ldrh	r3, [r4, #12]
    b1f4:	2280      	movs	r2, #128	; 0x80
    b1f6:	4313      	orrs	r3, r2
    b1f8:	81a3      	strh	r3, [r4, #12]
    b1fa:	9a01      	ldr	r2, [sp, #4]
    b1fc:	2a01      	cmp	r2, #1
    b1fe:	d104      	bne.n	b20a <setvbuf+0xb2>
    b200:	89a3      	ldrh	r3, [r4, #12]
    b202:	4313      	orrs	r3, r2
    b204:	81a3      	strh	r3, [r4, #12]
    b206:	426b      	negs	r3, r5
    b208:	61a3      	str	r3, [r4, #24]
    b20a:	4b0b      	ldr	r3, [pc, #44]	; (b238 <setvbuf+0xe0>)
    b20c:	2000      	movs	r0, #0
    b20e:	63fb      	str	r3, [r7, #60]	; 0x3c
    b210:	89a3      	ldrh	r3, [r4, #12]
    b212:	6026      	str	r6, [r4, #0]
    b214:	6126      	str	r6, [r4, #16]
    b216:	6165      	str	r5, [r4, #20]
    b218:	071a      	lsls	r2, r3, #28
    b21a:	d509      	bpl.n	b230 <setvbuf+0xd8>
    b21c:	2203      	movs	r2, #3
    b21e:	4013      	ands	r3, r2
    b220:	425a      	negs	r2, r3
    b222:	4153      	adcs	r3, r2
    b224:	425b      	negs	r3, r3
    b226:	401d      	ands	r5, r3
    b228:	60a5      	str	r5, [r4, #8]
    b22a:	e001      	b.n	b230 <setvbuf+0xd8>
    b22c:	2001      	movs	r0, #1
    b22e:	4240      	negs	r0, r0
    b230:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b232:	46c0      	nop			; (mov r8, r8)
    b234:	20000040 	.word	0x20000040
    b238:	0000d1a9 	.word	0x0000d1a9

0000b23c <strcmp>:
    b23c:	7802      	ldrb	r2, [r0, #0]
    b23e:	780b      	ldrb	r3, [r1, #0]
    b240:	3001      	adds	r0, #1
    b242:	3101      	adds	r1, #1
    b244:	2a00      	cmp	r2, #0
    b246:	d001      	beq.n	b24c <strcmp+0x10>
    b248:	429a      	cmp	r2, r3
    b24a:	d0f7      	beq.n	b23c <strcmp>
    b24c:	1ad0      	subs	r0, r2, r3
    b24e:	4770      	bx	lr

0000b250 <strlen>:
    b250:	2300      	movs	r3, #0
    b252:	5cc2      	ldrb	r2, [r0, r3]
    b254:	3301      	adds	r3, #1
    b256:	2a00      	cmp	r2, #0
    b258:	d1fb      	bne.n	b252 <strlen+0x2>
    b25a:	1e58      	subs	r0, r3, #1
    b25c:	4770      	bx	lr
	...

0000b260 <_vfprintf_r>:
    b260:	b5f0      	push	{r4, r5, r6, r7, lr}
    b262:	b0c7      	sub	sp, #284	; 0x11c
    b264:	910d      	str	r1, [sp, #52]	; 0x34
    b266:	9214      	str	r2, [sp, #80]	; 0x50
    b268:	1c1c      	adds	r4, r3, #0
    b26a:	1c1f      	adds	r7, r3, #0
    b26c:	900e      	str	r0, [sp, #56]	; 0x38
    b26e:	f002 fb7d 	bl	d96c <_localeconv_r>
    b272:	6800      	ldr	r0, [r0, #0]
    b274:	901c      	str	r0, [sp, #112]	; 0x70
    b276:	f7ff ffeb 	bl	b250 <strlen>
    b27a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b27c:	901b      	str	r0, [sp, #108]	; 0x6c
    b27e:	2d00      	cmp	r5, #0
    b280:	d005      	beq.n	b28e <_vfprintf_r+0x2e>
    b282:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    b284:	2800      	cmp	r0, #0
    b286:	d102      	bne.n	b28e <_vfprintf_r+0x2e>
    b288:	1c28      	adds	r0, r5, #0
    b28a:	f001 ffb3 	bl	d1f4 <__sinit>
    b28e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    b290:	2280      	movs	r2, #128	; 0x80
    b292:	89ab      	ldrh	r3, [r5, #12]
    b294:	0192      	lsls	r2, r2, #6
    b296:	4213      	tst	r3, r2
    b298:	d105      	bne.n	b2a6 <_vfprintf_r+0x46>
    b29a:	4313      	orrs	r3, r2
    b29c:	6e68      	ldr	r0, [r5, #100]	; 0x64
    b29e:	81ab      	strh	r3, [r5, #12]
    b2a0:	4ba9      	ldr	r3, [pc, #676]	; (b548 <_vfprintf_r+0x2e8>)
    b2a2:	4003      	ands	r3, r0
    b2a4:	666b      	str	r3, [r5, #100]	; 0x64
    b2a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    b2a8:	89ab      	ldrh	r3, [r5, #12]
    b2aa:	0718      	lsls	r0, r3, #28
    b2ac:	d509      	bpl.n	b2c2 <_vfprintf_r+0x62>
    b2ae:	6929      	ldr	r1, [r5, #16]
    b2b0:	2900      	cmp	r1, #0
    b2b2:	d006      	beq.n	b2c2 <_vfprintf_r+0x62>
    b2b4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    b2b6:	231a      	movs	r3, #26
    b2b8:	89aa      	ldrh	r2, [r5, #12]
    b2ba:	4013      	ands	r3, r2
    b2bc:	2b0a      	cmp	r3, #10
    b2be:	d117      	bne.n	b2f0 <_vfprintf_r+0x90>
    b2c0:	e009      	b.n	b2d6 <_vfprintf_r+0x76>
    b2c2:	980e      	ldr	r0, [sp, #56]	; 0x38
    b2c4:	990d      	ldr	r1, [sp, #52]	; 0x34
    b2c6:	f000 ffe3 	bl	c290 <__swsetup_r>
    b2ca:	2800      	cmp	r0, #0
    b2cc:	d0f2      	beq.n	b2b4 <_vfprintf_r+0x54>
    b2ce:	2001      	movs	r0, #1
    b2d0:	4240      	negs	r0, r0
    b2d2:	f000 ff8e 	bl	c1f2 <_vfprintf_r+0xf92>
    b2d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    b2d8:	230e      	movs	r3, #14
    b2da:	5eeb      	ldrsh	r3, [r5, r3]
    b2dc:	2b00      	cmp	r3, #0
    b2de:	db07      	blt.n	b2f0 <_vfprintf_r+0x90>
    b2e0:	980e      	ldr	r0, [sp, #56]	; 0x38
    b2e2:	990d      	ldr	r1, [sp, #52]	; 0x34
    b2e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b2e6:	1c23      	adds	r3, r4, #0
    b2e8:	f000 ff9a 	bl	c220 <__sbprintf>
    b2ec:	f000 ff81 	bl	c1f2 <_vfprintf_r+0xf92>
    b2f0:	2300      	movs	r3, #0
    b2f2:	ac36      	add	r4, sp, #216	; 0xd8
    b2f4:	9429      	str	r4, [sp, #164]	; 0xa4
    b2f6:	932b      	str	r3, [sp, #172]	; 0xac
    b2f8:	932a      	str	r3, [sp, #168]	; 0xa8
    b2fa:	9312      	str	r3, [sp, #72]	; 0x48
    b2fc:	9318      	str	r3, [sp, #96]	; 0x60
    b2fe:	931a      	str	r3, [sp, #104]	; 0x68
    b300:	931f      	str	r3, [sp, #124]	; 0x7c
    b302:	931e      	str	r3, [sp, #120]	; 0x78
    b304:	9319      	str	r3, [sp, #100]	; 0x64
    b306:	9d14      	ldr	r5, [sp, #80]	; 0x50
    b308:	782b      	ldrb	r3, [r5, #0]
    b30a:	2b00      	cmp	r3, #0
    b30c:	d103      	bne.n	b316 <_vfprintf_r+0xb6>
    b30e:	9814      	ldr	r0, [sp, #80]	; 0x50
    b310:	1a2e      	subs	r6, r5, r0
    b312:	d104      	bne.n	b31e <_vfprintf_r+0xbe>
    b314:	e01d      	b.n	b352 <_vfprintf_r+0xf2>
    b316:	2b25      	cmp	r3, #37	; 0x25
    b318:	d0f9      	beq.n	b30e <_vfprintf_r+0xae>
    b31a:	3501      	adds	r5, #1
    b31c:	e7f4      	b.n	b308 <_vfprintf_r+0xa8>
    b31e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    b320:	9914      	ldr	r1, [sp, #80]	; 0x50
    b322:	18b3      	adds	r3, r6, r2
    b324:	932b      	str	r3, [sp, #172]	; 0xac
    b326:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    b328:	6021      	str	r1, [r4, #0]
    b32a:	3301      	adds	r3, #1
    b32c:	6066      	str	r6, [r4, #4]
    b32e:	932a      	str	r3, [sp, #168]	; 0xa8
    b330:	2b07      	cmp	r3, #7
    b332:	dc01      	bgt.n	b338 <_vfprintf_r+0xd8>
    b334:	3408      	adds	r4, #8
    b336:	e009      	b.n	b34c <_vfprintf_r+0xec>
    b338:	980e      	ldr	r0, [sp, #56]	; 0x38
    b33a:	990d      	ldr	r1, [sp, #52]	; 0x34
    b33c:	aa29      	add	r2, sp, #164	; 0xa4
    b33e:	f003 fbe5 	bl	eb0c <__sprint_r>
    b342:	2800      	cmp	r0, #0
    b344:	d001      	beq.n	b34a <_vfprintf_r+0xea>
    b346:	f000 ff4d 	bl	c1e4 <_vfprintf_r+0xf84>
    b34a:	ac36      	add	r4, sp, #216	; 0xd8
    b34c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b34e:	199b      	adds	r3, r3, r6
    b350:	9319      	str	r3, [sp, #100]	; 0x64
    b352:	782b      	ldrb	r3, [r5, #0]
    b354:	2b00      	cmp	r3, #0
    b356:	d101      	bne.n	b35c <_vfprintf_r+0xfc>
    b358:	f000 ff3c 	bl	c1d4 <_vfprintf_r+0xf74>
    b35c:	466a      	mov	r2, sp
    b35e:	2300      	movs	r3, #0
    b360:	3287      	adds	r2, #135	; 0x87
    b362:	7013      	strb	r3, [r2, #0]
    b364:	2201      	movs	r2, #1
    b366:	4252      	negs	r2, r2
    b368:	3501      	adds	r5, #1
    b36a:	920c      	str	r2, [sp, #48]	; 0x30
    b36c:	9316      	str	r3, [sp, #88]	; 0x58
    b36e:	1c1e      	adds	r6, r3, #0
    b370:	1c68      	adds	r0, r5, #1
    b372:	782d      	ldrb	r5, [r5, #0]
    b374:	9014      	str	r0, [sp, #80]	; 0x50
    b376:	950f      	str	r5, [sp, #60]	; 0x3c
    b378:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b37a:	3820      	subs	r0, #32
    b37c:	2858      	cmp	r0, #88	; 0x58
    b37e:	d900      	bls.n	b382 <_vfprintf_r+0x122>
    b380:	e391      	b.n	baa6 <_vfprintf_r+0x846>
    b382:	f004 fab3 	bl	f8ec <__gnu_thumb1_case_uhi>
    b386:	005b      	.short	0x005b
    b388:	03900390 	.word	0x03900390
    b38c:	03900069 	.word	0x03900069
    b390:	03900390 	.word	0x03900390
    b394:	03900390 	.word	0x03900390
    b398:	006b0390 	.word	0x006b0390
    b39c:	03900059 	.word	0x03900059
    b3a0:	00750072 	.word	0x00750072
    b3a4:	00a00390 	.word	0x00a00390
    b3a8:	00a200a2 	.word	0x00a200a2
    b3ac:	00a200a2 	.word	0x00a200a2
    b3b0:	00a200a2 	.word	0x00a200a2
    b3b4:	00a200a2 	.word	0x00a200a2
    b3b8:	039000a2 	.word	0x039000a2
    b3bc:	03900390 	.word	0x03900390
    b3c0:	03900390 	.word	0x03900390
    b3c4:	03900390 	.word	0x03900390
    b3c8:	03900390 	.word	0x03900390
    b3cc:	00d00390 	.word	0x00d00390
    b3d0:	03900100 	.word	0x03900100
    b3d4:	03900100 	.word	0x03900100
    b3d8:	03900390 	.word	0x03900390
    b3dc:	00b60390 	.word	0x00b60390
    b3e0:	03900390 	.word	0x03900390
    b3e4:	03900263 	.word	0x03900263
    b3e8:	03900390 	.word	0x03900390
    b3ec:	03900390 	.word	0x03900390
    b3f0:	039002c5 	.word	0x039002c5
    b3f4:	00640390 	.word	0x00640390
    b3f8:	03900390 	.word	0x03900390
    b3fc:	03900390 	.word	0x03900390
    b400:	03900390 	.word	0x03900390
    b404:	03900390 	.word	0x03900390
    b408:	03900390 	.word	0x03900390
    b40c:	006000c5 	.word	0x006000c5
    b410:	01000100 	.word	0x01000100
    b414:	00b80100 	.word	0x00b80100
    b418:	03900060 	.word	0x03900060
    b41c:	00ba0390 	.word	0x00ba0390
    b420:	024a0390 	.word	0x024a0390
    b424:	02850265 	.word	0x02850265
    b428:	039000c3 	.word	0x039000c3
    b42c:	039002a3 	.word	0x039002a3
    b430:	039002c7 	.word	0x039002c7
    b434:	02e60390 	.word	0x02e60390
    b438:	232b      	movs	r3, #43	; 0x2b
    b43a:	e002      	b.n	b442 <_vfprintf_r+0x1e2>
    b43c:	2b00      	cmp	r3, #0
    b43e:	d100      	bne.n	b442 <_vfprintf_r+0x1e2>
    b440:	2320      	movs	r3, #32
    b442:	9d14      	ldr	r5, [sp, #80]	; 0x50
    b444:	e794      	b.n	b370 <_vfprintf_r+0x110>
    b446:	466a      	mov	r2, sp
    b448:	3287      	adds	r2, #135	; 0x87
    b44a:	7013      	strb	r3, [r2, #0]
    b44c:	e070      	b.n	b530 <_vfprintf_r+0x2d0>
    b44e:	466a      	mov	r2, sp
    b450:	3287      	adds	r2, #135	; 0x87
    b452:	7013      	strb	r3, [r2, #0]
    b454:	4d3d      	ldr	r5, [pc, #244]	; (b54c <_vfprintf_r+0x2ec>)
    b456:	e280      	b.n	b95a <_vfprintf_r+0x6fa>
    b458:	2201      	movs	r2, #1
    b45a:	e007      	b.n	b46c <_vfprintf_r+0x20c>
    b45c:	683d      	ldr	r5, [r7, #0]
    b45e:	3704      	adds	r7, #4
    b460:	9516      	str	r5, [sp, #88]	; 0x58
    b462:	2d00      	cmp	r5, #0
    b464:	daed      	bge.n	b442 <_vfprintf_r+0x1e2>
    b466:	426d      	negs	r5, r5
    b468:	9516      	str	r5, [sp, #88]	; 0x58
    b46a:	2204      	movs	r2, #4
    b46c:	4316      	orrs	r6, r2
    b46e:	e7e8      	b.n	b442 <_vfprintf_r+0x1e2>
    b470:	9d14      	ldr	r5, [sp, #80]	; 0x50
    b472:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b474:	782d      	ldrb	r5, [r5, #0]
    b476:	3201      	adds	r2, #1
    b478:	950f      	str	r5, [sp, #60]	; 0x3c
    b47a:	2d2a      	cmp	r5, #42	; 0x2a
    b47c:	d001      	beq.n	b482 <_vfprintf_r+0x222>
    b47e:	2100      	movs	r1, #0
    b480:	e00d      	b.n	b49e <_vfprintf_r+0x23e>
    b482:	1d39      	adds	r1, r7, #4
    b484:	683f      	ldr	r7, [r7, #0]
    b486:	970c      	str	r7, [sp, #48]	; 0x30
    b488:	2f00      	cmp	r7, #0
    b48a:	da05      	bge.n	b498 <_vfprintf_r+0x238>
    b48c:	9214      	str	r2, [sp, #80]	; 0x50
    b48e:	2201      	movs	r2, #1
    b490:	4252      	negs	r2, r2
    b492:	1c0f      	adds	r7, r1, #0
    b494:	920c      	str	r2, [sp, #48]	; 0x30
    b496:	e7d4      	b.n	b442 <_vfprintf_r+0x1e2>
    b498:	1c0f      	adds	r7, r1, #0
    b49a:	9214      	str	r2, [sp, #80]	; 0x50
    b49c:	e7d1      	b.n	b442 <_vfprintf_r+0x1e2>
    b49e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b4a0:	9214      	str	r2, [sp, #80]	; 0x50
    b4a2:	3830      	subs	r0, #48	; 0x30
    b4a4:	2809      	cmp	r0, #9
    b4a6:	d806      	bhi.n	b4b6 <_vfprintf_r+0x256>
    b4a8:	250a      	movs	r5, #10
    b4aa:	4369      	muls	r1, r5
    b4ac:	7815      	ldrb	r5, [r2, #0]
    b4ae:	1809      	adds	r1, r1, r0
    b4b0:	950f      	str	r5, [sp, #60]	; 0x3c
    b4b2:	3201      	adds	r2, #1
    b4b4:	e7f3      	b.n	b49e <_vfprintf_r+0x23e>
    b4b6:	910c      	str	r1, [sp, #48]	; 0x30
    b4b8:	2900      	cmp	r1, #0
    b4ba:	db00      	blt.n	b4be <_vfprintf_r+0x25e>
    b4bc:	e75c      	b.n	b378 <_vfprintf_r+0x118>
    b4be:	2201      	movs	r2, #1
    b4c0:	4252      	negs	r2, r2
    b4c2:	920c      	str	r2, [sp, #48]	; 0x30
    b4c4:	e758      	b.n	b378 <_vfprintf_r+0x118>
    b4c6:	2280      	movs	r2, #128	; 0x80
    b4c8:	e7d0      	b.n	b46c <_vfprintf_r+0x20c>
    b4ca:	2500      	movs	r5, #0
    b4cc:	9516      	str	r5, [sp, #88]	; 0x58
    b4ce:	9d16      	ldr	r5, [sp, #88]	; 0x58
    b4d0:	210a      	movs	r1, #10
    b4d2:	4369      	muls	r1, r5
    b4d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b4d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
    b4d8:	3a30      	subs	r2, #48	; 0x30
    b4da:	188a      	adds	r2, r1, r2
    b4dc:	3501      	adds	r5, #1
    b4de:	9216      	str	r2, [sp, #88]	; 0x58
    b4e0:	1c2a      	adds	r2, r5, #0
    b4e2:	3a01      	subs	r2, #1
    b4e4:	7812      	ldrb	r2, [r2, #0]
    b4e6:	9514      	str	r5, [sp, #80]	; 0x50
    b4e8:	920f      	str	r2, [sp, #60]	; 0x3c
    b4ea:	3a30      	subs	r2, #48	; 0x30
    b4ec:	2a09      	cmp	r2, #9
    b4ee:	d9ee      	bls.n	b4ce <_vfprintf_r+0x26e>
    b4f0:	e742      	b.n	b378 <_vfprintf_r+0x118>
    b4f2:	2208      	movs	r2, #8
    b4f4:	e7ba      	b.n	b46c <_vfprintf_r+0x20c>
    b4f6:	2240      	movs	r2, #64	; 0x40
    b4f8:	e7b8      	b.n	b46c <_vfprintf_r+0x20c>
    b4fa:	9d14      	ldr	r5, [sp, #80]	; 0x50
    b4fc:	782a      	ldrb	r2, [r5, #0]
    b4fe:	2a6c      	cmp	r2, #108	; 0x6c
    b500:	d102      	bne.n	b508 <_vfprintf_r+0x2a8>
    b502:	3501      	adds	r5, #1
    b504:	9514      	str	r5, [sp, #80]	; 0x50
    b506:	e001      	b.n	b50c <_vfprintf_r+0x2ac>
    b508:	2210      	movs	r2, #16
    b50a:	e7af      	b.n	b46c <_vfprintf_r+0x20c>
    b50c:	2220      	movs	r2, #32
    b50e:	e7ad      	b.n	b46c <_vfprintf_r+0x20c>
    b510:	6838      	ldr	r0, [r7, #0]
    b512:	466a      	mov	r2, sp
    b514:	ab2c      	add	r3, sp, #176	; 0xb0
    b516:	2500      	movs	r5, #0
    b518:	3287      	adds	r2, #135	; 0x87
    b51a:	2101      	movs	r1, #1
    b51c:	7018      	strb	r0, [r3, #0]
    b51e:	7015      	strb	r5, [r2, #0]
    b520:	3704      	adds	r7, #4
    b522:	910c      	str	r1, [sp, #48]	; 0x30
    b524:	e2cc      	b.n	bac0 <_vfprintf_r+0x860>
    b526:	466a      	mov	r2, sp
    b528:	3287      	adds	r2, #135	; 0x87
    b52a:	7013      	strb	r3, [r2, #0]
    b52c:	2310      	movs	r3, #16
    b52e:	431e      	orrs	r6, r3
    b530:	06b2      	lsls	r2, r6, #26
    b532:	d50d      	bpl.n	b550 <_vfprintf_r+0x2f0>
    b534:	1dfb      	adds	r3, r7, #7
    b536:	2207      	movs	r2, #7
    b538:	4393      	bics	r3, r2
    b53a:	1c1f      	adds	r7, r3, #0
    b53c:	6818      	ldr	r0, [r3, #0]
    b53e:	6859      	ldr	r1, [r3, #4]
    b540:	3708      	adds	r7, #8
    b542:	900a      	str	r0, [sp, #40]	; 0x28
    b544:	910b      	str	r1, [sp, #44]	; 0x2c
    b546:	e00e      	b.n	b566 <_vfprintf_r+0x306>
    b548:	ffffdfff 	.word	0xffffdfff
    b54c:	00010ab4 	.word	0x00010ab4
    b550:	1d3b      	adds	r3, r7, #4
    b552:	683a      	ldr	r2, [r7, #0]
    b554:	06f1      	lsls	r1, r6, #27
    b556:	d402      	bmi.n	b55e <_vfprintf_r+0x2fe>
    b558:	0675      	lsls	r5, r6, #25
    b55a:	d500      	bpl.n	b55e <_vfprintf_r+0x2fe>
    b55c:	b212      	sxth	r2, r2
    b55e:	920a      	str	r2, [sp, #40]	; 0x28
    b560:	17d2      	asrs	r2, r2, #31
    b562:	920b      	str	r2, [sp, #44]	; 0x2c
    b564:	1c1f      	adds	r7, r3, #0
    b566:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b568:	2800      	cmp	r0, #0
    b56a:	db00      	blt.n	b56e <_vfprintf_r+0x30e>
    b56c:	e225      	b.n	b9ba <_vfprintf_r+0x75a>
    b56e:	980a      	ldr	r0, [sp, #40]	; 0x28
    b570:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b572:	2300      	movs	r3, #0
    b574:	4242      	negs	r2, r0
    b576:	418b      	sbcs	r3, r1
    b578:	920a      	str	r2, [sp, #40]	; 0x28
    b57a:	930b      	str	r3, [sp, #44]	; 0x2c
    b57c:	466b      	mov	r3, sp
    b57e:	222d      	movs	r2, #45	; 0x2d
    b580:	3387      	adds	r3, #135	; 0x87
    b582:	701a      	strb	r2, [r3, #0]
    b584:	e219      	b.n	b9ba <_vfprintf_r+0x75a>
    b586:	466a      	mov	r2, sp
    b588:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    b58a:	3287      	adds	r2, #135	; 0x87
    b58c:	7013      	strb	r3, [r2, #0]
    b58e:	1dfb      	adds	r3, r7, #7
    b590:	2207      	movs	r2, #7
    b592:	4393      	bics	r3, r2
    b594:	9615      	str	r6, [sp, #84]	; 0x54
    b596:	9517      	str	r5, [sp, #92]	; 0x5c
    b598:	681d      	ldr	r5, [r3, #0]
    b59a:	1c1f      	adds	r7, r3, #0
    b59c:	9518      	str	r5, [sp, #96]	; 0x60
    b59e:	685b      	ldr	r3, [r3, #4]
    b5a0:	9818      	ldr	r0, [sp, #96]	; 0x60
    b5a2:	931a      	str	r3, [sp, #104]	; 0x68
    b5a4:	991a      	ldr	r1, [sp, #104]	; 0x68
    b5a6:	3708      	adds	r7, #8
    b5a8:	f003 fa26 	bl	e9f8 <__fpclassifyd>
    b5ac:	2801      	cmp	r0, #1
    b5ae:	d112      	bne.n	b5d6 <_vfprintf_r+0x376>
    b5b0:	9818      	ldr	r0, [sp, #96]	; 0x60
    b5b2:	991a      	ldr	r1, [sp, #104]	; 0x68
    b5b4:	4bbf      	ldr	r3, [pc, #764]	; (b8b4 <_vfprintf_r+0x654>)
    b5b6:	4abe      	ldr	r2, [pc, #760]	; (b8b0 <_vfprintf_r+0x650>)
    b5b8:	f7ff f810 	bl	a5dc <__aeabi_dcmplt>
    b5bc:	2800      	cmp	r0, #0
    b5be:	d003      	beq.n	b5c8 <_vfprintf_r+0x368>
    b5c0:	466b      	mov	r3, sp
    b5c2:	222d      	movs	r2, #45	; 0x2d
    b5c4:	3387      	adds	r3, #135	; 0x87
    b5c6:	701a      	strb	r2, [r3, #0]
    b5c8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    b5ca:	2d47      	cmp	r5, #71	; 0x47
    b5cc:	dc01      	bgt.n	b5d2 <_vfprintf_r+0x372>
    b5ce:	4dba      	ldr	r5, [pc, #744]	; (b8b8 <_vfprintf_r+0x658>)
    b5d0:	e00d      	b.n	b5ee <_vfprintf_r+0x38e>
    b5d2:	4dba      	ldr	r5, [pc, #744]	; (b8bc <_vfprintf_r+0x65c>)
    b5d4:	e00b      	b.n	b5ee <_vfprintf_r+0x38e>
    b5d6:	9818      	ldr	r0, [sp, #96]	; 0x60
    b5d8:	991a      	ldr	r1, [sp, #104]	; 0x68
    b5da:	f003 fa0d 	bl	e9f8 <__fpclassifyd>
    b5de:	2800      	cmp	r0, #0
    b5e0:	d10a      	bne.n	b5f8 <_vfprintf_r+0x398>
    b5e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    b5e4:	2d47      	cmp	r5, #71	; 0x47
    b5e6:	dc01      	bgt.n	b5ec <_vfprintf_r+0x38c>
    b5e8:	4db5      	ldr	r5, [pc, #724]	; (b8c0 <_vfprintf_r+0x660>)
    b5ea:	e000      	b.n	b5ee <_vfprintf_r+0x38e>
    b5ec:	4db5      	ldr	r5, [pc, #724]	; (b8c4 <_vfprintf_r+0x664>)
    b5ee:	2380      	movs	r3, #128	; 0x80
    b5f0:	9510      	str	r5, [sp, #64]	; 0x40
    b5f2:	439e      	bics	r6, r3
    b5f4:	2503      	movs	r5, #3
    b5f6:	e183      	b.n	b900 <_vfprintf_r+0x6a0>
    b5f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b5fa:	3501      	adds	r5, #1
    b5fc:	d009      	beq.n	b612 <_vfprintf_r+0x3b2>
    b5fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    b600:	2320      	movs	r3, #32
    b602:	439d      	bics	r5, r3
    b604:	2d47      	cmp	r5, #71	; 0x47
    b606:	d106      	bne.n	b616 <_vfprintf_r+0x3b6>
    b608:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b60a:	2d00      	cmp	r5, #0
    b60c:	d103      	bne.n	b616 <_vfprintf_r+0x3b6>
    b60e:	2501      	movs	r5, #1
    b610:	e000      	b.n	b614 <_vfprintf_r+0x3b4>
    b612:	2506      	movs	r5, #6
    b614:	950c      	str	r5, [sp, #48]	; 0x30
    b616:	2380      	movs	r3, #128	; 0x80
    b618:	005b      	lsls	r3, r3, #1
    b61a:	431e      	orrs	r6, r3
    b61c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b61e:	2b00      	cmp	r3, #0
    b620:	da06      	bge.n	b630 <_vfprintf_r+0x3d0>
    b622:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    b624:	2080      	movs	r0, #128	; 0x80
    b626:	0600      	lsls	r0, r0, #24
    b628:	1828      	adds	r0, r5, r0
    b62a:	9011      	str	r0, [sp, #68]	; 0x44
    b62c:	252d      	movs	r5, #45	; 0x2d
    b62e:	e002      	b.n	b636 <_vfprintf_r+0x3d6>
    b630:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    b632:	9511      	str	r5, [sp, #68]	; 0x44
    b634:	2500      	movs	r5, #0
    b636:	951d      	str	r5, [sp, #116]	; 0x74
    b638:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    b63a:	2320      	movs	r3, #32
    b63c:	439d      	bics	r5, r3
    b63e:	9513      	str	r5, [sp, #76]	; 0x4c
    b640:	2d46      	cmp	r5, #70	; 0x46
    b642:	d004      	beq.n	b64e <_vfprintf_r+0x3ee>
    b644:	2d45      	cmp	r5, #69	; 0x45
    b646:	d105      	bne.n	b654 <_vfprintf_r+0x3f4>
    b648:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b64a:	3501      	adds	r5, #1
    b64c:	e003      	b.n	b656 <_vfprintf_r+0x3f6>
    b64e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b650:	2303      	movs	r3, #3
    b652:	e001      	b.n	b658 <_vfprintf_r+0x3f8>
    b654:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b656:	2302      	movs	r3, #2
    b658:	9300      	str	r3, [sp, #0]
    b65a:	ab23      	add	r3, sp, #140	; 0x8c
    b65c:	9302      	str	r3, [sp, #8]
    b65e:	ab24      	add	r3, sp, #144	; 0x90
    b660:	9303      	str	r3, [sp, #12]
    b662:	ab27      	add	r3, sp, #156	; 0x9c
    b664:	9304      	str	r3, [sp, #16]
    b666:	9501      	str	r5, [sp, #4]
    b668:	980e      	ldr	r0, [sp, #56]	; 0x38
    b66a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    b66c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b66e:	f000 ff0f 	bl	c490 <_dtoa_r>
    b672:	9010      	str	r0, [sp, #64]	; 0x40
    b674:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b676:	2847      	cmp	r0, #71	; 0x47
    b678:	d10b      	bne.n	b692 <_vfprintf_r+0x432>
    b67a:	9915      	ldr	r1, [sp, #84]	; 0x54
    b67c:	07c9      	lsls	r1, r1, #31
    b67e:	d408      	bmi.n	b692 <_vfprintf_r+0x432>
    b680:	9d27      	ldr	r5, [sp, #156]	; 0x9c
    b682:	9810      	ldr	r0, [sp, #64]	; 0x40
    b684:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    b686:	1a2d      	subs	r5, r5, r0
    b688:	9512      	str	r5, [sp, #72]	; 0x48
    b68a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    b68c:	2d47      	cmp	r5, #71	; 0x47
    b68e:	d135      	bne.n	b6fc <_vfprintf_r+0x49c>
    b690:	e02b      	b.n	b6ea <_vfprintf_r+0x48a>
    b692:	9810      	ldr	r0, [sp, #64]	; 0x40
    b694:	9913      	ldr	r1, [sp, #76]	; 0x4c
    b696:	1940      	adds	r0, r0, r5
    b698:	9012      	str	r0, [sp, #72]	; 0x48
    b69a:	2946      	cmp	r1, #70	; 0x46
    b69c:	d112      	bne.n	b6c4 <_vfprintf_r+0x464>
    b69e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b6a0:	7813      	ldrb	r3, [r2, #0]
    b6a2:	2b30      	cmp	r3, #48	; 0x30
    b6a4:	d10a      	bne.n	b6bc <_vfprintf_r+0x45c>
    b6a6:	9818      	ldr	r0, [sp, #96]	; 0x60
    b6a8:	9911      	ldr	r1, [sp, #68]	; 0x44
    b6aa:	4b82      	ldr	r3, [pc, #520]	; (b8b4 <_vfprintf_r+0x654>)
    b6ac:	4a80      	ldr	r2, [pc, #512]	; (b8b0 <_vfprintf_r+0x650>)
    b6ae:	f7fe ff8f 	bl	a5d0 <__aeabi_dcmpeq>
    b6b2:	2800      	cmp	r0, #0
    b6b4:	d102      	bne.n	b6bc <_vfprintf_r+0x45c>
    b6b6:	2301      	movs	r3, #1
    b6b8:	1b5d      	subs	r5, r3, r5
    b6ba:	9523      	str	r5, [sp, #140]	; 0x8c
    b6bc:	9d12      	ldr	r5, [sp, #72]	; 0x48
    b6be:	9823      	ldr	r0, [sp, #140]	; 0x8c
    b6c0:	182d      	adds	r5, r5, r0
    b6c2:	9512      	str	r5, [sp, #72]	; 0x48
    b6c4:	9818      	ldr	r0, [sp, #96]	; 0x60
    b6c6:	9911      	ldr	r1, [sp, #68]	; 0x44
    b6c8:	4b7a      	ldr	r3, [pc, #488]	; (b8b4 <_vfprintf_r+0x654>)
    b6ca:	4a79      	ldr	r2, [pc, #484]	; (b8b0 <_vfprintf_r+0x650>)
    b6cc:	f7fe ff80 	bl	a5d0 <__aeabi_dcmpeq>
    b6d0:	2800      	cmp	r0, #0
    b6d2:	d001      	beq.n	b6d8 <_vfprintf_r+0x478>
    b6d4:	9d12      	ldr	r5, [sp, #72]	; 0x48
    b6d6:	9527      	str	r5, [sp, #156]	; 0x9c
    b6d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    b6da:	9d12      	ldr	r5, [sp, #72]	; 0x48
    b6dc:	42ab      	cmp	r3, r5
    b6de:	d2cf      	bcs.n	b680 <_vfprintf_r+0x420>
    b6e0:	1c5a      	adds	r2, r3, #1
    b6e2:	9227      	str	r2, [sp, #156]	; 0x9c
    b6e4:	2230      	movs	r2, #48	; 0x30
    b6e6:	701a      	strb	r2, [r3, #0]
    b6e8:	e7f6      	b.n	b6d8 <_vfprintf_r+0x478>
    b6ea:	1cd0      	adds	r0, r2, #3
    b6ec:	db02      	blt.n	b6f4 <_vfprintf_r+0x494>
    b6ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b6f0:	42aa      	cmp	r2, r5
    b6f2:	dd70      	ble.n	b7d6 <_vfprintf_r+0x576>
    b6f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    b6f6:	3d02      	subs	r5, #2
    b6f8:	950f      	str	r5, [sp, #60]	; 0x3c
    b6fa:	e002      	b.n	b702 <_vfprintf_r+0x4a2>
    b6fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    b6fe:	2d65      	cmp	r5, #101	; 0x65
    b700:	dc50      	bgt.n	b7a4 <_vfprintf_r+0x544>
    b702:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b704:	1e55      	subs	r5, r2, #1
    b706:	ab25      	add	r3, sp, #148	; 0x94
    b708:	7018      	strb	r0, [r3, #0]
    b70a:	9523      	str	r5, [sp, #140]	; 0x8c
    b70c:	3301      	adds	r3, #1
    b70e:	222b      	movs	r2, #43	; 0x2b
    b710:	2d00      	cmp	r5, #0
    b712:	da01      	bge.n	b718 <_vfprintf_r+0x4b8>
    b714:	426d      	negs	r5, r5
    b716:	222d      	movs	r2, #45	; 0x2d
    b718:	701a      	strb	r2, [r3, #0]
    b71a:	2d09      	cmp	r5, #9
    b71c:	dd27      	ble.n	b76e <_vfprintf_r+0x50e>
    b71e:	4669      	mov	r1, sp
    b720:	31a2      	adds	r1, #162	; 0xa2
    b722:	910c      	str	r1, [sp, #48]	; 0x30
    b724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b726:	1c28      	adds	r0, r5, #0
    b728:	210a      	movs	r1, #10
    b72a:	9213      	str	r2, [sp, #76]	; 0x4c
    b72c:	f004 f93e 	bl	f9ac <__aeabi_idivmod>
    b730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b732:	3130      	adds	r1, #48	; 0x30
    b734:	7019      	strb	r1, [r3, #0]
    b736:	1c28      	adds	r0, r5, #0
    b738:	210a      	movs	r1, #10
    b73a:	f004 f8e1 	bl	f900 <__aeabi_idiv>
    b73e:	1c05      	adds	r5, r0, #0
    b740:	980c      	ldr	r0, [sp, #48]	; 0x30
    b742:	3801      	subs	r0, #1
    b744:	900c      	str	r0, [sp, #48]	; 0x30
    b746:	2d09      	cmp	r5, #9
    b748:	dcec      	bgt.n	b724 <_vfprintf_r+0x4c4>
    b74a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b74c:	3530      	adds	r5, #48	; 0x30
    b74e:	3a01      	subs	r2, #1
    b750:	466b      	mov	r3, sp
    b752:	7015      	strb	r5, [r2, #0]
    b754:	3397      	adds	r3, #151	; 0x97
    b756:	1c10      	adds	r0, r2, #0
    b758:	4669      	mov	r1, sp
    b75a:	31a3      	adds	r1, #163	; 0xa3
    b75c:	1e5a      	subs	r2, r3, #1
    b75e:	3301      	adds	r3, #1
    b760:	4288      	cmp	r0, r1
    b762:	d20b      	bcs.n	b77c <_vfprintf_r+0x51c>
    b764:	7801      	ldrb	r1, [r0, #0]
    b766:	1e9a      	subs	r2, r3, #2
    b768:	7011      	strb	r1, [r2, #0]
    b76a:	3001      	adds	r0, #1
    b76c:	e7f4      	b.n	b758 <_vfprintf_r+0x4f8>
    b76e:	2230      	movs	r2, #48	; 0x30
    b770:	466b      	mov	r3, sp
    b772:	3396      	adds	r3, #150	; 0x96
    b774:	18ad      	adds	r5, r5, r2
    b776:	701a      	strb	r2, [r3, #0]
    b778:	705d      	strb	r5, [r3, #1]
    b77a:	aa26      	add	r2, sp, #152	; 0x98
    b77c:	ab25      	add	r3, sp, #148	; 0x94
    b77e:	9d12      	ldr	r5, [sp, #72]	; 0x48
    b780:	1ad3      	subs	r3, r2, r3
    b782:	195d      	adds	r5, r3, r5
    b784:	950c      	str	r5, [sp, #48]	; 0x30
    b786:	9d12      	ldr	r5, [sp, #72]	; 0x48
    b788:	931e      	str	r3, [sp, #120]	; 0x78
    b78a:	2d01      	cmp	r5, #1
    b78c:	dc04      	bgt.n	b798 <_vfprintf_r+0x538>
    b78e:	2500      	movs	r5, #0
    b790:	9513      	str	r5, [sp, #76]	; 0x4c
    b792:	9d15      	ldr	r5, [sp, #84]	; 0x54
    b794:	07ed      	lsls	r5, r5, #31
    b796:	d536      	bpl.n	b806 <_vfprintf_r+0x5a6>
    b798:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b79a:	3501      	adds	r5, #1
    b79c:	950c      	str	r5, [sp, #48]	; 0x30
    b79e:	2500      	movs	r5, #0
    b7a0:	9513      	str	r5, [sp, #76]	; 0x4c
    b7a2:	e030      	b.n	b806 <_vfprintf_r+0x5a6>
    b7a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    b7a6:	2d66      	cmp	r5, #102	; 0x66
    b7a8:	d115      	bne.n	b7d6 <_vfprintf_r+0x576>
    b7aa:	1c13      	adds	r3, r2, #0
    b7ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b7ae:	2a00      	cmp	r2, #0
    b7b0:	dd08      	ble.n	b7c4 <_vfprintf_r+0x564>
    b7b2:	2d00      	cmp	r5, #0
    b7b4:	d102      	bne.n	b7bc <_vfprintf_r+0x55c>
    b7b6:	9d15      	ldr	r5, [sp, #84]	; 0x54
    b7b8:	07ed      	lsls	r5, r5, #31
    b7ba:	d520      	bpl.n	b7fe <_vfprintf_r+0x59e>
    b7bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b7be:	3301      	adds	r3, #1
    b7c0:	18d3      	adds	r3, r2, r3
    b7c2:	e01c      	b.n	b7fe <_vfprintf_r+0x59e>
    b7c4:	2d00      	cmp	r5, #0
    b7c6:	d103      	bne.n	b7d0 <_vfprintf_r+0x570>
    b7c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
    b7ca:	2301      	movs	r3, #1
    b7cc:	421d      	tst	r5, r3
    b7ce:	d016      	beq.n	b7fe <_vfprintf_r+0x59e>
    b7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b7d2:	3302      	adds	r3, #2
    b7d4:	e013      	b.n	b7fe <_vfprintf_r+0x59e>
    b7d6:	9d12      	ldr	r5, [sp, #72]	; 0x48
    b7d8:	1e13      	subs	r3, r2, #0
    b7da:	42ab      	cmp	r3, r5
    b7dc:	db06      	blt.n	b7ec <_vfprintf_r+0x58c>
    b7de:	2567      	movs	r5, #103	; 0x67
    b7e0:	9517      	str	r5, [sp, #92]	; 0x5c
    b7e2:	9d15      	ldr	r5, [sp, #84]	; 0x54
    b7e4:	07ed      	lsls	r5, r5, #31
    b7e6:	d50a      	bpl.n	b7fe <_vfprintf_r+0x59e>
    b7e8:	1c53      	adds	r3, r2, #1
    b7ea:	e008      	b.n	b7fe <_vfprintf_r+0x59e>
    b7ec:	2301      	movs	r3, #1
    b7ee:	2a00      	cmp	r2, #0
    b7f0:	dc01      	bgt.n	b7f6 <_vfprintf_r+0x596>
    b7f2:	2302      	movs	r3, #2
    b7f4:	1a9b      	subs	r3, r3, r2
    b7f6:	9d12      	ldr	r5, [sp, #72]	; 0x48
    b7f8:	18eb      	adds	r3, r5, r3
    b7fa:	2567      	movs	r5, #103	; 0x67
    b7fc:	9517      	str	r5, [sp, #92]	; 0x5c
    b7fe:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    b800:	9213      	str	r2, [sp, #76]	; 0x4c
    b802:	950f      	str	r5, [sp, #60]	; 0x3c
    b804:	930c      	str	r3, [sp, #48]	; 0x30
    b806:	981d      	ldr	r0, [sp, #116]	; 0x74
    b808:	2500      	movs	r5, #0
    b80a:	42a8      	cmp	r0, r5
    b80c:	d100      	bne.n	b810 <_vfprintf_r+0x5b0>
    b80e:	e15c      	b.n	baca <_vfprintf_r+0x86a>
    b810:	466b      	mov	r3, sp
    b812:	222d      	movs	r2, #45	; 0x2d
    b814:	3387      	adds	r3, #135	; 0x87
    b816:	701a      	strb	r2, [r3, #0]
    b818:	e157      	b.n	baca <_vfprintf_r+0x86a>
    b81a:	466a      	mov	r2, sp
    b81c:	3287      	adds	r2, #135	; 0x87
    b81e:	7013      	strb	r3, [r2, #0]
    b820:	1d3b      	adds	r3, r7, #4
    b822:	06b1      	lsls	r1, r6, #26
    b824:	d505      	bpl.n	b832 <_vfprintf_r+0x5d2>
    b826:	9d19      	ldr	r5, [sp, #100]	; 0x64
    b828:	683a      	ldr	r2, [r7, #0]
    b82a:	17e9      	asrs	r1, r5, #31
    b82c:	6015      	str	r5, [r2, #0]
    b82e:	6051      	str	r1, [r2, #4]
    b830:	e00a      	b.n	b848 <_vfprintf_r+0x5e8>
    b832:	06f0      	lsls	r0, r6, #27
    b834:	d405      	bmi.n	b842 <_vfprintf_r+0x5e2>
    b836:	0670      	lsls	r0, r6, #25
    b838:	d503      	bpl.n	b842 <_vfprintf_r+0x5e2>
    b83a:	683a      	ldr	r2, [r7, #0]
    b83c:	9d19      	ldr	r5, [sp, #100]	; 0x64
    b83e:	8015      	strh	r5, [r2, #0]
    b840:	e002      	b.n	b848 <_vfprintf_r+0x5e8>
    b842:	683a      	ldr	r2, [r7, #0]
    b844:	9d19      	ldr	r5, [sp, #100]	; 0x64
    b846:	6015      	str	r5, [r2, #0]
    b848:	1c1f      	adds	r7, r3, #0
    b84a:	e55c      	b.n	b306 <_vfprintf_r+0xa6>
    b84c:	2310      	movs	r3, #16
    b84e:	431e      	orrs	r6, r3
    b850:	2320      	movs	r3, #32
    b852:	4033      	ands	r3, r6
    b854:	d00a      	beq.n	b86c <_vfprintf_r+0x60c>
    b856:	1dfb      	adds	r3, r7, #7
    b858:	2207      	movs	r2, #7
    b85a:	4393      	bics	r3, r2
    b85c:	6818      	ldr	r0, [r3, #0]
    b85e:	6859      	ldr	r1, [r3, #4]
    b860:	900a      	str	r0, [sp, #40]	; 0x28
    b862:	910b      	str	r1, [sp, #44]	; 0x2c
    b864:	1c1f      	adds	r7, r3, #0
    b866:	3708      	adds	r7, #8
    b868:	2300      	movs	r3, #0
    b86a:	e0a1      	b.n	b9b0 <_vfprintf_r+0x750>
    b86c:	2110      	movs	r1, #16
    b86e:	4031      	ands	r1, r6
    b870:	1d3a      	adds	r2, r7, #4
    b872:	2900      	cmp	r1, #0
    b874:	d107      	bne.n	b886 <_vfprintf_r+0x626>
    b876:	2340      	movs	r3, #64	; 0x40
    b878:	4033      	ands	r3, r6
    b87a:	d004      	beq.n	b886 <_vfprintf_r+0x626>
    b87c:	883f      	ldrh	r7, [r7, #0]
    b87e:	910b      	str	r1, [sp, #44]	; 0x2c
    b880:	970a      	str	r7, [sp, #40]	; 0x28
    b882:	1c17      	adds	r7, r2, #0
    b884:	e7f0      	b.n	b868 <_vfprintf_r+0x608>
    b886:	683f      	ldr	r7, [r7, #0]
    b888:	930b      	str	r3, [sp, #44]	; 0x2c
    b88a:	970a      	str	r7, [sp, #40]	; 0x28
    b88c:	1c17      	adds	r7, r2, #0
    b88e:	e08f      	b.n	b9b0 <_vfprintf_r+0x750>
    b890:	6839      	ldr	r1, [r7, #0]
    b892:	2200      	movs	r2, #0
    b894:	910a      	str	r1, [sp, #40]	; 0x28
    b896:	920b      	str	r2, [sp, #44]	; 0x2c
    b898:	2130      	movs	r1, #48	; 0x30
    b89a:	aa22      	add	r2, sp, #136	; 0x88
    b89c:	4d0a      	ldr	r5, [pc, #40]	; (b8c8 <_vfprintf_r+0x668>)
    b89e:	2302      	movs	r3, #2
    b8a0:	7011      	strb	r1, [r2, #0]
    b8a2:	2178      	movs	r1, #120	; 0x78
    b8a4:	431e      	orrs	r6, r3
    b8a6:	7051      	strb	r1, [r2, #1]
    b8a8:	3704      	adds	r7, #4
    b8aa:	951f      	str	r5, [sp, #124]	; 0x7c
    b8ac:	910f      	str	r1, [sp, #60]	; 0x3c
    b8ae:	e07f      	b.n	b9b0 <_vfprintf_r+0x750>
	...
    b8b8:	00010aa4 	.word	0x00010aa4
    b8bc:	00010aa8 	.word	0x00010aa8
    b8c0:	00010aac 	.word	0x00010aac
    b8c4:	00010ab0 	.word	0x00010ab0
    b8c8:	00010ac5 	.word	0x00010ac5
    b8cc:	683b      	ldr	r3, [r7, #0]
    b8ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b8d0:	9310      	str	r3, [sp, #64]	; 0x40
    b8d2:	980c      	ldr	r0, [sp, #48]	; 0x30
    b8d4:	466b      	mov	r3, sp
    b8d6:	9513      	str	r5, [sp, #76]	; 0x4c
    b8d8:	3387      	adds	r3, #135	; 0x87
    b8da:	2500      	movs	r5, #0
    b8dc:	3704      	adds	r7, #4
    b8de:	701d      	strb	r5, [r3, #0]
    b8e0:	42a8      	cmp	r0, r5
    b8e2:	db10      	blt.n	b906 <_vfprintf_r+0x6a6>
    b8e4:	9810      	ldr	r0, [sp, #64]	; 0x40
    b8e6:	1c29      	adds	r1, r5, #0
    b8e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b8ea:	f002 facf 	bl	de8c <memchr>
    b8ee:	42a8      	cmp	r0, r5
    b8f0:	d100      	bne.n	b8f4 <_vfprintf_r+0x694>
    b8f2:	e0e8      	b.n	bac6 <_vfprintf_r+0x866>
    b8f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
    b8f6:	1b40      	subs	r0, r0, r5
    b8f8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    b8fa:	900c      	str	r0, [sp, #48]	; 0x30
    b8fc:	42a8      	cmp	r0, r5
    b8fe:	dd00      	ble.n	b902 <_vfprintf_r+0x6a2>
    b900:	950c      	str	r5, [sp, #48]	; 0x30
    b902:	2500      	movs	r5, #0
    b904:	e0e0      	b.n	bac8 <_vfprintf_r+0x868>
    b906:	9810      	ldr	r0, [sp, #64]	; 0x40
    b908:	f7ff fca2 	bl	b250 <strlen>
    b90c:	900c      	str	r0, [sp, #48]	; 0x30
    b90e:	e0db      	b.n	bac8 <_vfprintf_r+0x868>
    b910:	2310      	movs	r3, #16
    b912:	431e      	orrs	r6, r3
    b914:	2220      	movs	r2, #32
    b916:	4032      	ands	r2, r6
    b918:	d009      	beq.n	b92e <_vfprintf_r+0x6ce>
    b91a:	1dfb      	adds	r3, r7, #7
    b91c:	2207      	movs	r2, #7
    b91e:	4393      	bics	r3, r2
    b920:	1c1f      	adds	r7, r3, #0
    b922:	6818      	ldr	r0, [r3, #0]
    b924:	6859      	ldr	r1, [r3, #4]
    b926:	3708      	adds	r7, #8
    b928:	900a      	str	r0, [sp, #40]	; 0x28
    b92a:	910b      	str	r1, [sp, #44]	; 0x2c
    b92c:	e00f      	b.n	b94e <_vfprintf_r+0x6ee>
    b92e:	2110      	movs	r1, #16
    b930:	4031      	ands	r1, r6
    b932:	1d3b      	adds	r3, r7, #4
    b934:	2900      	cmp	r1, #0
    b936:	d106      	bne.n	b946 <_vfprintf_r+0x6e6>
    b938:	2240      	movs	r2, #64	; 0x40
    b93a:	4032      	ands	r2, r6
    b93c:	d003      	beq.n	b946 <_vfprintf_r+0x6e6>
    b93e:	883f      	ldrh	r7, [r7, #0]
    b940:	910b      	str	r1, [sp, #44]	; 0x2c
    b942:	970a      	str	r7, [sp, #40]	; 0x28
    b944:	e002      	b.n	b94c <_vfprintf_r+0x6ec>
    b946:	683f      	ldr	r7, [r7, #0]
    b948:	920b      	str	r2, [sp, #44]	; 0x2c
    b94a:	970a      	str	r7, [sp, #40]	; 0x28
    b94c:	1c1f      	adds	r7, r3, #0
    b94e:	2301      	movs	r3, #1
    b950:	e02e      	b.n	b9b0 <_vfprintf_r+0x750>
    b952:	466a      	mov	r2, sp
    b954:	3287      	adds	r2, #135	; 0x87
    b956:	4db8      	ldr	r5, [pc, #736]	; (bc38 <_vfprintf_r+0x9d8>)
    b958:	7013      	strb	r3, [r2, #0]
    b95a:	2220      	movs	r2, #32
    b95c:	951f      	str	r5, [sp, #124]	; 0x7c
    b95e:	4032      	ands	r2, r6
    b960:	d009      	beq.n	b976 <_vfprintf_r+0x716>
    b962:	1dfb      	adds	r3, r7, #7
    b964:	2207      	movs	r2, #7
    b966:	4393      	bics	r3, r2
    b968:	1c1f      	adds	r7, r3, #0
    b96a:	6818      	ldr	r0, [r3, #0]
    b96c:	6859      	ldr	r1, [r3, #4]
    b96e:	3708      	adds	r7, #8
    b970:	900a      	str	r0, [sp, #40]	; 0x28
    b972:	910b      	str	r1, [sp, #44]	; 0x2c
    b974:	e00f      	b.n	b996 <_vfprintf_r+0x736>
    b976:	2110      	movs	r1, #16
    b978:	4031      	ands	r1, r6
    b97a:	1d3b      	adds	r3, r7, #4
    b97c:	2900      	cmp	r1, #0
    b97e:	d106      	bne.n	b98e <_vfprintf_r+0x72e>
    b980:	2240      	movs	r2, #64	; 0x40
    b982:	4032      	ands	r2, r6
    b984:	d003      	beq.n	b98e <_vfprintf_r+0x72e>
    b986:	883f      	ldrh	r7, [r7, #0]
    b988:	910b      	str	r1, [sp, #44]	; 0x2c
    b98a:	970a      	str	r7, [sp, #40]	; 0x28
    b98c:	e002      	b.n	b994 <_vfprintf_r+0x734>
    b98e:	683f      	ldr	r7, [r7, #0]
    b990:	920b      	str	r2, [sp, #44]	; 0x2c
    b992:	970a      	str	r7, [sp, #40]	; 0x28
    b994:	1c1f      	adds	r7, r3, #0
    b996:	2302      	movs	r3, #2
    b998:	07f1      	lsls	r1, r6, #31
    b99a:	d509      	bpl.n	b9b0 <_vfprintf_r+0x750>
    b99c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b99e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b9a0:	432a      	orrs	r2, r5
    b9a2:	d005      	beq.n	b9b0 <_vfprintf_r+0x750>
    b9a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    b9a6:	aa22      	add	r2, sp, #136	; 0x88
    b9a8:	2130      	movs	r1, #48	; 0x30
    b9aa:	7011      	strb	r1, [r2, #0]
    b9ac:	7055      	strb	r5, [r2, #1]
    b9ae:	431e      	orrs	r6, r3
    b9b0:	466a      	mov	r2, sp
    b9b2:	2100      	movs	r1, #0
    b9b4:	3287      	adds	r2, #135	; 0x87
    b9b6:	7011      	strb	r1, [r2, #0]
    b9b8:	e000      	b.n	b9bc <_vfprintf_r+0x75c>
    b9ba:	2301      	movs	r3, #1
    b9bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b9be:	2d00      	cmp	r5, #0
    b9c0:	db01      	blt.n	b9c6 <_vfprintf_r+0x766>
    b9c2:	2280      	movs	r2, #128	; 0x80
    b9c4:	4396      	bics	r6, r2
    b9c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b9c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b9ca:	4302      	orrs	r2, r0
    b9cc:	d102      	bne.n	b9d4 <_vfprintf_r+0x774>
    b9ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b9d0:	2d00      	cmp	r5, #0
    b9d2:	d056      	beq.n	ba82 <_vfprintf_r+0x822>
    b9d4:	466d      	mov	r5, sp
    b9d6:	35d7      	adds	r5, #215	; 0xd7
    b9d8:	2b01      	cmp	r3, #1
    b9da:	d01e      	beq.n	ba1a <_vfprintf_r+0x7ba>
    b9dc:	2b02      	cmp	r3, #2
    b9de:	d03a      	beq.n	ba56 <_vfprintf_r+0x7f6>
    b9e0:	980a      	ldr	r0, [sp, #40]	; 0x28
    b9e2:	2307      	movs	r3, #7
    b9e4:	4003      	ands	r3, r0
    b9e6:	3330      	adds	r3, #48	; 0x30
    b9e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b9ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b9ec:	9510      	str	r5, [sp, #64]	; 0x40
    b9ee:	702b      	strb	r3, [r5, #0]
    b9f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b9f2:	0748      	lsls	r0, r1, #29
    b9f4:	08d1      	lsrs	r1, r2, #3
    b9f6:	08ea      	lsrs	r2, r5, #3
    b9f8:	4308      	orrs	r0, r1
    b9fa:	920b      	str	r2, [sp, #44]	; 0x2c
    b9fc:	900a      	str	r0, [sp, #40]	; 0x28
    b9fe:	1c02      	adds	r2, r0, #0
    ba00:	9d10      	ldr	r5, [sp, #64]	; 0x40
    ba02:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ba04:	3d01      	subs	r5, #1
    ba06:	4302      	orrs	r2, r0
    ba08:	d1ea      	bne.n	b9e0 <_vfprintf_r+0x780>
    ba0a:	07f1      	lsls	r1, r6, #31
    ba0c:	d543      	bpl.n	ba96 <_vfprintf_r+0x836>
    ba0e:	2b30      	cmp	r3, #48	; 0x30
    ba10:	d041      	beq.n	ba96 <_vfprintf_r+0x836>
    ba12:	2230      	movs	r2, #48	; 0x30
    ba14:	9510      	str	r5, [sp, #64]	; 0x40
    ba16:	702a      	strb	r2, [r5, #0]
    ba18:	e03d      	b.n	ba96 <_vfprintf_r+0x836>
    ba1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ba1c:	2a00      	cmp	r2, #0
    ba1e:	d104      	bne.n	ba2a <_vfprintf_r+0x7ca>
    ba20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ba22:	2b09      	cmp	r3, #9
    ba24:	d801      	bhi.n	ba2a <_vfprintf_r+0x7ca>
    ba26:	3330      	adds	r3, #48	; 0x30
    ba28:	e033      	b.n	ba92 <_vfprintf_r+0x832>
    ba2a:	980a      	ldr	r0, [sp, #40]	; 0x28
    ba2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ba2e:	220a      	movs	r2, #10
    ba30:	2300      	movs	r3, #0
    ba32:	9510      	str	r5, [sp, #64]	; 0x40
    ba34:	f7fd feea 	bl	980c <__aeabi_uldivmod>
    ba38:	980a      	ldr	r0, [sp, #40]	; 0x28
    ba3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ba3c:	3230      	adds	r2, #48	; 0x30
    ba3e:	702a      	strb	r2, [r5, #0]
    ba40:	220a      	movs	r2, #10
    ba42:	2300      	movs	r3, #0
    ba44:	f7fd fee2 	bl	980c <__aeabi_uldivmod>
    ba48:	1c03      	adds	r3, r0, #0
    ba4a:	900a      	str	r0, [sp, #40]	; 0x28
    ba4c:	910b      	str	r1, [sp, #44]	; 0x2c
    ba4e:	3d01      	subs	r5, #1
    ba50:	430b      	orrs	r3, r1
    ba52:	d1ea      	bne.n	ba2a <_vfprintf_r+0x7ca>
    ba54:	e01f      	b.n	ba96 <_vfprintf_r+0x836>
    ba56:	980a      	ldr	r0, [sp, #40]	; 0x28
    ba58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ba5a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    ba5c:	230f      	movs	r3, #15
    ba5e:	4003      	ands	r3, r0
    ba60:	5ccb      	ldrb	r3, [r1, r3]
    ba62:	0711      	lsls	r1, r2, #28
    ba64:	0902      	lsrs	r2, r0, #4
    ba66:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ba68:	702b      	strb	r3, [r5, #0]
    ba6a:	0903      	lsrs	r3, r0, #4
    ba6c:	4311      	orrs	r1, r2
    ba6e:	930b      	str	r3, [sp, #44]	; 0x2c
    ba70:	910a      	str	r1, [sp, #40]	; 0x28
    ba72:	1c0b      	adds	r3, r1, #0
    ba74:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ba76:	9510      	str	r5, [sp, #64]	; 0x40
    ba78:	430b      	orrs	r3, r1
    ba7a:	3d01      	subs	r5, #1
    ba7c:	2b00      	cmp	r3, #0
    ba7e:	d1ea      	bne.n	ba56 <_vfprintf_r+0x7f6>
    ba80:	e009      	b.n	ba96 <_vfprintf_r+0x836>
    ba82:	ad36      	add	r5, sp, #216	; 0xd8
    ba84:	9510      	str	r5, [sp, #64]	; 0x40
    ba86:	2b00      	cmp	r3, #0
    ba88:	d105      	bne.n	ba96 <_vfprintf_r+0x836>
    ba8a:	07f0      	lsls	r0, r6, #31
    ba8c:	d503      	bpl.n	ba96 <_vfprintf_r+0x836>
    ba8e:	3d01      	subs	r5, #1
    ba90:	2330      	movs	r3, #48	; 0x30
    ba92:	702b      	strb	r3, [r5, #0]
    ba94:	9510      	str	r5, [sp, #64]	; 0x40
    ba96:	9910      	ldr	r1, [sp, #64]	; 0x40
    ba98:	ab36      	add	r3, sp, #216	; 0xd8
    ba9a:	1a5b      	subs	r3, r3, r1
    ba9c:	2200      	movs	r2, #0
    ba9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    baa0:	9213      	str	r2, [sp, #76]	; 0x4c
    baa2:	930c      	str	r3, [sp, #48]	; 0x30
    baa4:	e011      	b.n	baca <_vfprintf_r+0x86a>
    baa6:	466a      	mov	r2, sp
    baa8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    baaa:	3287      	adds	r2, #135	; 0x87
    baac:	7013      	strb	r3, [r2, #0]
    baae:	2d00      	cmp	r5, #0
    bab0:	d100      	bne.n	bab4 <_vfprintf_r+0x854>
    bab2:	e38f      	b.n	c1d4 <_vfprintf_r+0xf74>
    bab4:	ab2c      	add	r3, sp, #176	; 0xb0
    bab6:	701d      	strb	r5, [r3, #0]
    bab8:	2001      	movs	r0, #1
    baba:	2500      	movs	r5, #0
    babc:	7015      	strb	r5, [r2, #0]
    babe:	900c      	str	r0, [sp, #48]	; 0x30
    bac0:	9513      	str	r5, [sp, #76]	; 0x4c
    bac2:	9310      	str	r3, [sp, #64]	; 0x40
    bac4:	e001      	b.n	baca <_vfprintf_r+0x86a>
    bac6:	1c05      	adds	r5, r0, #0
    bac8:	9513      	str	r5, [sp, #76]	; 0x4c
    baca:	990c      	ldr	r1, [sp, #48]	; 0x30
    bacc:	9115      	str	r1, [sp, #84]	; 0x54
    bace:	42a9      	cmp	r1, r5
    bad0:	da00      	bge.n	bad4 <_vfprintf_r+0x874>
    bad2:	9515      	str	r5, [sp, #84]	; 0x54
    bad4:	466b      	mov	r3, sp
    bad6:	3387      	adds	r3, #135	; 0x87
    bad8:	781b      	ldrb	r3, [r3, #0]
    bada:	1e5a      	subs	r2, r3, #1
    badc:	4193      	sbcs	r3, r2
    bade:	9a15      	ldr	r2, [sp, #84]	; 0x54
    bae0:	18d2      	adds	r2, r2, r3
    bae2:	2302      	movs	r3, #2
    bae4:	4033      	ands	r3, r6
    bae6:	9215      	str	r2, [sp, #84]	; 0x54
    bae8:	9317      	str	r3, [sp, #92]	; 0x5c
    baea:	d001      	beq.n	baf0 <_vfprintf_r+0x890>
    baec:	3202      	adds	r2, #2
    baee:	9215      	str	r2, [sp, #84]	; 0x54
    baf0:	2384      	movs	r3, #132	; 0x84
    baf2:	4033      	ands	r3, r6
    baf4:	931d      	str	r3, [sp, #116]	; 0x74
    baf6:	d137      	bne.n	bb68 <_vfprintf_r+0x908>
    baf8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    bafa:	9815      	ldr	r0, [sp, #84]	; 0x54
    bafc:	1a1b      	subs	r3, r3, r0
    bafe:	9311      	str	r3, [sp, #68]	; 0x44
    bb00:	2b00      	cmp	r3, #0
    bb02:	dd31      	ble.n	bb68 <_vfprintf_r+0x908>
    bb04:	4b4d      	ldr	r3, [pc, #308]	; (bc3c <_vfprintf_r+0x9dc>)
    bb06:	9a11      	ldr	r2, [sp, #68]	; 0x44
    bb08:	6023      	str	r3, [r4, #0]
    bb0a:	2a10      	cmp	r2, #16
    bb0c:	dd18      	ble.n	bb40 <_vfprintf_r+0x8e0>
    bb0e:	2310      	movs	r3, #16
    bb10:	6063      	str	r3, [r4, #4]
    bb12:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    bb14:	3310      	adds	r3, #16
    bb16:	932b      	str	r3, [sp, #172]	; 0xac
    bb18:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bb1a:	3301      	adds	r3, #1
    bb1c:	932a      	str	r3, [sp, #168]	; 0xa8
    bb1e:	2b07      	cmp	r3, #7
    bb20:	dc01      	bgt.n	bb26 <_vfprintf_r+0x8c6>
    bb22:	3408      	adds	r4, #8
    bb24:	e008      	b.n	bb38 <_vfprintf_r+0x8d8>
    bb26:	980e      	ldr	r0, [sp, #56]	; 0x38
    bb28:	990d      	ldr	r1, [sp, #52]	; 0x34
    bb2a:	aa29      	add	r2, sp, #164	; 0xa4
    bb2c:	f002 ffee 	bl	eb0c <__sprint_r>
    bb30:	2800      	cmp	r0, #0
    bb32:	d000      	beq.n	bb36 <_vfprintf_r+0x8d6>
    bb34:	e356      	b.n	c1e4 <_vfprintf_r+0xf84>
    bb36:	ac36      	add	r4, sp, #216	; 0xd8
    bb38:	9911      	ldr	r1, [sp, #68]	; 0x44
    bb3a:	3910      	subs	r1, #16
    bb3c:	9111      	str	r1, [sp, #68]	; 0x44
    bb3e:	e7e1      	b.n	bb04 <_vfprintf_r+0x8a4>
    bb40:	982b      	ldr	r0, [sp, #172]	; 0xac
    bb42:	6062      	str	r2, [r4, #4]
    bb44:	1813      	adds	r3, r2, r0
    bb46:	932b      	str	r3, [sp, #172]	; 0xac
    bb48:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bb4a:	3301      	adds	r3, #1
    bb4c:	932a      	str	r3, [sp, #168]	; 0xa8
    bb4e:	2b07      	cmp	r3, #7
    bb50:	dc01      	bgt.n	bb56 <_vfprintf_r+0x8f6>
    bb52:	3408      	adds	r4, #8
    bb54:	e008      	b.n	bb68 <_vfprintf_r+0x908>
    bb56:	980e      	ldr	r0, [sp, #56]	; 0x38
    bb58:	990d      	ldr	r1, [sp, #52]	; 0x34
    bb5a:	aa29      	add	r2, sp, #164	; 0xa4
    bb5c:	f002 ffd6 	bl	eb0c <__sprint_r>
    bb60:	2800      	cmp	r0, #0
    bb62:	d000      	beq.n	bb66 <_vfprintf_r+0x906>
    bb64:	e33e      	b.n	c1e4 <_vfprintf_r+0xf84>
    bb66:	ac36      	add	r4, sp, #216	; 0xd8
    bb68:	466b      	mov	r3, sp
    bb6a:	3387      	adds	r3, #135	; 0x87
    bb6c:	781a      	ldrb	r2, [r3, #0]
    bb6e:	2a00      	cmp	r2, #0
    bb70:	d015      	beq.n	bb9e <_vfprintf_r+0x93e>
    bb72:	6023      	str	r3, [r4, #0]
    bb74:	2301      	movs	r3, #1
    bb76:	6063      	str	r3, [r4, #4]
    bb78:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    bb7a:	3301      	adds	r3, #1
    bb7c:	932b      	str	r3, [sp, #172]	; 0xac
    bb7e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bb80:	3301      	adds	r3, #1
    bb82:	932a      	str	r3, [sp, #168]	; 0xa8
    bb84:	2b07      	cmp	r3, #7
    bb86:	dc01      	bgt.n	bb8c <_vfprintf_r+0x92c>
    bb88:	3408      	adds	r4, #8
    bb8a:	e008      	b.n	bb9e <_vfprintf_r+0x93e>
    bb8c:	980e      	ldr	r0, [sp, #56]	; 0x38
    bb8e:	990d      	ldr	r1, [sp, #52]	; 0x34
    bb90:	aa29      	add	r2, sp, #164	; 0xa4
    bb92:	f002 ffbb 	bl	eb0c <__sprint_r>
    bb96:	2800      	cmp	r0, #0
    bb98:	d000      	beq.n	bb9c <_vfprintf_r+0x93c>
    bb9a:	e323      	b.n	c1e4 <_vfprintf_r+0xf84>
    bb9c:	ac36      	add	r4, sp, #216	; 0xd8
    bb9e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    bba0:	2900      	cmp	r1, #0
    bba2:	d016      	beq.n	bbd2 <_vfprintf_r+0x972>
    bba4:	ab22      	add	r3, sp, #136	; 0x88
    bba6:	6023      	str	r3, [r4, #0]
    bba8:	2302      	movs	r3, #2
    bbaa:	6063      	str	r3, [r4, #4]
    bbac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    bbae:	3302      	adds	r3, #2
    bbb0:	932b      	str	r3, [sp, #172]	; 0xac
    bbb2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bbb4:	3301      	adds	r3, #1
    bbb6:	932a      	str	r3, [sp, #168]	; 0xa8
    bbb8:	2b07      	cmp	r3, #7
    bbba:	dc01      	bgt.n	bbc0 <_vfprintf_r+0x960>
    bbbc:	3408      	adds	r4, #8
    bbbe:	e008      	b.n	bbd2 <_vfprintf_r+0x972>
    bbc0:	980e      	ldr	r0, [sp, #56]	; 0x38
    bbc2:	990d      	ldr	r1, [sp, #52]	; 0x34
    bbc4:	aa29      	add	r2, sp, #164	; 0xa4
    bbc6:	f002 ffa1 	bl	eb0c <__sprint_r>
    bbca:	2800      	cmp	r0, #0
    bbcc:	d000      	beq.n	bbd0 <_vfprintf_r+0x970>
    bbce:	e309      	b.n	c1e4 <_vfprintf_r+0xf84>
    bbd0:	ac36      	add	r4, sp, #216	; 0xd8
    bbd2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    bbd4:	2a80      	cmp	r2, #128	; 0x80
    bbd6:	d13c      	bne.n	bc52 <_vfprintf_r+0x9f2>
    bbd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    bbda:	9815      	ldr	r0, [sp, #84]	; 0x54
    bbdc:	1a1b      	subs	r3, r3, r0
    bbde:	9311      	str	r3, [sp, #68]	; 0x44
    bbe0:	2b00      	cmp	r3, #0
    bbe2:	dd36      	ble.n	bc52 <_vfprintf_r+0x9f2>
    bbe4:	4b15      	ldr	r3, [pc, #84]	; (bc3c <_vfprintf_r+0x9dc>)
    bbe6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    bbe8:	3310      	adds	r3, #16
    bbea:	6023      	str	r3, [r4, #0]
    bbec:	2a10      	cmp	r2, #16
    bbee:	dd18      	ble.n	bc22 <_vfprintf_r+0x9c2>
    bbf0:	2310      	movs	r3, #16
    bbf2:	6063      	str	r3, [r4, #4]
    bbf4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    bbf6:	3310      	adds	r3, #16
    bbf8:	932b      	str	r3, [sp, #172]	; 0xac
    bbfa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bbfc:	3301      	adds	r3, #1
    bbfe:	932a      	str	r3, [sp, #168]	; 0xa8
    bc00:	2b07      	cmp	r3, #7
    bc02:	dc01      	bgt.n	bc08 <_vfprintf_r+0x9a8>
    bc04:	3408      	adds	r4, #8
    bc06:	e008      	b.n	bc1a <_vfprintf_r+0x9ba>
    bc08:	980e      	ldr	r0, [sp, #56]	; 0x38
    bc0a:	990d      	ldr	r1, [sp, #52]	; 0x34
    bc0c:	aa29      	add	r2, sp, #164	; 0xa4
    bc0e:	f002 ff7d 	bl	eb0c <__sprint_r>
    bc12:	2800      	cmp	r0, #0
    bc14:	d000      	beq.n	bc18 <_vfprintf_r+0x9b8>
    bc16:	e2e5      	b.n	c1e4 <_vfprintf_r+0xf84>
    bc18:	ac36      	add	r4, sp, #216	; 0xd8
    bc1a:	9911      	ldr	r1, [sp, #68]	; 0x44
    bc1c:	3910      	subs	r1, #16
    bc1e:	9111      	str	r1, [sp, #68]	; 0x44
    bc20:	e7e0      	b.n	bbe4 <_vfprintf_r+0x984>
    bc22:	982b      	ldr	r0, [sp, #172]	; 0xac
    bc24:	6062      	str	r2, [r4, #4]
    bc26:	1813      	adds	r3, r2, r0
    bc28:	932b      	str	r3, [sp, #172]	; 0xac
    bc2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bc2c:	3301      	adds	r3, #1
    bc2e:	932a      	str	r3, [sp, #168]	; 0xa8
    bc30:	2b07      	cmp	r3, #7
    bc32:	dc05      	bgt.n	bc40 <_vfprintf_r+0x9e0>
    bc34:	3408      	adds	r4, #8
    bc36:	e00c      	b.n	bc52 <_vfprintf_r+0x9f2>
    bc38:	00010ac5 	.word	0x00010ac5
    bc3c:	00010a84 	.word	0x00010a84
    bc40:	980e      	ldr	r0, [sp, #56]	; 0x38
    bc42:	990d      	ldr	r1, [sp, #52]	; 0x34
    bc44:	aa29      	add	r2, sp, #164	; 0xa4
    bc46:	f002 ff61 	bl	eb0c <__sprint_r>
    bc4a:	2800      	cmp	r0, #0
    bc4c:	d000      	beq.n	bc50 <_vfprintf_r+0x9f0>
    bc4e:	e2c9      	b.n	c1e4 <_vfprintf_r+0xf84>
    bc50:	ac36      	add	r4, sp, #216	; 0xd8
    bc52:	990c      	ldr	r1, [sp, #48]	; 0x30
    bc54:	1a6d      	subs	r5, r5, r1
    bc56:	2d00      	cmp	r5, #0
    bc58:	dd2f      	ble.n	bcba <_vfprintf_r+0xa5a>
    bc5a:	4bc3      	ldr	r3, [pc, #780]	; (bf68 <_vfprintf_r+0xd08>)
    bc5c:	3310      	adds	r3, #16
    bc5e:	6023      	str	r3, [r4, #0]
    bc60:	2d10      	cmp	r5, #16
    bc62:	dd16      	ble.n	bc92 <_vfprintf_r+0xa32>
    bc64:	2310      	movs	r3, #16
    bc66:	6063      	str	r3, [r4, #4]
    bc68:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    bc6a:	3310      	adds	r3, #16
    bc6c:	932b      	str	r3, [sp, #172]	; 0xac
    bc6e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bc70:	3301      	adds	r3, #1
    bc72:	932a      	str	r3, [sp, #168]	; 0xa8
    bc74:	2b07      	cmp	r3, #7
    bc76:	dc01      	bgt.n	bc7c <_vfprintf_r+0xa1c>
    bc78:	3408      	adds	r4, #8
    bc7a:	e008      	b.n	bc8e <_vfprintf_r+0xa2e>
    bc7c:	980e      	ldr	r0, [sp, #56]	; 0x38
    bc7e:	990d      	ldr	r1, [sp, #52]	; 0x34
    bc80:	aa29      	add	r2, sp, #164	; 0xa4
    bc82:	f002 ff43 	bl	eb0c <__sprint_r>
    bc86:	2800      	cmp	r0, #0
    bc88:	d000      	beq.n	bc8c <_vfprintf_r+0xa2c>
    bc8a:	e2ab      	b.n	c1e4 <_vfprintf_r+0xf84>
    bc8c:	ac36      	add	r4, sp, #216	; 0xd8
    bc8e:	3d10      	subs	r5, #16
    bc90:	e7e3      	b.n	bc5a <_vfprintf_r+0x9fa>
    bc92:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    bc94:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bc96:	6065      	str	r5, [r4, #4]
    bc98:	3301      	adds	r3, #1
    bc9a:	18ad      	adds	r5, r5, r2
    bc9c:	952b      	str	r5, [sp, #172]	; 0xac
    bc9e:	932a      	str	r3, [sp, #168]	; 0xa8
    bca0:	2b07      	cmp	r3, #7
    bca2:	dc01      	bgt.n	bca8 <_vfprintf_r+0xa48>
    bca4:	3408      	adds	r4, #8
    bca6:	e008      	b.n	bcba <_vfprintf_r+0xa5a>
    bca8:	980e      	ldr	r0, [sp, #56]	; 0x38
    bcaa:	990d      	ldr	r1, [sp, #52]	; 0x34
    bcac:	aa29      	add	r2, sp, #164	; 0xa4
    bcae:	f002 ff2d 	bl	eb0c <__sprint_r>
    bcb2:	2800      	cmp	r0, #0
    bcb4:	d000      	beq.n	bcb8 <_vfprintf_r+0xa58>
    bcb6:	e295      	b.n	c1e4 <_vfprintf_r+0xf84>
    bcb8:	ac36      	add	r4, sp, #216	; 0xd8
    bcba:	05f3      	lsls	r3, r6, #23
    bcbc:	d403      	bmi.n	bcc6 <_vfprintf_r+0xa66>
    bcbe:	9d10      	ldr	r5, [sp, #64]	; 0x40
    bcc0:	6025      	str	r5, [r4, #0]
    bcc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    bcc4:	e0d7      	b.n	be76 <_vfprintf_r+0xc16>
    bcc6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    bcc8:	2d65      	cmp	r5, #101	; 0x65
    bcca:	dc00      	bgt.n	bcce <_vfprintf_r+0xa6e>
    bccc:	e1b5      	b.n	c03a <_vfprintf_r+0xdda>
    bcce:	9818      	ldr	r0, [sp, #96]	; 0x60
    bcd0:	991a      	ldr	r1, [sp, #104]	; 0x68
    bcd2:	4ba4      	ldr	r3, [pc, #656]	; (bf64 <_vfprintf_r+0xd04>)
    bcd4:	4aa2      	ldr	r2, [pc, #648]	; (bf60 <_vfprintf_r+0xd00>)
    bcd6:	f7fe fc7b 	bl	a5d0 <__aeabi_dcmpeq>
    bcda:	2800      	cmp	r0, #0
    bcdc:	d05a      	beq.n	bd94 <_vfprintf_r+0xb34>
    bcde:	4ba3      	ldr	r3, [pc, #652]	; (bf6c <_vfprintf_r+0xd0c>)
    bce0:	6023      	str	r3, [r4, #0]
    bce2:	2301      	movs	r3, #1
    bce4:	6063      	str	r3, [r4, #4]
    bce6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    bce8:	3301      	adds	r3, #1
    bcea:	932b      	str	r3, [sp, #172]	; 0xac
    bcec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bcee:	3301      	adds	r3, #1
    bcf0:	932a      	str	r3, [sp, #168]	; 0xa8
    bcf2:	2b07      	cmp	r3, #7
    bcf4:	dc01      	bgt.n	bcfa <_vfprintf_r+0xa9a>
    bcf6:	3408      	adds	r4, #8
    bcf8:	e008      	b.n	bd0c <_vfprintf_r+0xaac>
    bcfa:	980e      	ldr	r0, [sp, #56]	; 0x38
    bcfc:	990d      	ldr	r1, [sp, #52]	; 0x34
    bcfe:	aa29      	add	r2, sp, #164	; 0xa4
    bd00:	f002 ff04 	bl	eb0c <__sprint_r>
    bd04:	2800      	cmp	r0, #0
    bd06:	d000      	beq.n	bd0a <_vfprintf_r+0xaaa>
    bd08:	e26c      	b.n	c1e4 <_vfprintf_r+0xf84>
    bd0a:	ac36      	add	r4, sp, #216	; 0xd8
    bd0c:	9823      	ldr	r0, [sp, #140]	; 0x8c
    bd0e:	9d12      	ldr	r5, [sp, #72]	; 0x48
    bd10:	42a8      	cmp	r0, r5
    bd12:	db02      	blt.n	bd1a <_vfprintf_r+0xaba>
    bd14:	07f0      	lsls	r0, r6, #31
    bd16:	d400      	bmi.n	bd1a <_vfprintf_r+0xaba>
    bd18:	e212      	b.n	c140 <_vfprintf_r+0xee0>
    bd1a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    bd1c:	982b      	ldr	r0, [sp, #172]	; 0xac
    bd1e:	6025      	str	r5, [r4, #0]
    bd20:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    bd22:	182b      	adds	r3, r5, r0
    bd24:	932b      	str	r3, [sp, #172]	; 0xac
    bd26:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bd28:	6065      	str	r5, [r4, #4]
    bd2a:	3301      	adds	r3, #1
    bd2c:	932a      	str	r3, [sp, #168]	; 0xa8
    bd2e:	2b07      	cmp	r3, #7
    bd30:	dc01      	bgt.n	bd36 <_vfprintf_r+0xad6>
    bd32:	3408      	adds	r4, #8
    bd34:	e008      	b.n	bd48 <_vfprintf_r+0xae8>
    bd36:	980e      	ldr	r0, [sp, #56]	; 0x38
    bd38:	990d      	ldr	r1, [sp, #52]	; 0x34
    bd3a:	aa29      	add	r2, sp, #164	; 0xa4
    bd3c:	f002 fee6 	bl	eb0c <__sprint_r>
    bd40:	2800      	cmp	r0, #0
    bd42:	d000      	beq.n	bd46 <_vfprintf_r+0xae6>
    bd44:	e24e      	b.n	c1e4 <_vfprintf_r+0xf84>
    bd46:	ac36      	add	r4, sp, #216	; 0xd8
    bd48:	9d12      	ldr	r5, [sp, #72]	; 0x48
    bd4a:	3d01      	subs	r5, #1
    bd4c:	2d00      	cmp	r5, #0
    bd4e:	dc00      	bgt.n	bd52 <_vfprintf_r+0xaf2>
    bd50:	e1f6      	b.n	c140 <_vfprintf_r+0xee0>
    bd52:	4b85      	ldr	r3, [pc, #532]	; (bf68 <_vfprintf_r+0xd08>)
    bd54:	3310      	adds	r3, #16
    bd56:	6023      	str	r3, [r4, #0]
    bd58:	2d10      	cmp	r5, #16
    bd5a:	dd16      	ble.n	bd8a <_vfprintf_r+0xb2a>
    bd5c:	2310      	movs	r3, #16
    bd5e:	6063      	str	r3, [r4, #4]
    bd60:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    bd62:	3310      	adds	r3, #16
    bd64:	932b      	str	r3, [sp, #172]	; 0xac
    bd66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bd68:	3301      	adds	r3, #1
    bd6a:	932a      	str	r3, [sp, #168]	; 0xa8
    bd6c:	2b07      	cmp	r3, #7
    bd6e:	dc01      	bgt.n	bd74 <_vfprintf_r+0xb14>
    bd70:	3408      	adds	r4, #8
    bd72:	e008      	b.n	bd86 <_vfprintf_r+0xb26>
    bd74:	980e      	ldr	r0, [sp, #56]	; 0x38
    bd76:	990d      	ldr	r1, [sp, #52]	; 0x34
    bd78:	aa29      	add	r2, sp, #164	; 0xa4
    bd7a:	f002 fec7 	bl	eb0c <__sprint_r>
    bd7e:	2800      	cmp	r0, #0
    bd80:	d000      	beq.n	bd84 <_vfprintf_r+0xb24>
    bd82:	e22f      	b.n	c1e4 <_vfprintf_r+0xf84>
    bd84:	ac36      	add	r4, sp, #216	; 0xd8
    bd86:	3d10      	subs	r5, #16
    bd88:	e7e3      	b.n	bd52 <_vfprintf_r+0xaf2>
    bd8a:	992b      	ldr	r1, [sp, #172]	; 0xac
    bd8c:	6065      	str	r5, [r4, #4]
    bd8e:	186d      	adds	r5, r5, r1
    bd90:	952b      	str	r5, [sp, #172]	; 0xac
    bd92:	e142      	b.n	c01a <_vfprintf_r+0xdba>
    bd94:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    bd96:	2a00      	cmp	r2, #0
    bd98:	dc71      	bgt.n	be7e <_vfprintf_r+0xc1e>
    bd9a:	4b74      	ldr	r3, [pc, #464]	; (bf6c <_vfprintf_r+0xd0c>)
    bd9c:	6023      	str	r3, [r4, #0]
    bd9e:	2301      	movs	r3, #1
    bda0:	6063      	str	r3, [r4, #4]
    bda2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    bda4:	3301      	adds	r3, #1
    bda6:	932b      	str	r3, [sp, #172]	; 0xac
    bda8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bdaa:	3301      	adds	r3, #1
    bdac:	932a      	str	r3, [sp, #168]	; 0xa8
    bdae:	2b07      	cmp	r3, #7
    bdb0:	dc01      	bgt.n	bdb6 <_vfprintf_r+0xb56>
    bdb2:	3408      	adds	r4, #8
    bdb4:	e008      	b.n	bdc8 <_vfprintf_r+0xb68>
    bdb6:	980e      	ldr	r0, [sp, #56]	; 0x38
    bdb8:	990d      	ldr	r1, [sp, #52]	; 0x34
    bdba:	aa29      	add	r2, sp, #164	; 0xa4
    bdbc:	f002 fea6 	bl	eb0c <__sprint_r>
    bdc0:	2800      	cmp	r0, #0
    bdc2:	d000      	beq.n	bdc6 <_vfprintf_r+0xb66>
    bdc4:	e20e      	b.n	c1e4 <_vfprintf_r+0xf84>
    bdc6:	ac36      	add	r4, sp, #216	; 0xd8
    bdc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    bdca:	2b00      	cmp	r3, #0
    bdcc:	d105      	bne.n	bdda <_vfprintf_r+0xb7a>
    bdce:	9d12      	ldr	r5, [sp, #72]	; 0x48
    bdd0:	2d00      	cmp	r5, #0
    bdd2:	d102      	bne.n	bdda <_vfprintf_r+0xb7a>
    bdd4:	07f0      	lsls	r0, r6, #31
    bdd6:	d400      	bmi.n	bdda <_vfprintf_r+0xb7a>
    bdd8:	e1b2      	b.n	c140 <_vfprintf_r+0xee0>
    bdda:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    bddc:	982b      	ldr	r0, [sp, #172]	; 0xac
    bdde:	6025      	str	r5, [r4, #0]
    bde0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    bde2:	182b      	adds	r3, r5, r0
    bde4:	932b      	str	r3, [sp, #172]	; 0xac
    bde6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bde8:	6065      	str	r5, [r4, #4]
    bdea:	3301      	adds	r3, #1
    bdec:	932a      	str	r3, [sp, #168]	; 0xa8
    bdee:	2b07      	cmp	r3, #7
    bdf0:	dc01      	bgt.n	bdf6 <_vfprintf_r+0xb96>
    bdf2:	3408      	adds	r4, #8
    bdf4:	e008      	b.n	be08 <_vfprintf_r+0xba8>
    bdf6:	980e      	ldr	r0, [sp, #56]	; 0x38
    bdf8:	990d      	ldr	r1, [sp, #52]	; 0x34
    bdfa:	aa29      	add	r2, sp, #164	; 0xa4
    bdfc:	f002 fe86 	bl	eb0c <__sprint_r>
    be00:	2800      	cmp	r0, #0
    be02:	d000      	beq.n	be06 <_vfprintf_r+0xba6>
    be04:	e1ee      	b.n	c1e4 <_vfprintf_r+0xf84>
    be06:	ac36      	add	r4, sp, #216	; 0xd8
    be08:	9923      	ldr	r1, [sp, #140]	; 0x8c
    be0a:	424d      	negs	r5, r1
    be0c:	2d00      	cmp	r5, #0
    be0e:	dd2f      	ble.n	be70 <_vfprintf_r+0xc10>
    be10:	4b55      	ldr	r3, [pc, #340]	; (bf68 <_vfprintf_r+0xd08>)
    be12:	3310      	adds	r3, #16
    be14:	6023      	str	r3, [r4, #0]
    be16:	2d10      	cmp	r5, #16
    be18:	dd16      	ble.n	be48 <_vfprintf_r+0xbe8>
    be1a:	2310      	movs	r3, #16
    be1c:	6063      	str	r3, [r4, #4]
    be1e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    be20:	3310      	adds	r3, #16
    be22:	932b      	str	r3, [sp, #172]	; 0xac
    be24:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    be26:	3301      	adds	r3, #1
    be28:	932a      	str	r3, [sp, #168]	; 0xa8
    be2a:	2b07      	cmp	r3, #7
    be2c:	dc01      	bgt.n	be32 <_vfprintf_r+0xbd2>
    be2e:	3408      	adds	r4, #8
    be30:	e008      	b.n	be44 <_vfprintf_r+0xbe4>
    be32:	980e      	ldr	r0, [sp, #56]	; 0x38
    be34:	990d      	ldr	r1, [sp, #52]	; 0x34
    be36:	aa29      	add	r2, sp, #164	; 0xa4
    be38:	f002 fe68 	bl	eb0c <__sprint_r>
    be3c:	2800      	cmp	r0, #0
    be3e:	d000      	beq.n	be42 <_vfprintf_r+0xbe2>
    be40:	e1d0      	b.n	c1e4 <_vfprintf_r+0xf84>
    be42:	ac36      	add	r4, sp, #216	; 0xd8
    be44:	3d10      	subs	r5, #16
    be46:	e7e3      	b.n	be10 <_vfprintf_r+0xbb0>
    be48:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    be4a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    be4c:	6065      	str	r5, [r4, #4]
    be4e:	3301      	adds	r3, #1
    be50:	18ad      	adds	r5, r5, r2
    be52:	952b      	str	r5, [sp, #172]	; 0xac
    be54:	932a      	str	r3, [sp, #168]	; 0xa8
    be56:	2b07      	cmp	r3, #7
    be58:	dc01      	bgt.n	be5e <_vfprintf_r+0xbfe>
    be5a:	3408      	adds	r4, #8
    be5c:	e008      	b.n	be70 <_vfprintf_r+0xc10>
    be5e:	980e      	ldr	r0, [sp, #56]	; 0x38
    be60:	990d      	ldr	r1, [sp, #52]	; 0x34
    be62:	aa29      	add	r2, sp, #164	; 0xa4
    be64:	f002 fe52 	bl	eb0c <__sprint_r>
    be68:	2800      	cmp	r0, #0
    be6a:	d000      	beq.n	be6e <_vfprintf_r+0xc0e>
    be6c:	e1ba      	b.n	c1e4 <_vfprintf_r+0xf84>
    be6e:	ac36      	add	r4, sp, #216	; 0xd8
    be70:	9d10      	ldr	r5, [sp, #64]	; 0x40
    be72:	6025      	str	r5, [r4, #0]
    be74:	9d12      	ldr	r5, [sp, #72]	; 0x48
    be76:	6065      	str	r5, [r4, #4]
    be78:	982b      	ldr	r0, [sp, #172]	; 0xac
    be7a:	182b      	adds	r3, r5, r0
    be7c:	e0cc      	b.n	c018 <_vfprintf_r+0xdb8>
    be7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
    be80:	9812      	ldr	r0, [sp, #72]	; 0x48
    be82:	9910      	ldr	r1, [sp, #64]	; 0x40
    be84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    be86:	182d      	adds	r5, r5, r0
    be88:	950c      	str	r5, [sp, #48]	; 0x30
    be8a:	1a6d      	subs	r5, r5, r1
    be8c:	4295      	cmp	r5, r2
    be8e:	dd00      	ble.n	be92 <_vfprintf_r+0xc32>
    be90:	1c15      	adds	r5, r2, #0
    be92:	2d00      	cmp	r5, #0
    be94:	dd15      	ble.n	bec2 <_vfprintf_r+0xc62>
    be96:	9b10      	ldr	r3, [sp, #64]	; 0x40
    be98:	982b      	ldr	r0, [sp, #172]	; 0xac
    be9a:	6023      	str	r3, [r4, #0]
    be9c:	182b      	adds	r3, r5, r0
    be9e:	932b      	str	r3, [sp, #172]	; 0xac
    bea0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bea2:	6065      	str	r5, [r4, #4]
    bea4:	3301      	adds	r3, #1
    bea6:	932a      	str	r3, [sp, #168]	; 0xa8
    bea8:	2b07      	cmp	r3, #7
    beaa:	dc01      	bgt.n	beb0 <_vfprintf_r+0xc50>
    beac:	3408      	adds	r4, #8
    beae:	e008      	b.n	bec2 <_vfprintf_r+0xc62>
    beb0:	980e      	ldr	r0, [sp, #56]	; 0x38
    beb2:	990d      	ldr	r1, [sp, #52]	; 0x34
    beb4:	aa29      	add	r2, sp, #164	; 0xa4
    beb6:	f002 fe29 	bl	eb0c <__sprint_r>
    beba:	2800      	cmp	r0, #0
    bebc:	d000      	beq.n	bec0 <_vfprintf_r+0xc60>
    bebe:	e191      	b.n	c1e4 <_vfprintf_r+0xf84>
    bec0:	ac36      	add	r4, sp, #216	; 0xd8
    bec2:	43eb      	mvns	r3, r5
    bec4:	17db      	asrs	r3, r3, #31
    bec6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    bec8:	401d      	ands	r5, r3
    beca:	1b4d      	subs	r5, r1, r5
    becc:	2d00      	cmp	r5, #0
    bece:	dd2f      	ble.n	bf30 <_vfprintf_r+0xcd0>
    bed0:	4b25      	ldr	r3, [pc, #148]	; (bf68 <_vfprintf_r+0xd08>)
    bed2:	3310      	adds	r3, #16
    bed4:	6023      	str	r3, [r4, #0]
    bed6:	2d10      	cmp	r5, #16
    bed8:	dd16      	ble.n	bf08 <_vfprintf_r+0xca8>
    beda:	2310      	movs	r3, #16
    bedc:	6063      	str	r3, [r4, #4]
    bede:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    bee0:	3310      	adds	r3, #16
    bee2:	932b      	str	r3, [sp, #172]	; 0xac
    bee4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bee6:	3301      	adds	r3, #1
    bee8:	932a      	str	r3, [sp, #168]	; 0xa8
    beea:	2b07      	cmp	r3, #7
    beec:	dc01      	bgt.n	bef2 <_vfprintf_r+0xc92>
    beee:	3408      	adds	r4, #8
    bef0:	e008      	b.n	bf04 <_vfprintf_r+0xca4>
    bef2:	980e      	ldr	r0, [sp, #56]	; 0x38
    bef4:	990d      	ldr	r1, [sp, #52]	; 0x34
    bef6:	aa29      	add	r2, sp, #164	; 0xa4
    bef8:	f002 fe08 	bl	eb0c <__sprint_r>
    befc:	2800      	cmp	r0, #0
    befe:	d000      	beq.n	bf02 <_vfprintf_r+0xca2>
    bf00:	e170      	b.n	c1e4 <_vfprintf_r+0xf84>
    bf02:	ac36      	add	r4, sp, #216	; 0xd8
    bf04:	3d10      	subs	r5, #16
    bf06:	e7e3      	b.n	bed0 <_vfprintf_r+0xc70>
    bf08:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    bf0a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bf0c:	6065      	str	r5, [r4, #4]
    bf0e:	3301      	adds	r3, #1
    bf10:	18ad      	adds	r5, r5, r2
    bf12:	952b      	str	r5, [sp, #172]	; 0xac
    bf14:	932a      	str	r3, [sp, #168]	; 0xa8
    bf16:	2b07      	cmp	r3, #7
    bf18:	dc01      	bgt.n	bf1e <_vfprintf_r+0xcbe>
    bf1a:	3408      	adds	r4, #8
    bf1c:	e008      	b.n	bf30 <_vfprintf_r+0xcd0>
    bf1e:	980e      	ldr	r0, [sp, #56]	; 0x38
    bf20:	990d      	ldr	r1, [sp, #52]	; 0x34
    bf22:	aa29      	add	r2, sp, #164	; 0xa4
    bf24:	f002 fdf2 	bl	eb0c <__sprint_r>
    bf28:	2800      	cmp	r0, #0
    bf2a:	d000      	beq.n	bf2e <_vfprintf_r+0xcce>
    bf2c:	e15a      	b.n	c1e4 <_vfprintf_r+0xf84>
    bf2e:	ac36      	add	r4, sp, #216	; 0xd8
    bf30:	9d10      	ldr	r5, [sp, #64]	; 0x40
    bf32:	9813      	ldr	r0, [sp, #76]	; 0x4c
    bf34:	9923      	ldr	r1, [sp, #140]	; 0x8c
    bf36:	182d      	adds	r5, r5, r0
    bf38:	9510      	str	r5, [sp, #64]	; 0x40
    bf3a:	9d12      	ldr	r5, [sp, #72]	; 0x48
    bf3c:	42a9      	cmp	r1, r5
    bf3e:	db01      	blt.n	bf44 <_vfprintf_r+0xce4>
    bf40:	07f0      	lsls	r0, r6, #31
    bf42:	d51e      	bpl.n	bf82 <_vfprintf_r+0xd22>
    bf44:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    bf46:	982b      	ldr	r0, [sp, #172]	; 0xac
    bf48:	6025      	str	r5, [r4, #0]
    bf4a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    bf4c:	182b      	adds	r3, r5, r0
    bf4e:	932b      	str	r3, [sp, #172]	; 0xac
    bf50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bf52:	6065      	str	r5, [r4, #4]
    bf54:	3301      	adds	r3, #1
    bf56:	932a      	str	r3, [sp, #168]	; 0xa8
    bf58:	2b07      	cmp	r3, #7
    bf5a:	dc09      	bgt.n	bf70 <_vfprintf_r+0xd10>
    bf5c:	3408      	adds	r4, #8
    bf5e:	e010      	b.n	bf82 <_vfprintf_r+0xd22>
	...
    bf68:	00010a84 	.word	0x00010a84
    bf6c:	00010ad6 	.word	0x00010ad6
    bf70:	980e      	ldr	r0, [sp, #56]	; 0x38
    bf72:	990d      	ldr	r1, [sp, #52]	; 0x34
    bf74:	aa29      	add	r2, sp, #164	; 0xa4
    bf76:	f002 fdc9 	bl	eb0c <__sprint_r>
    bf7a:	2800      	cmp	r0, #0
    bf7c:	d000      	beq.n	bf80 <_vfprintf_r+0xd20>
    bf7e:	e131      	b.n	c1e4 <_vfprintf_r+0xf84>
    bf80:	ac36      	add	r4, sp, #216	; 0xd8
    bf82:	9d12      	ldr	r5, [sp, #72]	; 0x48
    bf84:	9823      	ldr	r0, [sp, #140]	; 0x8c
    bf86:	990c      	ldr	r1, [sp, #48]	; 0x30
    bf88:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bf8a:	1a2b      	subs	r3, r5, r0
    bf8c:	1a8d      	subs	r5, r1, r2
    bf8e:	429d      	cmp	r5, r3
    bf90:	dd00      	ble.n	bf94 <_vfprintf_r+0xd34>
    bf92:	1c1d      	adds	r5, r3, #0
    bf94:	2d00      	cmp	r5, #0
    bf96:	dd15      	ble.n	bfc4 <_vfprintf_r+0xd64>
    bf98:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bf9a:	982b      	ldr	r0, [sp, #172]	; 0xac
    bf9c:	6023      	str	r3, [r4, #0]
    bf9e:	182b      	adds	r3, r5, r0
    bfa0:	932b      	str	r3, [sp, #172]	; 0xac
    bfa2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bfa4:	6065      	str	r5, [r4, #4]
    bfa6:	3301      	adds	r3, #1
    bfa8:	932a      	str	r3, [sp, #168]	; 0xa8
    bfaa:	2b07      	cmp	r3, #7
    bfac:	dc01      	bgt.n	bfb2 <_vfprintf_r+0xd52>
    bfae:	3408      	adds	r4, #8
    bfb0:	e008      	b.n	bfc4 <_vfprintf_r+0xd64>
    bfb2:	980e      	ldr	r0, [sp, #56]	; 0x38
    bfb4:	990d      	ldr	r1, [sp, #52]	; 0x34
    bfb6:	aa29      	add	r2, sp, #164	; 0xa4
    bfb8:	f002 fda8 	bl	eb0c <__sprint_r>
    bfbc:	2800      	cmp	r0, #0
    bfbe:	d000      	beq.n	bfc2 <_vfprintf_r+0xd62>
    bfc0:	e110      	b.n	c1e4 <_vfprintf_r+0xf84>
    bfc2:	ac36      	add	r4, sp, #216	; 0xd8
    bfc4:	43eb      	mvns	r3, r5
    bfc6:	1c2a      	adds	r2, r5, #0
    bfc8:	9823      	ldr	r0, [sp, #140]	; 0x8c
    bfca:	9d12      	ldr	r5, [sp, #72]	; 0x48
    bfcc:	17db      	asrs	r3, r3, #31
    bfce:	401a      	ands	r2, r3
    bfd0:	1a2b      	subs	r3, r5, r0
    bfd2:	1a9d      	subs	r5, r3, r2
    bfd4:	2d00      	cmp	r5, #0
    bfd6:	dc00      	bgt.n	bfda <_vfprintf_r+0xd7a>
    bfd8:	e0b2      	b.n	c140 <_vfprintf_r+0xee0>
    bfda:	4b89      	ldr	r3, [pc, #548]	; (c200 <_vfprintf_r+0xfa0>)
    bfdc:	3310      	adds	r3, #16
    bfde:	6023      	str	r3, [r4, #0]
    bfe0:	2d10      	cmp	r5, #16
    bfe2:	dd16      	ble.n	c012 <_vfprintf_r+0xdb2>
    bfe4:	2310      	movs	r3, #16
    bfe6:	6063      	str	r3, [r4, #4]
    bfe8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    bfea:	3310      	adds	r3, #16
    bfec:	932b      	str	r3, [sp, #172]	; 0xac
    bfee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bff0:	3301      	adds	r3, #1
    bff2:	932a      	str	r3, [sp, #168]	; 0xa8
    bff4:	2b07      	cmp	r3, #7
    bff6:	dc01      	bgt.n	bffc <_vfprintf_r+0xd9c>
    bff8:	3408      	adds	r4, #8
    bffa:	e008      	b.n	c00e <_vfprintf_r+0xdae>
    bffc:	980e      	ldr	r0, [sp, #56]	; 0x38
    bffe:	990d      	ldr	r1, [sp, #52]	; 0x34
    c000:	aa29      	add	r2, sp, #164	; 0xa4
    c002:	f002 fd83 	bl	eb0c <__sprint_r>
    c006:	2800      	cmp	r0, #0
    c008:	d000      	beq.n	c00c <_vfprintf_r+0xdac>
    c00a:	e0eb      	b.n	c1e4 <_vfprintf_r+0xf84>
    c00c:	ac36      	add	r4, sp, #216	; 0xd8
    c00e:	3d10      	subs	r5, #16
    c010:	e7e3      	b.n	bfda <_vfprintf_r+0xd7a>
    c012:	992b      	ldr	r1, [sp, #172]	; 0xac
    c014:	6065      	str	r5, [r4, #4]
    c016:	186b      	adds	r3, r5, r1
    c018:	932b      	str	r3, [sp, #172]	; 0xac
    c01a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    c01c:	3301      	adds	r3, #1
    c01e:	932a      	str	r3, [sp, #168]	; 0xa8
    c020:	2b07      	cmp	r3, #7
    c022:	dc00      	bgt.n	c026 <_vfprintf_r+0xdc6>
    c024:	e08b      	b.n	c13e <_vfprintf_r+0xede>
    c026:	980e      	ldr	r0, [sp, #56]	; 0x38
    c028:	990d      	ldr	r1, [sp, #52]	; 0x34
    c02a:	aa29      	add	r2, sp, #164	; 0xa4
    c02c:	f002 fd6e 	bl	eb0c <__sprint_r>
    c030:	2800      	cmp	r0, #0
    c032:	d000      	beq.n	c036 <_vfprintf_r+0xdd6>
    c034:	e0d6      	b.n	c1e4 <_vfprintf_r+0xf84>
    c036:	ac36      	add	r4, sp, #216	; 0xd8
    c038:	e082      	b.n	c140 <_vfprintf_r+0xee0>
    c03a:	9d12      	ldr	r5, [sp, #72]	; 0x48
    c03c:	2d01      	cmp	r5, #1
    c03e:	dc02      	bgt.n	c046 <_vfprintf_r+0xde6>
    c040:	2301      	movs	r3, #1
    c042:	421e      	tst	r6, r3
    c044:	d06f      	beq.n	c126 <_vfprintf_r+0xec6>
    c046:	2301      	movs	r3, #1
    c048:	6063      	str	r3, [r4, #4]
    c04a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    c04c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    c04e:	3301      	adds	r3, #1
    c050:	932b      	str	r3, [sp, #172]	; 0xac
    c052:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    c054:	6025      	str	r5, [r4, #0]
    c056:	3301      	adds	r3, #1
    c058:	932a      	str	r3, [sp, #168]	; 0xa8
    c05a:	2b07      	cmp	r3, #7
    c05c:	dc01      	bgt.n	c062 <_vfprintf_r+0xe02>
    c05e:	3408      	adds	r4, #8
    c060:	e008      	b.n	c074 <_vfprintf_r+0xe14>
    c062:	980e      	ldr	r0, [sp, #56]	; 0x38
    c064:	990d      	ldr	r1, [sp, #52]	; 0x34
    c066:	aa29      	add	r2, sp, #164	; 0xa4
    c068:	f002 fd50 	bl	eb0c <__sprint_r>
    c06c:	2800      	cmp	r0, #0
    c06e:	d000      	beq.n	c072 <_vfprintf_r+0xe12>
    c070:	e0b8      	b.n	c1e4 <_vfprintf_r+0xf84>
    c072:	ac36      	add	r4, sp, #216	; 0xd8
    c074:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    c076:	982b      	ldr	r0, [sp, #172]	; 0xac
    c078:	6025      	str	r5, [r4, #0]
    c07a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    c07c:	182b      	adds	r3, r5, r0
    c07e:	932b      	str	r3, [sp, #172]	; 0xac
    c080:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    c082:	6065      	str	r5, [r4, #4]
    c084:	3301      	adds	r3, #1
    c086:	932a      	str	r3, [sp, #168]	; 0xa8
    c088:	2b07      	cmp	r3, #7
    c08a:	dc01      	bgt.n	c090 <_vfprintf_r+0xe30>
    c08c:	3408      	adds	r4, #8
    c08e:	e008      	b.n	c0a2 <_vfprintf_r+0xe42>
    c090:	980e      	ldr	r0, [sp, #56]	; 0x38
    c092:	990d      	ldr	r1, [sp, #52]	; 0x34
    c094:	aa29      	add	r2, sp, #164	; 0xa4
    c096:	f002 fd39 	bl	eb0c <__sprint_r>
    c09a:	2800      	cmp	r0, #0
    c09c:	d000      	beq.n	c0a0 <_vfprintf_r+0xe40>
    c09e:	e0a1      	b.n	c1e4 <_vfprintf_r+0xf84>
    c0a0:	ac36      	add	r4, sp, #216	; 0xd8
    c0a2:	9818      	ldr	r0, [sp, #96]	; 0x60
    c0a4:	991a      	ldr	r1, [sp, #104]	; 0x68
    c0a6:	4b55      	ldr	r3, [pc, #340]	; (c1fc <_vfprintf_r+0xf9c>)
    c0a8:	4a53      	ldr	r2, [pc, #332]	; (c1f8 <_vfprintf_r+0xf98>)
    c0aa:	f7fe fa91 	bl	a5d0 <__aeabi_dcmpeq>
    c0ae:	9d12      	ldr	r5, [sp, #72]	; 0x48
    c0b0:	3d01      	subs	r5, #1
    c0b2:	2800      	cmp	r0, #0
    c0b4:	d108      	bne.n	c0c8 <_vfprintf_r+0xe68>
    c0b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c0b8:	6065      	str	r5, [r4, #4]
    c0ba:	3301      	adds	r3, #1
    c0bc:	6023      	str	r3, [r4, #0]
    c0be:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    c0c0:	9d12      	ldr	r5, [sp, #72]	; 0x48
    c0c2:	3b01      	subs	r3, #1
    c0c4:	195b      	adds	r3, r3, r5
    c0c6:	e033      	b.n	c130 <_vfprintf_r+0xed0>
    c0c8:	2d00      	cmp	r5, #0
    c0ca:	dd34      	ble.n	c136 <_vfprintf_r+0xed6>
    c0cc:	4b4c      	ldr	r3, [pc, #304]	; (c200 <_vfprintf_r+0xfa0>)
    c0ce:	3310      	adds	r3, #16
    c0d0:	6023      	str	r3, [r4, #0]
    c0d2:	2d10      	cmp	r5, #16
    c0d4:	dd15      	ble.n	c102 <_vfprintf_r+0xea2>
    c0d6:	2310      	movs	r3, #16
    c0d8:	6063      	str	r3, [r4, #4]
    c0da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    c0dc:	3310      	adds	r3, #16
    c0de:	932b      	str	r3, [sp, #172]	; 0xac
    c0e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    c0e2:	3301      	adds	r3, #1
    c0e4:	932a      	str	r3, [sp, #168]	; 0xa8
    c0e6:	2b07      	cmp	r3, #7
    c0e8:	dc01      	bgt.n	c0ee <_vfprintf_r+0xe8e>
    c0ea:	3408      	adds	r4, #8
    c0ec:	e007      	b.n	c0fe <_vfprintf_r+0xe9e>
    c0ee:	980e      	ldr	r0, [sp, #56]	; 0x38
    c0f0:	990d      	ldr	r1, [sp, #52]	; 0x34
    c0f2:	aa29      	add	r2, sp, #164	; 0xa4
    c0f4:	f002 fd0a 	bl	eb0c <__sprint_r>
    c0f8:	2800      	cmp	r0, #0
    c0fa:	d173      	bne.n	c1e4 <_vfprintf_r+0xf84>
    c0fc:	ac36      	add	r4, sp, #216	; 0xd8
    c0fe:	3d10      	subs	r5, #16
    c100:	e7e4      	b.n	c0cc <_vfprintf_r+0xe6c>
    c102:	982b      	ldr	r0, [sp, #172]	; 0xac
    c104:	6065      	str	r5, [r4, #4]
    c106:	182d      	adds	r5, r5, r0
    c108:	952b      	str	r5, [sp, #172]	; 0xac
    c10a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    c10c:	3301      	adds	r3, #1
    c10e:	932a      	str	r3, [sp, #168]	; 0xa8
    c110:	2b07      	cmp	r3, #7
    c112:	dd0f      	ble.n	c134 <_vfprintf_r+0xed4>
    c114:	980e      	ldr	r0, [sp, #56]	; 0x38
    c116:	990d      	ldr	r1, [sp, #52]	; 0x34
    c118:	aa29      	add	r2, sp, #164	; 0xa4
    c11a:	f002 fcf7 	bl	eb0c <__sprint_r>
    c11e:	2800      	cmp	r0, #0
    c120:	d160      	bne.n	c1e4 <_vfprintf_r+0xf84>
    c122:	ac36      	add	r4, sp, #216	; 0xd8
    c124:	e007      	b.n	c136 <_vfprintf_r+0xed6>
    c126:	9d10      	ldr	r5, [sp, #64]	; 0x40
    c128:	6063      	str	r3, [r4, #4]
    c12a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    c12c:	6025      	str	r5, [r4, #0]
    c12e:	3301      	adds	r3, #1
    c130:	932b      	str	r3, [sp, #172]	; 0xac
    c132:	e7ea      	b.n	c10a <_vfprintf_r+0xeaa>
    c134:	3408      	adds	r4, #8
    c136:	ab25      	add	r3, sp, #148	; 0x94
    c138:	6023      	str	r3, [r4, #0]
    c13a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    c13c:	e69b      	b.n	be76 <_vfprintf_r+0xc16>
    c13e:	3408      	adds	r4, #8
    c140:	0771      	lsls	r1, r6, #29
    c142:	d40b      	bmi.n	c15c <_vfprintf_r+0xefc>
    c144:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c146:	9d16      	ldr	r5, [sp, #88]	; 0x58
    c148:	42ab      	cmp	r3, r5
    c14a:	da00      	bge.n	c14e <_vfprintf_r+0xeee>
    c14c:	1c2b      	adds	r3, r5, #0
    c14e:	9d19      	ldr	r5, [sp, #100]	; 0x64
    c150:	982b      	ldr	r0, [sp, #172]	; 0xac
    c152:	18ed      	adds	r5, r5, r3
    c154:	9519      	str	r5, [sp, #100]	; 0x64
    c156:	2800      	cmp	r0, #0
    c158:	d037      	beq.n	c1ca <_vfprintf_r+0xf6a>
    c15a:	e02f      	b.n	c1bc <_vfprintf_r+0xf5c>
    c15c:	9916      	ldr	r1, [sp, #88]	; 0x58
    c15e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    c160:	1a8d      	subs	r5, r1, r2
    c162:	2d00      	cmp	r5, #0
    c164:	ddee      	ble.n	c144 <_vfprintf_r+0xee4>
    c166:	4b26      	ldr	r3, [pc, #152]	; (c200 <_vfprintf_r+0xfa0>)
    c168:	6023      	str	r3, [r4, #0]
    c16a:	2d10      	cmp	r5, #16
    c16c:	dd15      	ble.n	c19a <_vfprintf_r+0xf3a>
    c16e:	2310      	movs	r3, #16
    c170:	6063      	str	r3, [r4, #4]
    c172:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    c174:	3310      	adds	r3, #16
    c176:	932b      	str	r3, [sp, #172]	; 0xac
    c178:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    c17a:	3301      	adds	r3, #1
    c17c:	932a      	str	r3, [sp, #168]	; 0xa8
    c17e:	2b07      	cmp	r3, #7
    c180:	dc01      	bgt.n	c186 <_vfprintf_r+0xf26>
    c182:	3408      	adds	r4, #8
    c184:	e007      	b.n	c196 <_vfprintf_r+0xf36>
    c186:	980e      	ldr	r0, [sp, #56]	; 0x38
    c188:	990d      	ldr	r1, [sp, #52]	; 0x34
    c18a:	aa29      	add	r2, sp, #164	; 0xa4
    c18c:	f002 fcbe 	bl	eb0c <__sprint_r>
    c190:	2800      	cmp	r0, #0
    c192:	d127      	bne.n	c1e4 <_vfprintf_r+0xf84>
    c194:	ac36      	add	r4, sp, #216	; 0xd8
    c196:	3d10      	subs	r5, #16
    c198:	e7e5      	b.n	c166 <_vfprintf_r+0xf06>
    c19a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    c19c:	6065      	str	r5, [r4, #4]
    c19e:	18ed      	adds	r5, r5, r3
    c1a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    c1a2:	952b      	str	r5, [sp, #172]	; 0xac
    c1a4:	3301      	adds	r3, #1
    c1a6:	932a      	str	r3, [sp, #168]	; 0xa8
    c1a8:	2b07      	cmp	r3, #7
    c1aa:	ddcb      	ble.n	c144 <_vfprintf_r+0xee4>
    c1ac:	980e      	ldr	r0, [sp, #56]	; 0x38
    c1ae:	990d      	ldr	r1, [sp, #52]	; 0x34
    c1b0:	aa29      	add	r2, sp, #164	; 0xa4
    c1b2:	f002 fcab 	bl	eb0c <__sprint_r>
    c1b6:	2800      	cmp	r0, #0
    c1b8:	d0c4      	beq.n	c144 <_vfprintf_r+0xee4>
    c1ba:	e013      	b.n	c1e4 <_vfprintf_r+0xf84>
    c1bc:	980e      	ldr	r0, [sp, #56]	; 0x38
    c1be:	990d      	ldr	r1, [sp, #52]	; 0x34
    c1c0:	aa29      	add	r2, sp, #164	; 0xa4
    c1c2:	f002 fca3 	bl	eb0c <__sprint_r>
    c1c6:	2800      	cmp	r0, #0
    c1c8:	d10c      	bne.n	c1e4 <_vfprintf_r+0xf84>
    c1ca:	2300      	movs	r3, #0
    c1cc:	932a      	str	r3, [sp, #168]	; 0xa8
    c1ce:	ac36      	add	r4, sp, #216	; 0xd8
    c1d0:	f7ff f899 	bl	b306 <_vfprintf_r+0xa6>
    c1d4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
    c1d6:	2d00      	cmp	r5, #0
    c1d8:	d004      	beq.n	c1e4 <_vfprintf_r+0xf84>
    c1da:	980e      	ldr	r0, [sp, #56]	; 0x38
    c1dc:	990d      	ldr	r1, [sp, #52]	; 0x34
    c1de:	aa29      	add	r2, sp, #164	; 0xa4
    c1e0:	f002 fc94 	bl	eb0c <__sprint_r>
    c1e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    c1e6:	89ab      	ldrh	r3, [r5, #12]
    c1e8:	0658      	lsls	r0, r3, #25
    c1ea:	d501      	bpl.n	c1f0 <_vfprintf_r+0xf90>
    c1ec:	f7ff f86f 	bl	b2ce <_vfprintf_r+0x6e>
    c1f0:	9819      	ldr	r0, [sp, #100]	; 0x64
    c1f2:	b047      	add	sp, #284	; 0x11c
    c1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1f6:	46c0      	nop			; (mov r8, r8)
	...
    c200:	00010a84 	.word	0x00010a84

0000c204 <vfprintf>:
    c204:	b538      	push	{r3, r4, r5, lr}
    c206:	1c13      	adds	r3, r2, #0
    c208:	4a04      	ldr	r2, [pc, #16]	; (c21c <vfprintf+0x18>)
    c20a:	1c05      	adds	r5, r0, #0
    c20c:	1c0c      	adds	r4, r1, #0
    c20e:	6810      	ldr	r0, [r2, #0]
    c210:	1c29      	adds	r1, r5, #0
    c212:	1c22      	adds	r2, r4, #0
    c214:	f7ff f824 	bl	b260 <_vfprintf_r>
    c218:	bd38      	pop	{r3, r4, r5, pc}
    c21a:	46c0      	nop			; (mov r8, r8)
    c21c:	20000040 	.word	0x20000040

0000c220 <__sbprintf>:
    c220:	b570      	push	{r4, r5, r6, lr}
    c222:	4c1a      	ldr	r4, [pc, #104]	; (c28c <__sbprintf+0x6c>)
    c224:	1c06      	adds	r6, r0, #0
    c226:	44a5      	add	sp, r4
    c228:	1c0c      	adds	r4, r1, #0
    c22a:	8989      	ldrh	r1, [r1, #12]
    c22c:	2002      	movs	r0, #2
    c22e:	4381      	bics	r1, r0
    c230:	4668      	mov	r0, sp
    c232:	8181      	strh	r1, [r0, #12]
    c234:	6e61      	ldr	r1, [r4, #100]	; 0x64
    c236:	9119      	str	r1, [sp, #100]	; 0x64
    c238:	89e1      	ldrh	r1, [r4, #14]
    c23a:	81c1      	strh	r1, [r0, #14]
    c23c:	69e1      	ldr	r1, [r4, #28]
    c23e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    c240:	9107      	str	r1, [sp, #28]
    c242:	a91a      	add	r1, sp, #104	; 0x68
    c244:	9100      	str	r1, [sp, #0]
    c246:	9104      	str	r1, [sp, #16]
    c248:	2180      	movs	r1, #128	; 0x80
    c24a:	00c9      	lsls	r1, r1, #3
    c24c:	9102      	str	r1, [sp, #8]
    c24e:	9105      	str	r1, [sp, #20]
    c250:	2100      	movs	r1, #0
    c252:	9009      	str	r0, [sp, #36]	; 0x24
    c254:	9106      	str	r1, [sp, #24]
    c256:	1c30      	adds	r0, r6, #0
    c258:	4669      	mov	r1, sp
    c25a:	f7ff f801 	bl	b260 <_vfprintf_r>
    c25e:	1e05      	subs	r5, r0, #0
    c260:	db07      	blt.n	c272 <__sbprintf+0x52>
    c262:	1c30      	adds	r0, r6, #0
    c264:	4669      	mov	r1, sp
    c266:	f000 ff73 	bl	d150 <_fflush_r>
    c26a:	2800      	cmp	r0, #0
    c26c:	d001      	beq.n	c272 <__sbprintf+0x52>
    c26e:	2501      	movs	r5, #1
    c270:	426d      	negs	r5, r5
    c272:	466b      	mov	r3, sp
    c274:	899a      	ldrh	r2, [r3, #12]
    c276:	2340      	movs	r3, #64	; 0x40
    c278:	421a      	tst	r2, r3
    c27a:	d002      	beq.n	c282 <__sbprintf+0x62>
    c27c:	89a2      	ldrh	r2, [r4, #12]
    c27e:	4313      	orrs	r3, r2
    c280:	81a3      	strh	r3, [r4, #12]
    c282:	1c28      	adds	r0, r5, #0
    c284:	238d      	movs	r3, #141	; 0x8d
    c286:	00db      	lsls	r3, r3, #3
    c288:	449d      	add	sp, r3
    c28a:	bd70      	pop	{r4, r5, r6, pc}
    c28c:	fffffb98 	.word	0xfffffb98

0000c290 <__swsetup_r>:
    c290:	b538      	push	{r3, r4, r5, lr}
    c292:	4b2d      	ldr	r3, [pc, #180]	; (c348 <__swsetup_r+0xb8>)
    c294:	1c05      	adds	r5, r0, #0
    c296:	6818      	ldr	r0, [r3, #0]
    c298:	1c0c      	adds	r4, r1, #0
    c29a:	2800      	cmp	r0, #0
    c29c:	d004      	beq.n	c2a8 <__swsetup_r+0x18>
    c29e:	6b81      	ldr	r1, [r0, #56]	; 0x38
    c2a0:	2900      	cmp	r1, #0
    c2a2:	d101      	bne.n	c2a8 <__swsetup_r+0x18>
    c2a4:	f000 ffa6 	bl	d1f4 <__sinit>
    c2a8:	89a2      	ldrh	r2, [r4, #12]
    c2aa:	b293      	uxth	r3, r2
    c2ac:	0719      	lsls	r1, r3, #28
    c2ae:	d421      	bmi.n	c2f4 <__swsetup_r+0x64>
    c2b0:	06d9      	lsls	r1, r3, #27
    c2b2:	d405      	bmi.n	c2c0 <__swsetup_r+0x30>
    c2b4:	2309      	movs	r3, #9
    c2b6:	602b      	str	r3, [r5, #0]
    c2b8:	2340      	movs	r3, #64	; 0x40
    c2ba:	431a      	orrs	r2, r3
    c2bc:	81a2      	strh	r2, [r4, #12]
    c2be:	e03f      	b.n	c340 <__swsetup_r+0xb0>
    c2c0:	075a      	lsls	r2, r3, #29
    c2c2:	d513      	bpl.n	c2ec <__swsetup_r+0x5c>
    c2c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    c2c6:	2900      	cmp	r1, #0
    c2c8:	d008      	beq.n	c2dc <__swsetup_r+0x4c>
    c2ca:	1c23      	adds	r3, r4, #0
    c2cc:	3340      	adds	r3, #64	; 0x40
    c2ce:	4299      	cmp	r1, r3
    c2d0:	d002      	beq.n	c2d8 <__swsetup_r+0x48>
    c2d2:	1c28      	adds	r0, r5, #0
    c2d4:	f001 f8be 	bl	d454 <_free_r>
    c2d8:	2300      	movs	r3, #0
    c2da:	6323      	str	r3, [r4, #48]	; 0x30
    c2dc:	89a3      	ldrh	r3, [r4, #12]
    c2de:	2224      	movs	r2, #36	; 0x24
    c2e0:	4393      	bics	r3, r2
    c2e2:	81a3      	strh	r3, [r4, #12]
    c2e4:	2300      	movs	r3, #0
    c2e6:	6063      	str	r3, [r4, #4]
    c2e8:	6923      	ldr	r3, [r4, #16]
    c2ea:	6023      	str	r3, [r4, #0]
    c2ec:	89a3      	ldrh	r3, [r4, #12]
    c2ee:	2208      	movs	r2, #8
    c2f0:	4313      	orrs	r3, r2
    c2f2:	81a3      	strh	r3, [r4, #12]
    c2f4:	6921      	ldr	r1, [r4, #16]
    c2f6:	2900      	cmp	r1, #0
    c2f8:	d10b      	bne.n	c312 <__swsetup_r+0x82>
    c2fa:	89a3      	ldrh	r3, [r4, #12]
    c2fc:	22a0      	movs	r2, #160	; 0xa0
    c2fe:	0092      	lsls	r2, r2, #2
    c300:	401a      	ands	r2, r3
    c302:	2380      	movs	r3, #128	; 0x80
    c304:	009b      	lsls	r3, r3, #2
    c306:	429a      	cmp	r2, r3
    c308:	d003      	beq.n	c312 <__swsetup_r+0x82>
    c30a:	1c28      	adds	r0, r5, #0
    c30c:	1c21      	adds	r1, r4, #0
    c30e:	f001 fb45 	bl	d99c <__smakebuf_r>
    c312:	89a3      	ldrh	r3, [r4, #12]
    c314:	2201      	movs	r2, #1
    c316:	401a      	ands	r2, r3
    c318:	d005      	beq.n	c326 <__swsetup_r+0x96>
    c31a:	6961      	ldr	r1, [r4, #20]
    c31c:	2200      	movs	r2, #0
    c31e:	60a2      	str	r2, [r4, #8]
    c320:	424a      	negs	r2, r1
    c322:	61a2      	str	r2, [r4, #24]
    c324:	e003      	b.n	c32e <__swsetup_r+0x9e>
    c326:	0799      	lsls	r1, r3, #30
    c328:	d400      	bmi.n	c32c <__swsetup_r+0x9c>
    c32a:	6962      	ldr	r2, [r4, #20]
    c32c:	60a2      	str	r2, [r4, #8]
    c32e:	6922      	ldr	r2, [r4, #16]
    c330:	2000      	movs	r0, #0
    c332:	4282      	cmp	r2, r0
    c334:	d106      	bne.n	c344 <__swsetup_r+0xb4>
    c336:	0619      	lsls	r1, r3, #24
    c338:	d504      	bpl.n	c344 <__swsetup_r+0xb4>
    c33a:	2240      	movs	r2, #64	; 0x40
    c33c:	4313      	orrs	r3, r2
    c33e:	81a3      	strh	r3, [r4, #12]
    c340:	2001      	movs	r0, #1
    c342:	4240      	negs	r0, r0
    c344:	bd38      	pop	{r3, r4, r5, pc}
    c346:	46c0      	nop			; (mov r8, r8)
    c348:	20000040 	.word	0x20000040

0000c34c <register_fini>:
    c34c:	b508      	push	{r3, lr}
    c34e:	4b03      	ldr	r3, [pc, #12]	; (c35c <register_fini+0x10>)
    c350:	2b00      	cmp	r3, #0
    c352:	d002      	beq.n	c35a <register_fini+0xe>
    c354:	4802      	ldr	r0, [pc, #8]	; (c360 <register_fini+0x14>)
    c356:	f000 f805 	bl	c364 <atexit>
    c35a:	bd08      	pop	{r3, pc}
    c35c:	00000000 	.word	0x00000000
    c360:	0000d38d 	.word	0x0000d38d

0000c364 <atexit>:
    c364:	b508      	push	{r3, lr}
    c366:	1c01      	adds	r1, r0, #0
    c368:	2000      	movs	r0, #0
    c36a:	1c02      	adds	r2, r0, #0
    c36c:	1c03      	adds	r3, r0, #0
    c36e:	f003 f871 	bl	f454 <__register_exitproc>
    c372:	bd08      	pop	{r3, pc}
    c374:	0000      	movs	r0, r0
	...

0000c378 <quorem>:
    c378:	b5f0      	push	{r4, r5, r6, r7, lr}
    c37a:	b089      	sub	sp, #36	; 0x24
    c37c:	9106      	str	r1, [sp, #24]
    c37e:	690b      	ldr	r3, [r1, #16]
    c380:	6901      	ldr	r1, [r0, #16]
    c382:	1c05      	adds	r5, r0, #0
    c384:	2600      	movs	r6, #0
    c386:	4299      	cmp	r1, r3
    c388:	db7f      	blt.n	c48a <quorem+0x112>
    c38a:	9c06      	ldr	r4, [sp, #24]
    c38c:	1e5f      	subs	r7, r3, #1
    c38e:	3414      	adds	r4, #20
    c390:	9404      	str	r4, [sp, #16]
    c392:	9904      	ldr	r1, [sp, #16]
    c394:	00bc      	lsls	r4, r7, #2
    c396:	1909      	adds	r1, r1, r4
    c398:	1c02      	adds	r2, r0, #0
    c39a:	680b      	ldr	r3, [r1, #0]
    c39c:	3214      	adds	r2, #20
    c39e:	9105      	str	r1, [sp, #20]
    c3a0:	1914      	adds	r4, r2, r4
    c3a2:	1c19      	adds	r1, r3, #0
    c3a4:	3101      	adds	r1, #1
    c3a6:	6820      	ldr	r0, [r4, #0]
    c3a8:	9203      	str	r2, [sp, #12]
    c3aa:	f7fd f9df 	bl	976c <__aeabi_uidiv>
    c3ae:	9002      	str	r0, [sp, #8]
    c3b0:	42b0      	cmp	r0, r6
    c3b2:	d038      	beq.n	c426 <quorem+0xae>
    c3b4:	9904      	ldr	r1, [sp, #16]
    c3b6:	9b03      	ldr	r3, [sp, #12]
    c3b8:	468c      	mov	ip, r1
    c3ba:	9601      	str	r6, [sp, #4]
    c3bc:	9607      	str	r6, [sp, #28]
    c3be:	4662      	mov	r2, ip
    c3c0:	3204      	adds	r2, #4
    c3c2:	4694      	mov	ip, r2
    c3c4:	3a04      	subs	r2, #4
    c3c6:	ca40      	ldmia	r2!, {r6}
    c3c8:	9902      	ldr	r1, [sp, #8]
    c3ca:	b2b0      	uxth	r0, r6
    c3cc:	4348      	muls	r0, r1
    c3ce:	0c31      	lsrs	r1, r6, #16
    c3d0:	9e02      	ldr	r6, [sp, #8]
    c3d2:	9a01      	ldr	r2, [sp, #4]
    c3d4:	4371      	muls	r1, r6
    c3d6:	1810      	adds	r0, r2, r0
    c3d8:	0c02      	lsrs	r2, r0, #16
    c3da:	1851      	adds	r1, r2, r1
    c3dc:	0c0a      	lsrs	r2, r1, #16
    c3de:	9201      	str	r2, [sp, #4]
    c3e0:	681a      	ldr	r2, [r3, #0]
    c3e2:	b280      	uxth	r0, r0
    c3e4:	b296      	uxth	r6, r2
    c3e6:	9a07      	ldr	r2, [sp, #28]
    c3e8:	b289      	uxth	r1, r1
    c3ea:	18b6      	adds	r6, r6, r2
    c3ec:	1a30      	subs	r0, r6, r0
    c3ee:	681e      	ldr	r6, [r3, #0]
    c3f0:	0c32      	lsrs	r2, r6, #16
    c3f2:	1a52      	subs	r2, r2, r1
    c3f4:	1406      	asrs	r6, r0, #16
    c3f6:	1992      	adds	r2, r2, r6
    c3f8:	1411      	asrs	r1, r2, #16
    c3fa:	b280      	uxth	r0, r0
    c3fc:	0412      	lsls	r2, r2, #16
    c3fe:	9e05      	ldr	r6, [sp, #20]
    c400:	4310      	orrs	r0, r2
    c402:	9107      	str	r1, [sp, #28]
    c404:	c301      	stmia	r3!, {r0}
    c406:	4566      	cmp	r6, ip
    c408:	d2d9      	bcs.n	c3be <quorem+0x46>
    c40a:	6821      	ldr	r1, [r4, #0]
    c40c:	2900      	cmp	r1, #0
    c40e:	d10a      	bne.n	c426 <quorem+0xae>
    c410:	9e03      	ldr	r6, [sp, #12]
    c412:	3c04      	subs	r4, #4
    c414:	42b4      	cmp	r4, r6
    c416:	d801      	bhi.n	c41c <quorem+0xa4>
    c418:	612f      	str	r7, [r5, #16]
    c41a:	e004      	b.n	c426 <quorem+0xae>
    c41c:	6821      	ldr	r1, [r4, #0]
    c41e:	2900      	cmp	r1, #0
    c420:	d1fa      	bne.n	c418 <quorem+0xa0>
    c422:	3f01      	subs	r7, #1
    c424:	e7f4      	b.n	c410 <quorem+0x98>
    c426:	1c28      	adds	r0, r5, #0
    c428:	9906      	ldr	r1, [sp, #24]
    c42a:	f001 ff79 	bl	e320 <__mcmp>
    c42e:	2800      	cmp	r0, #0
    c430:	db2a      	blt.n	c488 <quorem+0x110>
    c432:	9c02      	ldr	r4, [sp, #8]
    c434:	9a03      	ldr	r2, [sp, #12]
    c436:	3401      	adds	r4, #1
    c438:	9b04      	ldr	r3, [sp, #16]
    c43a:	9402      	str	r4, [sp, #8]
    c43c:	2400      	movs	r4, #0
    c43e:	6811      	ldr	r1, [r2, #0]
    c440:	cb40      	ldmia	r3!, {r6}
    c442:	b288      	uxth	r0, r1
    c444:	1900      	adds	r0, r0, r4
    c446:	6814      	ldr	r4, [r2, #0]
    c448:	b2b1      	uxth	r1, r6
    c44a:	1a40      	subs	r0, r0, r1
    c44c:	0c36      	lsrs	r6, r6, #16
    c44e:	0c21      	lsrs	r1, r4, #16
    c450:	1b89      	subs	r1, r1, r6
    c452:	1404      	asrs	r4, r0, #16
    c454:	1909      	adds	r1, r1, r4
    c456:	140c      	asrs	r4, r1, #16
    c458:	b280      	uxth	r0, r0
    c45a:	0409      	lsls	r1, r1, #16
    c45c:	9e05      	ldr	r6, [sp, #20]
    c45e:	4301      	orrs	r1, r0
    c460:	c202      	stmia	r2!, {r1}
    c462:	429e      	cmp	r6, r3
    c464:	d2eb      	bcs.n	c43e <quorem+0xc6>
    c466:	9c03      	ldr	r4, [sp, #12]
    c468:	00bb      	lsls	r3, r7, #2
    c46a:	18e3      	adds	r3, r4, r3
    c46c:	681e      	ldr	r6, [r3, #0]
    c46e:	2e00      	cmp	r6, #0
    c470:	d10a      	bne.n	c488 <quorem+0x110>
    c472:	9c03      	ldr	r4, [sp, #12]
    c474:	3b04      	subs	r3, #4
    c476:	42a3      	cmp	r3, r4
    c478:	d801      	bhi.n	c47e <quorem+0x106>
    c47a:	612f      	str	r7, [r5, #16]
    c47c:	e004      	b.n	c488 <quorem+0x110>
    c47e:	681e      	ldr	r6, [r3, #0]
    c480:	2e00      	cmp	r6, #0
    c482:	d1fa      	bne.n	c47a <quorem+0x102>
    c484:	3f01      	subs	r7, #1
    c486:	e7f4      	b.n	c472 <quorem+0xfa>
    c488:	9e02      	ldr	r6, [sp, #8]
    c48a:	1c30      	adds	r0, r6, #0
    c48c:	b009      	add	sp, #36	; 0x24
    c48e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c490 <_dtoa_r>:
    c490:	b5f0      	push	{r4, r5, r6, r7, lr}
    c492:	6c01      	ldr	r1, [r0, #64]	; 0x40
    c494:	b09b      	sub	sp, #108	; 0x6c
    c496:	9007      	str	r0, [sp, #28]
    c498:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    c49a:	9204      	str	r2, [sp, #16]
    c49c:	9305      	str	r3, [sp, #20]
    c49e:	2900      	cmp	r1, #0
    c4a0:	d009      	beq.n	c4b6 <_dtoa_r+0x26>
    c4a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c4a4:	2201      	movs	r2, #1
    c4a6:	409a      	lsls	r2, r3
    c4a8:	604b      	str	r3, [r1, #4]
    c4aa:	608a      	str	r2, [r1, #8]
    c4ac:	f001 fd3c 	bl	df28 <_Bfree>
    c4b0:	9c07      	ldr	r4, [sp, #28]
    c4b2:	2300      	movs	r3, #0
    c4b4:	6423      	str	r3, [r4, #64]	; 0x40
    c4b6:	9805      	ldr	r0, [sp, #20]
    c4b8:	2800      	cmp	r0, #0
    c4ba:	da05      	bge.n	c4c8 <_dtoa_r+0x38>
    c4bc:	2301      	movs	r3, #1
    c4be:	602b      	str	r3, [r5, #0]
    c4c0:	0043      	lsls	r3, r0, #1
    c4c2:	085b      	lsrs	r3, r3, #1
    c4c4:	9305      	str	r3, [sp, #20]
    c4c6:	e001      	b.n	c4cc <_dtoa_r+0x3c>
    c4c8:	2300      	movs	r3, #0
    c4ca:	602b      	str	r3, [r5, #0]
    c4cc:	9e05      	ldr	r6, [sp, #20]
    c4ce:	4bbe      	ldr	r3, [pc, #760]	; (c7c8 <_dtoa_r+0x338>)
    c4d0:	1c32      	adds	r2, r6, #0
    c4d2:	401a      	ands	r2, r3
    c4d4:	429a      	cmp	r2, r3
    c4d6:	d118      	bne.n	c50a <_dtoa_r+0x7a>
    c4d8:	4bbc      	ldr	r3, [pc, #752]	; (c7cc <_dtoa_r+0x33c>)
    c4da:	9c22      	ldr	r4, [sp, #136]	; 0x88
    c4dc:	9d04      	ldr	r5, [sp, #16]
    c4de:	6023      	str	r3, [r4, #0]
    c4e0:	2d00      	cmp	r5, #0
    c4e2:	d101      	bne.n	c4e8 <_dtoa_r+0x58>
    c4e4:	0336      	lsls	r6, r6, #12
    c4e6:	d001      	beq.n	c4ec <_dtoa_r+0x5c>
    c4e8:	48b9      	ldr	r0, [pc, #740]	; (c7d0 <_dtoa_r+0x340>)
    c4ea:	e000      	b.n	c4ee <_dtoa_r+0x5e>
    c4ec:	48b9      	ldr	r0, [pc, #740]	; (c7d4 <_dtoa_r+0x344>)
    c4ee:	9c24      	ldr	r4, [sp, #144]	; 0x90
    c4f0:	2c00      	cmp	r4, #0
    c4f2:	d101      	bne.n	c4f8 <_dtoa_r+0x68>
    c4f4:	f000 fd92 	bl	d01c <_dtoa_r+0xb8c>
    c4f8:	78c2      	ldrb	r2, [r0, #3]
    c4fa:	1cc3      	adds	r3, r0, #3
    c4fc:	2a00      	cmp	r2, #0
    c4fe:	d000      	beq.n	c502 <_dtoa_r+0x72>
    c500:	3305      	adds	r3, #5
    c502:	9d24      	ldr	r5, [sp, #144]	; 0x90
    c504:	602b      	str	r3, [r5, #0]
    c506:	f000 fd89 	bl	d01c <_dtoa_r+0xb8c>
    c50a:	9c04      	ldr	r4, [sp, #16]
    c50c:	9d05      	ldr	r5, [sp, #20]
    c50e:	4ba5      	ldr	r3, [pc, #660]	; (c7a4 <_dtoa_r+0x314>)
    c510:	4aa3      	ldr	r2, [pc, #652]	; (c7a0 <_dtoa_r+0x310>)
    c512:	1c20      	adds	r0, r4, #0
    c514:	1c29      	adds	r1, r5, #0
    c516:	f7fe f85b 	bl	a5d0 <__aeabi_dcmpeq>
    c51a:	1e07      	subs	r7, r0, #0
    c51c:	d00c      	beq.n	c538 <_dtoa_r+0xa8>
    c51e:	9c22      	ldr	r4, [sp, #136]	; 0x88
    c520:	9d24      	ldr	r5, [sp, #144]	; 0x90
    c522:	2301      	movs	r3, #1
    c524:	6023      	str	r3, [r4, #0]
    c526:	2d00      	cmp	r5, #0
    c528:	d101      	bne.n	c52e <_dtoa_r+0x9e>
    c52a:	f000 fd74 	bl	d016 <_dtoa_r+0xb86>
    c52e:	48aa      	ldr	r0, [pc, #680]	; (c7d8 <_dtoa_r+0x348>)
    c530:	6028      	str	r0, [r5, #0]
    c532:	3801      	subs	r0, #1
    c534:	f000 fd72 	bl	d01c <_dtoa_r+0xb8c>
    c538:	ab19      	add	r3, sp, #100	; 0x64
    c53a:	9300      	str	r3, [sp, #0]
    c53c:	ab18      	add	r3, sp, #96	; 0x60
    c53e:	9301      	str	r3, [sp, #4]
    c540:	9807      	ldr	r0, [sp, #28]
    c542:	1c2b      	adds	r3, r5, #0
    c544:	1c22      	adds	r2, r4, #0
    c546:	f001 ffdf 	bl	e508 <__d2b>
    c54a:	0073      	lsls	r3, r6, #1
    c54c:	900a      	str	r0, [sp, #40]	; 0x28
    c54e:	0d5b      	lsrs	r3, r3, #21
    c550:	d009      	beq.n	c566 <_dtoa_r+0xd6>
    c552:	1c20      	adds	r0, r4, #0
    c554:	4ca1      	ldr	r4, [pc, #644]	; (c7dc <_dtoa_r+0x34c>)
    c556:	032a      	lsls	r2, r5, #12
    c558:	0b12      	lsrs	r2, r2, #12
    c55a:	1c21      	adds	r1, r4, #0
    c55c:	4311      	orrs	r1, r2
    c55e:	4aa0      	ldr	r2, [pc, #640]	; (c7e0 <_dtoa_r+0x350>)
    c560:	9716      	str	r7, [sp, #88]	; 0x58
    c562:	189e      	adds	r6, r3, r2
    c564:	e01b      	b.n	c59e <_dtoa_r+0x10e>
    c566:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c568:	9c19      	ldr	r4, [sp, #100]	; 0x64
    c56a:	191d      	adds	r5, r3, r4
    c56c:	4b9d      	ldr	r3, [pc, #628]	; (c7e4 <_dtoa_r+0x354>)
    c56e:	429d      	cmp	r5, r3
    c570:	db09      	blt.n	c586 <_dtoa_r+0xf6>
    c572:	499d      	ldr	r1, [pc, #628]	; (c7e8 <_dtoa_r+0x358>)
    c574:	9a04      	ldr	r2, [sp, #16]
    c576:	4b9d      	ldr	r3, [pc, #628]	; (c7ec <_dtoa_r+0x35c>)
    c578:	1868      	adds	r0, r5, r1
    c57a:	40c2      	lsrs	r2, r0
    c57c:	1b5b      	subs	r3, r3, r5
    c57e:	1c10      	adds	r0, r2, #0
    c580:	409e      	lsls	r6, r3
    c582:	4330      	orrs	r0, r6
    c584:	e004      	b.n	c590 <_dtoa_r+0x100>
    c586:	489a      	ldr	r0, [pc, #616]	; (c7f0 <_dtoa_r+0x360>)
    c588:	9b04      	ldr	r3, [sp, #16]
    c58a:	1b40      	subs	r0, r0, r5
    c58c:	4083      	lsls	r3, r0
    c58e:	1c18      	adds	r0, r3, #0
    c590:	f004 f862 	bl	10658 <__aeabi_ui2d>
    c594:	4c97      	ldr	r4, [pc, #604]	; (c7f4 <_dtoa_r+0x364>)
    c596:	1e6e      	subs	r6, r5, #1
    c598:	2501      	movs	r5, #1
    c59a:	1909      	adds	r1, r1, r4
    c59c:	9516      	str	r5, [sp, #88]	; 0x58
    c59e:	4a82      	ldr	r2, [pc, #520]	; (c7a8 <_dtoa_r+0x318>)
    c5a0:	4b82      	ldr	r3, [pc, #520]	; (c7ac <_dtoa_r+0x31c>)
    c5a2:	f7fd fc5d 	bl	9e60 <__aeabi_dsub>
    c5a6:	4a82      	ldr	r2, [pc, #520]	; (c7b0 <_dtoa_r+0x320>)
    c5a8:	4b82      	ldr	r3, [pc, #520]	; (c7b4 <_dtoa_r+0x324>)
    c5aa:	f7fd f9c7 	bl	993c <__aeabi_dmul>
    c5ae:	4a82      	ldr	r2, [pc, #520]	; (c7b8 <_dtoa_r+0x328>)
    c5b0:	4b82      	ldr	r3, [pc, #520]	; (c7bc <_dtoa_r+0x32c>)
    c5b2:	f003 fa05 	bl	f9c0 <__aeabi_dadd>
    c5b6:	1c04      	adds	r4, r0, #0
    c5b8:	1c30      	adds	r0, r6, #0
    c5ba:	1c0d      	adds	r5, r1, #0
    c5bc:	f7fd ffba 	bl	a534 <__aeabi_i2d>
    c5c0:	4a7f      	ldr	r2, [pc, #508]	; (c7c0 <_dtoa_r+0x330>)
    c5c2:	4b80      	ldr	r3, [pc, #512]	; (c7c4 <_dtoa_r+0x334>)
    c5c4:	f7fd f9ba 	bl	993c <__aeabi_dmul>
    c5c8:	1c02      	adds	r2, r0, #0
    c5ca:	1c0b      	adds	r3, r1, #0
    c5cc:	1c20      	adds	r0, r4, #0
    c5ce:	1c29      	adds	r1, r5, #0
    c5d0:	f003 f9f6 	bl	f9c0 <__aeabi_dadd>
    c5d4:	1c04      	adds	r4, r0, #0
    c5d6:	1c0d      	adds	r5, r1, #0
    c5d8:	f7fd ff78 	bl	a4cc <__aeabi_d2iz>
    c5dc:	4b71      	ldr	r3, [pc, #452]	; (c7a4 <_dtoa_r+0x314>)
    c5de:	4a70      	ldr	r2, [pc, #448]	; (c7a0 <_dtoa_r+0x310>)
    c5e0:	9006      	str	r0, [sp, #24]
    c5e2:	1c29      	adds	r1, r5, #0
    c5e4:	1c20      	adds	r0, r4, #0
    c5e6:	f7fd fff9 	bl	a5dc <__aeabi_dcmplt>
    c5ea:	2800      	cmp	r0, #0
    c5ec:	d00d      	beq.n	c60a <_dtoa_r+0x17a>
    c5ee:	9806      	ldr	r0, [sp, #24]
    c5f0:	f7fd ffa0 	bl	a534 <__aeabi_i2d>
    c5f4:	1c0b      	adds	r3, r1, #0
    c5f6:	1c02      	adds	r2, r0, #0
    c5f8:	1c29      	adds	r1, r5, #0
    c5fa:	1c20      	adds	r0, r4, #0
    c5fc:	f7fd ffe8 	bl	a5d0 <__aeabi_dcmpeq>
    c600:	9c06      	ldr	r4, [sp, #24]
    c602:	4243      	negs	r3, r0
    c604:	4143      	adcs	r3, r0
    c606:	1ae4      	subs	r4, r4, r3
    c608:	9406      	str	r4, [sp, #24]
    c60a:	9c06      	ldr	r4, [sp, #24]
    c60c:	2501      	movs	r5, #1
    c60e:	9513      	str	r5, [sp, #76]	; 0x4c
    c610:	2c16      	cmp	r4, #22
    c612:	d810      	bhi.n	c636 <_dtoa_r+0x1a6>
    c614:	4a78      	ldr	r2, [pc, #480]	; (c7f8 <_dtoa_r+0x368>)
    c616:	00e3      	lsls	r3, r4, #3
    c618:	18d3      	adds	r3, r2, r3
    c61a:	6818      	ldr	r0, [r3, #0]
    c61c:	6859      	ldr	r1, [r3, #4]
    c61e:	9a04      	ldr	r2, [sp, #16]
    c620:	9b05      	ldr	r3, [sp, #20]
    c622:	f7fd ffef 	bl	a604 <__aeabi_dcmpgt>
    c626:	2800      	cmp	r0, #0
    c628:	d004      	beq.n	c634 <_dtoa_r+0x1a4>
    c62a:	3c01      	subs	r4, #1
    c62c:	2500      	movs	r5, #0
    c62e:	9406      	str	r4, [sp, #24]
    c630:	9513      	str	r5, [sp, #76]	; 0x4c
    c632:	e000      	b.n	c636 <_dtoa_r+0x1a6>
    c634:	9013      	str	r0, [sp, #76]	; 0x4c
    c636:	9818      	ldr	r0, [sp, #96]	; 0x60
    c638:	2400      	movs	r4, #0
    c63a:	1b86      	subs	r6, r0, r6
    c63c:	1c35      	adds	r5, r6, #0
    c63e:	9402      	str	r4, [sp, #8]
    c640:	3d01      	subs	r5, #1
    c642:	9509      	str	r5, [sp, #36]	; 0x24
    c644:	d504      	bpl.n	c650 <_dtoa_r+0x1c0>
    c646:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c648:	2500      	movs	r5, #0
    c64a:	4264      	negs	r4, r4
    c64c:	9402      	str	r4, [sp, #8]
    c64e:	9509      	str	r5, [sp, #36]	; 0x24
    c650:	9c06      	ldr	r4, [sp, #24]
    c652:	2c00      	cmp	r4, #0
    c654:	db06      	blt.n	c664 <_dtoa_r+0x1d4>
    c656:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c658:	9412      	str	r4, [sp, #72]	; 0x48
    c65a:	192d      	adds	r5, r5, r4
    c65c:	2400      	movs	r4, #0
    c65e:	9509      	str	r5, [sp, #36]	; 0x24
    c660:	940d      	str	r4, [sp, #52]	; 0x34
    c662:	e007      	b.n	c674 <_dtoa_r+0x1e4>
    c664:	9c06      	ldr	r4, [sp, #24]
    c666:	9d02      	ldr	r5, [sp, #8]
    c668:	1b2d      	subs	r5, r5, r4
    c66a:	9502      	str	r5, [sp, #8]
    c66c:	4265      	negs	r5, r4
    c66e:	2400      	movs	r4, #0
    c670:	950d      	str	r5, [sp, #52]	; 0x34
    c672:	9412      	str	r4, [sp, #72]	; 0x48
    c674:	9d20      	ldr	r5, [sp, #128]	; 0x80
    c676:	2401      	movs	r4, #1
    c678:	2d09      	cmp	r5, #9
    c67a:	d824      	bhi.n	c6c6 <_dtoa_r+0x236>
    c67c:	2d05      	cmp	r5, #5
    c67e:	dd02      	ble.n	c686 <_dtoa_r+0x1f6>
    c680:	3d04      	subs	r5, #4
    c682:	9520      	str	r5, [sp, #128]	; 0x80
    c684:	2400      	movs	r4, #0
    c686:	9820      	ldr	r0, [sp, #128]	; 0x80
    c688:	3802      	subs	r0, #2
    c68a:	2803      	cmp	r0, #3
    c68c:	d823      	bhi.n	c6d6 <_dtoa_r+0x246>
    c68e:	f003 f923 	bl	f8d8 <__gnu_thumb1_case_uqi>
    c692:	0e06      	.short	0x0e06
    c694:	0402      	.short	0x0402
    c696:	2501      	movs	r5, #1
    c698:	e002      	b.n	c6a0 <_dtoa_r+0x210>
    c69a:	2501      	movs	r5, #1
    c69c:	e008      	b.n	c6b0 <_dtoa_r+0x220>
    c69e:	2500      	movs	r5, #0
    c6a0:	9510      	str	r5, [sp, #64]	; 0x40
    c6a2:	9d21      	ldr	r5, [sp, #132]	; 0x84
    c6a4:	2d00      	cmp	r5, #0
    c6a6:	dd1f      	ble.n	c6e8 <_dtoa_r+0x258>
    c6a8:	950c      	str	r5, [sp, #48]	; 0x30
    c6aa:	9508      	str	r5, [sp, #32]
    c6ac:	e009      	b.n	c6c2 <_dtoa_r+0x232>
    c6ae:	2500      	movs	r5, #0
    c6b0:	9510      	str	r5, [sp, #64]	; 0x40
    c6b2:	9806      	ldr	r0, [sp, #24]
    c6b4:	9d21      	ldr	r5, [sp, #132]	; 0x84
    c6b6:	182d      	adds	r5, r5, r0
    c6b8:	950c      	str	r5, [sp, #48]	; 0x30
    c6ba:	3501      	adds	r5, #1
    c6bc:	9508      	str	r5, [sp, #32]
    c6be:	2d00      	cmp	r5, #0
    c6c0:	dd18      	ble.n	c6f4 <_dtoa_r+0x264>
    c6c2:	1c2b      	adds	r3, r5, #0
    c6c4:	e017      	b.n	c6f6 <_dtoa_r+0x266>
    c6c6:	4263      	negs	r3, r4
    c6c8:	2500      	movs	r5, #0
    c6ca:	930c      	str	r3, [sp, #48]	; 0x30
    c6cc:	9308      	str	r3, [sp, #32]
    c6ce:	9520      	str	r5, [sp, #128]	; 0x80
    c6d0:	9410      	str	r4, [sp, #64]	; 0x40
    c6d2:	2312      	movs	r3, #18
    c6d4:	e006      	b.n	c6e4 <_dtoa_r+0x254>
    c6d6:	2501      	movs	r5, #1
    c6d8:	426b      	negs	r3, r5
    c6da:	9510      	str	r5, [sp, #64]	; 0x40
    c6dc:	930c      	str	r3, [sp, #48]	; 0x30
    c6de:	9308      	str	r3, [sp, #32]
    c6e0:	2500      	movs	r5, #0
    c6e2:	2312      	movs	r3, #18
    c6e4:	9521      	str	r5, [sp, #132]	; 0x84
    c6e6:	e006      	b.n	c6f6 <_dtoa_r+0x266>
    c6e8:	2501      	movs	r5, #1
    c6ea:	950c      	str	r5, [sp, #48]	; 0x30
    c6ec:	9508      	str	r5, [sp, #32]
    c6ee:	1c2b      	adds	r3, r5, #0
    c6f0:	9521      	str	r5, [sp, #132]	; 0x84
    c6f2:	e000      	b.n	c6f6 <_dtoa_r+0x266>
    c6f4:	2301      	movs	r3, #1
    c6f6:	9d07      	ldr	r5, [sp, #28]
    c6f8:	2200      	movs	r2, #0
    c6fa:	646a      	str	r2, [r5, #68]	; 0x44
    c6fc:	2204      	movs	r2, #4
    c6fe:	9d07      	ldr	r5, [sp, #28]
    c700:	1c10      	adds	r0, r2, #0
    c702:	3014      	adds	r0, #20
    c704:	6c69      	ldr	r1, [r5, #68]	; 0x44
    c706:	4298      	cmp	r0, r3
    c708:	d804      	bhi.n	c714 <_dtoa_r+0x284>
    c70a:	9d07      	ldr	r5, [sp, #28]
    c70c:	3101      	adds	r1, #1
    c70e:	6469      	str	r1, [r5, #68]	; 0x44
    c710:	0052      	lsls	r2, r2, #1
    c712:	e7f4      	b.n	c6fe <_dtoa_r+0x26e>
    c714:	1c28      	adds	r0, r5, #0
    c716:	f001 fbdf 	bl	ded8 <_Balloc>
    c71a:	6428      	str	r0, [r5, #64]	; 0x40
    c71c:	9d08      	ldr	r5, [sp, #32]
    c71e:	900b      	str	r0, [sp, #44]	; 0x2c
    c720:	2d0e      	cmp	r5, #14
    c722:	d900      	bls.n	c726 <_dtoa_r+0x296>
    c724:	e188      	b.n	ca38 <_dtoa_r+0x5a8>
    c726:	2c00      	cmp	r4, #0
    c728:	d100      	bne.n	c72c <_dtoa_r+0x29c>
    c72a:	e185      	b.n	ca38 <_dtoa_r+0x5a8>
    c72c:	9c04      	ldr	r4, [sp, #16]
    c72e:	9d05      	ldr	r5, [sp, #20]
    c730:	9414      	str	r4, [sp, #80]	; 0x50
    c732:	9515      	str	r5, [sp, #84]	; 0x54
    c734:	9d06      	ldr	r5, [sp, #24]
    c736:	2d00      	cmp	r5, #0
    c738:	dd62      	ble.n	c800 <_dtoa_r+0x370>
    c73a:	1c2a      	adds	r2, r5, #0
    c73c:	230f      	movs	r3, #15
    c73e:	401a      	ands	r2, r3
    c740:	492d      	ldr	r1, [pc, #180]	; (c7f8 <_dtoa_r+0x368>)
    c742:	00d2      	lsls	r2, r2, #3
    c744:	188a      	adds	r2, r1, r2
    c746:	6814      	ldr	r4, [r2, #0]
    c748:	6855      	ldr	r5, [r2, #4]
    c74a:	940e      	str	r4, [sp, #56]	; 0x38
    c74c:	950f      	str	r5, [sp, #60]	; 0x3c
    c74e:	9d06      	ldr	r5, [sp, #24]
    c750:	4c2a      	ldr	r4, [pc, #168]	; (c7fc <_dtoa_r+0x36c>)
    c752:	112f      	asrs	r7, r5, #4
    c754:	2502      	movs	r5, #2
    c756:	06f8      	lsls	r0, r7, #27
    c758:	d517      	bpl.n	c78a <_dtoa_r+0x2fa>
    c75a:	401f      	ands	r7, r3
    c75c:	9814      	ldr	r0, [sp, #80]	; 0x50
    c75e:	9915      	ldr	r1, [sp, #84]	; 0x54
    c760:	6a22      	ldr	r2, [r4, #32]
    c762:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c764:	f003 fc50 	bl	10008 <__aeabi_ddiv>
    c768:	2503      	movs	r5, #3
    c76a:	9004      	str	r0, [sp, #16]
    c76c:	9105      	str	r1, [sp, #20]
    c76e:	e00c      	b.n	c78a <_dtoa_r+0x2fa>
    c770:	07f9      	lsls	r1, r7, #31
    c772:	d508      	bpl.n	c786 <_dtoa_r+0x2f6>
    c774:	980e      	ldr	r0, [sp, #56]	; 0x38
    c776:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c778:	6822      	ldr	r2, [r4, #0]
    c77a:	6863      	ldr	r3, [r4, #4]
    c77c:	f7fd f8de 	bl	993c <__aeabi_dmul>
    c780:	900e      	str	r0, [sp, #56]	; 0x38
    c782:	910f      	str	r1, [sp, #60]	; 0x3c
    c784:	3501      	adds	r5, #1
    c786:	107f      	asrs	r7, r7, #1
    c788:	3408      	adds	r4, #8
    c78a:	2f00      	cmp	r7, #0
    c78c:	d1f0      	bne.n	c770 <_dtoa_r+0x2e0>
    c78e:	9804      	ldr	r0, [sp, #16]
    c790:	9905      	ldr	r1, [sp, #20]
    c792:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c796:	f003 fc37 	bl	10008 <__aeabi_ddiv>
    c79a:	e04f      	b.n	c83c <_dtoa_r+0x3ac>
    c79c:	46c0      	nop			; (mov r8, r8)
    c79e:	46c0      	nop			; (mov r8, r8)
	...
    c7ac:	3ff80000 	.word	0x3ff80000
    c7b0:	636f4361 	.word	0x636f4361
    c7b4:	3fd287a7 	.word	0x3fd287a7
    c7b8:	8b60c8b3 	.word	0x8b60c8b3
    c7bc:	3fc68a28 	.word	0x3fc68a28
    c7c0:	509f79fb 	.word	0x509f79fb
    c7c4:	3fd34413 	.word	0x3fd34413
    c7c8:	7ff00000 	.word	0x7ff00000
    c7cc:	0000270f 	.word	0x0000270f
    c7d0:	00010ae1 	.word	0x00010ae1
    c7d4:	00010ad8 	.word	0x00010ad8
    c7d8:	00010ad7 	.word	0x00010ad7
    c7dc:	3ff00000 	.word	0x3ff00000
    c7e0:	fffffc01 	.word	0xfffffc01
    c7e4:	fffffbef 	.word	0xfffffbef
    c7e8:	00000412 	.word	0x00000412
    c7ec:	fffffc0e 	.word	0xfffffc0e
    c7f0:	fffffbee 	.word	0xfffffbee
    c7f4:	fe100000 	.word	0xfe100000
    c7f8:	00010b00 	.word	0x00010b00
    c7fc:	00010bf0 	.word	0x00010bf0
    c800:	9c06      	ldr	r4, [sp, #24]
    c802:	2502      	movs	r5, #2
    c804:	4267      	negs	r7, r4
    c806:	2f00      	cmp	r7, #0
    c808:	d01a      	beq.n	c840 <_dtoa_r+0x3b0>
    c80a:	230f      	movs	r3, #15
    c80c:	403b      	ands	r3, r7
    c80e:	4acc      	ldr	r2, [pc, #816]	; (cb40 <_dtoa_r+0x6b0>)
    c810:	00db      	lsls	r3, r3, #3
    c812:	18d3      	adds	r3, r2, r3
    c814:	9814      	ldr	r0, [sp, #80]	; 0x50
    c816:	9915      	ldr	r1, [sp, #84]	; 0x54
    c818:	681a      	ldr	r2, [r3, #0]
    c81a:	685b      	ldr	r3, [r3, #4]
    c81c:	f7fd f88e 	bl	993c <__aeabi_dmul>
    c820:	4ec8      	ldr	r6, [pc, #800]	; (cb44 <_dtoa_r+0x6b4>)
    c822:	113f      	asrs	r7, r7, #4
    c824:	2f00      	cmp	r7, #0
    c826:	d009      	beq.n	c83c <_dtoa_r+0x3ac>
    c828:	07fa      	lsls	r2, r7, #31
    c82a:	d504      	bpl.n	c836 <_dtoa_r+0x3a6>
    c82c:	6832      	ldr	r2, [r6, #0]
    c82e:	6873      	ldr	r3, [r6, #4]
    c830:	3501      	adds	r5, #1
    c832:	f7fd f883 	bl	993c <__aeabi_dmul>
    c836:	107f      	asrs	r7, r7, #1
    c838:	3608      	adds	r6, #8
    c83a:	e7f3      	b.n	c824 <_dtoa_r+0x394>
    c83c:	9004      	str	r0, [sp, #16]
    c83e:	9105      	str	r1, [sp, #20]
    c840:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    c842:	2c00      	cmp	r4, #0
    c844:	d01e      	beq.n	c884 <_dtoa_r+0x3f4>
    c846:	9e04      	ldr	r6, [sp, #16]
    c848:	9f05      	ldr	r7, [sp, #20]
    c84a:	4bb4      	ldr	r3, [pc, #720]	; (cb1c <_dtoa_r+0x68c>)
    c84c:	4ab2      	ldr	r2, [pc, #712]	; (cb18 <_dtoa_r+0x688>)
    c84e:	1c30      	adds	r0, r6, #0
    c850:	1c39      	adds	r1, r7, #0
    c852:	f7fd fec3 	bl	a5dc <__aeabi_dcmplt>
    c856:	2800      	cmp	r0, #0
    c858:	d014      	beq.n	c884 <_dtoa_r+0x3f4>
    c85a:	9c08      	ldr	r4, [sp, #32]
    c85c:	2c00      	cmp	r4, #0
    c85e:	d011      	beq.n	c884 <_dtoa_r+0x3f4>
    c860:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    c862:	2c00      	cmp	r4, #0
    c864:	dc00      	bgt.n	c868 <_dtoa_r+0x3d8>
    c866:	e0e3      	b.n	ca30 <_dtoa_r+0x5a0>
    c868:	9c06      	ldr	r4, [sp, #24]
    c86a:	1c30      	adds	r0, r6, #0
    c86c:	3c01      	subs	r4, #1
    c86e:	1c39      	adds	r1, r7, #0
    c870:	4aab      	ldr	r2, [pc, #684]	; (cb20 <_dtoa_r+0x690>)
    c872:	4bac      	ldr	r3, [pc, #688]	; (cb24 <_dtoa_r+0x694>)
    c874:	9411      	str	r4, [sp, #68]	; 0x44
    c876:	f7fd f861 	bl	993c <__aeabi_dmul>
    c87a:	3501      	adds	r5, #1
    c87c:	9004      	str	r0, [sp, #16]
    c87e:	9105      	str	r1, [sp, #20]
    c880:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    c882:	e002      	b.n	c88a <_dtoa_r+0x3fa>
    c884:	9c06      	ldr	r4, [sp, #24]
    c886:	9411      	str	r4, [sp, #68]	; 0x44
    c888:	9c08      	ldr	r4, [sp, #32]
    c88a:	1c28      	adds	r0, r5, #0
    c88c:	9e04      	ldr	r6, [sp, #16]
    c88e:	9f05      	ldr	r7, [sp, #20]
    c890:	940e      	str	r4, [sp, #56]	; 0x38
    c892:	f7fd fe4f 	bl	a534 <__aeabi_i2d>
    c896:	1c32      	adds	r2, r6, #0
    c898:	1c3b      	adds	r3, r7, #0
    c89a:	f7fd f84f 	bl	993c <__aeabi_dmul>
    c89e:	4aa2      	ldr	r2, [pc, #648]	; (cb28 <_dtoa_r+0x698>)
    c8a0:	4ba2      	ldr	r3, [pc, #648]	; (cb2c <_dtoa_r+0x69c>)
    c8a2:	f003 f88d 	bl	f9c0 <__aeabi_dadd>
    c8a6:	1c04      	adds	r4, r0, #0
    c8a8:	48a7      	ldr	r0, [pc, #668]	; (cb48 <_dtoa_r+0x6b8>)
    c8aa:	1808      	adds	r0, r1, r0
    c8ac:	990e      	ldr	r1, [sp, #56]	; 0x38
    c8ae:	9004      	str	r0, [sp, #16]
    c8b0:	1c05      	adds	r5, r0, #0
    c8b2:	2900      	cmp	r1, #0
    c8b4:	d11b      	bne.n	c8ee <_dtoa_r+0x45e>
    c8b6:	4a9e      	ldr	r2, [pc, #632]	; (cb30 <_dtoa_r+0x6a0>)
    c8b8:	4b9e      	ldr	r3, [pc, #632]	; (cb34 <_dtoa_r+0x6a4>)
    c8ba:	1c30      	adds	r0, r6, #0
    c8bc:	1c39      	adds	r1, r7, #0
    c8be:	f7fd facf 	bl	9e60 <__aeabi_dsub>
    c8c2:	1c22      	adds	r2, r4, #0
    c8c4:	9b04      	ldr	r3, [sp, #16]
    c8c6:	1c06      	adds	r6, r0, #0
    c8c8:	1c0f      	adds	r7, r1, #0
    c8ca:	f7fd fe9b 	bl	a604 <__aeabi_dcmpgt>
    c8ce:	2800      	cmp	r0, #0
    c8d0:	d000      	beq.n	c8d4 <_dtoa_r+0x444>
    c8d2:	e25c      	b.n	cd8e <_dtoa_r+0x8fe>
    c8d4:	1c22      	adds	r2, r4, #0
    c8d6:	2580      	movs	r5, #128	; 0x80
    c8d8:	9c04      	ldr	r4, [sp, #16]
    c8da:	062d      	lsls	r5, r5, #24
    c8dc:	1c30      	adds	r0, r6, #0
    c8de:	1c39      	adds	r1, r7, #0
    c8e0:	1963      	adds	r3, r4, r5
    c8e2:	f7fd fe7b 	bl	a5dc <__aeabi_dcmplt>
    c8e6:	2800      	cmp	r0, #0
    c8e8:	d000      	beq.n	c8ec <_dtoa_r+0x45c>
    c8ea:	e247      	b.n	cd7c <_dtoa_r+0x8ec>
    c8ec:	e0a0      	b.n	ca30 <_dtoa_r+0x5a0>
    c8ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c8f0:	4b93      	ldr	r3, [pc, #588]	; (cb40 <_dtoa_r+0x6b0>)
    c8f2:	3a01      	subs	r2, #1
    c8f4:	9810      	ldr	r0, [sp, #64]	; 0x40
    c8f6:	00d2      	lsls	r2, r2, #3
    c8f8:	189b      	adds	r3, r3, r2
    c8fa:	2800      	cmp	r0, #0
    c8fc:	d049      	beq.n	c992 <_dtoa_r+0x502>
    c8fe:	681a      	ldr	r2, [r3, #0]
    c900:	685b      	ldr	r3, [r3, #4]
    c902:	488d      	ldr	r0, [pc, #564]	; (cb38 <_dtoa_r+0x6a8>)
    c904:	498d      	ldr	r1, [pc, #564]	; (cb3c <_dtoa_r+0x6ac>)
    c906:	f003 fb7f 	bl	10008 <__aeabi_ddiv>
    c90a:	1c2b      	adds	r3, r5, #0
    c90c:	1c22      	adds	r2, r4, #0
    c90e:	f7fd faa7 	bl	9e60 <__aeabi_dsub>
    c912:	9004      	str	r0, [sp, #16]
    c914:	9105      	str	r1, [sp, #20]
    c916:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c918:	1c39      	adds	r1, r7, #0
    c91a:	1c30      	adds	r0, r6, #0
    c91c:	f7fd fdd6 	bl	a4cc <__aeabi_d2iz>
    c920:	1c04      	adds	r4, r0, #0
    c922:	f7fd fe07 	bl	a534 <__aeabi_i2d>
    c926:	1c02      	adds	r2, r0, #0
    c928:	1c0b      	adds	r3, r1, #0
    c92a:	1c30      	adds	r0, r6, #0
    c92c:	1c39      	adds	r1, r7, #0
    c92e:	f7fd fa97 	bl	9e60 <__aeabi_dsub>
    c932:	3501      	adds	r5, #1
    c934:	1e6b      	subs	r3, r5, #1
    c936:	3430      	adds	r4, #48	; 0x30
    c938:	701c      	strb	r4, [r3, #0]
    c93a:	9a04      	ldr	r2, [sp, #16]
    c93c:	9b05      	ldr	r3, [sp, #20]
    c93e:	1c06      	adds	r6, r0, #0
    c940:	1c0f      	adds	r7, r1, #0
    c942:	f7fd fe4b 	bl	a5dc <__aeabi_dcmplt>
    c946:	2800      	cmp	r0, #0
    c948:	d000      	beq.n	c94c <_dtoa_r+0x4bc>
    c94a:	e353      	b.n	cff4 <_dtoa_r+0xb64>
    c94c:	1c32      	adds	r2, r6, #0
    c94e:	1c3b      	adds	r3, r7, #0
    c950:	4972      	ldr	r1, [pc, #456]	; (cb1c <_dtoa_r+0x68c>)
    c952:	4871      	ldr	r0, [pc, #452]	; (cb18 <_dtoa_r+0x688>)
    c954:	f7fd fa84 	bl	9e60 <__aeabi_dsub>
    c958:	9a04      	ldr	r2, [sp, #16]
    c95a:	9b05      	ldr	r3, [sp, #20]
    c95c:	f7fd fe3e 	bl	a5dc <__aeabi_dcmplt>
    c960:	2800      	cmp	r0, #0
    c962:	d000      	beq.n	c966 <_dtoa_r+0x4d6>
    c964:	e0cb      	b.n	cafe <_dtoa_r+0x66e>
    c966:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    c968:	1b2b      	subs	r3, r5, r4
    c96a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    c96c:	42a3      	cmp	r3, r4
    c96e:	da5f      	bge.n	ca30 <_dtoa_r+0x5a0>
    c970:	9804      	ldr	r0, [sp, #16]
    c972:	9905      	ldr	r1, [sp, #20]
    c974:	4a6a      	ldr	r2, [pc, #424]	; (cb20 <_dtoa_r+0x690>)
    c976:	4b6b      	ldr	r3, [pc, #428]	; (cb24 <_dtoa_r+0x694>)
    c978:	f7fc ffe0 	bl	993c <__aeabi_dmul>
    c97c:	4a68      	ldr	r2, [pc, #416]	; (cb20 <_dtoa_r+0x690>)
    c97e:	4b69      	ldr	r3, [pc, #420]	; (cb24 <_dtoa_r+0x694>)
    c980:	9004      	str	r0, [sp, #16]
    c982:	9105      	str	r1, [sp, #20]
    c984:	1c30      	adds	r0, r6, #0
    c986:	1c39      	adds	r1, r7, #0
    c988:	f7fc ffd8 	bl	993c <__aeabi_dmul>
    c98c:	1c06      	adds	r6, r0, #0
    c98e:	1c0f      	adds	r7, r1, #0
    c990:	e7c2      	b.n	c918 <_dtoa_r+0x488>
    c992:	6818      	ldr	r0, [r3, #0]
    c994:	6859      	ldr	r1, [r3, #4]
    c996:	1c22      	adds	r2, r4, #0
    c998:	1c2b      	adds	r3, r5, #0
    c99a:	f7fc ffcf 	bl	993c <__aeabi_dmul>
    c99e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    c9a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    c9a2:	9004      	str	r0, [sp, #16]
    c9a4:	9105      	str	r1, [sp, #20]
    c9a6:	1965      	adds	r5, r4, r5
    c9a8:	9517      	str	r5, [sp, #92]	; 0x5c
    c9aa:	1c39      	adds	r1, r7, #0
    c9ac:	1c30      	adds	r0, r6, #0
    c9ae:	f7fd fd8d 	bl	a4cc <__aeabi_d2iz>
    c9b2:	1c05      	adds	r5, r0, #0
    c9b4:	f7fd fdbe 	bl	a534 <__aeabi_i2d>
    c9b8:	1c02      	adds	r2, r0, #0
    c9ba:	1c0b      	adds	r3, r1, #0
    c9bc:	1c30      	adds	r0, r6, #0
    c9be:	1c39      	adds	r1, r7, #0
    c9c0:	f7fd fa4e 	bl	9e60 <__aeabi_dsub>
    c9c4:	3530      	adds	r5, #48	; 0x30
    c9c6:	7025      	strb	r5, [r4, #0]
    c9c8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    c9ca:	3401      	adds	r4, #1
    c9cc:	1c06      	adds	r6, r0, #0
    c9ce:	1c0f      	adds	r7, r1, #0
    c9d0:	42ac      	cmp	r4, r5
    c9d2:	d126      	bne.n	ca22 <_dtoa_r+0x592>
    c9d4:	980e      	ldr	r0, [sp, #56]	; 0x38
    c9d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    c9d8:	4a57      	ldr	r2, [pc, #348]	; (cb38 <_dtoa_r+0x6a8>)
    c9da:	4b58      	ldr	r3, [pc, #352]	; (cb3c <_dtoa_r+0x6ac>)
    c9dc:	1825      	adds	r5, r4, r0
    c9de:	9804      	ldr	r0, [sp, #16]
    c9e0:	9905      	ldr	r1, [sp, #20]
    c9e2:	f002 ffed 	bl	f9c0 <__aeabi_dadd>
    c9e6:	1c02      	adds	r2, r0, #0
    c9e8:	1c0b      	adds	r3, r1, #0
    c9ea:	1c30      	adds	r0, r6, #0
    c9ec:	1c39      	adds	r1, r7, #0
    c9ee:	f7fd fe09 	bl	a604 <__aeabi_dcmpgt>
    c9f2:	2800      	cmp	r0, #0
    c9f4:	d000      	beq.n	c9f8 <_dtoa_r+0x568>
    c9f6:	e082      	b.n	cafe <_dtoa_r+0x66e>
    c9f8:	9a04      	ldr	r2, [sp, #16]
    c9fa:	9b05      	ldr	r3, [sp, #20]
    c9fc:	484e      	ldr	r0, [pc, #312]	; (cb38 <_dtoa_r+0x6a8>)
    c9fe:	494f      	ldr	r1, [pc, #316]	; (cb3c <_dtoa_r+0x6ac>)
    ca00:	f7fd fa2e 	bl	9e60 <__aeabi_dsub>
    ca04:	1c02      	adds	r2, r0, #0
    ca06:	1c0b      	adds	r3, r1, #0
    ca08:	1c30      	adds	r0, r6, #0
    ca0a:	1c39      	adds	r1, r7, #0
    ca0c:	f7fd fde6 	bl	a5dc <__aeabi_dcmplt>
    ca10:	2800      	cmp	r0, #0
    ca12:	d00d      	beq.n	ca30 <_dtoa_r+0x5a0>
    ca14:	1e6b      	subs	r3, r5, #1
    ca16:	781a      	ldrb	r2, [r3, #0]
    ca18:	2a30      	cmp	r2, #48	; 0x30
    ca1a:	d000      	beq.n	ca1e <_dtoa_r+0x58e>
    ca1c:	e2ea      	b.n	cff4 <_dtoa_r+0xb64>
    ca1e:	1c1d      	adds	r5, r3, #0
    ca20:	e7f8      	b.n	ca14 <_dtoa_r+0x584>
    ca22:	4a3f      	ldr	r2, [pc, #252]	; (cb20 <_dtoa_r+0x690>)
    ca24:	4b3f      	ldr	r3, [pc, #252]	; (cb24 <_dtoa_r+0x694>)
    ca26:	f7fc ff89 	bl	993c <__aeabi_dmul>
    ca2a:	1c06      	adds	r6, r0, #0
    ca2c:	1c0f      	adds	r7, r1, #0
    ca2e:	e7bc      	b.n	c9aa <_dtoa_r+0x51a>
    ca30:	9c14      	ldr	r4, [sp, #80]	; 0x50
    ca32:	9d15      	ldr	r5, [sp, #84]	; 0x54
    ca34:	9404      	str	r4, [sp, #16]
    ca36:	9505      	str	r5, [sp, #20]
    ca38:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ca3a:	2b00      	cmp	r3, #0
    ca3c:	da00      	bge.n	ca40 <_dtoa_r+0x5b0>
    ca3e:	e09f      	b.n	cb80 <_dtoa_r+0x6f0>
    ca40:	9d06      	ldr	r5, [sp, #24]
    ca42:	2d0e      	cmp	r5, #14
    ca44:	dd00      	ble.n	ca48 <_dtoa_r+0x5b8>
    ca46:	e09b      	b.n	cb80 <_dtoa_r+0x6f0>
    ca48:	4a3d      	ldr	r2, [pc, #244]	; (cb40 <_dtoa_r+0x6b0>)
    ca4a:	00eb      	lsls	r3, r5, #3
    ca4c:	18d3      	adds	r3, r2, r3
    ca4e:	681c      	ldr	r4, [r3, #0]
    ca50:	685d      	ldr	r5, [r3, #4]
    ca52:	9402      	str	r4, [sp, #8]
    ca54:	9503      	str	r5, [sp, #12]
    ca56:	9d21      	ldr	r5, [sp, #132]	; 0x84
    ca58:	2d00      	cmp	r5, #0
    ca5a:	da14      	bge.n	ca86 <_dtoa_r+0x5f6>
    ca5c:	9c08      	ldr	r4, [sp, #32]
    ca5e:	2c00      	cmp	r4, #0
    ca60:	dc11      	bgt.n	ca86 <_dtoa_r+0x5f6>
    ca62:	d000      	beq.n	ca66 <_dtoa_r+0x5d6>
    ca64:	e18c      	b.n	cd80 <_dtoa_r+0x8f0>
    ca66:	4a32      	ldr	r2, [pc, #200]	; (cb30 <_dtoa_r+0x6a0>)
    ca68:	4b32      	ldr	r3, [pc, #200]	; (cb34 <_dtoa_r+0x6a4>)
    ca6a:	9802      	ldr	r0, [sp, #8]
    ca6c:	9903      	ldr	r1, [sp, #12]
    ca6e:	f7fc ff65 	bl	993c <__aeabi_dmul>
    ca72:	9a04      	ldr	r2, [sp, #16]
    ca74:	9b05      	ldr	r3, [sp, #20]
    ca76:	f7fd fdcf 	bl	a618 <__aeabi_dcmpge>
    ca7a:	9f08      	ldr	r7, [sp, #32]
    ca7c:	1c3e      	adds	r6, r7, #0
    ca7e:	2800      	cmp	r0, #0
    ca80:	d000      	beq.n	ca84 <_dtoa_r+0x5f4>
    ca82:	e17f      	b.n	cd84 <_dtoa_r+0x8f4>
    ca84:	e187      	b.n	cd96 <_dtoa_r+0x906>
    ca86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ca88:	9e04      	ldr	r6, [sp, #16]
    ca8a:	9f05      	ldr	r7, [sp, #20]
    ca8c:	9a02      	ldr	r2, [sp, #8]
    ca8e:	9b03      	ldr	r3, [sp, #12]
    ca90:	1c30      	adds	r0, r6, #0
    ca92:	1c39      	adds	r1, r7, #0
    ca94:	f003 fab8 	bl	10008 <__aeabi_ddiv>
    ca98:	f7fd fd18 	bl	a4cc <__aeabi_d2iz>
    ca9c:	1c04      	adds	r4, r0, #0
    ca9e:	f7fd fd49 	bl	a534 <__aeabi_i2d>
    caa2:	9a02      	ldr	r2, [sp, #8]
    caa4:	9b03      	ldr	r3, [sp, #12]
    caa6:	f7fc ff49 	bl	993c <__aeabi_dmul>
    caaa:	1c02      	adds	r2, r0, #0
    caac:	1c0b      	adds	r3, r1, #0
    caae:	1c30      	adds	r0, r6, #0
    cab0:	1c39      	adds	r1, r7, #0
    cab2:	f7fd f9d5 	bl	9e60 <__aeabi_dsub>
    cab6:	3501      	adds	r5, #1
    cab8:	1c02      	adds	r2, r0, #0
    caba:	1c20      	adds	r0, r4, #0
    cabc:	3030      	adds	r0, #48	; 0x30
    cabe:	1c0b      	adds	r3, r1, #0
    cac0:	1e69      	subs	r1, r5, #1
    cac2:	7008      	strb	r0, [r1, #0]
    cac4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cac6:	1a29      	subs	r1, r5, r0
    cac8:	9808      	ldr	r0, [sp, #32]
    caca:	4281      	cmp	r1, r0
    cacc:	d148      	bne.n	cb60 <_dtoa_r+0x6d0>
    cace:	1c10      	adds	r0, r2, #0
    cad0:	1c19      	adds	r1, r3, #0
    cad2:	f002 ff75 	bl	f9c0 <__aeabi_dadd>
    cad6:	9a02      	ldr	r2, [sp, #8]
    cad8:	9b03      	ldr	r3, [sp, #12]
    cada:	1c06      	adds	r6, r0, #0
    cadc:	1c0f      	adds	r7, r1, #0
    cade:	f7fd fd91 	bl	a604 <__aeabi_dcmpgt>
    cae2:	2800      	cmp	r0, #0
    cae4:	d10d      	bne.n	cb02 <_dtoa_r+0x672>
    cae6:	1c30      	adds	r0, r6, #0
    cae8:	1c39      	adds	r1, r7, #0
    caea:	9a02      	ldr	r2, [sp, #8]
    caec:	9b03      	ldr	r3, [sp, #12]
    caee:	f7fd fd6f 	bl	a5d0 <__aeabi_dcmpeq>
    caf2:	2800      	cmp	r0, #0
    caf4:	d100      	bne.n	caf8 <_dtoa_r+0x668>
    caf6:	e27f      	b.n	cff8 <_dtoa_r+0xb68>
    caf8:	07e1      	lsls	r1, r4, #31
    cafa:	d402      	bmi.n	cb02 <_dtoa_r+0x672>
    cafc:	e27c      	b.n	cff8 <_dtoa_r+0xb68>
    cafe:	9c11      	ldr	r4, [sp, #68]	; 0x44
    cb00:	9406      	str	r4, [sp, #24]
    cb02:	1e6b      	subs	r3, r5, #1
    cb04:	781a      	ldrb	r2, [r3, #0]
    cb06:	2a39      	cmp	r2, #57	; 0x39
    cb08:	d126      	bne.n	cb58 <_dtoa_r+0x6c8>
    cb0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    cb0c:	42a3      	cmp	r3, r4
    cb0e:	d01d      	beq.n	cb4c <_dtoa_r+0x6bc>
    cb10:	1c1d      	adds	r5, r3, #0
    cb12:	e7f6      	b.n	cb02 <_dtoa_r+0x672>
    cb14:	46c0      	nop			; (mov r8, r8)
    cb16:	46c0      	nop			; (mov r8, r8)
    cb18:	00000000 	.word	0x00000000
    cb1c:	3ff00000 	.word	0x3ff00000
    cb20:	00000000 	.word	0x00000000
    cb24:	40240000 	.word	0x40240000
    cb28:	00000000 	.word	0x00000000
    cb2c:	401c0000 	.word	0x401c0000
    cb30:	00000000 	.word	0x00000000
    cb34:	40140000 	.word	0x40140000
    cb38:	00000000 	.word	0x00000000
    cb3c:	3fe00000 	.word	0x3fe00000
    cb40:	00010b00 	.word	0x00010b00
    cb44:	00010bf0 	.word	0x00010bf0
    cb48:	fcc00000 	.word	0xfcc00000
    cb4c:	9c06      	ldr	r4, [sp, #24]
    cb4e:	2230      	movs	r2, #48	; 0x30
    cb50:	3401      	adds	r4, #1
    cb52:	9406      	str	r4, [sp, #24]
    cb54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    cb56:	7022      	strb	r2, [r4, #0]
    cb58:	781a      	ldrb	r2, [r3, #0]
    cb5a:	3201      	adds	r2, #1
    cb5c:	701a      	strb	r2, [r3, #0]
    cb5e:	e24b      	b.n	cff8 <_dtoa_r+0xb68>
    cb60:	1c10      	adds	r0, r2, #0
    cb62:	1c19      	adds	r1, r3, #0
    cb64:	4bc9      	ldr	r3, [pc, #804]	; (ce8c <_dtoa_r+0x9fc>)
    cb66:	4ac8      	ldr	r2, [pc, #800]	; (ce88 <_dtoa_r+0x9f8>)
    cb68:	f7fc fee8 	bl	993c <__aeabi_dmul>
    cb6c:	4ac8      	ldr	r2, [pc, #800]	; (ce90 <_dtoa_r+0xa00>)
    cb6e:	4bc9      	ldr	r3, [pc, #804]	; (ce94 <_dtoa_r+0xa04>)
    cb70:	1c06      	adds	r6, r0, #0
    cb72:	1c0f      	adds	r7, r1, #0
    cb74:	f7fd fd2c 	bl	a5d0 <__aeabi_dcmpeq>
    cb78:	2800      	cmp	r0, #0
    cb7a:	d100      	bne.n	cb7e <_dtoa_r+0x6ee>
    cb7c:	e786      	b.n	ca8c <_dtoa_r+0x5fc>
    cb7e:	e23b      	b.n	cff8 <_dtoa_r+0xb68>
    cb80:	9d10      	ldr	r5, [sp, #64]	; 0x40
    cb82:	2d00      	cmp	r5, #0
    cb84:	d031      	beq.n	cbea <_dtoa_r+0x75a>
    cb86:	9c20      	ldr	r4, [sp, #128]	; 0x80
    cb88:	2c01      	cmp	r4, #1
    cb8a:	dc0b      	bgt.n	cba4 <_dtoa_r+0x714>
    cb8c:	9d16      	ldr	r5, [sp, #88]	; 0x58
    cb8e:	2d00      	cmp	r5, #0
    cb90:	d002      	beq.n	cb98 <_dtoa_r+0x708>
    cb92:	48c1      	ldr	r0, [pc, #772]	; (ce98 <_dtoa_r+0xa08>)
    cb94:	181b      	adds	r3, r3, r0
    cb96:	e002      	b.n	cb9e <_dtoa_r+0x70e>
    cb98:	9918      	ldr	r1, [sp, #96]	; 0x60
    cb9a:	2336      	movs	r3, #54	; 0x36
    cb9c:	1a5b      	subs	r3, r3, r1
    cb9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    cba0:	9c02      	ldr	r4, [sp, #8]
    cba2:	e016      	b.n	cbd2 <_dtoa_r+0x742>
    cba4:	9d08      	ldr	r5, [sp, #32]
    cba6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    cba8:	3d01      	subs	r5, #1
    cbaa:	42ac      	cmp	r4, r5
    cbac:	db01      	blt.n	cbb2 <_dtoa_r+0x722>
    cbae:	1b65      	subs	r5, r4, r5
    cbb0:	e006      	b.n	cbc0 <_dtoa_r+0x730>
    cbb2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    cbb4:	950d      	str	r5, [sp, #52]	; 0x34
    cbb6:	1b2b      	subs	r3, r5, r4
    cbb8:	9c12      	ldr	r4, [sp, #72]	; 0x48
    cbba:	2500      	movs	r5, #0
    cbbc:	18e4      	adds	r4, r4, r3
    cbbe:	9412      	str	r4, [sp, #72]	; 0x48
    cbc0:	9c08      	ldr	r4, [sp, #32]
    cbc2:	2c00      	cmp	r4, #0
    cbc4:	da03      	bge.n	cbce <_dtoa_r+0x73e>
    cbc6:	9802      	ldr	r0, [sp, #8]
    cbc8:	2300      	movs	r3, #0
    cbca:	1b04      	subs	r4, r0, r4
    cbcc:	e001      	b.n	cbd2 <_dtoa_r+0x742>
    cbce:	9c02      	ldr	r4, [sp, #8]
    cbd0:	9b08      	ldr	r3, [sp, #32]
    cbd2:	9902      	ldr	r1, [sp, #8]
    cbd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cbd6:	18c9      	adds	r1, r1, r3
    cbd8:	9102      	str	r1, [sp, #8]
    cbda:	18d2      	adds	r2, r2, r3
    cbdc:	9807      	ldr	r0, [sp, #28]
    cbde:	2101      	movs	r1, #1
    cbe0:	9209      	str	r2, [sp, #36]	; 0x24
    cbe2:	f001 fa72 	bl	e0ca <__i2b>
    cbe6:	1c06      	adds	r6, r0, #0
    cbe8:	e002      	b.n	cbf0 <_dtoa_r+0x760>
    cbea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    cbec:	9c02      	ldr	r4, [sp, #8]
    cbee:	9e10      	ldr	r6, [sp, #64]	; 0x40
    cbf0:	2c00      	cmp	r4, #0
    cbf2:	d00c      	beq.n	cc0e <_dtoa_r+0x77e>
    cbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cbf6:	2b00      	cmp	r3, #0
    cbf8:	dd09      	ble.n	cc0e <_dtoa_r+0x77e>
    cbfa:	42a3      	cmp	r3, r4
    cbfc:	dd00      	ble.n	cc00 <_dtoa_r+0x770>
    cbfe:	1c23      	adds	r3, r4, #0
    cc00:	9802      	ldr	r0, [sp, #8]
    cc02:	9909      	ldr	r1, [sp, #36]	; 0x24
    cc04:	1ac0      	subs	r0, r0, r3
    cc06:	1ac9      	subs	r1, r1, r3
    cc08:	9002      	str	r0, [sp, #8]
    cc0a:	1ae4      	subs	r4, r4, r3
    cc0c:	9109      	str	r1, [sp, #36]	; 0x24
    cc0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cc10:	2a00      	cmp	r2, #0
    cc12:	dd21      	ble.n	cc58 <_dtoa_r+0x7c8>
    cc14:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc16:	2b00      	cmp	r3, #0
    cc18:	d018      	beq.n	cc4c <_dtoa_r+0x7bc>
    cc1a:	2d00      	cmp	r5, #0
    cc1c:	dd10      	ble.n	cc40 <_dtoa_r+0x7b0>
    cc1e:	1c31      	adds	r1, r6, #0
    cc20:	1c2a      	adds	r2, r5, #0
    cc22:	9807      	ldr	r0, [sp, #28]
    cc24:	f001 fae9 	bl	e1fa <__pow5mult>
    cc28:	1c06      	adds	r6, r0, #0
    cc2a:	1c31      	adds	r1, r6, #0
    cc2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cc2e:	9807      	ldr	r0, [sp, #28]
    cc30:	f001 fa54 	bl	e0dc <__multiply>
    cc34:	990a      	ldr	r1, [sp, #40]	; 0x28
    cc36:	1c07      	adds	r7, r0, #0
    cc38:	9807      	ldr	r0, [sp, #28]
    cc3a:	f001 f975 	bl	df28 <_Bfree>
    cc3e:	970a      	str	r7, [sp, #40]	; 0x28
    cc40:	980d      	ldr	r0, [sp, #52]	; 0x34
    cc42:	1b42      	subs	r2, r0, r5
    cc44:	d008      	beq.n	cc58 <_dtoa_r+0x7c8>
    cc46:	9807      	ldr	r0, [sp, #28]
    cc48:	990a      	ldr	r1, [sp, #40]	; 0x28
    cc4a:	e002      	b.n	cc52 <_dtoa_r+0x7c2>
    cc4c:	9807      	ldr	r0, [sp, #28]
    cc4e:	990a      	ldr	r1, [sp, #40]	; 0x28
    cc50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cc52:	f001 fad2 	bl	e1fa <__pow5mult>
    cc56:	900a      	str	r0, [sp, #40]	; 0x28
    cc58:	9807      	ldr	r0, [sp, #28]
    cc5a:	2101      	movs	r1, #1
    cc5c:	f001 fa35 	bl	e0ca <__i2b>
    cc60:	9d12      	ldr	r5, [sp, #72]	; 0x48
    cc62:	1c07      	adds	r7, r0, #0
    cc64:	2d00      	cmp	r5, #0
    cc66:	dd05      	ble.n	cc74 <_dtoa_r+0x7e4>
    cc68:	1c39      	adds	r1, r7, #0
    cc6a:	9807      	ldr	r0, [sp, #28]
    cc6c:	1c2a      	adds	r2, r5, #0
    cc6e:	f001 fac4 	bl	e1fa <__pow5mult>
    cc72:	1c07      	adds	r7, r0, #0
    cc74:	9820      	ldr	r0, [sp, #128]	; 0x80
    cc76:	2500      	movs	r5, #0
    cc78:	2801      	cmp	r0, #1
    cc7a:	dc10      	bgt.n	cc9e <_dtoa_r+0x80e>
    cc7c:	9904      	ldr	r1, [sp, #16]
    cc7e:	42a9      	cmp	r1, r5
    cc80:	d10d      	bne.n	cc9e <_dtoa_r+0x80e>
    cc82:	9a05      	ldr	r2, [sp, #20]
    cc84:	0313      	lsls	r3, r2, #12
    cc86:	42ab      	cmp	r3, r5
    cc88:	d109      	bne.n	cc9e <_dtoa_r+0x80e>
    cc8a:	4b84      	ldr	r3, [pc, #528]	; (ce9c <_dtoa_r+0xa0c>)
    cc8c:	4213      	tst	r3, r2
    cc8e:	d006      	beq.n	cc9e <_dtoa_r+0x80e>
    cc90:	9d02      	ldr	r5, [sp, #8]
    cc92:	3501      	adds	r5, #1
    cc94:	9502      	str	r5, [sp, #8]
    cc96:	9d09      	ldr	r5, [sp, #36]	; 0x24
    cc98:	3501      	adds	r5, #1
    cc9a:	9509      	str	r5, [sp, #36]	; 0x24
    cc9c:	2501      	movs	r5, #1
    cc9e:	9912      	ldr	r1, [sp, #72]	; 0x48
    cca0:	2001      	movs	r0, #1
    cca2:	2900      	cmp	r1, #0
    cca4:	d008      	beq.n	ccb8 <_dtoa_r+0x828>
    cca6:	693b      	ldr	r3, [r7, #16]
    cca8:	3303      	adds	r3, #3
    ccaa:	009b      	lsls	r3, r3, #2
    ccac:	18fb      	adds	r3, r7, r3
    ccae:	6858      	ldr	r0, [r3, #4]
    ccb0:	f001 f9c2 	bl	e038 <__hi0bits>
    ccb4:	2320      	movs	r3, #32
    ccb6:	1a18      	subs	r0, r3, r0
    ccb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ccba:	231f      	movs	r3, #31
    ccbc:	1880      	adds	r0, r0, r2
    ccbe:	4018      	ands	r0, r3
    ccc0:	d00d      	beq.n	ccde <_dtoa_r+0x84e>
    ccc2:	2320      	movs	r3, #32
    ccc4:	1a1b      	subs	r3, r3, r0
    ccc6:	2b04      	cmp	r3, #4
    ccc8:	dd06      	ble.n	ccd8 <_dtoa_r+0x848>
    ccca:	231c      	movs	r3, #28
    cccc:	1a18      	subs	r0, r3, r0
    ccce:	9b02      	ldr	r3, [sp, #8]
    ccd0:	1824      	adds	r4, r4, r0
    ccd2:	181b      	adds	r3, r3, r0
    ccd4:	9302      	str	r3, [sp, #8]
    ccd6:	e008      	b.n	ccea <_dtoa_r+0x85a>
    ccd8:	2b04      	cmp	r3, #4
    ccda:	d008      	beq.n	ccee <_dtoa_r+0x85e>
    ccdc:	1c18      	adds	r0, r3, #0
    ccde:	9902      	ldr	r1, [sp, #8]
    cce0:	301c      	adds	r0, #28
    cce2:	1809      	adds	r1, r1, r0
    cce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cce6:	9102      	str	r1, [sp, #8]
    cce8:	1824      	adds	r4, r4, r0
    ccea:	1812      	adds	r2, r2, r0
    ccec:	9209      	str	r2, [sp, #36]	; 0x24
    ccee:	9b02      	ldr	r3, [sp, #8]
    ccf0:	2b00      	cmp	r3, #0
    ccf2:	dd05      	ble.n	cd00 <_dtoa_r+0x870>
    ccf4:	9807      	ldr	r0, [sp, #28]
    ccf6:	990a      	ldr	r1, [sp, #40]	; 0x28
    ccf8:	1c1a      	adds	r2, r3, #0
    ccfa:	f001 fabf 	bl	e27c <__lshift>
    ccfe:	900a      	str	r0, [sp, #40]	; 0x28
    cd00:	9809      	ldr	r0, [sp, #36]	; 0x24
    cd02:	2800      	cmp	r0, #0
    cd04:	dd05      	ble.n	cd12 <_dtoa_r+0x882>
    cd06:	1c39      	adds	r1, r7, #0
    cd08:	9807      	ldr	r0, [sp, #28]
    cd0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cd0c:	f001 fab6 	bl	e27c <__lshift>
    cd10:	1c07      	adds	r7, r0, #0
    cd12:	9913      	ldr	r1, [sp, #76]	; 0x4c
    cd14:	2900      	cmp	r1, #0
    cd16:	d01b      	beq.n	cd50 <_dtoa_r+0x8c0>
    cd18:	980a      	ldr	r0, [sp, #40]	; 0x28
    cd1a:	1c39      	adds	r1, r7, #0
    cd1c:	f001 fb00 	bl	e320 <__mcmp>
    cd20:	2800      	cmp	r0, #0
    cd22:	da15      	bge.n	cd50 <_dtoa_r+0x8c0>
    cd24:	9a06      	ldr	r2, [sp, #24]
    cd26:	2300      	movs	r3, #0
    cd28:	3a01      	subs	r2, #1
    cd2a:	9206      	str	r2, [sp, #24]
    cd2c:	9807      	ldr	r0, [sp, #28]
    cd2e:	990a      	ldr	r1, [sp, #40]	; 0x28
    cd30:	220a      	movs	r2, #10
    cd32:	f001 f903 	bl	df3c <__multadd>
    cd36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd38:	900a      	str	r0, [sp, #40]	; 0x28
    cd3a:	9810      	ldr	r0, [sp, #64]	; 0x40
    cd3c:	9308      	str	r3, [sp, #32]
    cd3e:	2800      	cmp	r0, #0
    cd40:	d006      	beq.n	cd50 <_dtoa_r+0x8c0>
    cd42:	1c31      	adds	r1, r6, #0
    cd44:	9807      	ldr	r0, [sp, #28]
    cd46:	220a      	movs	r2, #10
    cd48:	2300      	movs	r3, #0
    cd4a:	f001 f8f7 	bl	df3c <__multadd>
    cd4e:	1c06      	adds	r6, r0, #0
    cd50:	9908      	ldr	r1, [sp, #32]
    cd52:	2900      	cmp	r1, #0
    cd54:	dc2a      	bgt.n	cdac <_dtoa_r+0x91c>
    cd56:	9a20      	ldr	r2, [sp, #128]	; 0x80
    cd58:	2a02      	cmp	r2, #2
    cd5a:	dd27      	ble.n	cdac <_dtoa_r+0x91c>
    cd5c:	2900      	cmp	r1, #0
    cd5e:	d111      	bne.n	cd84 <_dtoa_r+0x8f4>
    cd60:	1c39      	adds	r1, r7, #0
    cd62:	9807      	ldr	r0, [sp, #28]
    cd64:	2205      	movs	r2, #5
    cd66:	9b08      	ldr	r3, [sp, #32]
    cd68:	f001 f8e8 	bl	df3c <__multadd>
    cd6c:	1c07      	adds	r7, r0, #0
    cd6e:	1c39      	adds	r1, r7, #0
    cd70:	980a      	ldr	r0, [sp, #40]	; 0x28
    cd72:	f001 fad5 	bl	e320 <__mcmp>
    cd76:	2800      	cmp	r0, #0
    cd78:	dc0d      	bgt.n	cd96 <_dtoa_r+0x906>
    cd7a:	e003      	b.n	cd84 <_dtoa_r+0x8f4>
    cd7c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    cd7e:	e000      	b.n	cd82 <_dtoa_r+0x8f2>
    cd80:	2700      	movs	r7, #0
    cd82:	1c3e      	adds	r6, r7, #0
    cd84:	9c21      	ldr	r4, [sp, #132]	; 0x84
    cd86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cd88:	43e4      	mvns	r4, r4
    cd8a:	9406      	str	r4, [sp, #24]
    cd8c:	e00b      	b.n	cda6 <_dtoa_r+0x916>
    cd8e:	9d11      	ldr	r5, [sp, #68]	; 0x44
    cd90:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    cd92:	9506      	str	r5, [sp, #24]
    cd94:	1c3e      	adds	r6, r7, #0
    cd96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    cd98:	2331      	movs	r3, #49	; 0x31
    cd9a:	7023      	strb	r3, [r4, #0]
    cd9c:	9c06      	ldr	r4, [sp, #24]
    cd9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cda0:	3401      	adds	r4, #1
    cda2:	3501      	adds	r5, #1
    cda4:	9406      	str	r4, [sp, #24]
    cda6:	9602      	str	r6, [sp, #8]
    cda8:	2600      	movs	r6, #0
    cdaa:	e10f      	b.n	cfcc <_dtoa_r+0xb3c>
    cdac:	9810      	ldr	r0, [sp, #64]	; 0x40
    cdae:	2800      	cmp	r0, #0
    cdb0:	d100      	bne.n	cdb4 <_dtoa_r+0x924>
    cdb2:	e0c5      	b.n	cf40 <_dtoa_r+0xab0>
    cdb4:	2c00      	cmp	r4, #0
    cdb6:	dd05      	ble.n	cdc4 <_dtoa_r+0x934>
    cdb8:	1c31      	adds	r1, r6, #0
    cdba:	9807      	ldr	r0, [sp, #28]
    cdbc:	1c22      	adds	r2, r4, #0
    cdbe:	f001 fa5d 	bl	e27c <__lshift>
    cdc2:	1c06      	adds	r6, r0, #0
    cdc4:	9602      	str	r6, [sp, #8]
    cdc6:	2d00      	cmp	r5, #0
    cdc8:	d012      	beq.n	cdf0 <_dtoa_r+0x960>
    cdca:	6871      	ldr	r1, [r6, #4]
    cdcc:	9807      	ldr	r0, [sp, #28]
    cdce:	f001 f883 	bl	ded8 <_Balloc>
    cdd2:	6932      	ldr	r2, [r6, #16]
    cdd4:	1c31      	adds	r1, r6, #0
    cdd6:	3202      	adds	r2, #2
    cdd8:	1c04      	adds	r4, r0, #0
    cdda:	0092      	lsls	r2, r2, #2
    cddc:	310c      	adds	r1, #12
    cdde:	300c      	adds	r0, #12
    cde0:	f7fe f948 	bl	b074 <memcpy>
    cde4:	9807      	ldr	r0, [sp, #28]
    cde6:	1c21      	adds	r1, r4, #0
    cde8:	2201      	movs	r2, #1
    cdea:	f001 fa47 	bl	e27c <__lshift>
    cdee:	9002      	str	r0, [sp, #8]
    cdf0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    cdf2:	9d08      	ldr	r5, [sp, #32]
    cdf4:	1c23      	adds	r3, r4, #0
    cdf6:	3b01      	subs	r3, #1
    cdf8:	195b      	adds	r3, r3, r5
    cdfa:	9409      	str	r4, [sp, #36]	; 0x24
    cdfc:	9310      	str	r3, [sp, #64]	; 0x40
    cdfe:	1c39      	adds	r1, r7, #0
    ce00:	980a      	ldr	r0, [sp, #40]	; 0x28
    ce02:	f7ff fab9 	bl	c378 <quorem>
    ce06:	1c31      	adds	r1, r6, #0
    ce08:	900d      	str	r0, [sp, #52]	; 0x34
    ce0a:	1c04      	adds	r4, r0, #0
    ce0c:	980a      	ldr	r0, [sp, #40]	; 0x28
    ce0e:	f001 fa87 	bl	e320 <__mcmp>
    ce12:	1c39      	adds	r1, r7, #0
    ce14:	900c      	str	r0, [sp, #48]	; 0x30
    ce16:	9a02      	ldr	r2, [sp, #8]
    ce18:	9807      	ldr	r0, [sp, #28]
    ce1a:	f001 fa9c 	bl	e356 <__mdiff>
    ce1e:	1c05      	adds	r5, r0, #0
    ce20:	68c0      	ldr	r0, [r0, #12]
    ce22:	3430      	adds	r4, #48	; 0x30
    ce24:	2800      	cmp	r0, #0
    ce26:	d105      	bne.n	ce34 <_dtoa_r+0x9a4>
    ce28:	980a      	ldr	r0, [sp, #40]	; 0x28
    ce2a:	1c29      	adds	r1, r5, #0
    ce2c:	f001 fa78 	bl	e320 <__mcmp>
    ce30:	9008      	str	r0, [sp, #32]
    ce32:	e001      	b.n	ce38 <_dtoa_r+0x9a8>
    ce34:	2101      	movs	r1, #1
    ce36:	9108      	str	r1, [sp, #32]
    ce38:	1c29      	adds	r1, r5, #0
    ce3a:	9807      	ldr	r0, [sp, #28]
    ce3c:	f001 f874 	bl	df28 <_Bfree>
    ce40:	9b08      	ldr	r3, [sp, #32]
    ce42:	9d20      	ldr	r5, [sp, #128]	; 0x80
    ce44:	432b      	orrs	r3, r5
    ce46:	d10d      	bne.n	ce64 <_dtoa_r+0x9d4>
    ce48:	9804      	ldr	r0, [sp, #16]
    ce4a:	2301      	movs	r3, #1
    ce4c:	4203      	tst	r3, r0
    ce4e:	d109      	bne.n	ce64 <_dtoa_r+0x9d4>
    ce50:	2c39      	cmp	r4, #57	; 0x39
    ce52:	d044      	beq.n	cede <_dtoa_r+0xa4e>
    ce54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    ce56:	2d00      	cmp	r5, #0
    ce58:	dd01      	ble.n	ce5e <_dtoa_r+0x9ce>
    ce5a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    ce5c:	3431      	adds	r4, #49	; 0x31
    ce5e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ce60:	3501      	adds	r5, #1
    ce62:	e044      	b.n	ceee <_dtoa_r+0xa5e>
    ce64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    ce66:	2d00      	cmp	r5, #0
    ce68:	da03      	bge.n	ce72 <_dtoa_r+0x9e2>
    ce6a:	9d08      	ldr	r5, [sp, #32]
    ce6c:	2d00      	cmp	r5, #0
    ce6e:	dc17      	bgt.n	cea0 <_dtoa_r+0xa10>
    ce70:	e028      	b.n	cec4 <_dtoa_r+0xa34>
    ce72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ce74:	9d20      	ldr	r5, [sp, #128]	; 0x80
    ce76:	432b      	orrs	r3, r5
    ce78:	d129      	bne.n	cece <_dtoa_r+0xa3e>
    ce7a:	9804      	ldr	r0, [sp, #16]
    ce7c:	2301      	movs	r3, #1
    ce7e:	4203      	tst	r3, r0
    ce80:	d125      	bne.n	cece <_dtoa_r+0xa3e>
    ce82:	e7f2      	b.n	ce6a <_dtoa_r+0x9da>
    ce84:	46c0      	nop			; (mov r8, r8)
    ce86:	46c0      	nop			; (mov r8, r8)
    ce88:	00000000 	.word	0x00000000
    ce8c:	40240000 	.word	0x40240000
	...
    ce98:	00000433 	.word	0x00000433
    ce9c:	7ff00000 	.word	0x7ff00000
    cea0:	990a      	ldr	r1, [sp, #40]	; 0x28
    cea2:	9807      	ldr	r0, [sp, #28]
    cea4:	2201      	movs	r2, #1
    cea6:	f001 f9e9 	bl	e27c <__lshift>
    ceaa:	1c39      	adds	r1, r7, #0
    ceac:	900a      	str	r0, [sp, #40]	; 0x28
    ceae:	f001 fa37 	bl	e320 <__mcmp>
    ceb2:	2800      	cmp	r0, #0
    ceb4:	dc02      	bgt.n	cebc <_dtoa_r+0xa2c>
    ceb6:	d105      	bne.n	cec4 <_dtoa_r+0xa34>
    ceb8:	07e1      	lsls	r1, r4, #31
    ceba:	d503      	bpl.n	cec4 <_dtoa_r+0xa34>
    cebc:	2c39      	cmp	r4, #57	; 0x39
    cebe:	d00e      	beq.n	cede <_dtoa_r+0xa4e>
    cec0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    cec2:	3431      	adds	r4, #49	; 0x31
    cec4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    cec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cec8:	3501      	adds	r5, #1
    ceca:	7014      	strb	r4, [r2, #0]
    cecc:	e07e      	b.n	cfcc <_dtoa_r+0xb3c>
    cece:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ced0:	3501      	adds	r5, #1
    ced2:	950c      	str	r5, [sp, #48]	; 0x30
    ced4:	9d08      	ldr	r5, [sp, #32]
    ced6:	2d00      	cmp	r5, #0
    ced8:	dd0c      	ble.n	cef4 <_dtoa_r+0xa64>
    ceda:	2c39      	cmp	r4, #57	; 0x39
    cedc:	d105      	bne.n	ceea <_dtoa_r+0xa5a>
    cede:	9d09      	ldr	r5, [sp, #36]	; 0x24
    cee0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cee2:	2339      	movs	r3, #57	; 0x39
    cee4:	3501      	adds	r5, #1
    cee6:	7023      	strb	r3, [r4, #0]
    cee8:	e05b      	b.n	cfa2 <_dtoa_r+0xb12>
    ceea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    ceec:	3401      	adds	r4, #1
    ceee:	9809      	ldr	r0, [sp, #36]	; 0x24
    cef0:	7004      	strb	r4, [r0, #0]
    cef2:	e06b      	b.n	cfcc <_dtoa_r+0xb3c>
    cef4:	9909      	ldr	r1, [sp, #36]	; 0x24
    cef6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cef8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    cefa:	700c      	strb	r4, [r1, #0]
    cefc:	4291      	cmp	r1, r2
    cefe:	d03d      	beq.n	cf7c <_dtoa_r+0xaec>
    cf00:	990a      	ldr	r1, [sp, #40]	; 0x28
    cf02:	220a      	movs	r2, #10
    cf04:	2300      	movs	r3, #0
    cf06:	9807      	ldr	r0, [sp, #28]
    cf08:	f001 f818 	bl	df3c <__multadd>
    cf0c:	9c02      	ldr	r4, [sp, #8]
    cf0e:	900a      	str	r0, [sp, #40]	; 0x28
    cf10:	1c31      	adds	r1, r6, #0
    cf12:	9807      	ldr	r0, [sp, #28]
    cf14:	220a      	movs	r2, #10
    cf16:	2300      	movs	r3, #0
    cf18:	42a6      	cmp	r6, r4
    cf1a:	d104      	bne.n	cf26 <_dtoa_r+0xa96>
    cf1c:	f001 f80e 	bl	df3c <__multadd>
    cf20:	1c06      	adds	r6, r0, #0
    cf22:	9002      	str	r0, [sp, #8]
    cf24:	e009      	b.n	cf3a <_dtoa_r+0xaaa>
    cf26:	f001 f809 	bl	df3c <__multadd>
    cf2a:	9902      	ldr	r1, [sp, #8]
    cf2c:	1c06      	adds	r6, r0, #0
    cf2e:	220a      	movs	r2, #10
    cf30:	9807      	ldr	r0, [sp, #28]
    cf32:	2300      	movs	r3, #0
    cf34:	f001 f802 	bl	df3c <__multadd>
    cf38:	9002      	str	r0, [sp, #8]
    cf3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    cf3c:	9509      	str	r5, [sp, #36]	; 0x24
    cf3e:	e75e      	b.n	cdfe <_dtoa_r+0x96e>
    cf40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cf42:	1c39      	adds	r1, r7, #0
    cf44:	980a      	ldr	r0, [sp, #40]	; 0x28
    cf46:	f7ff fa17 	bl	c378 <quorem>
    cf4a:	1c04      	adds	r4, r0, #0
    cf4c:	3430      	adds	r4, #48	; 0x30
    cf4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cf50:	9908      	ldr	r1, [sp, #32]
    cf52:	702c      	strb	r4, [r5, #0]
    cf54:	3501      	adds	r5, #1
    cf56:	1a2b      	subs	r3, r5, r0
    cf58:	428b      	cmp	r3, r1
    cf5a:	db07      	blt.n	cf6c <_dtoa_r+0xadc>
    cf5c:	1e0b      	subs	r3, r1, #0
    cf5e:	dc00      	bgt.n	cf62 <_dtoa_r+0xad2>
    cf60:	2301      	movs	r3, #1
    cf62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cf64:	9602      	str	r6, [sp, #8]
    cf66:	18d5      	adds	r5, r2, r3
    cf68:	2600      	movs	r6, #0
    cf6a:	e007      	b.n	cf7c <_dtoa_r+0xaec>
    cf6c:	9807      	ldr	r0, [sp, #28]
    cf6e:	990a      	ldr	r1, [sp, #40]	; 0x28
    cf70:	220a      	movs	r2, #10
    cf72:	2300      	movs	r3, #0
    cf74:	f000 ffe2 	bl	df3c <__multadd>
    cf78:	900a      	str	r0, [sp, #40]	; 0x28
    cf7a:	e7e2      	b.n	cf42 <_dtoa_r+0xab2>
    cf7c:	990a      	ldr	r1, [sp, #40]	; 0x28
    cf7e:	9807      	ldr	r0, [sp, #28]
    cf80:	2201      	movs	r2, #1
    cf82:	f001 f97b 	bl	e27c <__lshift>
    cf86:	1c39      	adds	r1, r7, #0
    cf88:	900a      	str	r0, [sp, #40]	; 0x28
    cf8a:	f001 f9c9 	bl	e320 <__mcmp>
    cf8e:	2800      	cmp	r0, #0
    cf90:	dc07      	bgt.n	cfa2 <_dtoa_r+0xb12>
    cf92:	d115      	bne.n	cfc0 <_dtoa_r+0xb30>
    cf94:	07e3      	lsls	r3, r4, #31
    cf96:	d404      	bmi.n	cfa2 <_dtoa_r+0xb12>
    cf98:	e012      	b.n	cfc0 <_dtoa_r+0xb30>
    cf9a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    cf9c:	42a3      	cmp	r3, r4
    cf9e:	d005      	beq.n	cfac <_dtoa_r+0xb1c>
    cfa0:	1c1d      	adds	r5, r3, #0
    cfa2:	1e6b      	subs	r3, r5, #1
    cfa4:	781a      	ldrb	r2, [r3, #0]
    cfa6:	2a39      	cmp	r2, #57	; 0x39
    cfa8:	d0f7      	beq.n	cf9a <_dtoa_r+0xb0a>
    cfaa:	e006      	b.n	cfba <_dtoa_r+0xb2a>
    cfac:	9c06      	ldr	r4, [sp, #24]
    cfae:	2331      	movs	r3, #49	; 0x31
    cfb0:	3401      	adds	r4, #1
    cfb2:	9406      	str	r4, [sp, #24]
    cfb4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    cfb6:	7023      	strb	r3, [r4, #0]
    cfb8:	e008      	b.n	cfcc <_dtoa_r+0xb3c>
    cfba:	3201      	adds	r2, #1
    cfbc:	701a      	strb	r2, [r3, #0]
    cfbe:	e005      	b.n	cfcc <_dtoa_r+0xb3c>
    cfc0:	1e6b      	subs	r3, r5, #1
    cfc2:	781a      	ldrb	r2, [r3, #0]
    cfc4:	2a30      	cmp	r2, #48	; 0x30
    cfc6:	d101      	bne.n	cfcc <_dtoa_r+0xb3c>
    cfc8:	1c1d      	adds	r5, r3, #0
    cfca:	e7f9      	b.n	cfc0 <_dtoa_r+0xb30>
    cfcc:	9807      	ldr	r0, [sp, #28]
    cfce:	1c39      	adds	r1, r7, #0
    cfd0:	f000 ffaa 	bl	df28 <_Bfree>
    cfd4:	9c02      	ldr	r4, [sp, #8]
    cfd6:	2c00      	cmp	r4, #0
    cfd8:	d00e      	beq.n	cff8 <_dtoa_r+0xb68>
    cfda:	2e00      	cmp	r6, #0
    cfdc:	d005      	beq.n	cfea <_dtoa_r+0xb5a>
    cfde:	42a6      	cmp	r6, r4
    cfe0:	d003      	beq.n	cfea <_dtoa_r+0xb5a>
    cfe2:	9807      	ldr	r0, [sp, #28]
    cfe4:	1c31      	adds	r1, r6, #0
    cfe6:	f000 ff9f 	bl	df28 <_Bfree>
    cfea:	9807      	ldr	r0, [sp, #28]
    cfec:	9902      	ldr	r1, [sp, #8]
    cfee:	f000 ff9b 	bl	df28 <_Bfree>
    cff2:	e001      	b.n	cff8 <_dtoa_r+0xb68>
    cff4:	9c11      	ldr	r4, [sp, #68]	; 0x44
    cff6:	9406      	str	r4, [sp, #24]
    cff8:	9807      	ldr	r0, [sp, #28]
    cffa:	990a      	ldr	r1, [sp, #40]	; 0x28
    cffc:	f000 ff94 	bl	df28 <_Bfree>
    d000:	2300      	movs	r3, #0
    d002:	702b      	strb	r3, [r5, #0]
    d004:	9b06      	ldr	r3, [sp, #24]
    d006:	9c22      	ldr	r4, [sp, #136]	; 0x88
    d008:	3301      	adds	r3, #1
    d00a:	6023      	str	r3, [r4, #0]
    d00c:	9c24      	ldr	r4, [sp, #144]	; 0x90
    d00e:	2c00      	cmp	r4, #0
    d010:	d003      	beq.n	d01a <_dtoa_r+0xb8a>
    d012:	6025      	str	r5, [r4, #0]
    d014:	e001      	b.n	d01a <_dtoa_r+0xb8a>
    d016:	4802      	ldr	r0, [pc, #8]	; (d020 <_dtoa_r+0xb90>)
    d018:	e000      	b.n	d01c <_dtoa_r+0xb8c>
    d01a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d01c:	b01b      	add	sp, #108	; 0x6c
    d01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d020:	00010ad6 	.word	0x00010ad6
    d024:	46c0      	nop			; (mov r8, r8)
    d026:	46c0      	nop			; (mov r8, r8)

0000d028 <__sflush_r>:
    d028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d02a:	898b      	ldrh	r3, [r1, #12]
    d02c:	1c0c      	adds	r4, r1, #0
    d02e:	b299      	uxth	r1, r3
    d030:	1c05      	adds	r5, r0, #0
    d032:	070a      	lsls	r2, r1, #28
    d034:	d465      	bmi.n	d102 <__sflush_r+0xda>
    d036:	2280      	movs	r2, #128	; 0x80
    d038:	0112      	lsls	r2, r2, #4
    d03a:	431a      	orrs	r2, r3
    d03c:	6863      	ldr	r3, [r4, #4]
    d03e:	81a2      	strh	r2, [r4, #12]
    d040:	2b00      	cmp	r3, #0
    d042:	dc02      	bgt.n	d04a <__sflush_r+0x22>
    d044:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    d046:	2f00      	cmp	r7, #0
    d048:	dd1a      	ble.n	d080 <__sflush_r+0x58>
    d04a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    d04c:	2f00      	cmp	r7, #0
    d04e:	d017      	beq.n	d080 <__sflush_r+0x58>
    d050:	2300      	movs	r3, #0
    d052:	682e      	ldr	r6, [r5, #0]
    d054:	602b      	str	r3, [r5, #0]
    d056:	2380      	movs	r3, #128	; 0x80
    d058:	015b      	lsls	r3, r3, #5
    d05a:	401a      	ands	r2, r3
    d05c:	d001      	beq.n	d062 <__sflush_r+0x3a>
    d05e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    d060:	e015      	b.n	d08e <__sflush_r+0x66>
    d062:	1c28      	adds	r0, r5, #0
    d064:	69e1      	ldr	r1, [r4, #28]
    d066:	2301      	movs	r3, #1
    d068:	47b8      	blx	r7
    d06a:	1c02      	adds	r2, r0, #0
    d06c:	1c41      	adds	r1, r0, #1
    d06e:	d10e      	bne.n	d08e <__sflush_r+0x66>
    d070:	682b      	ldr	r3, [r5, #0]
    d072:	2b00      	cmp	r3, #0
    d074:	d00b      	beq.n	d08e <__sflush_r+0x66>
    d076:	2b1d      	cmp	r3, #29
    d078:	d001      	beq.n	d07e <__sflush_r+0x56>
    d07a:	2b16      	cmp	r3, #22
    d07c:	d102      	bne.n	d084 <__sflush_r+0x5c>
    d07e:	602e      	str	r6, [r5, #0]
    d080:	2000      	movs	r0, #0
    d082:	e061      	b.n	d148 <__sflush_r+0x120>
    d084:	89a3      	ldrh	r3, [r4, #12]
    d086:	2140      	movs	r1, #64	; 0x40
    d088:	430b      	orrs	r3, r1
    d08a:	81a3      	strh	r3, [r4, #12]
    d08c:	e05c      	b.n	d148 <__sflush_r+0x120>
    d08e:	89a3      	ldrh	r3, [r4, #12]
    d090:	075f      	lsls	r7, r3, #29
    d092:	d506      	bpl.n	d0a2 <__sflush_r+0x7a>
    d094:	6861      	ldr	r1, [r4, #4]
    d096:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d098:	1a52      	subs	r2, r2, r1
    d09a:	2b00      	cmp	r3, #0
    d09c:	d001      	beq.n	d0a2 <__sflush_r+0x7a>
    d09e:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    d0a0:	1bd2      	subs	r2, r2, r7
    d0a2:	1c28      	adds	r0, r5, #0
    d0a4:	69e1      	ldr	r1, [r4, #28]
    d0a6:	2300      	movs	r3, #0
    d0a8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    d0aa:	47b8      	blx	r7
    d0ac:	89a2      	ldrh	r2, [r4, #12]
    d0ae:	1c41      	adds	r1, r0, #1
    d0b0:	d106      	bne.n	d0c0 <__sflush_r+0x98>
    d0b2:	682b      	ldr	r3, [r5, #0]
    d0b4:	2b00      	cmp	r3, #0
    d0b6:	d003      	beq.n	d0c0 <__sflush_r+0x98>
    d0b8:	2b1d      	cmp	r3, #29
    d0ba:	d001      	beq.n	d0c0 <__sflush_r+0x98>
    d0bc:	2b16      	cmp	r3, #22
    d0be:	d11c      	bne.n	d0fa <__sflush_r+0xd2>
    d0c0:	4b22      	ldr	r3, [pc, #136]	; (d14c <__sflush_r+0x124>)
    d0c2:	401a      	ands	r2, r3
    d0c4:	2300      	movs	r3, #0
    d0c6:	6063      	str	r3, [r4, #4]
    d0c8:	6923      	ldr	r3, [r4, #16]
    d0ca:	81a2      	strh	r2, [r4, #12]
    d0cc:	6023      	str	r3, [r4, #0]
    d0ce:	04d7      	lsls	r7, r2, #19
    d0d0:	d505      	bpl.n	d0de <__sflush_r+0xb6>
    d0d2:	1c41      	adds	r1, r0, #1
    d0d4:	d102      	bne.n	d0dc <__sflush_r+0xb4>
    d0d6:	682a      	ldr	r2, [r5, #0]
    d0d8:	2a00      	cmp	r2, #0
    d0da:	d100      	bne.n	d0de <__sflush_r+0xb6>
    d0dc:	6520      	str	r0, [r4, #80]	; 0x50
    d0de:	6b21      	ldr	r1, [r4, #48]	; 0x30
    d0e0:	602e      	str	r6, [r5, #0]
    d0e2:	2900      	cmp	r1, #0
    d0e4:	d0cc      	beq.n	d080 <__sflush_r+0x58>
    d0e6:	1c23      	adds	r3, r4, #0
    d0e8:	3340      	adds	r3, #64	; 0x40
    d0ea:	4299      	cmp	r1, r3
    d0ec:	d002      	beq.n	d0f4 <__sflush_r+0xcc>
    d0ee:	1c28      	adds	r0, r5, #0
    d0f0:	f000 f9b0 	bl	d454 <_free_r>
    d0f4:	2000      	movs	r0, #0
    d0f6:	6320      	str	r0, [r4, #48]	; 0x30
    d0f8:	e026      	b.n	d148 <__sflush_r+0x120>
    d0fa:	2340      	movs	r3, #64	; 0x40
    d0fc:	431a      	orrs	r2, r3
    d0fe:	81a2      	strh	r2, [r4, #12]
    d100:	e022      	b.n	d148 <__sflush_r+0x120>
    d102:	6926      	ldr	r6, [r4, #16]
    d104:	2e00      	cmp	r6, #0
    d106:	d0bb      	beq.n	d080 <__sflush_r+0x58>
    d108:	6827      	ldr	r7, [r4, #0]
    d10a:	2300      	movs	r3, #0
    d10c:	1bbf      	subs	r7, r7, r6
    d10e:	9701      	str	r7, [sp, #4]
    d110:	6026      	str	r6, [r4, #0]
    d112:	078a      	lsls	r2, r1, #30
    d114:	d100      	bne.n	d118 <__sflush_r+0xf0>
    d116:	6963      	ldr	r3, [r4, #20]
    d118:	60a3      	str	r3, [r4, #8]
    d11a:	9f01      	ldr	r7, [sp, #4]
    d11c:	2f00      	cmp	r7, #0
    d11e:	ddaf      	ble.n	d080 <__sflush_r+0x58>
    d120:	1c28      	adds	r0, r5, #0
    d122:	69e1      	ldr	r1, [r4, #28]
    d124:	1c32      	adds	r2, r6, #0
    d126:	9b01      	ldr	r3, [sp, #4]
    d128:	6a67      	ldr	r7, [r4, #36]	; 0x24
    d12a:	47b8      	blx	r7
    d12c:	2800      	cmp	r0, #0
    d12e:	dc06      	bgt.n	d13e <__sflush_r+0x116>
    d130:	89a3      	ldrh	r3, [r4, #12]
    d132:	2240      	movs	r2, #64	; 0x40
    d134:	4313      	orrs	r3, r2
    d136:	2001      	movs	r0, #1
    d138:	81a3      	strh	r3, [r4, #12]
    d13a:	4240      	negs	r0, r0
    d13c:	e004      	b.n	d148 <__sflush_r+0x120>
    d13e:	9f01      	ldr	r7, [sp, #4]
    d140:	1836      	adds	r6, r6, r0
    d142:	1a3f      	subs	r7, r7, r0
    d144:	9701      	str	r7, [sp, #4]
    d146:	e7e8      	b.n	d11a <__sflush_r+0xf2>
    d148:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d14a:	46c0      	nop			; (mov r8, r8)
    d14c:	fffff7ff 	.word	0xfffff7ff

0000d150 <_fflush_r>:
    d150:	b538      	push	{r3, r4, r5, lr}
    d152:	1c04      	adds	r4, r0, #0
    d154:	1c0d      	adds	r5, r1, #0
    d156:	2800      	cmp	r0, #0
    d158:	d004      	beq.n	d164 <_fflush_r+0x14>
    d15a:	6b82      	ldr	r2, [r0, #56]	; 0x38
    d15c:	2a00      	cmp	r2, #0
    d15e:	d101      	bne.n	d164 <_fflush_r+0x14>
    d160:	f000 f848 	bl	d1f4 <__sinit>
    d164:	220c      	movs	r2, #12
    d166:	5eab      	ldrsh	r3, [r5, r2]
    d168:	2000      	movs	r0, #0
    d16a:	4283      	cmp	r3, r0
    d16c:	d003      	beq.n	d176 <_fflush_r+0x26>
    d16e:	1c20      	adds	r0, r4, #0
    d170:	1c29      	adds	r1, r5, #0
    d172:	f7ff ff59 	bl	d028 <__sflush_r>
    d176:	bd38      	pop	{r3, r4, r5, pc}

0000d178 <fflush>:
    d178:	b508      	push	{r3, lr}
    d17a:	1e01      	subs	r1, r0, #0
    d17c:	d105      	bne.n	d18a <fflush+0x12>
    d17e:	4b05      	ldr	r3, [pc, #20]	; (d194 <fflush+0x1c>)
    d180:	4905      	ldr	r1, [pc, #20]	; (d198 <fflush+0x20>)
    d182:	6818      	ldr	r0, [r3, #0]
    d184:	f000 fb9b 	bl	d8be <_fwalk_reent>
    d188:	e003      	b.n	d192 <fflush+0x1a>
    d18a:	4b04      	ldr	r3, [pc, #16]	; (d19c <fflush+0x24>)
    d18c:	6818      	ldr	r0, [r3, #0]
    d18e:	f7ff ffdf 	bl	d150 <_fflush_r>
    d192:	bd08      	pop	{r3, pc}
    d194:	00010a7c 	.word	0x00010a7c
    d198:	0000d151 	.word	0x0000d151
    d19c:	20000040 	.word	0x20000040

0000d1a0 <__fp_lock>:
    d1a0:	2000      	movs	r0, #0
    d1a2:	4770      	bx	lr

0000d1a4 <__fp_unlock>:
    d1a4:	2000      	movs	r0, #0
    d1a6:	4770      	bx	lr

0000d1a8 <_cleanup_r>:
    d1a8:	b508      	push	{r3, lr}
    d1aa:	4902      	ldr	r1, [pc, #8]	; (d1b4 <_cleanup_r+0xc>)
    d1ac:	f000 fb6a 	bl	d884 <_fwalk>
    d1b0:	bd08      	pop	{r3, pc}
    d1b2:	46c0      	nop			; (mov r8, r8)
    d1b4:	0000f5f3 	.word	0x0000f5f3

0000d1b8 <__sfmoreglue>:
    d1b8:	b570      	push	{r4, r5, r6, lr}
    d1ba:	1e4b      	subs	r3, r1, #1
    d1bc:	2568      	movs	r5, #104	; 0x68
    d1be:	435d      	muls	r5, r3
    d1c0:	1c0e      	adds	r6, r1, #0
    d1c2:	1c29      	adds	r1, r5, #0
    d1c4:	3174      	adds	r1, #116	; 0x74
    d1c6:	f000 fc69 	bl	da9c <_malloc_r>
    d1ca:	1e04      	subs	r4, r0, #0
    d1cc:	d008      	beq.n	d1e0 <__sfmoreglue+0x28>
    d1ce:	2100      	movs	r1, #0
    d1d0:	6001      	str	r1, [r0, #0]
    d1d2:	6046      	str	r6, [r0, #4]
    d1d4:	1c2a      	adds	r2, r5, #0
    d1d6:	300c      	adds	r0, #12
    d1d8:	60a0      	str	r0, [r4, #8]
    d1da:	3268      	adds	r2, #104	; 0x68
    d1dc:	f7fd ff53 	bl	b086 <memset>
    d1e0:	1c20      	adds	r0, r4, #0
    d1e2:	bd70      	pop	{r4, r5, r6, pc}

0000d1e4 <_cleanup>:
    d1e4:	b508      	push	{r3, lr}
    d1e6:	4b02      	ldr	r3, [pc, #8]	; (d1f0 <_cleanup+0xc>)
    d1e8:	6818      	ldr	r0, [r3, #0]
    d1ea:	f7ff ffdd 	bl	d1a8 <_cleanup_r>
    d1ee:	bd08      	pop	{r3, pc}
    d1f0:	00010a7c 	.word	0x00010a7c

0000d1f4 <__sinit>:
    d1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1f6:	6b84      	ldr	r4, [r0, #56]	; 0x38
    d1f8:	1c06      	adds	r6, r0, #0
    d1fa:	2c00      	cmp	r4, #0
    d1fc:	d15e      	bne.n	d2bc <__sinit+0xc8>
    d1fe:	4b30      	ldr	r3, [pc, #192]	; (d2c0 <__sinit+0xcc>)
    d200:	2203      	movs	r2, #3
    d202:	63c3      	str	r3, [r0, #60]	; 0x3c
    d204:	23b8      	movs	r3, #184	; 0xb8
    d206:	009b      	lsls	r3, r3, #2
    d208:	50c4      	str	r4, [r0, r3]
    d20a:	23b9      	movs	r3, #185	; 0xb9
    d20c:	009b      	lsls	r3, r3, #2
    d20e:	50c2      	str	r2, [r0, r3]
    d210:	23bb      	movs	r3, #187	; 0xbb
    d212:	009b      	lsls	r3, r3, #2
    d214:	6845      	ldr	r5, [r0, #4]
    d216:	18c2      	adds	r2, r0, r3
    d218:	23ba      	movs	r3, #186	; 0xba
    d21a:	009b      	lsls	r3, r3, #2
    d21c:	50c2      	str	r2, [r0, r3]
    d21e:	2304      	movs	r3, #4
    d220:	1c28      	adds	r0, r5, #0
    d222:	81ab      	strh	r3, [r5, #12]
    d224:	602c      	str	r4, [r5, #0]
    d226:	606c      	str	r4, [r5, #4]
    d228:	60ac      	str	r4, [r5, #8]
    d22a:	666c      	str	r4, [r5, #100]	; 0x64
    d22c:	81ec      	strh	r4, [r5, #14]
    d22e:	612c      	str	r4, [r5, #16]
    d230:	616c      	str	r4, [r5, #20]
    d232:	61ac      	str	r4, [r5, #24]
    d234:	1c21      	adds	r1, r4, #0
    d236:	2208      	movs	r2, #8
    d238:	305c      	adds	r0, #92	; 0x5c
    d23a:	f7fd ff24 	bl	b086 <memset>
    d23e:	4b21      	ldr	r3, [pc, #132]	; (d2c4 <__sinit+0xd0>)
    d240:	4f21      	ldr	r7, [pc, #132]	; (d2c8 <__sinit+0xd4>)
    d242:	626b      	str	r3, [r5, #36]	; 0x24
    d244:	4b21      	ldr	r3, [pc, #132]	; (d2cc <__sinit+0xd8>)
    d246:	61ed      	str	r5, [r5, #28]
    d248:	62ab      	str	r3, [r5, #40]	; 0x28
    d24a:	4b21      	ldr	r3, [pc, #132]	; (d2d0 <__sinit+0xdc>)
    d24c:	622f      	str	r7, [r5, #32]
    d24e:	62eb      	str	r3, [r5, #44]	; 0x2c
    d250:	68b5      	ldr	r5, [r6, #8]
    d252:	2309      	movs	r3, #9
    d254:	81ab      	strh	r3, [r5, #12]
    d256:	1c28      	adds	r0, r5, #0
    d258:	2301      	movs	r3, #1
    d25a:	81eb      	strh	r3, [r5, #14]
    d25c:	602c      	str	r4, [r5, #0]
    d25e:	606c      	str	r4, [r5, #4]
    d260:	60ac      	str	r4, [r5, #8]
    d262:	666c      	str	r4, [r5, #100]	; 0x64
    d264:	612c      	str	r4, [r5, #16]
    d266:	616c      	str	r4, [r5, #20]
    d268:	61ac      	str	r4, [r5, #24]
    d26a:	1c21      	adds	r1, r4, #0
    d26c:	2208      	movs	r2, #8
    d26e:	305c      	adds	r0, #92	; 0x5c
    d270:	f7fd ff09 	bl	b086 <memset>
    d274:	4b13      	ldr	r3, [pc, #76]	; (d2c4 <__sinit+0xd0>)
    d276:	61ed      	str	r5, [r5, #28]
    d278:	626b      	str	r3, [r5, #36]	; 0x24
    d27a:	4b14      	ldr	r3, [pc, #80]	; (d2cc <__sinit+0xd8>)
    d27c:	622f      	str	r7, [r5, #32]
    d27e:	62ab      	str	r3, [r5, #40]	; 0x28
    d280:	4b13      	ldr	r3, [pc, #76]	; (d2d0 <__sinit+0xdc>)
    d282:	1c21      	adds	r1, r4, #0
    d284:	62eb      	str	r3, [r5, #44]	; 0x2c
    d286:	68f5      	ldr	r5, [r6, #12]
    d288:	2312      	movs	r3, #18
    d28a:	81ab      	strh	r3, [r5, #12]
    d28c:	1c28      	adds	r0, r5, #0
    d28e:	2302      	movs	r3, #2
    d290:	81eb      	strh	r3, [r5, #14]
    d292:	602c      	str	r4, [r5, #0]
    d294:	606c      	str	r4, [r5, #4]
    d296:	60ac      	str	r4, [r5, #8]
    d298:	666c      	str	r4, [r5, #100]	; 0x64
    d29a:	612c      	str	r4, [r5, #16]
    d29c:	616c      	str	r4, [r5, #20]
    d29e:	61ac      	str	r4, [r5, #24]
    d2a0:	305c      	adds	r0, #92	; 0x5c
    d2a2:	2208      	movs	r2, #8
    d2a4:	f7fd feef 	bl	b086 <memset>
    d2a8:	4b06      	ldr	r3, [pc, #24]	; (d2c4 <__sinit+0xd0>)
    d2aa:	61ed      	str	r5, [r5, #28]
    d2ac:	626b      	str	r3, [r5, #36]	; 0x24
    d2ae:	4b07      	ldr	r3, [pc, #28]	; (d2cc <__sinit+0xd8>)
    d2b0:	622f      	str	r7, [r5, #32]
    d2b2:	62ab      	str	r3, [r5, #40]	; 0x28
    d2b4:	4b06      	ldr	r3, [pc, #24]	; (d2d0 <__sinit+0xdc>)
    d2b6:	62eb      	str	r3, [r5, #44]	; 0x2c
    d2b8:	2301      	movs	r3, #1
    d2ba:	63b3      	str	r3, [r6, #56]	; 0x38
    d2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2be:	46c0      	nop			; (mov r8, r8)
    d2c0:	0000d1a9 	.word	0x0000d1a9
    d2c4:	0000ea9d 	.word	0x0000ea9d
    d2c8:	0000ea71 	.word	0x0000ea71
    d2cc:	0000ead5 	.word	0x0000ead5
    d2d0:	0000eb01 	.word	0x0000eb01

0000d2d4 <__sfp>:
    d2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d2d6:	4b1e      	ldr	r3, [pc, #120]	; (d350 <__sfp+0x7c>)
    d2d8:	1c07      	adds	r7, r0, #0
    d2da:	681e      	ldr	r6, [r3, #0]
    d2dc:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    d2de:	2a00      	cmp	r2, #0
    d2e0:	d102      	bne.n	d2e8 <__sfp+0x14>
    d2e2:	1c30      	adds	r0, r6, #0
    d2e4:	f7ff ff86 	bl	d1f4 <__sinit>
    d2e8:	23b8      	movs	r3, #184	; 0xb8
    d2ea:	009b      	lsls	r3, r3, #2
    d2ec:	18f6      	adds	r6, r6, r3
    d2ee:	68b4      	ldr	r4, [r6, #8]
    d2f0:	6873      	ldr	r3, [r6, #4]
    d2f2:	3b01      	subs	r3, #1
    d2f4:	d405      	bmi.n	d302 <__sfp+0x2e>
    d2f6:	220c      	movs	r2, #12
    d2f8:	5ea5      	ldrsh	r5, [r4, r2]
    d2fa:	2d00      	cmp	r5, #0
    d2fc:	d010      	beq.n	d320 <__sfp+0x4c>
    d2fe:	3468      	adds	r4, #104	; 0x68
    d300:	e7f7      	b.n	d2f2 <__sfp+0x1e>
    d302:	6833      	ldr	r3, [r6, #0]
    d304:	2b00      	cmp	r3, #0
    d306:	d106      	bne.n	d316 <__sfp+0x42>
    d308:	1c38      	adds	r0, r7, #0
    d30a:	2104      	movs	r1, #4
    d30c:	f7ff ff54 	bl	d1b8 <__sfmoreglue>
    d310:	6030      	str	r0, [r6, #0]
    d312:	2800      	cmp	r0, #0
    d314:	d001      	beq.n	d31a <__sfp+0x46>
    d316:	6836      	ldr	r6, [r6, #0]
    d318:	e7e9      	b.n	d2ee <__sfp+0x1a>
    d31a:	230c      	movs	r3, #12
    d31c:	603b      	str	r3, [r7, #0]
    d31e:	e016      	b.n	d34e <__sfp+0x7a>
    d320:	2301      	movs	r3, #1
    d322:	425b      	negs	r3, r3
    d324:	81e3      	strh	r3, [r4, #14]
    d326:	1c20      	adds	r0, r4, #0
    d328:	2301      	movs	r3, #1
    d32a:	81a3      	strh	r3, [r4, #12]
    d32c:	6665      	str	r5, [r4, #100]	; 0x64
    d32e:	6025      	str	r5, [r4, #0]
    d330:	60a5      	str	r5, [r4, #8]
    d332:	6065      	str	r5, [r4, #4]
    d334:	6125      	str	r5, [r4, #16]
    d336:	6165      	str	r5, [r4, #20]
    d338:	61a5      	str	r5, [r4, #24]
    d33a:	305c      	adds	r0, #92	; 0x5c
    d33c:	1c29      	adds	r1, r5, #0
    d33e:	2208      	movs	r2, #8
    d340:	f7fd fea1 	bl	b086 <memset>
    d344:	6325      	str	r5, [r4, #48]	; 0x30
    d346:	6365      	str	r5, [r4, #52]	; 0x34
    d348:	6465      	str	r5, [r4, #68]	; 0x44
    d34a:	64a5      	str	r5, [r4, #72]	; 0x48
    d34c:	1c20      	adds	r0, r4, #0
    d34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d350:	00010a7c 	.word	0x00010a7c

0000d354 <__sfp_lock_acquire>:
    d354:	4770      	bx	lr

0000d356 <__sfp_lock_release>:
    d356:	4770      	bx	lr

0000d358 <__sinit_lock_acquire>:
    d358:	4770      	bx	lr

0000d35a <__sinit_lock_release>:
    d35a:	4770      	bx	lr

0000d35c <__fp_lock_all>:
    d35c:	b508      	push	{r3, lr}
    d35e:	4b03      	ldr	r3, [pc, #12]	; (d36c <__fp_lock_all+0x10>)
    d360:	4903      	ldr	r1, [pc, #12]	; (d370 <__fp_lock_all+0x14>)
    d362:	6818      	ldr	r0, [r3, #0]
    d364:	f000 fa8e 	bl	d884 <_fwalk>
    d368:	bd08      	pop	{r3, pc}
    d36a:	46c0      	nop			; (mov r8, r8)
    d36c:	20000040 	.word	0x20000040
    d370:	0000d1a1 	.word	0x0000d1a1

0000d374 <__fp_unlock_all>:
    d374:	b508      	push	{r3, lr}
    d376:	4b03      	ldr	r3, [pc, #12]	; (d384 <__fp_unlock_all+0x10>)
    d378:	4903      	ldr	r1, [pc, #12]	; (d388 <__fp_unlock_all+0x14>)
    d37a:	6818      	ldr	r0, [r3, #0]
    d37c:	f000 fa82 	bl	d884 <_fwalk>
    d380:	bd08      	pop	{r3, pc}
    d382:	46c0      	nop			; (mov r8, r8)
    d384:	20000040 	.word	0x20000040
    d388:	0000d1a5 	.word	0x0000d1a5

0000d38c <__libc_fini_array>:
    d38c:	b538      	push	{r3, r4, r5, lr}
    d38e:	4b07      	ldr	r3, [pc, #28]	; (d3ac <__libc_fini_array+0x20>)
    d390:	4c07      	ldr	r4, [pc, #28]	; (d3b0 <__libc_fini_array+0x24>)
    d392:	1c1d      	adds	r5, r3, #0
    d394:	1ae4      	subs	r4, r4, r3
    d396:	10a4      	asrs	r4, r4, #2
    d398:	2c00      	cmp	r4, #0
    d39a:	d004      	beq.n	d3a6 <__libc_fini_array+0x1a>
    d39c:	3c01      	subs	r4, #1
    d39e:	00a3      	lsls	r3, r4, #2
    d3a0:	58eb      	ldr	r3, [r5, r3]
    d3a2:	4798      	blx	r3
    d3a4:	e7f8      	b.n	d398 <__libc_fini_array+0xc>
    d3a6:	f003 fc71 	bl	10c8c <_fini>
    d3aa:	bd38      	pop	{r3, r4, r5, pc}
    d3ac:	00010c98 	.word	0x00010c98
    d3b0:	00010c9c 	.word	0x00010c9c

0000d3b4 <_malloc_trim_r>:
    d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3b6:	1c0d      	adds	r5, r1, #0
    d3b8:	1c04      	adds	r4, r0, #0
    d3ba:	f000 fd8b 	bl	ded4 <__malloc_lock>
    d3be:	4e20      	ldr	r6, [pc, #128]	; (d440 <_malloc_trim_r+0x8c>)
    d3c0:	4a20      	ldr	r2, [pc, #128]	; (d444 <_malloc_trim_r+0x90>)
    d3c2:	68b3      	ldr	r3, [r6, #8]
    d3c4:	685f      	ldr	r7, [r3, #4]
    d3c6:	2303      	movs	r3, #3
    d3c8:	439f      	bics	r7, r3
    d3ca:	1b7d      	subs	r5, r7, r5
    d3cc:	18ad      	adds	r5, r5, r2
    d3ce:	0b2d      	lsrs	r5, r5, #12
    d3d0:	4b1d      	ldr	r3, [pc, #116]	; (d448 <_malloc_trim_r+0x94>)
    d3d2:	3d01      	subs	r5, #1
    d3d4:	032d      	lsls	r5, r5, #12
    d3d6:	429d      	cmp	r5, r3
    d3d8:	dc04      	bgt.n	d3e4 <_malloc_trim_r+0x30>
    d3da:	1c20      	adds	r0, r4, #0
    d3dc:	f000 fd7b 	bl	ded6 <__malloc_unlock>
    d3e0:	2000      	movs	r0, #0
    d3e2:	e02b      	b.n	d43c <_malloc_trim_r+0x88>
    d3e4:	1c20      	adds	r0, r4, #0
    d3e6:	2100      	movs	r1, #0
    d3e8:	f001 fb30 	bl	ea4c <_sbrk_r>
    d3ec:	68b2      	ldr	r2, [r6, #8]
    d3ee:	19d3      	adds	r3, r2, r7
    d3f0:	4298      	cmp	r0, r3
    d3f2:	d1f2      	bne.n	d3da <_malloc_trim_r+0x26>
    d3f4:	4269      	negs	r1, r5
    d3f6:	1c20      	adds	r0, r4, #0
    d3f8:	f001 fb28 	bl	ea4c <_sbrk_r>
    d3fc:	3001      	adds	r0, #1
    d3fe:	d110      	bne.n	d422 <_malloc_trim_r+0x6e>
    d400:	1c20      	adds	r0, r4, #0
    d402:	2100      	movs	r1, #0
    d404:	f001 fb22 	bl	ea4c <_sbrk_r>
    d408:	68b3      	ldr	r3, [r6, #8]
    d40a:	1ac2      	subs	r2, r0, r3
    d40c:	2a0f      	cmp	r2, #15
    d40e:	dde4      	ble.n	d3da <_malloc_trim_r+0x26>
    d410:	490e      	ldr	r1, [pc, #56]	; (d44c <_malloc_trim_r+0x98>)
    d412:	6809      	ldr	r1, [r1, #0]
    d414:	1a40      	subs	r0, r0, r1
    d416:	490e      	ldr	r1, [pc, #56]	; (d450 <_malloc_trim_r+0x9c>)
    d418:	6008      	str	r0, [r1, #0]
    d41a:	2101      	movs	r1, #1
    d41c:	430a      	orrs	r2, r1
    d41e:	605a      	str	r2, [r3, #4]
    d420:	e7db      	b.n	d3da <_malloc_trim_r+0x26>
    d422:	68b3      	ldr	r3, [r6, #8]
    d424:	1b7f      	subs	r7, r7, r5
    d426:	2601      	movs	r6, #1
    d428:	4337      	orrs	r7, r6
    d42a:	605f      	str	r7, [r3, #4]
    d42c:	4b08      	ldr	r3, [pc, #32]	; (d450 <_malloc_trim_r+0x9c>)
    d42e:	1c20      	adds	r0, r4, #0
    d430:	681a      	ldr	r2, [r3, #0]
    d432:	1b55      	subs	r5, r2, r5
    d434:	601d      	str	r5, [r3, #0]
    d436:	f000 fd4e 	bl	ded6 <__malloc_unlock>
    d43a:	1c30      	adds	r0, r6, #0
    d43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d43e:	46c0      	nop			; (mov r8, r8)
    d440:	200004ec 	.word	0x200004ec
    d444:	00000fef 	.word	0x00000fef
    d448:	00000fff 	.word	0x00000fff
    d44c:	200008f4 	.word	0x200008f4
    d450:	20000f78 	.word	0x20000f78

0000d454 <_free_r>:
    d454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d456:	1c04      	adds	r4, r0, #0
    d458:	1e0d      	subs	r5, r1, #0
    d45a:	d100      	bne.n	d45e <_free_r+0xa>
    d45c:	e0aa      	b.n	d5b4 <_free_r+0x160>
    d45e:	f000 fd39 	bl	ded4 <__malloc_lock>
    d462:	1c29      	adds	r1, r5, #0
    d464:	3908      	subs	r1, #8
    d466:	684f      	ldr	r7, [r1, #4]
    d468:	2001      	movs	r0, #1
    d46a:	1c3b      	adds	r3, r7, #0
    d46c:	4383      	bics	r3, r0
    d46e:	18c8      	adds	r0, r1, r3
    d470:	6846      	ldr	r6, [r0, #4]
    d472:	2203      	movs	r2, #3
    d474:	4396      	bics	r6, r2
    d476:	4a50      	ldr	r2, [pc, #320]	; (d5b8 <_free_r+0x164>)
    d478:	6895      	ldr	r5, [r2, #8]
    d47a:	46ac      	mov	ip, r5
    d47c:	2501      	movs	r5, #1
    d47e:	402f      	ands	r7, r5
    d480:	4560      	cmp	r0, ip
    d482:	d11a      	bne.n	d4ba <_free_r+0x66>
    d484:	18f3      	adds	r3, r6, r3
    d486:	2f00      	cmp	r7, #0
    d488:	d106      	bne.n	d498 <_free_r+0x44>
    d48a:	6808      	ldr	r0, [r1, #0]
    d48c:	1a09      	subs	r1, r1, r0
    d48e:	688d      	ldr	r5, [r1, #8]
    d490:	181b      	adds	r3, r3, r0
    d492:	68c8      	ldr	r0, [r1, #12]
    d494:	60e8      	str	r0, [r5, #12]
    d496:	6085      	str	r5, [r0, #8]
    d498:	2001      	movs	r0, #1
    d49a:	4318      	orrs	r0, r3
    d49c:	6048      	str	r0, [r1, #4]
    d49e:	6091      	str	r1, [r2, #8]
    d4a0:	4a46      	ldr	r2, [pc, #280]	; (d5bc <_free_r+0x168>)
    d4a2:	6812      	ldr	r2, [r2, #0]
    d4a4:	4293      	cmp	r3, r2
    d4a6:	d304      	bcc.n	d4b2 <_free_r+0x5e>
    d4a8:	4b45      	ldr	r3, [pc, #276]	; (d5c0 <_free_r+0x16c>)
    d4aa:	1c20      	adds	r0, r4, #0
    d4ac:	6819      	ldr	r1, [r3, #0]
    d4ae:	f7ff ff81 	bl	d3b4 <_malloc_trim_r>
    d4b2:	1c20      	adds	r0, r4, #0
    d4b4:	f000 fd0f 	bl	ded6 <__malloc_unlock>
    d4b8:	e07c      	b.n	d5b4 <_free_r+0x160>
    d4ba:	2500      	movs	r5, #0
    d4bc:	6046      	str	r6, [r0, #4]
    d4be:	9501      	str	r5, [sp, #4]
    d4c0:	42af      	cmp	r7, r5
    d4c2:	d10d      	bne.n	d4e0 <_free_r+0x8c>
    d4c4:	680f      	ldr	r7, [r1, #0]
    d4c6:	2508      	movs	r5, #8
    d4c8:	1bc9      	subs	r1, r1, r7
    d4ca:	19db      	adds	r3, r3, r7
    d4cc:	688f      	ldr	r7, [r1, #8]
    d4ce:	18ad      	adds	r5, r5, r2
    d4d0:	42af      	cmp	r7, r5
    d4d2:	d003      	beq.n	d4dc <_free_r+0x88>
    d4d4:	68cd      	ldr	r5, [r1, #12]
    d4d6:	60fd      	str	r5, [r7, #12]
    d4d8:	60af      	str	r7, [r5, #8]
    d4da:	e001      	b.n	d4e0 <_free_r+0x8c>
    d4dc:	2501      	movs	r5, #1
    d4de:	9501      	str	r5, [sp, #4]
    d4e0:	1987      	adds	r7, r0, r6
    d4e2:	687d      	ldr	r5, [r7, #4]
    d4e4:	2701      	movs	r7, #1
    d4e6:	423d      	tst	r5, r7
    d4e8:	d110      	bne.n	d50c <_free_r+0xb8>
    d4ea:	9d01      	ldr	r5, [sp, #4]
    d4ec:	199b      	adds	r3, r3, r6
    d4ee:	6886      	ldr	r6, [r0, #8]
    d4f0:	2d00      	cmp	r5, #0
    d4f2:	d108      	bne.n	d506 <_free_r+0xb2>
    d4f4:	4d33      	ldr	r5, [pc, #204]	; (d5c4 <_free_r+0x170>)
    d4f6:	42ae      	cmp	r6, r5
    d4f8:	d105      	bne.n	d506 <_free_r+0xb2>
    d4fa:	60f1      	str	r1, [r6, #12]
    d4fc:	60b1      	str	r1, [r6, #8]
    d4fe:	9701      	str	r7, [sp, #4]
    d500:	60ce      	str	r6, [r1, #12]
    d502:	608e      	str	r6, [r1, #8]
    d504:	e002      	b.n	d50c <_free_r+0xb8>
    d506:	68c0      	ldr	r0, [r0, #12]
    d508:	60f0      	str	r0, [r6, #12]
    d50a:	6086      	str	r6, [r0, #8]
    d50c:	2001      	movs	r0, #1
    d50e:	1c06      	adds	r6, r0, #0
    d510:	9d01      	ldr	r5, [sp, #4]
    d512:	431e      	orrs	r6, r3
    d514:	604e      	str	r6, [r1, #4]
    d516:	50cb      	str	r3, [r1, r3]
    d518:	2d00      	cmp	r5, #0
    d51a:	d1ca      	bne.n	d4b2 <_free_r+0x5e>
    d51c:	4d2a      	ldr	r5, [pc, #168]	; (d5c8 <_free_r+0x174>)
    d51e:	42ab      	cmp	r3, r5
    d520:	d80d      	bhi.n	d53e <_free_r+0xea>
    d522:	08db      	lsrs	r3, r3, #3
    d524:	109d      	asrs	r5, r3, #2
    d526:	40a8      	lsls	r0, r5
    d528:	6855      	ldr	r5, [r2, #4]
    d52a:	00db      	lsls	r3, r3, #3
    d52c:	4328      	orrs	r0, r5
    d52e:	6050      	str	r0, [r2, #4]
    d530:	18d2      	adds	r2, r2, r3
    d532:	6893      	ldr	r3, [r2, #8]
    d534:	60ca      	str	r2, [r1, #12]
    d536:	608b      	str	r3, [r1, #8]
    d538:	6091      	str	r1, [r2, #8]
    d53a:	60d9      	str	r1, [r3, #12]
    d53c:	e7b9      	b.n	d4b2 <_free_r+0x5e>
    d53e:	0a5d      	lsrs	r5, r3, #9
    d540:	2d04      	cmp	r5, #4
    d542:	d802      	bhi.n	d54a <_free_r+0xf6>
    d544:	0998      	lsrs	r0, r3, #6
    d546:	3038      	adds	r0, #56	; 0x38
    d548:	e016      	b.n	d578 <_free_r+0x124>
    d54a:	2d14      	cmp	r5, #20
    d54c:	d802      	bhi.n	d554 <_free_r+0x100>
    d54e:	1c28      	adds	r0, r5, #0
    d550:	305b      	adds	r0, #91	; 0x5b
    d552:	e011      	b.n	d578 <_free_r+0x124>
    d554:	2d54      	cmp	r5, #84	; 0x54
    d556:	d802      	bhi.n	d55e <_free_r+0x10a>
    d558:	0b18      	lsrs	r0, r3, #12
    d55a:	306e      	adds	r0, #110	; 0x6e
    d55c:	e00c      	b.n	d578 <_free_r+0x124>
    d55e:	20aa      	movs	r0, #170	; 0xaa
    d560:	0040      	lsls	r0, r0, #1
    d562:	4285      	cmp	r5, r0
    d564:	d802      	bhi.n	d56c <_free_r+0x118>
    d566:	0bd8      	lsrs	r0, r3, #15
    d568:	3077      	adds	r0, #119	; 0x77
    d56a:	e005      	b.n	d578 <_free_r+0x124>
    d56c:	4e17      	ldr	r6, [pc, #92]	; (d5cc <_free_r+0x178>)
    d56e:	207e      	movs	r0, #126	; 0x7e
    d570:	42b5      	cmp	r5, r6
    d572:	d801      	bhi.n	d578 <_free_r+0x124>
    d574:	0c98      	lsrs	r0, r3, #18
    d576:	307c      	adds	r0, #124	; 0x7c
    d578:	00c6      	lsls	r6, r0, #3
    d57a:	1996      	adds	r6, r2, r6
    d57c:	68b5      	ldr	r5, [r6, #8]
    d57e:	42b5      	cmp	r5, r6
    d580:	d001      	beq.n	d586 <_free_r+0x132>
    d582:	1c2a      	adds	r2, r5, #0
    d584:	e00b      	b.n	d59e <_free_r+0x14a>
    d586:	1080      	asrs	r0, r0, #2
    d588:	2301      	movs	r3, #1
    d58a:	4083      	lsls	r3, r0
    d58c:	1c18      	adds	r0, r3, #0
    d58e:	6853      	ldr	r3, [r2, #4]
    d590:	4318      	orrs	r0, r3
    d592:	6050      	str	r0, [r2, #4]
    d594:	1c2a      	adds	r2, r5, #0
    d596:	e008      	b.n	d5aa <_free_r+0x156>
    d598:	6892      	ldr	r2, [r2, #8]
    d59a:	42b2      	cmp	r2, r6
    d59c:	d004      	beq.n	d5a8 <_free_r+0x154>
    d59e:	6855      	ldr	r5, [r2, #4]
    d5a0:	2003      	movs	r0, #3
    d5a2:	4385      	bics	r5, r0
    d5a4:	42ab      	cmp	r3, r5
    d5a6:	d3f7      	bcc.n	d598 <_free_r+0x144>
    d5a8:	68d5      	ldr	r5, [r2, #12]
    d5aa:	60cd      	str	r5, [r1, #12]
    d5ac:	608a      	str	r2, [r1, #8]
    d5ae:	60a9      	str	r1, [r5, #8]
    d5b0:	60d1      	str	r1, [r2, #12]
    d5b2:	e77e      	b.n	d4b2 <_free_r+0x5e>
    d5b4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    d5b6:	46c0      	nop			; (mov r8, r8)
    d5b8:	200004ec 	.word	0x200004ec
    d5bc:	200008f8 	.word	0x200008f8
    d5c0:	20000f74 	.word	0x20000f74
    d5c4:	200004f4 	.word	0x200004f4
    d5c8:	000001ff 	.word	0x000001ff
    d5cc:	00000554 	.word	0x00000554

0000d5d0 <__sfvwrite_r>:
    d5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5d2:	1c0c      	adds	r4, r1, #0
    d5d4:	6891      	ldr	r1, [r2, #8]
    d5d6:	b08b      	sub	sp, #44	; 0x2c
    d5d8:	9007      	str	r0, [sp, #28]
    d5da:	9209      	str	r2, [sp, #36]	; 0x24
    d5dc:	2900      	cmp	r1, #0
    d5de:	d101      	bne.n	d5e4 <__sfvwrite_r+0x14>
    d5e0:	2000      	movs	r0, #0
    d5e2:	e146      	b.n	d872 <__sfvwrite_r+0x2a2>
    d5e4:	89a3      	ldrh	r3, [r4, #12]
    d5e6:	071a      	lsls	r2, r3, #28
    d5e8:	d50c      	bpl.n	d604 <__sfvwrite_r+0x34>
    d5ea:	6923      	ldr	r3, [r4, #16]
    d5ec:	2b00      	cmp	r3, #0
    d5ee:	d009      	beq.n	d604 <__sfvwrite_r+0x34>
    d5f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
    d5f2:	89a3      	ldrh	r3, [r4, #12]
    d5f4:	682d      	ldr	r5, [r5, #0]
    d5f6:	2702      	movs	r7, #2
    d5f8:	9506      	str	r5, [sp, #24]
    d5fa:	401f      	ands	r7, r3
    d5fc:	d026      	beq.n	d64c <__sfvwrite_r+0x7c>
    d5fe:	2600      	movs	r6, #0
    d600:	1c35      	adds	r5, r6, #0
    d602:	e01b      	b.n	d63c <__sfvwrite_r+0x6c>
    d604:	9807      	ldr	r0, [sp, #28]
    d606:	1c21      	adds	r1, r4, #0
    d608:	f7fe fe42 	bl	c290 <__swsetup_r>
    d60c:	2800      	cmp	r0, #0
    d60e:	d0ef      	beq.n	d5f0 <__sfvwrite_r+0x20>
    d610:	e12d      	b.n	d86e <__sfvwrite_r+0x29e>
    d612:	4a99      	ldr	r2, [pc, #612]	; (d878 <__sfvwrite_r+0x2a8>)
    d614:	69e1      	ldr	r1, [r4, #28]
    d616:	1e2b      	subs	r3, r5, #0
    d618:	4293      	cmp	r3, r2
    d61a:	d900      	bls.n	d61e <__sfvwrite_r+0x4e>
    d61c:	1c13      	adds	r3, r2, #0
    d61e:	9807      	ldr	r0, [sp, #28]
    d620:	1c32      	adds	r2, r6, #0
    d622:	6a67      	ldr	r7, [r4, #36]	; 0x24
    d624:	47b8      	blx	r7
    d626:	2800      	cmp	r0, #0
    d628:	dc00      	bgt.n	d62c <__sfvwrite_r+0x5c>
    d62a:	e11c      	b.n	d866 <__sfvwrite_r+0x296>
    d62c:	9909      	ldr	r1, [sp, #36]	; 0x24
    d62e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    d630:	6889      	ldr	r1, [r1, #8]
    d632:	1836      	adds	r6, r6, r0
    d634:	1a2d      	subs	r5, r5, r0
    d636:	1a08      	subs	r0, r1, r0
    d638:	60b8      	str	r0, [r7, #8]
    d63a:	d0d1      	beq.n	d5e0 <__sfvwrite_r+0x10>
    d63c:	2d00      	cmp	r5, #0
    d63e:	d1e8      	bne.n	d612 <__sfvwrite_r+0x42>
    d640:	9f06      	ldr	r7, [sp, #24]
    d642:	683e      	ldr	r6, [r7, #0]
    d644:	687d      	ldr	r5, [r7, #4]
    d646:	3708      	adds	r7, #8
    d648:	9706      	str	r7, [sp, #24]
    d64a:	e7f7      	b.n	d63c <__sfvwrite_r+0x6c>
    d64c:	2201      	movs	r2, #1
    d64e:	4013      	ands	r3, r2
    d650:	d003      	beq.n	d65a <__sfvwrite_r+0x8a>
    d652:	9708      	str	r7, [sp, #32]
    d654:	9705      	str	r7, [sp, #20]
    d656:	1c3e      	adds	r6, r7, #0
    d658:	e0cb      	b.n	d7f2 <__sfvwrite_r+0x222>
    d65a:	9305      	str	r3, [sp, #20]
    d65c:	1c1d      	adds	r5, r3, #0
    d65e:	2d00      	cmp	r5, #0
    d660:	d107      	bne.n	d672 <__sfvwrite_r+0xa2>
    d662:	9d06      	ldr	r5, [sp, #24]
    d664:	9e06      	ldr	r6, [sp, #24]
    d666:	682d      	ldr	r5, [r5, #0]
    d668:	9505      	str	r5, [sp, #20]
    d66a:	6875      	ldr	r5, [r6, #4]
    d66c:	3608      	adds	r6, #8
    d66e:	9606      	str	r6, [sp, #24]
    d670:	e7f5      	b.n	d65e <__sfvwrite_r+0x8e>
    d672:	89a3      	ldrh	r3, [r4, #12]
    d674:	68a6      	ldr	r6, [r4, #8]
    d676:	6820      	ldr	r0, [r4, #0]
    d678:	059f      	lsls	r7, r3, #22
    d67a:	d554      	bpl.n	d726 <__sfvwrite_r+0x156>
    d67c:	42b5      	cmp	r5, r6
    d67e:	d344      	bcc.n	d70a <__sfvwrite_r+0x13a>
    d680:	2290      	movs	r2, #144	; 0x90
    d682:	00d2      	lsls	r2, r2, #3
    d684:	4213      	tst	r3, r2
    d686:	d03e      	beq.n	d706 <__sfvwrite_r+0x136>
    d688:	6962      	ldr	r2, [r4, #20]
    d68a:	2703      	movs	r7, #3
    d68c:	4357      	muls	r7, r2
    d68e:	6921      	ldr	r1, [r4, #16]
    d690:	0ffa      	lsrs	r2, r7, #31
    d692:	1a40      	subs	r0, r0, r1
    d694:	19d7      	adds	r7, r2, r7
    d696:	1c02      	adds	r2, r0, #0
    d698:	3201      	adds	r2, #1
    d69a:	1952      	adds	r2, r2, r5
    d69c:	9004      	str	r0, [sp, #16]
    d69e:	107f      	asrs	r7, r7, #1
    d6a0:	4297      	cmp	r7, r2
    d6a2:	d200      	bcs.n	d6a6 <__sfvwrite_r+0xd6>
    d6a4:	1c17      	adds	r7, r2, #0
    d6a6:	9807      	ldr	r0, [sp, #28]
    d6a8:	055e      	lsls	r6, r3, #21
    d6aa:	d513      	bpl.n	d6d4 <__sfvwrite_r+0x104>
    d6ac:	1c39      	adds	r1, r7, #0
    d6ae:	f000 f9f5 	bl	da9c <_malloc_r>
    d6b2:	1e06      	subs	r6, r0, #0
    d6b4:	d103      	bne.n	d6be <__sfvwrite_r+0xee>
    d6b6:	9f07      	ldr	r7, [sp, #28]
    d6b8:	230c      	movs	r3, #12
    d6ba:	603b      	str	r3, [r7, #0]
    d6bc:	e0d3      	b.n	d866 <__sfvwrite_r+0x296>
    d6be:	9a04      	ldr	r2, [sp, #16]
    d6c0:	6921      	ldr	r1, [r4, #16]
    d6c2:	f7fd fcd7 	bl	b074 <memcpy>
    d6c6:	89a2      	ldrh	r2, [r4, #12]
    d6c8:	4b6c      	ldr	r3, [pc, #432]	; (d87c <__sfvwrite_r+0x2ac>)
    d6ca:	4013      	ands	r3, r2
    d6cc:	2280      	movs	r2, #128	; 0x80
    d6ce:	4313      	orrs	r3, r2
    d6d0:	81a3      	strh	r3, [r4, #12]
    d6d2:	e010      	b.n	d6f6 <__sfvwrite_r+0x126>
    d6d4:	1c3a      	adds	r2, r7, #0
    d6d6:	f000 ffeb 	bl	e6b0 <_realloc_r>
    d6da:	1e06      	subs	r6, r0, #0
    d6dc:	d10b      	bne.n	d6f6 <__sfvwrite_r+0x126>
    d6de:	9807      	ldr	r0, [sp, #28]
    d6e0:	6921      	ldr	r1, [r4, #16]
    d6e2:	f7ff feb7 	bl	d454 <_free_r>
    d6e6:	89a3      	ldrh	r3, [r4, #12]
    d6e8:	2280      	movs	r2, #128	; 0x80
    d6ea:	4393      	bics	r3, r2
    d6ec:	9d07      	ldr	r5, [sp, #28]
    d6ee:	81a3      	strh	r3, [r4, #12]
    d6f0:	230c      	movs	r3, #12
    d6f2:	602b      	str	r3, [r5, #0]
    d6f4:	e0b7      	b.n	d866 <__sfvwrite_r+0x296>
    d6f6:	9904      	ldr	r1, [sp, #16]
    d6f8:	6126      	str	r6, [r4, #16]
    d6fa:	6167      	str	r7, [r4, #20]
    d6fc:	1876      	adds	r6, r6, r1
    d6fe:	1a7f      	subs	r7, r7, r1
    d700:	6026      	str	r6, [r4, #0]
    d702:	60a7      	str	r7, [r4, #8]
    d704:	1c2e      	adds	r6, r5, #0
    d706:	42b5      	cmp	r5, r6
    d708:	d200      	bcs.n	d70c <__sfvwrite_r+0x13c>
    d70a:	1c2e      	adds	r6, r5, #0
    d70c:	1c32      	adds	r2, r6, #0
    d70e:	6820      	ldr	r0, [r4, #0]
    d710:	9905      	ldr	r1, [sp, #20]
    d712:	f000 fbc6 	bl	dea2 <memmove>
    d716:	68a2      	ldr	r2, [r4, #8]
    d718:	1b93      	subs	r3, r2, r6
    d71a:	60a3      	str	r3, [r4, #8]
    d71c:	6823      	ldr	r3, [r4, #0]
    d71e:	199e      	adds	r6, r3, r6
    d720:	6026      	str	r6, [r4, #0]
    d722:	1c2e      	adds	r6, r5, #0
    d724:	e02e      	b.n	d784 <__sfvwrite_r+0x1b4>
    d726:	6927      	ldr	r7, [r4, #16]
    d728:	42b8      	cmp	r0, r7
    d72a:	d802      	bhi.n	d732 <__sfvwrite_r+0x162>
    d72c:	6967      	ldr	r7, [r4, #20]
    d72e:	42bd      	cmp	r5, r7
    d730:	d217      	bcs.n	d762 <__sfvwrite_r+0x192>
    d732:	1e2b      	subs	r3, r5, #0
    d734:	42b3      	cmp	r3, r6
    d736:	d900      	bls.n	d73a <__sfvwrite_r+0x16a>
    d738:	1c33      	adds	r3, r6, #0
    d73a:	1c1a      	adds	r2, r3, #0
    d73c:	9905      	ldr	r1, [sp, #20]
    d73e:	1c1e      	adds	r6, r3, #0
    d740:	f000 fbaf 	bl	dea2 <memmove>
    d744:	68a1      	ldr	r1, [r4, #8]
    d746:	6827      	ldr	r7, [r4, #0]
    d748:	1b8b      	subs	r3, r1, r6
    d74a:	19ba      	adds	r2, r7, r6
    d74c:	60a3      	str	r3, [r4, #8]
    d74e:	6022      	str	r2, [r4, #0]
    d750:	2b00      	cmp	r3, #0
    d752:	d117      	bne.n	d784 <__sfvwrite_r+0x1b4>
    d754:	9807      	ldr	r0, [sp, #28]
    d756:	1c21      	adds	r1, r4, #0
    d758:	f7ff fcfa 	bl	d150 <_fflush_r>
    d75c:	2800      	cmp	r0, #0
    d75e:	d011      	beq.n	d784 <__sfvwrite_r+0x1b4>
    d760:	e081      	b.n	d866 <__sfvwrite_r+0x296>
    d762:	4b47      	ldr	r3, [pc, #284]	; (d880 <__sfvwrite_r+0x2b0>)
    d764:	1e28      	subs	r0, r5, #0
    d766:	4298      	cmp	r0, r3
    d768:	d900      	bls.n	d76c <__sfvwrite_r+0x19c>
    d76a:	1c18      	adds	r0, r3, #0
    d76c:	1c39      	adds	r1, r7, #0
    d76e:	f002 f8c7 	bl	f900 <__aeabi_idiv>
    d772:	1c3b      	adds	r3, r7, #0
    d774:	4343      	muls	r3, r0
    d776:	6a66      	ldr	r6, [r4, #36]	; 0x24
    d778:	9807      	ldr	r0, [sp, #28]
    d77a:	69e1      	ldr	r1, [r4, #28]
    d77c:	9a05      	ldr	r2, [sp, #20]
    d77e:	47b0      	blx	r6
    d780:	1e06      	subs	r6, r0, #0
    d782:	dd70      	ble.n	d866 <__sfvwrite_r+0x296>
    d784:	9f05      	ldr	r7, [sp, #20]
    d786:	9909      	ldr	r1, [sp, #36]	; 0x24
    d788:	19bf      	adds	r7, r7, r6
    d78a:	6889      	ldr	r1, [r1, #8]
    d78c:	9705      	str	r7, [sp, #20]
    d78e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    d790:	1bad      	subs	r5, r5, r6
    d792:	1b8e      	subs	r6, r1, r6
    d794:	60be      	str	r6, [r7, #8]
    d796:	d000      	beq.n	d79a <__sfvwrite_r+0x1ca>
    d798:	e761      	b.n	d65e <__sfvwrite_r+0x8e>
    d79a:	e721      	b.n	d5e0 <__sfvwrite_r+0x10>
    d79c:	9d08      	ldr	r5, [sp, #32]
    d79e:	2d00      	cmp	r5, #0
    d7a0:	d033      	beq.n	d80a <__sfvwrite_r+0x23a>
    d7a2:	9704      	str	r7, [sp, #16]
    d7a4:	42b7      	cmp	r7, r6
    d7a6:	d900      	bls.n	d7aa <__sfvwrite_r+0x1da>
    d7a8:	9604      	str	r6, [sp, #16]
    d7aa:	6820      	ldr	r0, [r4, #0]
    d7ac:	6921      	ldr	r1, [r4, #16]
    d7ae:	68a5      	ldr	r5, [r4, #8]
    d7b0:	6963      	ldr	r3, [r4, #20]
    d7b2:	4288      	cmp	r0, r1
    d7b4:	d938      	bls.n	d828 <__sfvwrite_r+0x258>
    d7b6:	9a04      	ldr	r2, [sp, #16]
    d7b8:	18ed      	adds	r5, r5, r3
    d7ba:	42aa      	cmp	r2, r5
    d7bc:	dd34      	ble.n	d828 <__sfvwrite_r+0x258>
    d7be:	9905      	ldr	r1, [sp, #20]
    d7c0:	1c2a      	adds	r2, r5, #0
    d7c2:	f000 fb6e 	bl	dea2 <memmove>
    d7c6:	6821      	ldr	r1, [r4, #0]
    d7c8:	9807      	ldr	r0, [sp, #28]
    d7ca:	194b      	adds	r3, r1, r5
    d7cc:	6023      	str	r3, [r4, #0]
    d7ce:	1c21      	adds	r1, r4, #0
    d7d0:	f7ff fcbe 	bl	d150 <_fflush_r>
    d7d4:	2800      	cmp	r0, #0
    d7d6:	d146      	bne.n	d866 <__sfvwrite_r+0x296>
    d7d8:	1b7f      	subs	r7, r7, r5
    d7da:	d03c      	beq.n	d856 <__sfvwrite_r+0x286>
    d7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d7de:	9a05      	ldr	r2, [sp, #20]
    d7e0:	689b      	ldr	r3, [r3, #8]
    d7e2:	9909      	ldr	r1, [sp, #36]	; 0x24
    d7e4:	1952      	adds	r2, r2, r5
    d7e6:	1b76      	subs	r6, r6, r5
    d7e8:	1b5d      	subs	r5, r3, r5
    d7ea:	9205      	str	r2, [sp, #20]
    d7ec:	608d      	str	r5, [r1, #8]
    d7ee:	d100      	bne.n	d7f2 <__sfvwrite_r+0x222>
    d7f0:	e6f6      	b.n	d5e0 <__sfvwrite_r+0x10>
    d7f2:	2e00      	cmp	r6, #0
    d7f4:	d1d2      	bne.n	d79c <__sfvwrite_r+0x1cc>
    d7f6:	9d06      	ldr	r5, [sp, #24]
    d7f8:	682d      	ldr	r5, [r5, #0]
    d7fa:	9505      	str	r5, [sp, #20]
    d7fc:	9d06      	ldr	r5, [sp, #24]
    d7fe:	686e      	ldr	r6, [r5, #4]
    d800:	3508      	adds	r5, #8
    d802:	9506      	str	r5, [sp, #24]
    d804:	2500      	movs	r5, #0
    d806:	9508      	str	r5, [sp, #32]
    d808:	e7f3      	b.n	d7f2 <__sfvwrite_r+0x222>
    d80a:	9805      	ldr	r0, [sp, #20]
    d80c:	210a      	movs	r1, #10
    d80e:	1c32      	adds	r2, r6, #0
    d810:	f000 fb3c 	bl	de8c <memchr>
    d814:	2800      	cmp	r0, #0
    d816:	d003      	beq.n	d820 <__sfvwrite_r+0x250>
    d818:	9d05      	ldr	r5, [sp, #20]
    d81a:	1c47      	adds	r7, r0, #1
    d81c:	1b7f      	subs	r7, r7, r5
    d81e:	e000      	b.n	d822 <__sfvwrite_r+0x252>
    d820:	1c77      	adds	r7, r6, #1
    d822:	2501      	movs	r5, #1
    d824:	9508      	str	r5, [sp, #32]
    d826:	e7bc      	b.n	d7a2 <__sfvwrite_r+0x1d2>
    d828:	9d04      	ldr	r5, [sp, #16]
    d82a:	429d      	cmp	r5, r3
    d82c:	db07      	blt.n	d83e <__sfvwrite_r+0x26e>
    d82e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    d830:	9807      	ldr	r0, [sp, #28]
    d832:	69e1      	ldr	r1, [r4, #28]
    d834:	9a05      	ldr	r2, [sp, #20]
    d836:	47a8      	blx	r5
    d838:	1e05      	subs	r5, r0, #0
    d83a:	dccd      	bgt.n	d7d8 <__sfvwrite_r+0x208>
    d83c:	e013      	b.n	d866 <__sfvwrite_r+0x296>
    d83e:	9905      	ldr	r1, [sp, #20]
    d840:	9a04      	ldr	r2, [sp, #16]
    d842:	f000 fb2e 	bl	dea2 <memmove>
    d846:	68a1      	ldr	r1, [r4, #8]
    d848:	9d04      	ldr	r5, [sp, #16]
    d84a:	1b4b      	subs	r3, r1, r5
    d84c:	6821      	ldr	r1, [r4, #0]
    d84e:	60a3      	str	r3, [r4, #8]
    d850:	194b      	adds	r3, r1, r5
    d852:	6023      	str	r3, [r4, #0]
    d854:	e7c0      	b.n	d7d8 <__sfvwrite_r+0x208>
    d856:	9807      	ldr	r0, [sp, #28]
    d858:	1c21      	adds	r1, r4, #0
    d85a:	f7ff fc79 	bl	d150 <_fflush_r>
    d85e:	2800      	cmp	r0, #0
    d860:	d101      	bne.n	d866 <__sfvwrite_r+0x296>
    d862:	9708      	str	r7, [sp, #32]
    d864:	e7ba      	b.n	d7dc <__sfvwrite_r+0x20c>
    d866:	89a3      	ldrh	r3, [r4, #12]
    d868:	2240      	movs	r2, #64	; 0x40
    d86a:	4313      	orrs	r3, r2
    d86c:	81a3      	strh	r3, [r4, #12]
    d86e:	2001      	movs	r0, #1
    d870:	4240      	negs	r0, r0
    d872:	b00b      	add	sp, #44	; 0x2c
    d874:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d876:	46c0      	nop			; (mov r8, r8)
    d878:	7ffffc00 	.word	0x7ffffc00
    d87c:	fffffb7f 	.word	0xfffffb7f
    d880:	7fffffff 	.word	0x7fffffff

0000d884 <_fwalk>:
    d884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d886:	22b8      	movs	r2, #184	; 0xb8
    d888:	0092      	lsls	r2, r2, #2
    d88a:	9101      	str	r1, [sp, #4]
    d88c:	1884      	adds	r4, r0, r2
    d88e:	2600      	movs	r6, #0
    d890:	2c00      	cmp	r4, #0
    d892:	d012      	beq.n	d8ba <_fwalk+0x36>
    d894:	68a5      	ldr	r5, [r4, #8]
    d896:	6867      	ldr	r7, [r4, #4]
    d898:	3f01      	subs	r7, #1
    d89a:	d40c      	bmi.n	d8b6 <_fwalk+0x32>
    d89c:	89ab      	ldrh	r3, [r5, #12]
    d89e:	2b01      	cmp	r3, #1
    d8a0:	d907      	bls.n	d8b2 <_fwalk+0x2e>
    d8a2:	220e      	movs	r2, #14
    d8a4:	5eab      	ldrsh	r3, [r5, r2]
    d8a6:	3301      	adds	r3, #1
    d8a8:	d003      	beq.n	d8b2 <_fwalk+0x2e>
    d8aa:	1c28      	adds	r0, r5, #0
    d8ac:	9b01      	ldr	r3, [sp, #4]
    d8ae:	4798      	blx	r3
    d8b0:	4306      	orrs	r6, r0
    d8b2:	3568      	adds	r5, #104	; 0x68
    d8b4:	e7f0      	b.n	d898 <_fwalk+0x14>
    d8b6:	6824      	ldr	r4, [r4, #0]
    d8b8:	e7ea      	b.n	d890 <_fwalk+0xc>
    d8ba:	1c30      	adds	r0, r6, #0
    d8bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000d8be <_fwalk_reent>:
    d8be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d8c0:	22b8      	movs	r2, #184	; 0xb8
    d8c2:	0092      	lsls	r2, r2, #2
    d8c4:	1c07      	adds	r7, r0, #0
    d8c6:	9101      	str	r1, [sp, #4]
    d8c8:	1884      	adds	r4, r0, r2
    d8ca:	2600      	movs	r6, #0
    d8cc:	2c00      	cmp	r4, #0
    d8ce:	d016      	beq.n	d8fe <_fwalk_reent+0x40>
    d8d0:	6863      	ldr	r3, [r4, #4]
    d8d2:	68a5      	ldr	r5, [r4, #8]
    d8d4:	9300      	str	r3, [sp, #0]
    d8d6:	9a00      	ldr	r2, [sp, #0]
    d8d8:	3a01      	subs	r2, #1
    d8da:	9200      	str	r2, [sp, #0]
    d8dc:	d40d      	bmi.n	d8fa <_fwalk_reent+0x3c>
    d8de:	89ab      	ldrh	r3, [r5, #12]
    d8e0:	2b01      	cmp	r3, #1
    d8e2:	d908      	bls.n	d8f6 <_fwalk_reent+0x38>
    d8e4:	220e      	movs	r2, #14
    d8e6:	5eab      	ldrsh	r3, [r5, r2]
    d8e8:	3301      	adds	r3, #1
    d8ea:	d004      	beq.n	d8f6 <_fwalk_reent+0x38>
    d8ec:	1c38      	adds	r0, r7, #0
    d8ee:	1c29      	adds	r1, r5, #0
    d8f0:	9b01      	ldr	r3, [sp, #4]
    d8f2:	4798      	blx	r3
    d8f4:	4306      	orrs	r6, r0
    d8f6:	3568      	adds	r5, #104	; 0x68
    d8f8:	e7ed      	b.n	d8d6 <_fwalk_reent+0x18>
    d8fa:	6824      	ldr	r4, [r4, #0]
    d8fc:	e7e6      	b.n	d8cc <_fwalk_reent+0xe>
    d8fe:	1c30      	adds	r0, r6, #0
    d900:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000d904 <_setlocale_r>:
    d904:	b538      	push	{r3, r4, r5, lr}
    d906:	1c14      	adds	r4, r2, #0
    d908:	4d0c      	ldr	r5, [pc, #48]	; (d93c <_setlocale_r+0x38>)
    d90a:	d101      	bne.n	d910 <_setlocale_r+0xc>
    d90c:	1c28      	adds	r0, r5, #0
    d90e:	e013      	b.n	d938 <_setlocale_r+0x34>
    d910:	1c10      	adds	r0, r2, #0
    d912:	490b      	ldr	r1, [pc, #44]	; (d940 <_setlocale_r+0x3c>)
    d914:	f7fd fc92 	bl	b23c <strcmp>
    d918:	2800      	cmp	r0, #0
    d91a:	d0f7      	beq.n	d90c <_setlocale_r+0x8>
    d91c:	1c20      	adds	r0, r4, #0
    d91e:	1c29      	adds	r1, r5, #0
    d920:	f7fd fc8c 	bl	b23c <strcmp>
    d924:	2800      	cmp	r0, #0
    d926:	d0f1      	beq.n	d90c <_setlocale_r+0x8>
    d928:	1c20      	adds	r0, r4, #0
    d92a:	4906      	ldr	r1, [pc, #24]	; (d944 <_setlocale_r+0x40>)
    d92c:	f7fd fc86 	bl	b23c <strcmp>
    d930:	4243      	negs	r3, r0
    d932:	4158      	adcs	r0, r3
    d934:	4240      	negs	r0, r0
    d936:	4028      	ands	r0, r5
    d938:	bd38      	pop	{r3, r4, r5, pc}
    d93a:	46c0      	nop			; (mov r8, r8)
    d93c:	00010a80 	.word	0x00010a80
    d940:	00010ae5 	.word	0x00010ae5
    d944:	00010a83 	.word	0x00010a83

0000d948 <__locale_charset>:
    d948:	4800      	ldr	r0, [pc, #0]	; (d94c <__locale_charset+0x4>)
    d94a:	4770      	bx	lr
    d94c:	20000470 	.word	0x20000470

0000d950 <__locale_mb_cur_max>:
    d950:	4b01      	ldr	r3, [pc, #4]	; (d958 <__locale_mb_cur_max+0x8>)
    d952:	6a18      	ldr	r0, [r3, #32]
    d954:	4770      	bx	lr
    d956:	46c0      	nop			; (mov r8, r8)
    d958:	20000470 	.word	0x20000470

0000d95c <__locale_msgcharset>:
    d95c:	4801      	ldr	r0, [pc, #4]	; (d964 <__locale_msgcharset+0x8>)
    d95e:	3024      	adds	r0, #36	; 0x24
    d960:	4770      	bx	lr
    d962:	46c0      	nop			; (mov r8, r8)
    d964:	20000470 	.word	0x20000470

0000d968 <__locale_cjk_lang>:
    d968:	2000      	movs	r0, #0
    d96a:	4770      	bx	lr

0000d96c <_localeconv_r>:
    d96c:	4801      	ldr	r0, [pc, #4]	; (d974 <_localeconv_r+0x8>)
    d96e:	3044      	adds	r0, #68	; 0x44
    d970:	4770      	bx	lr
    d972:	46c0      	nop			; (mov r8, r8)
    d974:	20000470 	.word	0x20000470

0000d978 <setlocale>:
    d978:	b508      	push	{r3, lr}
    d97a:	1c0a      	adds	r2, r1, #0
    d97c:	4903      	ldr	r1, [pc, #12]	; (d98c <setlocale+0x14>)
    d97e:	1c03      	adds	r3, r0, #0
    d980:	6808      	ldr	r0, [r1, #0]
    d982:	1c19      	adds	r1, r3, #0
    d984:	f7ff ffbe 	bl	d904 <_setlocale_r>
    d988:	bd08      	pop	{r3, pc}
    d98a:	46c0      	nop			; (mov r8, r8)
    d98c:	20000040 	.word	0x20000040

0000d990 <localeconv>:
    d990:	4801      	ldr	r0, [pc, #4]	; (d998 <localeconv+0x8>)
    d992:	3044      	adds	r0, #68	; 0x44
    d994:	4770      	bx	lr
    d996:	46c0      	nop			; (mov r8, r8)
    d998:	20000470 	.word	0x20000470

0000d99c <__smakebuf_r>:
    d99c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d99e:	898b      	ldrh	r3, [r1, #12]
    d9a0:	b091      	sub	sp, #68	; 0x44
    d9a2:	1c06      	adds	r6, r0, #0
    d9a4:	1c0c      	adds	r4, r1, #0
    d9a6:	0799      	lsls	r1, r3, #30
    d9a8:	d43f      	bmi.n	da2a <__smakebuf_r+0x8e>
    d9aa:	220e      	movs	r2, #14
    d9ac:	5ea1      	ldrsh	r1, [r4, r2]
    d9ae:	2900      	cmp	r1, #0
    d9b0:	da06      	bge.n	d9c0 <__smakebuf_r+0x24>
    d9b2:	89a3      	ldrh	r3, [r4, #12]
    d9b4:	2540      	movs	r5, #64	; 0x40
    d9b6:	0619      	lsls	r1, r3, #24
    d9b8:	d408      	bmi.n	d9cc <__smakebuf_r+0x30>
    d9ba:	2580      	movs	r5, #128	; 0x80
    d9bc:	00ed      	lsls	r5, r5, #3
    d9be:	e005      	b.n	d9cc <__smakebuf_r+0x30>
    d9c0:	aa01      	add	r2, sp, #4
    d9c2:	f001 fe8d 	bl	f6e0 <_fstat_r>
    d9c6:	2800      	cmp	r0, #0
    d9c8:	da06      	bge.n	d9d8 <__smakebuf_r+0x3c>
    d9ca:	e7f2      	b.n	d9b2 <__smakebuf_r+0x16>
    d9cc:	2280      	movs	r2, #128	; 0x80
    d9ce:	0112      	lsls	r2, r2, #4
    d9d0:	4313      	orrs	r3, r2
    d9d2:	81a3      	strh	r3, [r4, #12]
    d9d4:	2700      	movs	r7, #0
    d9d6:	e01c      	b.n	da12 <__smakebuf_r+0x76>
    d9d8:	9b02      	ldr	r3, [sp, #8]
    d9da:	22f0      	movs	r2, #240	; 0xf0
    d9dc:	0212      	lsls	r2, r2, #8
    d9de:	401a      	ands	r2, r3
    d9e0:	4b21      	ldr	r3, [pc, #132]	; (da68 <__smakebuf_r+0xcc>)
    d9e2:	2580      	movs	r5, #128	; 0x80
    d9e4:	18d7      	adds	r7, r2, r3
    d9e6:	2180      	movs	r1, #128	; 0x80
    d9e8:	427b      	negs	r3, r7
    d9ea:	415f      	adcs	r7, r3
    d9ec:	00ed      	lsls	r5, r5, #3
    d9ee:	89a3      	ldrh	r3, [r4, #12]
    d9f0:	0209      	lsls	r1, r1, #8
    d9f2:	428a      	cmp	r2, r1
    d9f4:	d107      	bne.n	da06 <__smakebuf_r+0x6a>
    d9f6:	4a1d      	ldr	r2, [pc, #116]	; (da6c <__smakebuf_r+0xd0>)
    d9f8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    d9fa:	4291      	cmp	r1, r2
    d9fc:	d103      	bne.n	da06 <__smakebuf_r+0x6a>
    d9fe:	432b      	orrs	r3, r5
    da00:	81a3      	strh	r3, [r4, #12]
    da02:	64e5      	str	r5, [r4, #76]	; 0x4c
    da04:	e005      	b.n	da12 <__smakebuf_r+0x76>
    da06:	2280      	movs	r2, #128	; 0x80
    da08:	0112      	lsls	r2, r2, #4
    da0a:	4313      	orrs	r3, r2
    da0c:	2580      	movs	r5, #128	; 0x80
    da0e:	81a3      	strh	r3, [r4, #12]
    da10:	00ed      	lsls	r5, r5, #3
    da12:	1c30      	adds	r0, r6, #0
    da14:	1c29      	adds	r1, r5, #0
    da16:	f000 f841 	bl	da9c <_malloc_r>
    da1a:	2800      	cmp	r0, #0
    da1c:	d10c      	bne.n	da38 <__smakebuf_r+0x9c>
    da1e:	89a3      	ldrh	r3, [r4, #12]
    da20:	059a      	lsls	r2, r3, #22
    da22:	d41f      	bmi.n	da64 <__smakebuf_r+0xc8>
    da24:	2202      	movs	r2, #2
    da26:	4313      	orrs	r3, r2
    da28:	81a3      	strh	r3, [r4, #12]
    da2a:	1c23      	adds	r3, r4, #0
    da2c:	3343      	adds	r3, #67	; 0x43
    da2e:	6023      	str	r3, [r4, #0]
    da30:	6123      	str	r3, [r4, #16]
    da32:	2301      	movs	r3, #1
    da34:	6163      	str	r3, [r4, #20]
    da36:	e015      	b.n	da64 <__smakebuf_r+0xc8>
    da38:	4b0d      	ldr	r3, [pc, #52]	; (da70 <__smakebuf_r+0xd4>)
    da3a:	2280      	movs	r2, #128	; 0x80
    da3c:	63f3      	str	r3, [r6, #60]	; 0x3c
    da3e:	89a3      	ldrh	r3, [r4, #12]
    da40:	6020      	str	r0, [r4, #0]
    da42:	4313      	orrs	r3, r2
    da44:	81a3      	strh	r3, [r4, #12]
    da46:	6120      	str	r0, [r4, #16]
    da48:	6165      	str	r5, [r4, #20]
    da4a:	2f00      	cmp	r7, #0
    da4c:	d00a      	beq.n	da64 <__smakebuf_r+0xc8>
    da4e:	230e      	movs	r3, #14
    da50:	5ee1      	ldrsh	r1, [r4, r3]
    da52:	1c30      	adds	r0, r6, #0
    da54:	f001 fe56 	bl	f704 <_isatty_r>
    da58:	2800      	cmp	r0, #0
    da5a:	d003      	beq.n	da64 <__smakebuf_r+0xc8>
    da5c:	89a3      	ldrh	r3, [r4, #12]
    da5e:	2201      	movs	r2, #1
    da60:	4313      	orrs	r3, r2
    da62:	81a3      	strh	r3, [r4, #12]
    da64:	b011      	add	sp, #68	; 0x44
    da66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da68:	ffffe000 	.word	0xffffe000
    da6c:	0000ead5 	.word	0x0000ead5
    da70:	0000d1a9 	.word	0x0000d1a9

0000da74 <malloc>:
    da74:	b508      	push	{r3, lr}
    da76:	4b03      	ldr	r3, [pc, #12]	; (da84 <malloc+0x10>)
    da78:	1c01      	adds	r1, r0, #0
    da7a:	6818      	ldr	r0, [r3, #0]
    da7c:	f000 f80e 	bl	da9c <_malloc_r>
    da80:	bd08      	pop	{r3, pc}
    da82:	46c0      	nop			; (mov r8, r8)
    da84:	20000040 	.word	0x20000040

0000da88 <free>:
    da88:	b508      	push	{r3, lr}
    da8a:	4b03      	ldr	r3, [pc, #12]	; (da98 <free+0x10>)
    da8c:	1c01      	adds	r1, r0, #0
    da8e:	6818      	ldr	r0, [r3, #0]
    da90:	f7ff fce0 	bl	d454 <_free_r>
    da94:	bd08      	pop	{r3, pc}
    da96:	46c0      	nop			; (mov r8, r8)
    da98:	20000040 	.word	0x20000040

0000da9c <_malloc_r>:
    da9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    da9e:	1c0b      	adds	r3, r1, #0
    daa0:	b087      	sub	sp, #28
    daa2:	330b      	adds	r3, #11
    daa4:	9003      	str	r0, [sp, #12]
    daa6:	2b16      	cmp	r3, #22
    daa8:	d904      	bls.n	dab4 <_malloc_r+0x18>
    daaa:	2207      	movs	r2, #7
    daac:	4393      	bics	r3, r2
    daae:	9301      	str	r3, [sp, #4]
    dab0:	d502      	bpl.n	dab8 <_malloc_r+0x1c>
    dab2:	e004      	b.n	dabe <_malloc_r+0x22>
    dab4:	2410      	movs	r4, #16
    dab6:	9401      	str	r4, [sp, #4]
    dab8:	9d01      	ldr	r5, [sp, #4]
    daba:	428d      	cmp	r5, r1
    dabc:	d203      	bcs.n	dac6 <_malloc_r+0x2a>
    dabe:	9e03      	ldr	r6, [sp, #12]
    dac0:	230c      	movs	r3, #12
    dac2:	6033      	str	r3, [r6, #0]
    dac4:	e1ca      	b.n	de5c <_malloc_r+0x3c0>
    dac6:	9803      	ldr	r0, [sp, #12]
    dac8:	f000 fa04 	bl	ded4 <__malloc_lock>
    dacc:	23f8      	movs	r3, #248	; 0xf8
    dace:	9f01      	ldr	r7, [sp, #4]
    dad0:	33ff      	adds	r3, #255	; 0xff
    dad2:	4cb0      	ldr	r4, [pc, #704]	; (dd94 <_malloc_r+0x2f8>)
    dad4:	429f      	cmp	r7, r3
    dad6:	d817      	bhi.n	db08 <_malloc_r+0x6c>
    dad8:	08fa      	lsrs	r2, r7, #3
    dada:	00d3      	lsls	r3, r2, #3
    dadc:	18e3      	adds	r3, r4, r3
    dade:	68dd      	ldr	r5, [r3, #12]
    dae0:	429d      	cmp	r5, r3
    dae2:	d105      	bne.n	daf0 <_malloc_r+0x54>
    dae4:	1c2b      	adds	r3, r5, #0
    dae6:	696d      	ldr	r5, [r5, #20]
    dae8:	3308      	adds	r3, #8
    daea:	3202      	adds	r2, #2
    daec:	429d      	cmp	r5, r3
    daee:	d04a      	beq.n	db86 <_malloc_r+0xea>
    daf0:	6868      	ldr	r0, [r5, #4]
    daf2:	2303      	movs	r3, #3
    daf4:	68ea      	ldr	r2, [r5, #12]
    daf6:	68a9      	ldr	r1, [r5, #8]
    daf8:	4398      	bics	r0, r3
    dafa:	182b      	adds	r3, r5, r0
    dafc:	60ca      	str	r2, [r1, #12]
    dafe:	6091      	str	r1, [r2, #8]
    db00:	6859      	ldr	r1, [r3, #4]
    db02:	2201      	movs	r2, #1
    db04:	430a      	orrs	r2, r1
    db06:	e05c      	b.n	dbc2 <_malloc_r+0x126>
    db08:	9d01      	ldr	r5, [sp, #4]
    db0a:	223f      	movs	r2, #63	; 0x3f
    db0c:	0a6b      	lsrs	r3, r5, #9
    db0e:	d01e      	beq.n	db4e <_malloc_r+0xb2>
    db10:	2b04      	cmp	r3, #4
    db12:	d802      	bhi.n	db1a <_malloc_r+0x7e>
    db14:	09aa      	lsrs	r2, r5, #6
    db16:	3238      	adds	r2, #56	; 0x38
    db18:	e019      	b.n	db4e <_malloc_r+0xb2>
    db1a:	2b14      	cmp	r3, #20
    db1c:	d802      	bhi.n	db24 <_malloc_r+0x88>
    db1e:	1c1a      	adds	r2, r3, #0
    db20:	325b      	adds	r2, #91	; 0x5b
    db22:	e014      	b.n	db4e <_malloc_r+0xb2>
    db24:	2b54      	cmp	r3, #84	; 0x54
    db26:	d803      	bhi.n	db30 <_malloc_r+0x94>
    db28:	9e01      	ldr	r6, [sp, #4]
    db2a:	0b32      	lsrs	r2, r6, #12
    db2c:	326e      	adds	r2, #110	; 0x6e
    db2e:	e00e      	b.n	db4e <_malloc_r+0xb2>
    db30:	22aa      	movs	r2, #170	; 0xaa
    db32:	0052      	lsls	r2, r2, #1
    db34:	4293      	cmp	r3, r2
    db36:	d803      	bhi.n	db40 <_malloc_r+0xa4>
    db38:	9f01      	ldr	r7, [sp, #4]
    db3a:	0bfa      	lsrs	r2, r7, #15
    db3c:	3277      	adds	r2, #119	; 0x77
    db3e:	e006      	b.n	db4e <_malloc_r+0xb2>
    db40:	4995      	ldr	r1, [pc, #596]	; (dd98 <_malloc_r+0x2fc>)
    db42:	227e      	movs	r2, #126	; 0x7e
    db44:	428b      	cmp	r3, r1
    db46:	d802      	bhi.n	db4e <_malloc_r+0xb2>
    db48:	9d01      	ldr	r5, [sp, #4]
    db4a:	0caa      	lsrs	r2, r5, #18
    db4c:	327c      	adds	r2, #124	; 0x7c
    db4e:	00d3      	lsls	r3, r2, #3
    db50:	18e3      	adds	r3, r4, r3
    db52:	68dd      	ldr	r5, [r3, #12]
    db54:	429d      	cmp	r5, r3
    db56:	d015      	beq.n	db84 <_malloc_r+0xe8>
    db58:	686e      	ldr	r6, [r5, #4]
    db5a:	2103      	movs	r1, #3
    db5c:	9f01      	ldr	r7, [sp, #4]
    db5e:	438e      	bics	r6, r1
    db60:	1bf0      	subs	r0, r6, r7
    db62:	280f      	cmp	r0, #15
    db64:	dd01      	ble.n	db6a <_malloc_r+0xce>
    db66:	3a01      	subs	r2, #1
    db68:	e00c      	b.n	db84 <_malloc_r+0xe8>
    db6a:	2800      	cmp	r0, #0
    db6c:	db08      	blt.n	db80 <_malloc_r+0xe4>
    db6e:	68eb      	ldr	r3, [r5, #12]
    db70:	68aa      	ldr	r2, [r5, #8]
    db72:	60d3      	str	r3, [r2, #12]
    db74:	609a      	str	r2, [r3, #8]
    db76:	19ab      	adds	r3, r5, r6
    db78:	6858      	ldr	r0, [r3, #4]
    db7a:	2201      	movs	r2, #1
    db7c:	4302      	orrs	r2, r0
    db7e:	e020      	b.n	dbc2 <_malloc_r+0x126>
    db80:	68ed      	ldr	r5, [r5, #12]
    db82:	e7e7      	b.n	db54 <_malloc_r+0xb8>
    db84:	3201      	adds	r2, #1
    db86:	1c20      	adds	r0, r4, #0
    db88:	6925      	ldr	r5, [r4, #16]
    db8a:	3008      	adds	r0, #8
    db8c:	4285      	cmp	r5, r0
    db8e:	d061      	beq.n	dc54 <_malloc_r+0x1b8>
    db90:	6869      	ldr	r1, [r5, #4]
    db92:	2303      	movs	r3, #3
    db94:	9e01      	ldr	r6, [sp, #4]
    db96:	4399      	bics	r1, r3
    db98:	1c0b      	adds	r3, r1, #0
    db9a:	1b89      	subs	r1, r1, r6
    db9c:	290f      	cmp	r1, #15
    db9e:	dd08      	ble.n	dbb2 <_malloc_r+0x116>
    dba0:	2201      	movs	r2, #1
    dba2:	19ab      	adds	r3, r5, r6
    dba4:	4316      	orrs	r6, r2
    dba6:	606e      	str	r6, [r5, #4]
    dba8:	6163      	str	r3, [r4, #20]
    dbaa:	6123      	str	r3, [r4, #16]
    dbac:	60d8      	str	r0, [r3, #12]
    dbae:	6098      	str	r0, [r3, #8]
    dbb0:	e07f      	b.n	dcb2 <_malloc_r+0x216>
    dbb2:	6160      	str	r0, [r4, #20]
    dbb4:	6120      	str	r0, [r4, #16]
    dbb6:	2900      	cmp	r1, #0
    dbb8:	db05      	blt.n	dbc6 <_malloc_r+0x12a>
    dbba:	18eb      	adds	r3, r5, r3
    dbbc:	685f      	ldr	r7, [r3, #4]
    dbbe:	2201      	movs	r2, #1
    dbc0:	433a      	orrs	r2, r7
    dbc2:	605a      	str	r2, [r3, #4]
    dbc4:	e157      	b.n	de76 <_malloc_r+0x3da>
    dbc6:	4975      	ldr	r1, [pc, #468]	; (dd9c <_malloc_r+0x300>)
    dbc8:	428b      	cmp	r3, r1
    dbca:	d80b      	bhi.n	dbe4 <_malloc_r+0x148>
    dbcc:	08db      	lsrs	r3, r3, #3
    dbce:	1099      	asrs	r1, r3, #2
    dbd0:	2001      	movs	r0, #1
    dbd2:	4088      	lsls	r0, r1
    dbd4:	1c01      	adds	r1, r0, #0
    dbd6:	6860      	ldr	r0, [r4, #4]
    dbd8:	00db      	lsls	r3, r3, #3
    dbda:	4301      	orrs	r1, r0
    dbdc:	18e3      	adds	r3, r4, r3
    dbde:	6061      	str	r1, [r4, #4]
    dbe0:	6899      	ldr	r1, [r3, #8]
    dbe2:	e033      	b.n	dc4c <_malloc_r+0x1b0>
    dbe4:	0a59      	lsrs	r1, r3, #9
    dbe6:	2904      	cmp	r1, #4
    dbe8:	d802      	bhi.n	dbf0 <_malloc_r+0x154>
    dbea:	0998      	lsrs	r0, r3, #6
    dbec:	3038      	adds	r0, #56	; 0x38
    dbee:	e016      	b.n	dc1e <_malloc_r+0x182>
    dbf0:	2914      	cmp	r1, #20
    dbf2:	d802      	bhi.n	dbfa <_malloc_r+0x15e>
    dbf4:	1c08      	adds	r0, r1, #0
    dbf6:	305b      	adds	r0, #91	; 0x5b
    dbf8:	e011      	b.n	dc1e <_malloc_r+0x182>
    dbfa:	2954      	cmp	r1, #84	; 0x54
    dbfc:	d802      	bhi.n	dc04 <_malloc_r+0x168>
    dbfe:	0b18      	lsrs	r0, r3, #12
    dc00:	306e      	adds	r0, #110	; 0x6e
    dc02:	e00c      	b.n	dc1e <_malloc_r+0x182>
    dc04:	20aa      	movs	r0, #170	; 0xaa
    dc06:	0040      	lsls	r0, r0, #1
    dc08:	4281      	cmp	r1, r0
    dc0a:	d802      	bhi.n	dc12 <_malloc_r+0x176>
    dc0c:	0bd8      	lsrs	r0, r3, #15
    dc0e:	3077      	adds	r0, #119	; 0x77
    dc10:	e005      	b.n	dc1e <_malloc_r+0x182>
    dc12:	4e61      	ldr	r6, [pc, #388]	; (dd98 <_malloc_r+0x2fc>)
    dc14:	207e      	movs	r0, #126	; 0x7e
    dc16:	42b1      	cmp	r1, r6
    dc18:	d801      	bhi.n	dc1e <_malloc_r+0x182>
    dc1a:	0c98      	lsrs	r0, r3, #18
    dc1c:	307c      	adds	r0, #124	; 0x7c
    dc1e:	00c6      	lsls	r6, r0, #3
    dc20:	19a6      	adds	r6, r4, r6
    dc22:	68b1      	ldr	r1, [r6, #8]
    dc24:	42b1      	cmp	r1, r6
    dc26:	d10b      	bne.n	dc40 <_malloc_r+0x1a4>
    dc28:	1080      	asrs	r0, r0, #2
    dc2a:	2301      	movs	r3, #1
    dc2c:	4083      	lsls	r3, r0
    dc2e:	1c18      	adds	r0, r3, #0
    dc30:	6863      	ldr	r3, [r4, #4]
    dc32:	4318      	orrs	r0, r3
    dc34:	6060      	str	r0, [r4, #4]
    dc36:	1c0b      	adds	r3, r1, #0
    dc38:	e008      	b.n	dc4c <_malloc_r+0x1b0>
    dc3a:	6889      	ldr	r1, [r1, #8]
    dc3c:	42b1      	cmp	r1, r6
    dc3e:	d004      	beq.n	dc4a <_malloc_r+0x1ae>
    dc40:	684f      	ldr	r7, [r1, #4]
    dc42:	2003      	movs	r0, #3
    dc44:	4387      	bics	r7, r0
    dc46:	42bb      	cmp	r3, r7
    dc48:	d3f7      	bcc.n	dc3a <_malloc_r+0x19e>
    dc4a:	68cb      	ldr	r3, [r1, #12]
    dc4c:	60eb      	str	r3, [r5, #12]
    dc4e:	60a9      	str	r1, [r5, #8]
    dc50:	609d      	str	r5, [r3, #8]
    dc52:	60cd      	str	r5, [r1, #12]
    dc54:	1093      	asrs	r3, r2, #2
    dc56:	2101      	movs	r1, #1
    dc58:	4099      	lsls	r1, r3
    dc5a:	1c0b      	adds	r3, r1, #0
    dc5c:	6861      	ldr	r1, [r4, #4]
    dc5e:	428b      	cmp	r3, r1
    dc60:	d857      	bhi.n	dd12 <_malloc_r+0x276>
    dc62:	4219      	tst	r1, r3
    dc64:	d105      	bne.n	dc72 <_malloc_r+0x1d6>
    dc66:	2003      	movs	r0, #3
    dc68:	4382      	bics	r2, r0
    dc6a:	005b      	lsls	r3, r3, #1
    dc6c:	3204      	adds	r2, #4
    dc6e:	4219      	tst	r1, r3
    dc70:	d0fb      	beq.n	dc6a <_malloc_r+0x1ce>
    dc72:	00d7      	lsls	r7, r2, #3
    dc74:	19e7      	adds	r7, r4, r7
    dc76:	9704      	str	r7, [sp, #16]
    dc78:	1c38      	adds	r0, r7, #0
    dc7a:	4694      	mov	ip, r2
    dc7c:	68c5      	ldr	r5, [r0, #12]
    dc7e:	e000      	b.n	dc82 <_malloc_r+0x1e6>
    dc80:	68ed      	ldr	r5, [r5, #12]
    dc82:	2103      	movs	r1, #3
    dc84:	4285      	cmp	r5, r0
    dc86:	d025      	beq.n	dcd4 <_malloc_r+0x238>
    dc88:	686e      	ldr	r6, [r5, #4]
    dc8a:	9f01      	ldr	r7, [sp, #4]
    dc8c:	438e      	bics	r6, r1
    dc8e:	9602      	str	r6, [sp, #8]
    dc90:	1bf1      	subs	r1, r6, r7
    dc92:	290f      	cmp	r1, #15
    dc94:	dd11      	ble.n	dcba <_malloc_r+0x21e>
    dc96:	2201      	movs	r2, #1
    dc98:	1c38      	adds	r0, r7, #0
    dc9a:	4310      	orrs	r0, r2
    dc9c:	6068      	str	r0, [r5, #4]
    dc9e:	68ae      	ldr	r6, [r5, #8]
    dca0:	68e8      	ldr	r0, [r5, #12]
    dca2:	19eb      	adds	r3, r5, r7
    dca4:	60f0      	str	r0, [r6, #12]
    dca6:	3408      	adds	r4, #8
    dca8:	6086      	str	r6, [r0, #8]
    dcaa:	60e3      	str	r3, [r4, #12]
    dcac:	60a3      	str	r3, [r4, #8]
    dcae:	60dc      	str	r4, [r3, #12]
    dcb0:	609c      	str	r4, [r3, #8]
    dcb2:	430a      	orrs	r2, r1
    dcb4:	605a      	str	r2, [r3, #4]
    dcb6:	5059      	str	r1, [r3, r1]
    dcb8:	e0dd      	b.n	de76 <_malloc_r+0x3da>
    dcba:	2900      	cmp	r1, #0
    dcbc:	dbe0      	blt.n	dc80 <_malloc_r+0x1e4>
    dcbe:	9802      	ldr	r0, [sp, #8]
    dcc0:	2301      	movs	r3, #1
    dcc2:	182e      	adds	r6, r5, r0
    dcc4:	6871      	ldr	r1, [r6, #4]
    dcc6:	68aa      	ldr	r2, [r5, #8]
    dcc8:	430b      	orrs	r3, r1
    dcca:	6073      	str	r3, [r6, #4]
    dccc:	68eb      	ldr	r3, [r5, #12]
    dcce:	60d3      	str	r3, [r2, #12]
    dcd0:	609a      	str	r2, [r3, #8]
    dcd2:	e0d0      	b.n	de76 <_malloc_r+0x3da>
    dcd4:	2501      	movs	r5, #1
    dcd6:	44ac      	add	ip, r5
    dcd8:	4666      	mov	r6, ip
    dcda:	3008      	adds	r0, #8
    dcdc:	420e      	tst	r6, r1
    dcde:	d1cd      	bne.n	dc7c <_malloc_r+0x1e0>
    dce0:	0797      	lsls	r7, r2, #30
    dce2:	d103      	bne.n	dcec <_malloc_r+0x250>
    dce4:	6862      	ldr	r2, [r4, #4]
    dce6:	439a      	bics	r2, r3
    dce8:	6062      	str	r2, [r4, #4]
    dcea:	e006      	b.n	dcfa <_malloc_r+0x25e>
    dcec:	9904      	ldr	r1, [sp, #16]
    dcee:	3a01      	subs	r2, #1
    dcf0:	6808      	ldr	r0, [r1, #0]
    dcf2:	3908      	subs	r1, #8
    dcf4:	9004      	str	r0, [sp, #16]
    dcf6:	4288      	cmp	r0, r1
    dcf8:	d0f2      	beq.n	dce0 <_malloc_r+0x244>
    dcfa:	6861      	ldr	r1, [r4, #4]
    dcfc:	005b      	lsls	r3, r3, #1
    dcfe:	428b      	cmp	r3, r1
    dd00:	d807      	bhi.n	dd12 <_malloc_r+0x276>
    dd02:	2b00      	cmp	r3, #0
    dd04:	d005      	beq.n	dd12 <_malloc_r+0x276>
    dd06:	4662      	mov	r2, ip
    dd08:	4219      	tst	r1, r3
    dd0a:	d1b2      	bne.n	dc72 <_malloc_r+0x1d6>
    dd0c:	3204      	adds	r2, #4
    dd0e:	005b      	lsls	r3, r3, #1
    dd10:	e7fa      	b.n	dd08 <_malloc_r+0x26c>
    dd12:	68a6      	ldr	r6, [r4, #8]
    dd14:	2303      	movs	r3, #3
    dd16:	6871      	ldr	r1, [r6, #4]
    dd18:	9d01      	ldr	r5, [sp, #4]
    dd1a:	4399      	bics	r1, r3
    dd1c:	9102      	str	r1, [sp, #8]
    dd1e:	42a9      	cmp	r1, r5
    dd20:	d303      	bcc.n	dd2a <_malloc_r+0x28e>
    dd22:	1b4b      	subs	r3, r1, r5
    dd24:	2b0f      	cmp	r3, #15
    dd26:	dd00      	ble.n	dd2a <_malloc_r+0x28e>
    dd28:	e09a      	b.n	de60 <_malloc_r+0x3c4>
    dd2a:	9f02      	ldr	r7, [sp, #8]
    dd2c:	4a1c      	ldr	r2, [pc, #112]	; (dda0 <_malloc_r+0x304>)
    dd2e:	19f7      	adds	r7, r6, r7
    dd30:	9705      	str	r7, [sp, #20]
    dd32:	4f1c      	ldr	r7, [pc, #112]	; (dda4 <_malloc_r+0x308>)
    dd34:	9d01      	ldr	r5, [sp, #4]
    dd36:	6838      	ldr	r0, [r7, #0]
    dd38:	6892      	ldr	r2, [r2, #8]
    dd3a:	182b      	adds	r3, r5, r0
    dd3c:	3201      	adds	r2, #1
    dd3e:	d101      	bne.n	dd44 <_malloc_r+0x2a8>
    dd40:	3310      	adds	r3, #16
    dd42:	e003      	b.n	dd4c <_malloc_r+0x2b0>
    dd44:	4918      	ldr	r1, [pc, #96]	; (dda8 <_malloc_r+0x30c>)
    dd46:	185b      	adds	r3, r3, r1
    dd48:	0b1b      	lsrs	r3, r3, #12
    dd4a:	031b      	lsls	r3, r3, #12
    dd4c:	9304      	str	r3, [sp, #16]
    dd4e:	9803      	ldr	r0, [sp, #12]
    dd50:	9904      	ldr	r1, [sp, #16]
    dd52:	f000 fe7b 	bl	ea4c <_sbrk_r>
    dd56:	1c05      	adds	r5, r0, #0
    dd58:	1c42      	adds	r2, r0, #1
    dd5a:	d071      	beq.n	de40 <_malloc_r+0x3a4>
    dd5c:	9b05      	ldr	r3, [sp, #20]
    dd5e:	4298      	cmp	r0, r3
    dd60:	d201      	bcs.n	dd66 <_malloc_r+0x2ca>
    dd62:	42a6      	cmp	r6, r4
    dd64:	d16c      	bne.n	de40 <_malloc_r+0x3a4>
    dd66:	6879      	ldr	r1, [r7, #4]
    dd68:	9804      	ldr	r0, [sp, #16]
    dd6a:	1843      	adds	r3, r0, r1
    dd6c:	607b      	str	r3, [r7, #4]
    dd6e:	9f05      	ldr	r7, [sp, #20]
    dd70:	42bd      	cmp	r5, r7
    dd72:	d108      	bne.n	dd86 <_malloc_r+0x2ea>
    dd74:	052a      	lsls	r2, r5, #20
    dd76:	d106      	bne.n	dd86 <_malloc_r+0x2ea>
    dd78:	9d02      	ldr	r5, [sp, #8]
    dd7a:	68a3      	ldr	r3, [r4, #8]
    dd7c:	2201      	movs	r2, #1
    dd7e:	1944      	adds	r4, r0, r5
    dd80:	4314      	orrs	r4, r2
    dd82:	605c      	str	r4, [r3, #4]
    dd84:	e052      	b.n	de2c <_malloc_r+0x390>
    dd86:	4a06      	ldr	r2, [pc, #24]	; (dda0 <_malloc_r+0x304>)
    dd88:	4f06      	ldr	r7, [pc, #24]	; (dda4 <_malloc_r+0x308>)
    dd8a:	6890      	ldr	r0, [r2, #8]
    dd8c:	3001      	adds	r0, #1
    dd8e:	d10d      	bne.n	ddac <_malloc_r+0x310>
    dd90:	6095      	str	r5, [r2, #8]
    dd92:	e00f      	b.n	ddb4 <_malloc_r+0x318>
    dd94:	200004ec 	.word	0x200004ec
    dd98:	00000554 	.word	0x00000554
    dd9c:	000001ff 	.word	0x000001ff
    dda0:	200008ec 	.word	0x200008ec
    dda4:	20000f74 	.word	0x20000f74
    dda8:	0000100f 	.word	0x0000100f
    ddac:	9c05      	ldr	r4, [sp, #20]
    ddae:	1b2a      	subs	r2, r5, r4
    ddb0:	189b      	adds	r3, r3, r2
    ddb2:	607b      	str	r3, [r7, #4]
    ddb4:	2307      	movs	r3, #7
    ddb6:	2400      	movs	r4, #0
    ddb8:	402b      	ands	r3, r5
    ddba:	42a3      	cmp	r3, r4
    ddbc:	d002      	beq.n	ddc4 <_malloc_r+0x328>
    ddbe:	2408      	movs	r4, #8
    ddc0:	1ae4      	subs	r4, r4, r3
    ddc2:	192d      	adds	r5, r5, r4
    ddc4:	9904      	ldr	r1, [sp, #16]
    ddc6:	2080      	movs	r0, #128	; 0x80
    ddc8:	186b      	adds	r3, r5, r1
    ddca:	0140      	lsls	r0, r0, #5
    ddcc:	051b      	lsls	r3, r3, #20
    ddce:	1824      	adds	r4, r4, r0
    ddd0:	0d1b      	lsrs	r3, r3, #20
    ddd2:	1ae4      	subs	r4, r4, r3
    ddd4:	9803      	ldr	r0, [sp, #12]
    ddd6:	1c21      	adds	r1, r4, #0
    ddd8:	f000 fe38 	bl	ea4c <_sbrk_r>
    dddc:	1c42      	adds	r2, r0, #1
    ddde:	d101      	bne.n	dde4 <_malloc_r+0x348>
    dde0:	1c28      	adds	r0, r5, #0
    dde2:	2400      	movs	r4, #0
    dde4:	6879      	ldr	r1, [r7, #4]
    dde6:	1b40      	subs	r0, r0, r5
    dde8:	1863      	adds	r3, r4, r1
    ddea:	607b      	str	r3, [r7, #4]
    ddec:	1904      	adds	r4, r0, r4
    ddee:	4b25      	ldr	r3, [pc, #148]	; (de84 <_malloc_r+0x3e8>)
    ddf0:	2201      	movs	r2, #1
    ddf2:	4314      	orrs	r4, r2
    ddf4:	609d      	str	r5, [r3, #8]
    ddf6:	606c      	str	r4, [r5, #4]
    ddf8:	429e      	cmp	r6, r3
    ddfa:	d017      	beq.n	de2c <_malloc_r+0x390>
    ddfc:	9c02      	ldr	r4, [sp, #8]
    ddfe:	2c0f      	cmp	r4, #15
    de00:	d801      	bhi.n	de06 <_malloc_r+0x36a>
    de02:	606a      	str	r2, [r5, #4]
    de04:	e01c      	b.n	de40 <_malloc_r+0x3a4>
    de06:	9b02      	ldr	r3, [sp, #8]
    de08:	6875      	ldr	r5, [r6, #4]
    de0a:	2107      	movs	r1, #7
    de0c:	3b0c      	subs	r3, #12
    de0e:	438b      	bics	r3, r1
    de10:	402a      	ands	r2, r5
    de12:	431a      	orrs	r2, r3
    de14:	6072      	str	r2, [r6, #4]
    de16:	2105      	movs	r1, #5
    de18:	18f2      	adds	r2, r6, r3
    de1a:	6051      	str	r1, [r2, #4]
    de1c:	6091      	str	r1, [r2, #8]
    de1e:	2b0f      	cmp	r3, #15
    de20:	d904      	bls.n	de2c <_malloc_r+0x390>
    de22:	1c31      	adds	r1, r6, #0
    de24:	3108      	adds	r1, #8
    de26:	9803      	ldr	r0, [sp, #12]
    de28:	f7ff fb14 	bl	d454 <_free_r>
    de2c:	4a16      	ldr	r2, [pc, #88]	; (de88 <_malloc_r+0x3ec>)
    de2e:	6853      	ldr	r3, [r2, #4]
    de30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    de32:	428b      	cmp	r3, r1
    de34:	d900      	bls.n	de38 <_malloc_r+0x39c>
    de36:	62d3      	str	r3, [r2, #44]	; 0x2c
    de38:	6b16      	ldr	r6, [r2, #48]	; 0x30
    de3a:	42b3      	cmp	r3, r6
    de3c:	d900      	bls.n	de40 <_malloc_r+0x3a4>
    de3e:	6313      	str	r3, [r2, #48]	; 0x30
    de40:	4b10      	ldr	r3, [pc, #64]	; (de84 <_malloc_r+0x3e8>)
    de42:	9f01      	ldr	r7, [sp, #4]
    de44:	689b      	ldr	r3, [r3, #8]
    de46:	685a      	ldr	r2, [r3, #4]
    de48:	2303      	movs	r3, #3
    de4a:	439a      	bics	r2, r3
    de4c:	1bd3      	subs	r3, r2, r7
    de4e:	42ba      	cmp	r2, r7
    de50:	d301      	bcc.n	de56 <_malloc_r+0x3ba>
    de52:	2b0f      	cmp	r3, #15
    de54:	dc04      	bgt.n	de60 <_malloc_r+0x3c4>
    de56:	9803      	ldr	r0, [sp, #12]
    de58:	f000 f83d 	bl	ded6 <__malloc_unlock>
    de5c:	2000      	movs	r0, #0
    de5e:	e00f      	b.n	de80 <_malloc_r+0x3e4>
    de60:	4808      	ldr	r0, [pc, #32]	; (de84 <_malloc_r+0x3e8>)
    de62:	9a01      	ldr	r2, [sp, #4]
    de64:	6885      	ldr	r5, [r0, #8]
    de66:	2101      	movs	r1, #1
    de68:	9c01      	ldr	r4, [sp, #4]
    de6a:	430a      	orrs	r2, r1
    de6c:	606a      	str	r2, [r5, #4]
    de6e:	430b      	orrs	r3, r1
    de70:	192a      	adds	r2, r5, r4
    de72:	6082      	str	r2, [r0, #8]
    de74:	6053      	str	r3, [r2, #4]
    de76:	9803      	ldr	r0, [sp, #12]
    de78:	f000 f82d 	bl	ded6 <__malloc_unlock>
    de7c:	1c28      	adds	r0, r5, #0
    de7e:	3008      	adds	r0, #8
    de80:	b007      	add	sp, #28
    de82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de84:	200004ec 	.word	0x200004ec
    de88:	20000f74 	.word	0x20000f74

0000de8c <memchr>:
    de8c:	b2c9      	uxtb	r1, r1
    de8e:	1882      	adds	r2, r0, r2
    de90:	4290      	cmp	r0, r2
    de92:	d004      	beq.n	de9e <memchr+0x12>
    de94:	7803      	ldrb	r3, [r0, #0]
    de96:	428b      	cmp	r3, r1
    de98:	d002      	beq.n	dea0 <memchr+0x14>
    de9a:	3001      	adds	r0, #1
    de9c:	e7f8      	b.n	de90 <memchr+0x4>
    de9e:	2000      	movs	r0, #0
    dea0:	4770      	bx	lr

0000dea2 <memmove>:
    dea2:	b570      	push	{r4, r5, r6, lr}
    dea4:	4281      	cmp	r1, r0
    dea6:	d301      	bcc.n	deac <memmove+0xa>
    dea8:	2300      	movs	r3, #0
    deaa:	e00c      	b.n	dec6 <memmove+0x24>
    deac:	188c      	adds	r4, r1, r2
    deae:	42a0      	cmp	r0, r4
    deb0:	d2fa      	bcs.n	dea8 <memmove+0x6>
    deb2:	1885      	adds	r5, r0, r2
    deb4:	1c13      	adds	r3, r2, #0
    deb6:	3b01      	subs	r3, #1
    deb8:	d30b      	bcc.n	ded2 <memmove+0x30>
    deba:	4251      	negs	r1, r2
    debc:	1866      	adds	r6, r4, r1
    debe:	5cf6      	ldrb	r6, [r6, r3]
    dec0:	1869      	adds	r1, r5, r1
    dec2:	54ce      	strb	r6, [r1, r3]
    dec4:	e7f7      	b.n	deb6 <memmove+0x14>
    dec6:	4293      	cmp	r3, r2
    dec8:	d003      	beq.n	ded2 <memmove+0x30>
    deca:	5ccc      	ldrb	r4, [r1, r3]
    decc:	54c4      	strb	r4, [r0, r3]
    dece:	3301      	adds	r3, #1
    ded0:	e7f9      	b.n	dec6 <memmove+0x24>
    ded2:	bd70      	pop	{r4, r5, r6, pc}

0000ded4 <__malloc_lock>:
    ded4:	4770      	bx	lr

0000ded6 <__malloc_unlock>:
    ded6:	4770      	bx	lr

0000ded8 <_Balloc>:
    ded8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    deda:	b570      	push	{r4, r5, r6, lr}
    dedc:	1c04      	adds	r4, r0, #0
    dede:	1c0d      	adds	r5, r1, #0
    dee0:	2b00      	cmp	r3, #0
    dee2:	d008      	beq.n	def6 <_Balloc+0x1e>
    dee4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    dee6:	00aa      	lsls	r2, r5, #2
    dee8:	189a      	adds	r2, r3, r2
    deea:	6810      	ldr	r0, [r2, #0]
    deec:	2800      	cmp	r0, #0
    deee:	d00b      	beq.n	df08 <_Balloc+0x30>
    def0:	6803      	ldr	r3, [r0, #0]
    def2:	6013      	str	r3, [r2, #0]
    def4:	e014      	b.n	df20 <_Balloc+0x48>
    def6:	2104      	movs	r1, #4
    def8:	2221      	movs	r2, #33	; 0x21
    defa:	f001 faf9 	bl	f4f0 <_calloc_r>
    defe:	64e0      	str	r0, [r4, #76]	; 0x4c
    df00:	2800      	cmp	r0, #0
    df02:	d1ef      	bne.n	dee4 <_Balloc+0xc>
    df04:	2000      	movs	r0, #0
    df06:	e00e      	b.n	df26 <_Balloc+0x4e>
    df08:	2101      	movs	r1, #1
    df0a:	1c0e      	adds	r6, r1, #0
    df0c:	40ae      	lsls	r6, r5
    df0e:	1d72      	adds	r2, r6, #5
    df10:	0092      	lsls	r2, r2, #2
    df12:	1c20      	adds	r0, r4, #0
    df14:	f001 faec 	bl	f4f0 <_calloc_r>
    df18:	2800      	cmp	r0, #0
    df1a:	d0f3      	beq.n	df04 <_Balloc+0x2c>
    df1c:	6045      	str	r5, [r0, #4]
    df1e:	6086      	str	r6, [r0, #8]
    df20:	2200      	movs	r2, #0
    df22:	6102      	str	r2, [r0, #16]
    df24:	60c2      	str	r2, [r0, #12]
    df26:	bd70      	pop	{r4, r5, r6, pc}

0000df28 <_Bfree>:
    df28:	2900      	cmp	r1, #0
    df2a:	d006      	beq.n	df3a <_Bfree+0x12>
    df2c:	684a      	ldr	r2, [r1, #4]
    df2e:	0093      	lsls	r3, r2, #2
    df30:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    df32:	18d3      	adds	r3, r2, r3
    df34:	681a      	ldr	r2, [r3, #0]
    df36:	600a      	str	r2, [r1, #0]
    df38:	6019      	str	r1, [r3, #0]
    df3a:	4770      	bx	lr

0000df3c <__multadd>:
    df3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    df3e:	1c0c      	adds	r4, r1, #0
    df40:	1c1e      	adds	r6, r3, #0
    df42:	690d      	ldr	r5, [r1, #16]
    df44:	1c07      	adds	r7, r0, #0
    df46:	3114      	adds	r1, #20
    df48:	2300      	movs	r3, #0
    df4a:	6808      	ldr	r0, [r1, #0]
    df4c:	3301      	adds	r3, #1
    df4e:	b280      	uxth	r0, r0
    df50:	4350      	muls	r0, r2
    df52:	1980      	adds	r0, r0, r6
    df54:	4684      	mov	ip, r0
    df56:	0c06      	lsrs	r6, r0, #16
    df58:	6808      	ldr	r0, [r1, #0]
    df5a:	0c00      	lsrs	r0, r0, #16
    df5c:	4350      	muls	r0, r2
    df5e:	1830      	adds	r0, r6, r0
    df60:	0c06      	lsrs	r6, r0, #16
    df62:	0400      	lsls	r0, r0, #16
    df64:	9001      	str	r0, [sp, #4]
    df66:	4660      	mov	r0, ip
    df68:	b280      	uxth	r0, r0
    df6a:	4684      	mov	ip, r0
    df6c:	9801      	ldr	r0, [sp, #4]
    df6e:	4484      	add	ip, r0
    df70:	4660      	mov	r0, ip
    df72:	c101      	stmia	r1!, {r0}
    df74:	42ab      	cmp	r3, r5
    df76:	dbe8      	blt.n	df4a <__multadd+0xe>
    df78:	2e00      	cmp	r6, #0
    df7a:	d01b      	beq.n	dfb4 <__multadd+0x78>
    df7c:	68a3      	ldr	r3, [r4, #8]
    df7e:	429d      	cmp	r5, r3
    df80:	db12      	blt.n	dfa8 <__multadd+0x6c>
    df82:	6861      	ldr	r1, [r4, #4]
    df84:	1c38      	adds	r0, r7, #0
    df86:	3101      	adds	r1, #1
    df88:	f7ff ffa6 	bl	ded8 <_Balloc>
    df8c:	6922      	ldr	r2, [r4, #16]
    df8e:	1c21      	adds	r1, r4, #0
    df90:	3202      	adds	r2, #2
    df92:	9001      	str	r0, [sp, #4]
    df94:	310c      	adds	r1, #12
    df96:	0092      	lsls	r2, r2, #2
    df98:	300c      	adds	r0, #12
    df9a:	f7fd f86b 	bl	b074 <memcpy>
    df9e:	1c21      	adds	r1, r4, #0
    dfa0:	1c38      	adds	r0, r7, #0
    dfa2:	f7ff ffc1 	bl	df28 <_Bfree>
    dfa6:	9c01      	ldr	r4, [sp, #4]
    dfa8:	1d2b      	adds	r3, r5, #4
    dfaa:	009b      	lsls	r3, r3, #2
    dfac:	18e3      	adds	r3, r4, r3
    dfae:	3501      	adds	r5, #1
    dfb0:	605e      	str	r6, [r3, #4]
    dfb2:	6125      	str	r5, [r4, #16]
    dfb4:	1c20      	adds	r0, r4, #0
    dfb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000dfb8 <__s2b>:
    dfb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dfba:	1c06      	adds	r6, r0, #0
    dfbc:	1c18      	adds	r0, r3, #0
    dfbe:	1c0f      	adds	r7, r1, #0
    dfc0:	3008      	adds	r0, #8
    dfc2:	2109      	movs	r1, #9
    dfc4:	9301      	str	r3, [sp, #4]
    dfc6:	1c14      	adds	r4, r2, #0
    dfc8:	f001 fc9a 	bl	f900 <__aeabi_idiv>
    dfcc:	2301      	movs	r3, #1
    dfce:	2100      	movs	r1, #0
    dfd0:	4298      	cmp	r0, r3
    dfd2:	dd02      	ble.n	dfda <__s2b+0x22>
    dfd4:	005b      	lsls	r3, r3, #1
    dfd6:	3101      	adds	r1, #1
    dfd8:	e7fa      	b.n	dfd0 <__s2b+0x18>
    dfda:	1c30      	adds	r0, r6, #0
    dfdc:	f7ff ff7c 	bl	ded8 <_Balloc>
    dfe0:	9b08      	ldr	r3, [sp, #32]
    dfe2:	1c01      	adds	r1, r0, #0
    dfe4:	6143      	str	r3, [r0, #20]
    dfe6:	2301      	movs	r3, #1
    dfe8:	6103      	str	r3, [r0, #16]
    dfea:	2c09      	cmp	r4, #9
    dfec:	dd12      	ble.n	e014 <__s2b+0x5c>
    dfee:	1c3b      	adds	r3, r7, #0
    dff0:	3309      	adds	r3, #9
    dff2:	9300      	str	r3, [sp, #0]
    dff4:	1c1d      	adds	r5, r3, #0
    dff6:	193f      	adds	r7, r7, r4
    dff8:	782b      	ldrb	r3, [r5, #0]
    dffa:	1c30      	adds	r0, r6, #0
    dffc:	3b30      	subs	r3, #48	; 0x30
    dffe:	220a      	movs	r2, #10
    e000:	f7ff ff9c 	bl	df3c <__multadd>
    e004:	3501      	adds	r5, #1
    e006:	1c01      	adds	r1, r0, #0
    e008:	42bd      	cmp	r5, r7
    e00a:	d1f5      	bne.n	dff8 <__s2b+0x40>
    e00c:	9b00      	ldr	r3, [sp, #0]
    e00e:	191f      	adds	r7, r3, r4
    e010:	3f08      	subs	r7, #8
    e012:	e001      	b.n	e018 <__s2b+0x60>
    e014:	370a      	adds	r7, #10
    e016:	2409      	movs	r4, #9
    e018:	1c25      	adds	r5, r4, #0
    e01a:	9b01      	ldr	r3, [sp, #4]
    e01c:	429d      	cmp	r5, r3
    e01e:	da09      	bge.n	e034 <__s2b+0x7c>
    e020:	1b3b      	subs	r3, r7, r4
    e022:	5d5b      	ldrb	r3, [r3, r5]
    e024:	1c30      	adds	r0, r6, #0
    e026:	3b30      	subs	r3, #48	; 0x30
    e028:	220a      	movs	r2, #10
    e02a:	f7ff ff87 	bl	df3c <__multadd>
    e02e:	3501      	adds	r5, #1
    e030:	1c01      	adds	r1, r0, #0
    e032:	e7f2      	b.n	e01a <__s2b+0x62>
    e034:	1c08      	adds	r0, r1, #0
    e036:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000e038 <__hi0bits>:
    e038:	2200      	movs	r2, #0
    e03a:	1c03      	adds	r3, r0, #0
    e03c:	0c01      	lsrs	r1, r0, #16
    e03e:	4291      	cmp	r1, r2
    e040:	d101      	bne.n	e046 <__hi0bits+0xe>
    e042:	0403      	lsls	r3, r0, #16
    e044:	2210      	movs	r2, #16
    e046:	0e19      	lsrs	r1, r3, #24
    e048:	d101      	bne.n	e04e <__hi0bits+0x16>
    e04a:	3208      	adds	r2, #8
    e04c:	021b      	lsls	r3, r3, #8
    e04e:	0f19      	lsrs	r1, r3, #28
    e050:	d101      	bne.n	e056 <__hi0bits+0x1e>
    e052:	3204      	adds	r2, #4
    e054:	011b      	lsls	r3, r3, #4
    e056:	0f99      	lsrs	r1, r3, #30
    e058:	d101      	bne.n	e05e <__hi0bits+0x26>
    e05a:	3202      	adds	r2, #2
    e05c:	009b      	lsls	r3, r3, #2
    e05e:	2b00      	cmp	r3, #0
    e060:	db04      	blt.n	e06c <__hi0bits+0x34>
    e062:	2020      	movs	r0, #32
    e064:	0059      	lsls	r1, r3, #1
    e066:	d502      	bpl.n	e06e <__hi0bits+0x36>
    e068:	1c50      	adds	r0, r2, #1
    e06a:	e000      	b.n	e06e <__hi0bits+0x36>
    e06c:	1c10      	adds	r0, r2, #0
    e06e:	4770      	bx	lr

0000e070 <__lo0bits>:
    e070:	6803      	ldr	r3, [r0, #0]
    e072:	2207      	movs	r2, #7
    e074:	1c01      	adds	r1, r0, #0
    e076:	401a      	ands	r2, r3
    e078:	d00b      	beq.n	e092 <__lo0bits+0x22>
    e07a:	2201      	movs	r2, #1
    e07c:	2000      	movs	r0, #0
    e07e:	4213      	tst	r3, r2
    e080:	d122      	bne.n	e0c8 <__lo0bits+0x58>
    e082:	2002      	movs	r0, #2
    e084:	4203      	tst	r3, r0
    e086:	d001      	beq.n	e08c <__lo0bits+0x1c>
    e088:	40d3      	lsrs	r3, r2
    e08a:	e01b      	b.n	e0c4 <__lo0bits+0x54>
    e08c:	089b      	lsrs	r3, r3, #2
    e08e:	600b      	str	r3, [r1, #0]
    e090:	e01a      	b.n	e0c8 <__lo0bits+0x58>
    e092:	b298      	uxth	r0, r3
    e094:	2800      	cmp	r0, #0
    e096:	d101      	bne.n	e09c <__lo0bits+0x2c>
    e098:	0c1b      	lsrs	r3, r3, #16
    e09a:	2210      	movs	r2, #16
    e09c:	b2d8      	uxtb	r0, r3
    e09e:	2800      	cmp	r0, #0
    e0a0:	d101      	bne.n	e0a6 <__lo0bits+0x36>
    e0a2:	3208      	adds	r2, #8
    e0a4:	0a1b      	lsrs	r3, r3, #8
    e0a6:	0718      	lsls	r0, r3, #28
    e0a8:	d101      	bne.n	e0ae <__lo0bits+0x3e>
    e0aa:	3204      	adds	r2, #4
    e0ac:	091b      	lsrs	r3, r3, #4
    e0ae:	0798      	lsls	r0, r3, #30
    e0b0:	d101      	bne.n	e0b6 <__lo0bits+0x46>
    e0b2:	3202      	adds	r2, #2
    e0b4:	089b      	lsrs	r3, r3, #2
    e0b6:	07d8      	lsls	r0, r3, #31
    e0b8:	d404      	bmi.n	e0c4 <__lo0bits+0x54>
    e0ba:	085b      	lsrs	r3, r3, #1
    e0bc:	2020      	movs	r0, #32
    e0be:	2b00      	cmp	r3, #0
    e0c0:	d002      	beq.n	e0c8 <__lo0bits+0x58>
    e0c2:	3201      	adds	r2, #1
    e0c4:	600b      	str	r3, [r1, #0]
    e0c6:	1c10      	adds	r0, r2, #0
    e0c8:	4770      	bx	lr

0000e0ca <__i2b>:
    e0ca:	b510      	push	{r4, lr}
    e0cc:	1c0c      	adds	r4, r1, #0
    e0ce:	2101      	movs	r1, #1
    e0d0:	f7ff ff02 	bl	ded8 <_Balloc>
    e0d4:	2301      	movs	r3, #1
    e0d6:	6144      	str	r4, [r0, #20]
    e0d8:	6103      	str	r3, [r0, #16]
    e0da:	bd10      	pop	{r4, pc}

0000e0dc <__multiply>:
    e0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0de:	1c0c      	adds	r4, r1, #0
    e0e0:	1c15      	adds	r5, r2, #0
    e0e2:	6909      	ldr	r1, [r1, #16]
    e0e4:	6912      	ldr	r2, [r2, #16]
    e0e6:	b08b      	sub	sp, #44	; 0x2c
    e0e8:	4291      	cmp	r1, r2
    e0ea:	da02      	bge.n	e0f2 <__multiply+0x16>
    e0ec:	1c23      	adds	r3, r4, #0
    e0ee:	1c2c      	adds	r4, r5, #0
    e0f0:	1c1d      	adds	r5, r3, #0
    e0f2:	6927      	ldr	r7, [r4, #16]
    e0f4:	692e      	ldr	r6, [r5, #16]
    e0f6:	68a2      	ldr	r2, [r4, #8]
    e0f8:	19bb      	adds	r3, r7, r6
    e0fa:	6861      	ldr	r1, [r4, #4]
    e0fc:	9302      	str	r3, [sp, #8]
    e0fe:	4293      	cmp	r3, r2
    e100:	dd00      	ble.n	e104 <__multiply+0x28>
    e102:	3101      	adds	r1, #1
    e104:	f7ff fee8 	bl	ded8 <_Balloc>
    e108:	1c03      	adds	r3, r0, #0
    e10a:	9003      	str	r0, [sp, #12]
    e10c:	9802      	ldr	r0, [sp, #8]
    e10e:	3314      	adds	r3, #20
    e110:	0082      	lsls	r2, r0, #2
    e112:	189a      	adds	r2, r3, r2
    e114:	1c19      	adds	r1, r3, #0
    e116:	4291      	cmp	r1, r2
    e118:	d202      	bcs.n	e120 <__multiply+0x44>
    e11a:	2000      	movs	r0, #0
    e11c:	c101      	stmia	r1!, {r0}
    e11e:	e7fa      	b.n	e116 <__multiply+0x3a>
    e120:	3514      	adds	r5, #20
    e122:	3414      	adds	r4, #20
    e124:	00bf      	lsls	r7, r7, #2
    e126:	46ac      	mov	ip, r5
    e128:	00b6      	lsls	r6, r6, #2
    e12a:	19e7      	adds	r7, r4, r7
    e12c:	4466      	add	r6, ip
    e12e:	9404      	str	r4, [sp, #16]
    e130:	9707      	str	r7, [sp, #28]
    e132:	9609      	str	r6, [sp, #36]	; 0x24
    e134:	9e09      	ldr	r6, [sp, #36]	; 0x24
    e136:	45b4      	cmp	ip, r6
    e138:	d256      	bcs.n	e1e8 <__multiply+0x10c>
    e13a:	4665      	mov	r5, ip
    e13c:	882d      	ldrh	r5, [r5, #0]
    e13e:	9505      	str	r5, [sp, #20]
    e140:	2d00      	cmp	r5, #0
    e142:	d01f      	beq.n	e184 <__multiply+0xa8>
    e144:	9c04      	ldr	r4, [sp, #16]
    e146:	1c19      	adds	r1, r3, #0
    e148:	2000      	movs	r0, #0
    e14a:	680f      	ldr	r7, [r1, #0]
    e14c:	cc40      	ldmia	r4!, {r6}
    e14e:	b2bf      	uxth	r7, r7
    e150:	9d05      	ldr	r5, [sp, #20]
    e152:	9706      	str	r7, [sp, #24]
    e154:	b2b7      	uxth	r7, r6
    e156:	436f      	muls	r7, r5
    e158:	9d06      	ldr	r5, [sp, #24]
    e15a:	0c36      	lsrs	r6, r6, #16
    e15c:	19ef      	adds	r7, r5, r7
    e15e:	183f      	adds	r7, r7, r0
    e160:	6808      	ldr	r0, [r1, #0]
    e162:	9108      	str	r1, [sp, #32]
    e164:	0c05      	lsrs	r5, r0, #16
    e166:	9805      	ldr	r0, [sp, #20]
    e168:	4346      	muls	r6, r0
    e16a:	0c38      	lsrs	r0, r7, #16
    e16c:	19ad      	adds	r5, r5, r6
    e16e:	182d      	adds	r5, r5, r0
    e170:	0c28      	lsrs	r0, r5, #16
    e172:	b2bf      	uxth	r7, r7
    e174:	042d      	lsls	r5, r5, #16
    e176:	433d      	orrs	r5, r7
    e178:	c120      	stmia	r1!, {r5}
    e17a:	9d07      	ldr	r5, [sp, #28]
    e17c:	42ac      	cmp	r4, r5
    e17e:	d3e4      	bcc.n	e14a <__multiply+0x6e>
    e180:	9e08      	ldr	r6, [sp, #32]
    e182:	6070      	str	r0, [r6, #4]
    e184:	4667      	mov	r7, ip
    e186:	887d      	ldrh	r5, [r7, #2]
    e188:	2d00      	cmp	r5, #0
    e18a:	d022      	beq.n	e1d2 <__multiply+0xf6>
    e18c:	2600      	movs	r6, #0
    e18e:	6818      	ldr	r0, [r3, #0]
    e190:	9c04      	ldr	r4, [sp, #16]
    e192:	1c19      	adds	r1, r3, #0
    e194:	9601      	str	r6, [sp, #4]
    e196:	8827      	ldrh	r7, [r4, #0]
    e198:	b280      	uxth	r0, r0
    e19a:	436f      	muls	r7, r5
    e19c:	9706      	str	r7, [sp, #24]
    e19e:	9e06      	ldr	r6, [sp, #24]
    e1a0:	884f      	ldrh	r7, [r1, #2]
    e1a2:	9105      	str	r1, [sp, #20]
    e1a4:	19f6      	adds	r6, r6, r7
    e1a6:	9f01      	ldr	r7, [sp, #4]
    e1a8:	19f7      	adds	r7, r6, r7
    e1aa:	9706      	str	r7, [sp, #24]
    e1ac:	043f      	lsls	r7, r7, #16
    e1ae:	4338      	orrs	r0, r7
    e1b0:	6008      	str	r0, [r1, #0]
    e1b2:	cc01      	ldmia	r4!, {r0}
    e1b4:	888f      	ldrh	r7, [r1, #4]
    e1b6:	0c00      	lsrs	r0, r0, #16
    e1b8:	4368      	muls	r0, r5
    e1ba:	19c0      	adds	r0, r0, r7
    e1bc:	9f06      	ldr	r7, [sp, #24]
    e1be:	3104      	adds	r1, #4
    e1c0:	0c3e      	lsrs	r6, r7, #16
    e1c2:	1980      	adds	r0, r0, r6
    e1c4:	9f07      	ldr	r7, [sp, #28]
    e1c6:	0c06      	lsrs	r6, r0, #16
    e1c8:	9601      	str	r6, [sp, #4]
    e1ca:	42a7      	cmp	r7, r4
    e1cc:	d8e3      	bhi.n	e196 <__multiply+0xba>
    e1ce:	9905      	ldr	r1, [sp, #20]
    e1d0:	6048      	str	r0, [r1, #4]
    e1d2:	2504      	movs	r5, #4
    e1d4:	44ac      	add	ip, r5
    e1d6:	195b      	adds	r3, r3, r5
    e1d8:	e7ac      	b.n	e134 <__multiply+0x58>
    e1da:	3a04      	subs	r2, #4
    e1dc:	6810      	ldr	r0, [r2, #0]
    e1de:	2800      	cmp	r0, #0
    e1e0:	d105      	bne.n	e1ee <__multiply+0x112>
    e1e2:	9f02      	ldr	r7, [sp, #8]
    e1e4:	3f01      	subs	r7, #1
    e1e6:	9702      	str	r7, [sp, #8]
    e1e8:	9d02      	ldr	r5, [sp, #8]
    e1ea:	2d00      	cmp	r5, #0
    e1ec:	dcf5      	bgt.n	e1da <__multiply+0xfe>
    e1ee:	9f03      	ldr	r7, [sp, #12]
    e1f0:	9e02      	ldr	r6, [sp, #8]
    e1f2:	1c38      	adds	r0, r7, #0
    e1f4:	613e      	str	r6, [r7, #16]
    e1f6:	b00b      	add	sp, #44	; 0x2c
    e1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e1fa <__pow5mult>:
    e1fa:	2303      	movs	r3, #3
    e1fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e1fe:	4013      	ands	r3, r2
    e200:	1c05      	adds	r5, r0, #0
    e202:	1c0e      	adds	r6, r1, #0
    e204:	1c17      	adds	r7, r2, #0
    e206:	2b00      	cmp	r3, #0
    e208:	d007      	beq.n	e21a <__pow5mult+0x20>
    e20a:	4a1a      	ldr	r2, [pc, #104]	; (e274 <__pow5mult+0x7a>)
    e20c:	3b01      	subs	r3, #1
    e20e:	009b      	lsls	r3, r3, #2
    e210:	589a      	ldr	r2, [r3, r2]
    e212:	2300      	movs	r3, #0
    e214:	f7ff fe92 	bl	df3c <__multadd>
    e218:	1c06      	adds	r6, r0, #0
    e21a:	10bf      	asrs	r7, r7, #2
    e21c:	d028      	beq.n	e270 <__pow5mult+0x76>
    e21e:	6cac      	ldr	r4, [r5, #72]	; 0x48
    e220:	2c00      	cmp	r4, #0
    e222:	d10e      	bne.n	e242 <__pow5mult+0x48>
    e224:	1c28      	adds	r0, r5, #0
    e226:	4914      	ldr	r1, [pc, #80]	; (e278 <__pow5mult+0x7e>)
    e228:	f7ff ff4f 	bl	e0ca <__i2b>
    e22c:	2300      	movs	r3, #0
    e22e:	64a8      	str	r0, [r5, #72]	; 0x48
    e230:	1c04      	adds	r4, r0, #0
    e232:	6003      	str	r3, [r0, #0]
    e234:	e005      	b.n	e242 <__pow5mult+0x48>
    e236:	107f      	asrs	r7, r7, #1
    e238:	d01a      	beq.n	e270 <__pow5mult+0x76>
    e23a:	6820      	ldr	r0, [r4, #0]
    e23c:	2800      	cmp	r0, #0
    e23e:	d00e      	beq.n	e25e <__pow5mult+0x64>
    e240:	1c04      	adds	r4, r0, #0
    e242:	07fb      	lsls	r3, r7, #31
    e244:	d5f7      	bpl.n	e236 <__pow5mult+0x3c>
    e246:	1c31      	adds	r1, r6, #0
    e248:	1c22      	adds	r2, r4, #0
    e24a:	1c28      	adds	r0, r5, #0
    e24c:	f7ff ff46 	bl	e0dc <__multiply>
    e250:	1c31      	adds	r1, r6, #0
    e252:	9001      	str	r0, [sp, #4]
    e254:	1c28      	adds	r0, r5, #0
    e256:	f7ff fe67 	bl	df28 <_Bfree>
    e25a:	9e01      	ldr	r6, [sp, #4]
    e25c:	e7eb      	b.n	e236 <__pow5mult+0x3c>
    e25e:	1c28      	adds	r0, r5, #0
    e260:	1c21      	adds	r1, r4, #0
    e262:	1c22      	adds	r2, r4, #0
    e264:	f7ff ff3a 	bl	e0dc <__multiply>
    e268:	2300      	movs	r3, #0
    e26a:	6020      	str	r0, [r4, #0]
    e26c:	6003      	str	r3, [r0, #0]
    e26e:	e7e7      	b.n	e240 <__pow5mult+0x46>
    e270:	1c30      	adds	r0, r6, #0
    e272:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e274:	00010af0 	.word	0x00010af0
    e278:	00000271 	.word	0x00000271

0000e27c <__lshift>:
    e27c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e27e:	1c0c      	adds	r4, r1, #0
    e280:	b085      	sub	sp, #20
    e282:	9003      	str	r0, [sp, #12]
    e284:	6920      	ldr	r0, [r4, #16]
    e286:	1155      	asrs	r5, r2, #5
    e288:	1828      	adds	r0, r5, r0
    e28a:	9002      	str	r0, [sp, #8]
    e28c:	6849      	ldr	r1, [r1, #4]
    e28e:	3001      	adds	r0, #1
    e290:	68a3      	ldr	r3, [r4, #8]
    e292:	1c17      	adds	r7, r2, #0
    e294:	9000      	str	r0, [sp, #0]
    e296:	9a00      	ldr	r2, [sp, #0]
    e298:	429a      	cmp	r2, r3
    e29a:	dd02      	ble.n	e2a2 <__lshift+0x26>
    e29c:	3101      	adds	r1, #1
    e29e:	005b      	lsls	r3, r3, #1
    e2a0:	e7f9      	b.n	e296 <__lshift+0x1a>
    e2a2:	9803      	ldr	r0, [sp, #12]
    e2a4:	f7ff fe18 	bl	ded8 <_Balloc>
    e2a8:	1c02      	adds	r2, r0, #0
    e2aa:	1c06      	adds	r6, r0, #0
    e2ac:	3214      	adds	r2, #20
    e2ae:	2300      	movs	r3, #0
    e2b0:	42ab      	cmp	r3, r5
    e2b2:	da04      	bge.n	e2be <__lshift+0x42>
    e2b4:	0099      	lsls	r1, r3, #2
    e2b6:	2000      	movs	r0, #0
    e2b8:	5050      	str	r0, [r2, r1]
    e2ba:	3301      	adds	r3, #1
    e2bc:	e7f8      	b.n	e2b0 <__lshift+0x34>
    e2be:	43eb      	mvns	r3, r5
    e2c0:	17db      	asrs	r3, r3, #31
    e2c2:	401d      	ands	r5, r3
    e2c4:	00ad      	lsls	r5, r5, #2
    e2c6:	6920      	ldr	r0, [r4, #16]
    e2c8:	1955      	adds	r5, r2, r5
    e2ca:	1c22      	adds	r2, r4, #0
    e2cc:	3214      	adds	r2, #20
    e2ce:	0083      	lsls	r3, r0, #2
    e2d0:	189b      	adds	r3, r3, r2
    e2d2:	469c      	mov	ip, r3
    e2d4:	231f      	movs	r3, #31
    e2d6:	401f      	ands	r7, r3
    e2d8:	d014      	beq.n	e304 <__lshift+0x88>
    e2da:	2320      	movs	r3, #32
    e2dc:	1bdb      	subs	r3, r3, r7
    e2de:	9301      	str	r3, [sp, #4]
    e2e0:	2300      	movs	r3, #0
    e2e2:	6810      	ldr	r0, [r2, #0]
    e2e4:	1c29      	adds	r1, r5, #0
    e2e6:	40b8      	lsls	r0, r7
    e2e8:	4303      	orrs	r3, r0
    e2ea:	c508      	stmia	r5!, {r3}
    e2ec:	ca08      	ldmia	r2!, {r3}
    e2ee:	9801      	ldr	r0, [sp, #4]
    e2f0:	40c3      	lsrs	r3, r0
    e2f2:	4594      	cmp	ip, r2
    e2f4:	d8f5      	bhi.n	e2e2 <__lshift+0x66>
    e2f6:	604b      	str	r3, [r1, #4]
    e2f8:	2b00      	cmp	r3, #0
    e2fa:	d007      	beq.n	e30c <__lshift+0x90>
    e2fc:	9902      	ldr	r1, [sp, #8]
    e2fe:	3102      	adds	r1, #2
    e300:	9100      	str	r1, [sp, #0]
    e302:	e003      	b.n	e30c <__lshift+0x90>
    e304:	ca08      	ldmia	r2!, {r3}
    e306:	c508      	stmia	r5!, {r3}
    e308:	4594      	cmp	ip, r2
    e30a:	d8fb      	bhi.n	e304 <__lshift+0x88>
    e30c:	9b00      	ldr	r3, [sp, #0]
    e30e:	9803      	ldr	r0, [sp, #12]
    e310:	3b01      	subs	r3, #1
    e312:	6133      	str	r3, [r6, #16]
    e314:	1c21      	adds	r1, r4, #0
    e316:	f7ff fe07 	bl	df28 <_Bfree>
    e31a:	1c30      	adds	r0, r6, #0
    e31c:	b005      	add	sp, #20
    e31e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e320 <__mcmp>:
    e320:	b510      	push	{r4, lr}
    e322:	6902      	ldr	r2, [r0, #16]
    e324:	690c      	ldr	r4, [r1, #16]
    e326:	1c03      	adds	r3, r0, #0
    e328:	1b10      	subs	r0, r2, r4
    e32a:	d113      	bne.n	e354 <__mcmp+0x34>
    e32c:	1c1a      	adds	r2, r3, #0
    e32e:	00a0      	lsls	r0, r4, #2
    e330:	3214      	adds	r2, #20
    e332:	3114      	adds	r1, #20
    e334:	1813      	adds	r3, r2, r0
    e336:	1809      	adds	r1, r1, r0
    e338:	3b04      	subs	r3, #4
    e33a:	3904      	subs	r1, #4
    e33c:	681c      	ldr	r4, [r3, #0]
    e33e:	6808      	ldr	r0, [r1, #0]
    e340:	4284      	cmp	r4, r0
    e342:	d004      	beq.n	e34e <__mcmp+0x2e>
    e344:	4284      	cmp	r4, r0
    e346:	4180      	sbcs	r0, r0
    e348:	2301      	movs	r3, #1
    e34a:	4318      	orrs	r0, r3
    e34c:	e002      	b.n	e354 <__mcmp+0x34>
    e34e:	4293      	cmp	r3, r2
    e350:	d8f2      	bhi.n	e338 <__mcmp+0x18>
    e352:	2000      	movs	r0, #0
    e354:	bd10      	pop	{r4, pc}

0000e356 <__mdiff>:
    e356:	b5f0      	push	{r4, r5, r6, r7, lr}
    e358:	1c07      	adds	r7, r0, #0
    e35a:	b085      	sub	sp, #20
    e35c:	1c08      	adds	r0, r1, #0
    e35e:	1c0d      	adds	r5, r1, #0
    e360:	1c11      	adds	r1, r2, #0
    e362:	1c14      	adds	r4, r2, #0
    e364:	f7ff ffdc 	bl	e320 <__mcmp>
    e368:	1e06      	subs	r6, r0, #0
    e36a:	d107      	bne.n	e37c <__mdiff+0x26>
    e36c:	1c38      	adds	r0, r7, #0
    e36e:	1c31      	adds	r1, r6, #0
    e370:	f7ff fdb2 	bl	ded8 <_Balloc>
    e374:	2301      	movs	r3, #1
    e376:	6103      	str	r3, [r0, #16]
    e378:	6146      	str	r6, [r0, #20]
    e37a:	e050      	b.n	e41e <__mdiff+0xc8>
    e37c:	2800      	cmp	r0, #0
    e37e:	db01      	blt.n	e384 <__mdiff+0x2e>
    e380:	2600      	movs	r6, #0
    e382:	e003      	b.n	e38c <__mdiff+0x36>
    e384:	1c2b      	adds	r3, r5, #0
    e386:	2601      	movs	r6, #1
    e388:	1c25      	adds	r5, r4, #0
    e38a:	1c1c      	adds	r4, r3, #0
    e38c:	6869      	ldr	r1, [r5, #4]
    e38e:	1c38      	adds	r0, r7, #0
    e390:	f7ff fda2 	bl	ded8 <_Balloc>
    e394:	692a      	ldr	r2, [r5, #16]
    e396:	1c2b      	adds	r3, r5, #0
    e398:	3314      	adds	r3, #20
    e39a:	0091      	lsls	r1, r2, #2
    e39c:	1859      	adds	r1, r3, r1
    e39e:	9102      	str	r1, [sp, #8]
    e3a0:	6921      	ldr	r1, [r4, #16]
    e3a2:	1c25      	adds	r5, r4, #0
    e3a4:	3514      	adds	r5, #20
    e3a6:	0089      	lsls	r1, r1, #2
    e3a8:	1869      	adds	r1, r5, r1
    e3aa:	1c04      	adds	r4, r0, #0
    e3ac:	9103      	str	r1, [sp, #12]
    e3ae:	60c6      	str	r6, [r0, #12]
    e3b0:	3414      	adds	r4, #20
    e3b2:	2100      	movs	r1, #0
    e3b4:	cb40      	ldmia	r3!, {r6}
    e3b6:	cd80      	ldmia	r5!, {r7}
    e3b8:	46b4      	mov	ip, r6
    e3ba:	b2b6      	uxth	r6, r6
    e3bc:	1871      	adds	r1, r6, r1
    e3be:	b2be      	uxth	r6, r7
    e3c0:	1b8e      	subs	r6, r1, r6
    e3c2:	4661      	mov	r1, ip
    e3c4:	9601      	str	r6, [sp, #4]
    e3c6:	0c3f      	lsrs	r7, r7, #16
    e3c8:	0c0e      	lsrs	r6, r1, #16
    e3ca:	1bf7      	subs	r7, r6, r7
    e3cc:	9e01      	ldr	r6, [sp, #4]
    e3ce:	3404      	adds	r4, #4
    e3d0:	1431      	asrs	r1, r6, #16
    e3d2:	187f      	adds	r7, r7, r1
    e3d4:	1439      	asrs	r1, r7, #16
    e3d6:	043f      	lsls	r7, r7, #16
    e3d8:	9700      	str	r7, [sp, #0]
    e3da:	9f01      	ldr	r7, [sp, #4]
    e3dc:	1f26      	subs	r6, r4, #4
    e3de:	46b4      	mov	ip, r6
    e3e0:	b2be      	uxth	r6, r7
    e3e2:	9f00      	ldr	r7, [sp, #0]
    e3e4:	4337      	orrs	r7, r6
    e3e6:	4666      	mov	r6, ip
    e3e8:	6037      	str	r7, [r6, #0]
    e3ea:	9f03      	ldr	r7, [sp, #12]
    e3ec:	42bd      	cmp	r5, r7
    e3ee:	d3e1      	bcc.n	e3b4 <__mdiff+0x5e>
    e3f0:	9e02      	ldr	r6, [sp, #8]
    e3f2:	1c25      	adds	r5, r4, #0
    e3f4:	42b3      	cmp	r3, r6
    e3f6:	d20b      	bcs.n	e410 <__mdiff+0xba>
    e3f8:	cb80      	ldmia	r3!, {r7}
    e3fa:	b2bd      	uxth	r5, r7
    e3fc:	186d      	adds	r5, r5, r1
    e3fe:	142e      	asrs	r6, r5, #16
    e400:	0c3f      	lsrs	r7, r7, #16
    e402:	19f6      	adds	r6, r6, r7
    e404:	1431      	asrs	r1, r6, #16
    e406:	b2ad      	uxth	r5, r5
    e408:	0436      	lsls	r6, r6, #16
    e40a:	4335      	orrs	r5, r6
    e40c:	c420      	stmia	r4!, {r5}
    e40e:	e7ef      	b.n	e3f0 <__mdiff+0x9a>
    e410:	3d04      	subs	r5, #4
    e412:	682f      	ldr	r7, [r5, #0]
    e414:	2f00      	cmp	r7, #0
    e416:	d101      	bne.n	e41c <__mdiff+0xc6>
    e418:	3a01      	subs	r2, #1
    e41a:	e7f9      	b.n	e410 <__mdiff+0xba>
    e41c:	6102      	str	r2, [r0, #16]
    e41e:	b005      	add	sp, #20
    e420:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e422 <__ulp>:
    e422:	4b0e      	ldr	r3, [pc, #56]	; (e45c <__ulp+0x3a>)
    e424:	4a0e      	ldr	r2, [pc, #56]	; (e460 <__ulp+0x3e>)
    e426:	400b      	ands	r3, r1
    e428:	189b      	adds	r3, r3, r2
    e42a:	b510      	push	{r4, lr}
    e42c:	2b00      	cmp	r3, #0
    e42e:	dd01      	ble.n	e434 <__ulp+0x12>
    e430:	1c19      	adds	r1, r3, #0
    e432:	e009      	b.n	e448 <__ulp+0x26>
    e434:	425b      	negs	r3, r3
    e436:	151b      	asrs	r3, r3, #20
    e438:	2000      	movs	r0, #0
    e43a:	2100      	movs	r1, #0
    e43c:	2b13      	cmp	r3, #19
    e43e:	dc05      	bgt.n	e44c <__ulp+0x2a>
    e440:	2280      	movs	r2, #128	; 0x80
    e442:	0312      	lsls	r2, r2, #12
    e444:	1c11      	adds	r1, r2, #0
    e446:	4119      	asrs	r1, r3
    e448:	2000      	movs	r0, #0
    e44a:	e006      	b.n	e45a <__ulp+0x38>
    e44c:	2201      	movs	r2, #1
    e44e:	2b32      	cmp	r3, #50	; 0x32
    e450:	dc02      	bgt.n	e458 <__ulp+0x36>
    e452:	2433      	movs	r4, #51	; 0x33
    e454:	1ae3      	subs	r3, r4, r3
    e456:	409a      	lsls	r2, r3
    e458:	1c10      	adds	r0, r2, #0
    e45a:	bd10      	pop	{r4, pc}
    e45c:	7ff00000 	.word	0x7ff00000
    e460:	fcc00000 	.word	0xfcc00000

0000e464 <__b2d>:
    e464:	6903      	ldr	r3, [r0, #16]
    e466:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e468:	1c06      	adds	r6, r0, #0
    e46a:	3614      	adds	r6, #20
    e46c:	009b      	lsls	r3, r3, #2
    e46e:	18f3      	adds	r3, r6, r3
    e470:	1c1c      	adds	r4, r3, #0
    e472:	3c04      	subs	r4, #4
    e474:	6825      	ldr	r5, [r4, #0]
    e476:	1c0f      	adds	r7, r1, #0
    e478:	1c28      	adds	r0, r5, #0
    e47a:	9301      	str	r3, [sp, #4]
    e47c:	f7ff fddc 	bl	e038 <__hi0bits>
    e480:	2320      	movs	r3, #32
    e482:	1a1b      	subs	r3, r3, r0
    e484:	603b      	str	r3, [r7, #0]
    e486:	491f      	ldr	r1, [pc, #124]	; (e504 <__b2d+0xa0>)
    e488:	280a      	cmp	r0, #10
    e48a:	dc13      	bgt.n	e4b4 <__b2d+0x50>
    e48c:	230b      	movs	r3, #11
    e48e:	1a1b      	subs	r3, r3, r0
    e490:	1c2f      	adds	r7, r5, #0
    e492:	40df      	lsrs	r7, r3
    e494:	469c      	mov	ip, r3
    e496:	1c0b      	adds	r3, r1, #0
    e498:	433b      	orrs	r3, r7
    e49a:	2100      	movs	r1, #0
    e49c:	42b4      	cmp	r4, r6
    e49e:	d902      	bls.n	e4a6 <__b2d+0x42>
    e4a0:	9901      	ldr	r1, [sp, #4]
    e4a2:	3908      	subs	r1, #8
    e4a4:	6809      	ldr	r1, [r1, #0]
    e4a6:	4664      	mov	r4, ip
    e4a8:	40e1      	lsrs	r1, r4
    e4aa:	3015      	adds	r0, #21
    e4ac:	4085      	lsls	r5, r0
    e4ae:	1c0a      	adds	r2, r1, #0
    e4b0:	432a      	orrs	r2, r5
    e4b2:	e022      	b.n	e4fa <__b2d+0x96>
    e4b4:	2700      	movs	r7, #0
    e4b6:	42b4      	cmp	r4, r6
    e4b8:	d902      	bls.n	e4c0 <__b2d+0x5c>
    e4ba:	9c01      	ldr	r4, [sp, #4]
    e4bc:	3c08      	subs	r4, #8
    e4be:	6827      	ldr	r7, [r4, #0]
    e4c0:	230b      	movs	r3, #11
    e4c2:	425b      	negs	r3, r3
    e4c4:	181b      	adds	r3, r3, r0
    e4c6:	469c      	mov	ip, r3
    e4c8:	2b00      	cmp	r3, #0
    e4ca:	d013      	beq.n	e4f4 <__b2d+0x90>
    e4cc:	232b      	movs	r3, #43	; 0x2b
    e4ce:	1a18      	subs	r0, r3, r0
    e4d0:	4663      	mov	r3, ip
    e4d2:	409d      	lsls	r5, r3
    e4d4:	4329      	orrs	r1, r5
    e4d6:	1c3d      	adds	r5, r7, #0
    e4d8:	1c0b      	adds	r3, r1, #0
    e4da:	40c5      	lsrs	r5, r0
    e4dc:	432b      	orrs	r3, r5
    e4de:	2100      	movs	r1, #0
    e4e0:	42b4      	cmp	r4, r6
    e4e2:	d901      	bls.n	e4e8 <__b2d+0x84>
    e4e4:	3c04      	subs	r4, #4
    e4e6:	6821      	ldr	r1, [r4, #0]
    e4e8:	40c1      	lsrs	r1, r0
    e4ea:	4664      	mov	r4, ip
    e4ec:	40a7      	lsls	r7, r4
    e4ee:	1c0a      	adds	r2, r1, #0
    e4f0:	433a      	orrs	r2, r7
    e4f2:	e002      	b.n	e4fa <__b2d+0x96>
    e4f4:	1c0b      	adds	r3, r1, #0
    e4f6:	432b      	orrs	r3, r5
    e4f8:	1c3a      	adds	r2, r7, #0
    e4fa:	1c10      	adds	r0, r2, #0
    e4fc:	1c19      	adds	r1, r3, #0
    e4fe:	b003      	add	sp, #12
    e500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e502:	46c0      	nop			; (mov r8, r8)
    e504:	3ff00000 	.word	0x3ff00000

0000e508 <__d2b>:
    e508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e50a:	2101      	movs	r1, #1
    e50c:	1c1d      	adds	r5, r3, #0
    e50e:	1c14      	adds	r4, r2, #0
    e510:	f7ff fce2 	bl	ded8 <_Balloc>
    e514:	006f      	lsls	r7, r5, #1
    e516:	032b      	lsls	r3, r5, #12
    e518:	1c06      	adds	r6, r0, #0
    e51a:	0b1b      	lsrs	r3, r3, #12
    e51c:	0d7f      	lsrs	r7, r7, #21
    e51e:	d002      	beq.n	e526 <__d2b+0x1e>
    e520:	2280      	movs	r2, #128	; 0x80
    e522:	0352      	lsls	r2, r2, #13
    e524:	4313      	orrs	r3, r2
    e526:	9301      	str	r3, [sp, #4]
    e528:	2c00      	cmp	r4, #0
    e52a:	d019      	beq.n	e560 <__d2b+0x58>
    e52c:	4668      	mov	r0, sp
    e52e:	9400      	str	r4, [sp, #0]
    e530:	f7ff fd9e 	bl	e070 <__lo0bits>
    e534:	9a00      	ldr	r2, [sp, #0]
    e536:	2800      	cmp	r0, #0
    e538:	d009      	beq.n	e54e <__d2b+0x46>
    e53a:	9b01      	ldr	r3, [sp, #4]
    e53c:	2120      	movs	r1, #32
    e53e:	1c1c      	adds	r4, r3, #0
    e540:	1a09      	subs	r1, r1, r0
    e542:	408c      	lsls	r4, r1
    e544:	4322      	orrs	r2, r4
    e546:	40c3      	lsrs	r3, r0
    e548:	6172      	str	r2, [r6, #20]
    e54a:	9301      	str	r3, [sp, #4]
    e54c:	e000      	b.n	e550 <__d2b+0x48>
    e54e:	6172      	str	r2, [r6, #20]
    e550:	9c01      	ldr	r4, [sp, #4]
    e552:	61b4      	str	r4, [r6, #24]
    e554:	4263      	negs	r3, r4
    e556:	4163      	adcs	r3, r4
    e558:	2402      	movs	r4, #2
    e55a:	1ae4      	subs	r4, r4, r3
    e55c:	6134      	str	r4, [r6, #16]
    e55e:	e007      	b.n	e570 <__d2b+0x68>
    e560:	a801      	add	r0, sp, #4
    e562:	f7ff fd85 	bl	e070 <__lo0bits>
    e566:	9901      	ldr	r1, [sp, #4]
    e568:	2401      	movs	r4, #1
    e56a:	6171      	str	r1, [r6, #20]
    e56c:	6134      	str	r4, [r6, #16]
    e56e:	3020      	adds	r0, #32
    e570:	2f00      	cmp	r7, #0
    e572:	d009      	beq.n	e588 <__d2b+0x80>
    e574:	4a0d      	ldr	r2, [pc, #52]	; (e5ac <__d2b+0xa4>)
    e576:	9c08      	ldr	r4, [sp, #32]
    e578:	18bf      	adds	r7, r7, r2
    e57a:	183f      	adds	r7, r7, r0
    e57c:	6027      	str	r7, [r4, #0]
    e57e:	2335      	movs	r3, #53	; 0x35
    e580:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e582:	1a18      	subs	r0, r3, r0
    e584:	6020      	str	r0, [r4, #0]
    e586:	e00e      	b.n	e5a6 <__d2b+0x9e>
    e588:	4909      	ldr	r1, [pc, #36]	; (e5b0 <__d2b+0xa8>)
    e58a:	9a08      	ldr	r2, [sp, #32]
    e58c:	1840      	adds	r0, r0, r1
    e58e:	4909      	ldr	r1, [pc, #36]	; (e5b4 <__d2b+0xac>)
    e590:	6010      	str	r0, [r2, #0]
    e592:	1863      	adds	r3, r4, r1
    e594:	009b      	lsls	r3, r3, #2
    e596:	18f3      	adds	r3, r6, r3
    e598:	6958      	ldr	r0, [r3, #20]
    e59a:	f7ff fd4d 	bl	e038 <__hi0bits>
    e59e:	0164      	lsls	r4, r4, #5
    e5a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e5a2:	1a24      	subs	r4, r4, r0
    e5a4:	6014      	str	r4, [r2, #0]
    e5a6:	1c30      	adds	r0, r6, #0
    e5a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e5aa:	46c0      	nop			; (mov r8, r8)
    e5ac:	fffffbcd 	.word	0xfffffbcd
    e5b0:	fffffbce 	.word	0xfffffbce
    e5b4:	3fffffff 	.word	0x3fffffff

0000e5b8 <__ratio>:
    e5b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e5ba:	1c0e      	adds	r6, r1, #0
    e5bc:	4669      	mov	r1, sp
    e5be:	1c07      	adds	r7, r0, #0
    e5c0:	f7ff ff50 	bl	e464 <__b2d>
    e5c4:	1c04      	adds	r4, r0, #0
    e5c6:	1c0d      	adds	r5, r1, #0
    e5c8:	1c30      	adds	r0, r6, #0
    e5ca:	a901      	add	r1, sp, #4
    e5cc:	f7ff ff4a 	bl	e464 <__b2d>
    e5d0:	1c02      	adds	r2, r0, #0
    e5d2:	1c0b      	adds	r3, r1, #0
    e5d4:	9800      	ldr	r0, [sp, #0]
    e5d6:	9901      	ldr	r1, [sp, #4]
    e5d8:	693f      	ldr	r7, [r7, #16]
    e5da:	1a40      	subs	r0, r0, r1
    e5dc:	6931      	ldr	r1, [r6, #16]
    e5de:	4684      	mov	ip, r0
    e5e0:	1a79      	subs	r1, r7, r1
    e5e2:	0149      	lsls	r1, r1, #5
    e5e4:	4461      	add	r1, ip
    e5e6:	2900      	cmp	r1, #0
    e5e8:	dd02      	ble.n	e5f0 <__ratio+0x38>
    e5ea:	0509      	lsls	r1, r1, #20
    e5ec:	194d      	adds	r5, r1, r5
    e5ee:	e001      	b.n	e5f4 <__ratio+0x3c>
    e5f0:	0509      	lsls	r1, r1, #20
    e5f2:	1a5b      	subs	r3, r3, r1
    e5f4:	1c20      	adds	r0, r4, #0
    e5f6:	1c29      	adds	r1, r5, #0
    e5f8:	f001 fd06 	bl	10008 <__aeabi_ddiv>
    e5fc:	b003      	add	sp, #12
    e5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e600 <_mprec_log10>:
    e600:	b510      	push	{r4, lr}
    e602:	1e04      	subs	r4, r0, #0
    e604:	2c17      	cmp	r4, #23
    e606:	dc05      	bgt.n	e614 <_mprec_log10+0x14>
    e608:	4b0b      	ldr	r3, [pc, #44]	; (e638 <_mprec_log10+0x38>)
    e60a:	00c4      	lsls	r4, r0, #3
    e60c:	191c      	adds	r4, r3, r4
    e60e:	6920      	ldr	r0, [r4, #16]
    e610:	6961      	ldr	r1, [r4, #20]
    e612:	e008      	b.n	e626 <_mprec_log10+0x26>
    e614:	4905      	ldr	r1, [pc, #20]	; (e62c <_mprec_log10+0x2c>)
    e616:	4804      	ldr	r0, [pc, #16]	; (e628 <_mprec_log10+0x28>)
    e618:	4a05      	ldr	r2, [pc, #20]	; (e630 <_mprec_log10+0x30>)
    e61a:	4b06      	ldr	r3, [pc, #24]	; (e634 <_mprec_log10+0x34>)
    e61c:	3c01      	subs	r4, #1
    e61e:	f7fb f98d 	bl	993c <__aeabi_dmul>
    e622:	2c00      	cmp	r4, #0
    e624:	d1f8      	bne.n	e618 <_mprec_log10+0x18>
    e626:	bd10      	pop	{r4, pc}
    e628:	00000000 	.word	0x00000000
    e62c:	3ff00000 	.word	0x3ff00000
    e630:	00000000 	.word	0x00000000
    e634:	40240000 	.word	0x40240000
    e638:	00010af0 	.word	0x00010af0

0000e63c <__copybits>:
    e63c:	3901      	subs	r1, #1
    e63e:	b510      	push	{r4, lr}
    e640:	1c13      	adds	r3, r2, #0
    e642:	1149      	asrs	r1, r1, #5
    e644:	6912      	ldr	r2, [r2, #16]
    e646:	3101      	adds	r1, #1
    e648:	0089      	lsls	r1, r1, #2
    e64a:	3314      	adds	r3, #20
    e64c:	0092      	lsls	r2, r2, #2
    e64e:	1841      	adds	r1, r0, r1
    e650:	189a      	adds	r2, r3, r2
    e652:	4293      	cmp	r3, r2
    e654:	d202      	bcs.n	e65c <__copybits+0x20>
    e656:	cb10      	ldmia	r3!, {r4}
    e658:	c010      	stmia	r0!, {r4}
    e65a:	e7fa      	b.n	e652 <__copybits+0x16>
    e65c:	4288      	cmp	r0, r1
    e65e:	d202      	bcs.n	e666 <__copybits+0x2a>
    e660:	2300      	movs	r3, #0
    e662:	c008      	stmia	r0!, {r3}
    e664:	e7fa      	b.n	e65c <__copybits+0x20>
    e666:	bd10      	pop	{r4, pc}

0000e668 <__any_on>:
    e668:	1c02      	adds	r2, r0, #0
    e66a:	6900      	ldr	r0, [r0, #16]
    e66c:	b510      	push	{r4, lr}
    e66e:	3214      	adds	r2, #20
    e670:	114b      	asrs	r3, r1, #5
    e672:	4283      	cmp	r3, r0
    e674:	dc0d      	bgt.n	e692 <__any_on+0x2a>
    e676:	da0d      	bge.n	e694 <__any_on+0x2c>
    e678:	201f      	movs	r0, #31
    e67a:	4001      	ands	r1, r0
    e67c:	d00a      	beq.n	e694 <__any_on+0x2c>
    e67e:	0098      	lsls	r0, r3, #2
    e680:	5884      	ldr	r4, [r0, r2]
    e682:	1c20      	adds	r0, r4, #0
    e684:	40c8      	lsrs	r0, r1
    e686:	4088      	lsls	r0, r1
    e688:	1c01      	adds	r1, r0, #0
    e68a:	2001      	movs	r0, #1
    e68c:	42a1      	cmp	r1, r4
    e68e:	d10c      	bne.n	e6aa <__any_on+0x42>
    e690:	e000      	b.n	e694 <__any_on+0x2c>
    e692:	1c03      	adds	r3, r0, #0
    e694:	009b      	lsls	r3, r3, #2
    e696:	18d3      	adds	r3, r2, r3
    e698:	4293      	cmp	r3, r2
    e69a:	d905      	bls.n	e6a8 <__any_on+0x40>
    e69c:	3b04      	subs	r3, #4
    e69e:	6819      	ldr	r1, [r3, #0]
    e6a0:	2900      	cmp	r1, #0
    e6a2:	d0f9      	beq.n	e698 <__any_on+0x30>
    e6a4:	2001      	movs	r0, #1
    e6a6:	e000      	b.n	e6aa <__any_on+0x42>
    e6a8:	2000      	movs	r0, #0
    e6aa:	bd10      	pop	{r4, pc}
    e6ac:	46c0      	nop			; (mov r8, r8)
    e6ae:	46c0      	nop			; (mov r8, r8)

0000e6b0 <_realloc_r>:
    e6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6b2:	b087      	sub	sp, #28
    e6b4:	9003      	str	r0, [sp, #12]
    e6b6:	1c0c      	adds	r4, r1, #0
    e6b8:	9205      	str	r2, [sp, #20]
    e6ba:	d103      	bne.n	e6c4 <_realloc_r+0x14>
    e6bc:	1c11      	adds	r1, r2, #0
    e6be:	f7ff f9ed 	bl	da9c <_malloc_r>
    e6c2:	e195      	b.n	e9f0 <_realloc_r+0x340>
    e6c4:	1c27      	adds	r7, r4, #0
    e6c6:	9803      	ldr	r0, [sp, #12]
    e6c8:	3f08      	subs	r7, #8
    e6ca:	f7ff fc03 	bl	ded4 <__malloc_lock>
    e6ce:	687d      	ldr	r5, [r7, #4]
    e6d0:	2303      	movs	r3, #3
    e6d2:	1c2e      	adds	r6, r5, #0
    e6d4:	439e      	bics	r6, r3
    e6d6:	9b05      	ldr	r3, [sp, #20]
    e6d8:	9601      	str	r6, [sp, #4]
    e6da:	330b      	adds	r3, #11
    e6dc:	2b16      	cmp	r3, #22
    e6de:	d904      	bls.n	e6ea <_realloc_r+0x3a>
    e6e0:	2207      	movs	r2, #7
    e6e2:	4393      	bics	r3, r2
    e6e4:	9302      	str	r3, [sp, #8]
    e6e6:	d502      	bpl.n	e6ee <_realloc_r+0x3e>
    e6e8:	e005      	b.n	e6f6 <_realloc_r+0x46>
    e6ea:	2610      	movs	r6, #16
    e6ec:	9602      	str	r6, [sp, #8]
    e6ee:	9e02      	ldr	r6, [sp, #8]
    e6f0:	9805      	ldr	r0, [sp, #20]
    e6f2:	4286      	cmp	r6, r0
    e6f4:	d204      	bcs.n	e700 <_realloc_r+0x50>
    e6f6:	9c03      	ldr	r4, [sp, #12]
    e6f8:	230c      	movs	r3, #12
    e6fa:	6023      	str	r3, [r4, #0]
    e6fc:	2000      	movs	r0, #0
    e6fe:	e177      	b.n	e9f0 <_realloc_r+0x340>
    e700:	9e01      	ldr	r6, [sp, #4]
    e702:	9802      	ldr	r0, [sp, #8]
    e704:	4286      	cmp	r6, r0
    e706:	db00      	blt.n	e70a <_realloc_r+0x5a>
    e708:	e14e      	b.n	e9a8 <_realloc_r+0x2f8>
    e70a:	49ba      	ldr	r1, [pc, #744]	; (e9f4 <_realloc_r+0x344>)
    e70c:	19bb      	adds	r3, r7, r6
    e70e:	688a      	ldr	r2, [r1, #8]
    e710:	685e      	ldr	r6, [r3, #4]
    e712:	4694      	mov	ip, r2
    e714:	4293      	cmp	r3, r2
    e716:	d006      	beq.n	e726 <_realloc_r+0x76>
    e718:	2201      	movs	r2, #1
    e71a:	1c30      	adds	r0, r6, #0
    e71c:	4390      	bics	r0, r2
    e71e:	1818      	adds	r0, r3, r0
    e720:	6840      	ldr	r0, [r0, #4]
    e722:	4210      	tst	r0, r2
    e724:	d124      	bne.n	e770 <_realloc_r+0xc0>
    e726:	2203      	movs	r2, #3
    e728:	1c30      	adds	r0, r6, #0
    e72a:	9e01      	ldr	r6, [sp, #4]
    e72c:	4390      	bics	r0, r2
    e72e:	1982      	adds	r2, r0, r6
    e730:	9e02      	ldr	r6, [sp, #8]
    e732:	4563      	cmp	r3, ip
    e734:	d114      	bne.n	e760 <_realloc_r+0xb0>
    e736:	3610      	adds	r6, #16
    e738:	42b2      	cmp	r2, r6
    e73a:	db1b      	blt.n	e774 <_realloc_r+0xc4>
    e73c:	9802      	ldr	r0, [sp, #8]
    e73e:	1c23      	adds	r3, r4, #0
    e740:	183e      	adds	r6, r7, r0
    e742:	608e      	str	r6, [r1, #8]
    e744:	1a12      	subs	r2, r2, r0
    e746:	2101      	movs	r1, #1
    e748:	430a      	orrs	r2, r1
    e74a:	6072      	str	r2, [r6, #4]
    e74c:	3b08      	subs	r3, #8
    e74e:	685a      	ldr	r2, [r3, #4]
    e750:	4011      	ands	r1, r2
    e752:	4301      	orrs	r1, r0
    e754:	6059      	str	r1, [r3, #4]
    e756:	9803      	ldr	r0, [sp, #12]
    e758:	f7ff fbbd 	bl	ded6 <__malloc_unlock>
    e75c:	1c20      	adds	r0, r4, #0
    e75e:	e147      	b.n	e9f0 <_realloc_r+0x340>
    e760:	42b2      	cmp	r2, r6
    e762:	db07      	blt.n	e774 <_realloc_r+0xc4>
    e764:	68d9      	ldr	r1, [r3, #12]
    e766:	689b      	ldr	r3, [r3, #8]
    e768:	9201      	str	r2, [sp, #4]
    e76a:	60d9      	str	r1, [r3, #12]
    e76c:	608b      	str	r3, [r1, #8]
    e76e:	e11b      	b.n	e9a8 <_realloc_r+0x2f8>
    e770:	2000      	movs	r0, #0
    e772:	1c03      	adds	r3, r0, #0
    e774:	07e9      	lsls	r1, r5, #31
    e776:	d500      	bpl.n	e77a <_realloc_r+0xca>
    e778:	e0c5      	b.n	e906 <_realloc_r+0x256>
    e77a:	1c22      	adds	r2, r4, #0
    e77c:	3a08      	subs	r2, #8
    e77e:	6815      	ldr	r5, [r2, #0]
    e780:	2203      	movs	r2, #3
    e782:	1b7d      	subs	r5, r7, r5
    e784:	686e      	ldr	r6, [r5, #4]
    e786:	4396      	bics	r6, r2
    e788:	9a01      	ldr	r2, [sp, #4]
    e78a:	18b6      	adds	r6, r6, r2
    e78c:	2b00      	cmp	r3, #0
    e78e:	d100      	bne.n	e792 <_realloc_r+0xe2>
    e790:	e083      	b.n	e89a <_realloc_r+0x1ea>
    e792:	1830      	adds	r0, r6, r0
    e794:	9004      	str	r0, [sp, #16]
    e796:	4563      	cmp	r3, ip
    e798:	d144      	bne.n	e824 <_realloc_r+0x174>
    e79a:	9b02      	ldr	r3, [sp, #8]
    e79c:	3310      	adds	r3, #16
    e79e:	4298      	cmp	r0, r3
    e7a0:	db7b      	blt.n	e89a <_realloc_r+0x1ea>
    e7a2:	68aa      	ldr	r2, [r5, #8]
    e7a4:	68eb      	ldr	r3, [r5, #12]
    e7a6:	1c2e      	adds	r6, r5, #0
    e7a8:	60d3      	str	r3, [r2, #12]
    e7aa:	609a      	str	r2, [r3, #8]
    e7ac:	9a01      	ldr	r2, [sp, #4]
    e7ae:	3608      	adds	r6, #8
    e7b0:	3a04      	subs	r2, #4
    e7b2:	2a24      	cmp	r2, #36	; 0x24
    e7b4:	d824      	bhi.n	e800 <_realloc_r+0x150>
    e7b6:	1c33      	adds	r3, r6, #0
    e7b8:	2a13      	cmp	r2, #19
    e7ba:	d91a      	bls.n	e7f2 <_realloc_r+0x142>
    e7bc:	6823      	ldr	r3, [r4, #0]
    e7be:	60ab      	str	r3, [r5, #8]
    e7c0:	6860      	ldr	r0, [r4, #4]
    e7c2:	60e8      	str	r0, [r5, #12]
    e7c4:	2a1b      	cmp	r2, #27
    e7c6:	d803      	bhi.n	e7d0 <_realloc_r+0x120>
    e7c8:	1c2b      	adds	r3, r5, #0
    e7ca:	3310      	adds	r3, #16
    e7cc:	3408      	adds	r4, #8
    e7ce:	e010      	b.n	e7f2 <_realloc_r+0x142>
    e7d0:	68a1      	ldr	r1, [r4, #8]
    e7d2:	6129      	str	r1, [r5, #16]
    e7d4:	68e3      	ldr	r3, [r4, #12]
    e7d6:	616b      	str	r3, [r5, #20]
    e7d8:	2a24      	cmp	r2, #36	; 0x24
    e7da:	d003      	beq.n	e7e4 <_realloc_r+0x134>
    e7dc:	1c2b      	adds	r3, r5, #0
    e7de:	3318      	adds	r3, #24
    e7e0:	3410      	adds	r4, #16
    e7e2:	e006      	b.n	e7f2 <_realloc_r+0x142>
    e7e4:	6920      	ldr	r0, [r4, #16]
    e7e6:	1c2b      	adds	r3, r5, #0
    e7e8:	61a8      	str	r0, [r5, #24]
    e7ea:	6961      	ldr	r1, [r4, #20]
    e7ec:	3320      	adds	r3, #32
    e7ee:	61e9      	str	r1, [r5, #28]
    e7f0:	3418      	adds	r4, #24
    e7f2:	6822      	ldr	r2, [r4, #0]
    e7f4:	601a      	str	r2, [r3, #0]
    e7f6:	6860      	ldr	r0, [r4, #4]
    e7f8:	6058      	str	r0, [r3, #4]
    e7fa:	68a4      	ldr	r4, [r4, #8]
    e7fc:	609c      	str	r4, [r3, #8]
    e7fe:	e003      	b.n	e808 <_realloc_r+0x158>
    e800:	1c30      	adds	r0, r6, #0
    e802:	1c21      	adds	r1, r4, #0
    e804:	f7ff fb4d 	bl	dea2 <memmove>
    e808:	9c02      	ldr	r4, [sp, #8]
    e80a:	4b7a      	ldr	r3, [pc, #488]	; (e9f4 <_realloc_r+0x344>)
    e80c:	9804      	ldr	r0, [sp, #16]
    e80e:	192a      	adds	r2, r5, r4
    e810:	609a      	str	r2, [r3, #8]
    e812:	1b07      	subs	r7, r0, r4
    e814:	2301      	movs	r3, #1
    e816:	431f      	orrs	r7, r3
    e818:	6057      	str	r7, [r2, #4]
    e81a:	6869      	ldr	r1, [r5, #4]
    e81c:	400b      	ands	r3, r1
    e81e:	4323      	orrs	r3, r4
    e820:	606b      	str	r3, [r5, #4]
    e822:	e0bc      	b.n	e99e <_realloc_r+0x2ee>
    e824:	9a02      	ldr	r2, [sp, #8]
    e826:	4290      	cmp	r0, r2
    e828:	db37      	blt.n	e89a <_realloc_r+0x1ea>
    e82a:	68da      	ldr	r2, [r3, #12]
    e82c:	689b      	ldr	r3, [r3, #8]
    e82e:	1c28      	adds	r0, r5, #0
    e830:	60da      	str	r2, [r3, #12]
    e832:	6093      	str	r3, [r2, #8]
    e834:	68aa      	ldr	r2, [r5, #8]
    e836:	68eb      	ldr	r3, [r5, #12]
    e838:	3008      	adds	r0, #8
    e83a:	60d3      	str	r3, [r2, #12]
    e83c:	609a      	str	r2, [r3, #8]
    e83e:	9a01      	ldr	r2, [sp, #4]
    e840:	3a04      	subs	r2, #4
    e842:	2a24      	cmp	r2, #36	; 0x24
    e844:	d824      	bhi.n	e890 <_realloc_r+0x1e0>
    e846:	2a13      	cmp	r2, #19
    e848:	d919      	bls.n	e87e <_realloc_r+0x1ce>
    e84a:	6823      	ldr	r3, [r4, #0]
    e84c:	60ab      	str	r3, [r5, #8]
    e84e:	6866      	ldr	r6, [r4, #4]
    e850:	60ee      	str	r6, [r5, #12]
    e852:	2a1b      	cmp	r2, #27
    e854:	d802      	bhi.n	e85c <_realloc_r+0x1ac>
    e856:	3008      	adds	r0, #8
    e858:	3408      	adds	r4, #8
    e85a:	e010      	b.n	e87e <_realloc_r+0x1ce>
    e85c:	68a0      	ldr	r0, [r4, #8]
    e85e:	6128      	str	r0, [r5, #16]
    e860:	68e1      	ldr	r1, [r4, #12]
    e862:	6169      	str	r1, [r5, #20]
    e864:	2a24      	cmp	r2, #36	; 0x24
    e866:	d003      	beq.n	e870 <_realloc_r+0x1c0>
    e868:	1c28      	adds	r0, r5, #0
    e86a:	3018      	adds	r0, #24
    e86c:	3410      	adds	r4, #16
    e86e:	e006      	b.n	e87e <_realloc_r+0x1ce>
    e870:	6922      	ldr	r2, [r4, #16]
    e872:	1c28      	adds	r0, r5, #0
    e874:	61aa      	str	r2, [r5, #24]
    e876:	6963      	ldr	r3, [r4, #20]
    e878:	3020      	adds	r0, #32
    e87a:	61eb      	str	r3, [r5, #28]
    e87c:	3418      	adds	r4, #24
    e87e:	6826      	ldr	r6, [r4, #0]
    e880:	6006      	str	r6, [r0, #0]
    e882:	6861      	ldr	r1, [r4, #4]
    e884:	6041      	str	r1, [r0, #4]
    e886:	68a4      	ldr	r4, [r4, #8]
    e888:	6084      	str	r4, [r0, #8]
    e88a:	9c04      	ldr	r4, [sp, #16]
    e88c:	9401      	str	r4, [sp, #4]
    e88e:	e034      	b.n	e8fa <_realloc_r+0x24a>
    e890:	1c21      	adds	r1, r4, #0
    e892:	f7ff fb06 	bl	dea2 <memmove>
    e896:	9e04      	ldr	r6, [sp, #16]
    e898:	e02e      	b.n	e8f8 <_realloc_r+0x248>
    e89a:	9802      	ldr	r0, [sp, #8]
    e89c:	4286      	cmp	r6, r0
    e89e:	db32      	blt.n	e906 <_realloc_r+0x256>
    e8a0:	68aa      	ldr	r2, [r5, #8]
    e8a2:	68eb      	ldr	r3, [r5, #12]
    e8a4:	1c28      	adds	r0, r5, #0
    e8a6:	60d3      	str	r3, [r2, #12]
    e8a8:	609a      	str	r2, [r3, #8]
    e8aa:	9a01      	ldr	r2, [sp, #4]
    e8ac:	3008      	adds	r0, #8
    e8ae:	3a04      	subs	r2, #4
    e8b0:	2a24      	cmp	r2, #36	; 0x24
    e8b2:	d824      	bhi.n	e8fe <_realloc_r+0x24e>
    e8b4:	2a13      	cmp	r2, #19
    e8b6:	d919      	bls.n	e8ec <_realloc_r+0x23c>
    e8b8:	6821      	ldr	r1, [r4, #0]
    e8ba:	60a9      	str	r1, [r5, #8]
    e8bc:	6863      	ldr	r3, [r4, #4]
    e8be:	60eb      	str	r3, [r5, #12]
    e8c0:	2a1b      	cmp	r2, #27
    e8c2:	d802      	bhi.n	e8ca <_realloc_r+0x21a>
    e8c4:	3008      	adds	r0, #8
    e8c6:	3408      	adds	r4, #8
    e8c8:	e010      	b.n	e8ec <_realloc_r+0x23c>
    e8ca:	68a0      	ldr	r0, [r4, #8]
    e8cc:	6128      	str	r0, [r5, #16]
    e8ce:	68e1      	ldr	r1, [r4, #12]
    e8d0:	6169      	str	r1, [r5, #20]
    e8d2:	2a24      	cmp	r2, #36	; 0x24
    e8d4:	d003      	beq.n	e8de <_realloc_r+0x22e>
    e8d6:	1c28      	adds	r0, r5, #0
    e8d8:	3018      	adds	r0, #24
    e8da:	3410      	adds	r4, #16
    e8dc:	e006      	b.n	e8ec <_realloc_r+0x23c>
    e8de:	6922      	ldr	r2, [r4, #16]
    e8e0:	1c28      	adds	r0, r5, #0
    e8e2:	61aa      	str	r2, [r5, #24]
    e8e4:	6963      	ldr	r3, [r4, #20]
    e8e6:	3020      	adds	r0, #32
    e8e8:	61eb      	str	r3, [r5, #28]
    e8ea:	3418      	adds	r4, #24
    e8ec:	6821      	ldr	r1, [r4, #0]
    e8ee:	6001      	str	r1, [r0, #0]
    e8f0:	6862      	ldr	r2, [r4, #4]
    e8f2:	6042      	str	r2, [r0, #4]
    e8f4:	68a4      	ldr	r4, [r4, #8]
    e8f6:	6084      	str	r4, [r0, #8]
    e8f8:	9601      	str	r6, [sp, #4]
    e8fa:	1c2f      	adds	r7, r5, #0
    e8fc:	e054      	b.n	e9a8 <_realloc_r+0x2f8>
    e8fe:	1c21      	adds	r1, r4, #0
    e900:	f7ff facf 	bl	dea2 <memmove>
    e904:	e7f8      	b.n	e8f8 <_realloc_r+0x248>
    e906:	9803      	ldr	r0, [sp, #12]
    e908:	9905      	ldr	r1, [sp, #20]
    e90a:	f7ff f8c7 	bl	da9c <_malloc_r>
    e90e:	1e06      	subs	r6, r0, #0
    e910:	d045      	beq.n	e99e <_realloc_r+0x2ee>
    e912:	1c22      	adds	r2, r4, #0
    e914:	3a08      	subs	r2, #8
    e916:	6852      	ldr	r2, [r2, #4]
    e918:	2101      	movs	r1, #1
    e91a:	1c03      	adds	r3, r0, #0
    e91c:	438a      	bics	r2, r1
    e91e:	3b08      	subs	r3, #8
    e920:	18ba      	adds	r2, r7, r2
    e922:	4293      	cmp	r3, r2
    e924:	d106      	bne.n	e934 <_realloc_r+0x284>
    e926:	685b      	ldr	r3, [r3, #4]
    e928:	9c01      	ldr	r4, [sp, #4]
    e92a:	2203      	movs	r2, #3
    e92c:	4393      	bics	r3, r2
    e92e:	18e4      	adds	r4, r4, r3
    e930:	9401      	str	r4, [sp, #4]
    e932:	e039      	b.n	e9a8 <_realloc_r+0x2f8>
    e934:	9a01      	ldr	r2, [sp, #4]
    e936:	3a04      	subs	r2, #4
    e938:	2a24      	cmp	r2, #36	; 0x24
    e93a:	d829      	bhi.n	e990 <_realloc_r+0x2e0>
    e93c:	2a13      	cmp	r2, #19
    e93e:	d91e      	bls.n	e97e <_realloc_r+0x2ce>
    e940:	6820      	ldr	r0, [r4, #0]
    e942:	6030      	str	r0, [r6, #0]
    e944:	6861      	ldr	r1, [r4, #4]
    e946:	6071      	str	r1, [r6, #4]
    e948:	2a1b      	cmp	r2, #27
    e94a:	d804      	bhi.n	e956 <_realloc_r+0x2a6>
    e94c:	1c33      	adds	r3, r6, #0
    e94e:	1c22      	adds	r2, r4, #0
    e950:	3308      	adds	r3, #8
    e952:	3208      	adds	r2, #8
    e954:	e015      	b.n	e982 <_realloc_r+0x2d2>
    e956:	68a3      	ldr	r3, [r4, #8]
    e958:	60b3      	str	r3, [r6, #8]
    e95a:	68e0      	ldr	r0, [r4, #12]
    e95c:	60f0      	str	r0, [r6, #12]
    e95e:	2a24      	cmp	r2, #36	; 0x24
    e960:	d004      	beq.n	e96c <_realloc_r+0x2bc>
    e962:	1c33      	adds	r3, r6, #0
    e964:	1c22      	adds	r2, r4, #0
    e966:	3310      	adds	r3, #16
    e968:	3210      	adds	r2, #16
    e96a:	e00a      	b.n	e982 <_realloc_r+0x2d2>
    e96c:	6921      	ldr	r1, [r4, #16]
    e96e:	1c33      	adds	r3, r6, #0
    e970:	6131      	str	r1, [r6, #16]
    e972:	6960      	ldr	r0, [r4, #20]
    e974:	1c22      	adds	r2, r4, #0
    e976:	3318      	adds	r3, #24
    e978:	3218      	adds	r2, #24
    e97a:	6170      	str	r0, [r6, #20]
    e97c:	e001      	b.n	e982 <_realloc_r+0x2d2>
    e97e:	1c03      	adds	r3, r0, #0
    e980:	1c22      	adds	r2, r4, #0
    e982:	6811      	ldr	r1, [r2, #0]
    e984:	6019      	str	r1, [r3, #0]
    e986:	6850      	ldr	r0, [r2, #4]
    e988:	6058      	str	r0, [r3, #4]
    e98a:	6892      	ldr	r2, [r2, #8]
    e98c:	609a      	str	r2, [r3, #8]
    e98e:	e002      	b.n	e996 <_realloc_r+0x2e6>
    e990:	1c21      	adds	r1, r4, #0
    e992:	f7ff fa86 	bl	dea2 <memmove>
    e996:	9803      	ldr	r0, [sp, #12]
    e998:	1c21      	adds	r1, r4, #0
    e99a:	f7fe fd5b 	bl	d454 <_free_r>
    e99e:	9803      	ldr	r0, [sp, #12]
    e9a0:	f7ff fa99 	bl	ded6 <__malloc_unlock>
    e9a4:	1c30      	adds	r0, r6, #0
    e9a6:	e023      	b.n	e9f0 <_realloc_r+0x340>
    e9a8:	9c01      	ldr	r4, [sp, #4]
    e9aa:	9e02      	ldr	r6, [sp, #8]
    e9ac:	2301      	movs	r3, #1
    e9ae:	1ba2      	subs	r2, r4, r6
    e9b0:	6878      	ldr	r0, [r7, #4]
    e9b2:	2a0f      	cmp	r2, #15
    e9b4:	d90f      	bls.n	e9d6 <_realloc_r+0x326>
    e9b6:	4018      	ands	r0, r3
    e9b8:	4330      	orrs	r0, r6
    e9ba:	6078      	str	r0, [r7, #4]
    e9bc:	1c18      	adds	r0, r3, #0
    e9be:	19b9      	adds	r1, r7, r6
    e9c0:	4310      	orrs	r0, r2
    e9c2:	6048      	str	r0, [r1, #4]
    e9c4:	188a      	adds	r2, r1, r2
    e9c6:	6850      	ldr	r0, [r2, #4]
    e9c8:	3108      	adds	r1, #8
    e9ca:	4303      	orrs	r3, r0
    e9cc:	6053      	str	r3, [r2, #4]
    e9ce:	9803      	ldr	r0, [sp, #12]
    e9d0:	f7fe fd40 	bl	d454 <_free_r>
    e9d4:	e007      	b.n	e9e6 <_realloc_r+0x336>
    e9d6:	9c01      	ldr	r4, [sp, #4]
    e9d8:	4018      	ands	r0, r3
    e9da:	4320      	orrs	r0, r4
    e9dc:	6078      	str	r0, [r7, #4]
    e9de:	193a      	adds	r2, r7, r4
    e9e0:	6856      	ldr	r6, [r2, #4]
    e9e2:	4333      	orrs	r3, r6
    e9e4:	6053      	str	r3, [r2, #4]
    e9e6:	9803      	ldr	r0, [sp, #12]
    e9e8:	f7ff fa75 	bl	ded6 <__malloc_unlock>
    e9ec:	1c38      	adds	r0, r7, #0
    e9ee:	3008      	adds	r0, #8
    e9f0:	b007      	add	sp, #28
    e9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e9f4:	200004ec 	.word	0x200004ec

0000e9f8 <__fpclassifyd>:
    e9f8:	b530      	push	{r4, r5, lr}
    e9fa:	1c0b      	adds	r3, r1, #0
    e9fc:	1c04      	adds	r4, r0, #0
    e9fe:	1c02      	adds	r2, r0, #0
    ea00:	431c      	orrs	r4, r3
    ea02:	2002      	movs	r0, #2
    ea04:	2c00      	cmp	r4, #0
    ea06:	d017      	beq.n	ea38 <__fpclassifyd+0x40>
    ea08:	2480      	movs	r4, #128	; 0x80
    ea0a:	0624      	lsls	r4, r4, #24
    ea0c:	42a3      	cmp	r3, r4
    ea0e:	d101      	bne.n	ea14 <__fpclassifyd+0x1c>
    ea10:	2a00      	cmp	r2, #0
    ea12:	d011      	beq.n	ea38 <__fpclassifyd+0x40>
    ea14:	4809      	ldr	r0, [pc, #36]	; (ea3c <__fpclassifyd+0x44>)
    ea16:	0059      	lsls	r1, r3, #1
    ea18:	0849      	lsrs	r1, r1, #1
    ea1a:	4c09      	ldr	r4, [pc, #36]	; (ea40 <__fpclassifyd+0x48>)
    ea1c:	180d      	adds	r5, r1, r0
    ea1e:	2004      	movs	r0, #4
    ea20:	42a5      	cmp	r5, r4
    ea22:	d909      	bls.n	ea38 <__fpclassifyd+0x40>
    ea24:	4c07      	ldr	r4, [pc, #28]	; (ea44 <__fpclassifyd+0x4c>)
    ea26:	2003      	movs	r0, #3
    ea28:	42a1      	cmp	r1, r4
    ea2a:	d905      	bls.n	ea38 <__fpclassifyd+0x40>
    ea2c:	4c06      	ldr	r4, [pc, #24]	; (ea48 <__fpclassifyd+0x50>)
    ea2e:	2000      	movs	r0, #0
    ea30:	42a1      	cmp	r1, r4
    ea32:	d101      	bne.n	ea38 <__fpclassifyd+0x40>
    ea34:	4250      	negs	r0, r2
    ea36:	4150      	adcs	r0, r2
    ea38:	bd30      	pop	{r4, r5, pc}
    ea3a:	46c0      	nop			; (mov r8, r8)
    ea3c:	fff00000 	.word	0xfff00000
    ea40:	7fdfffff 	.word	0x7fdfffff
    ea44:	000fffff 	.word	0x000fffff
    ea48:	7ff00000 	.word	0x7ff00000

0000ea4c <_sbrk_r>:
    ea4c:	b538      	push	{r3, r4, r5, lr}
    ea4e:	4c07      	ldr	r4, [pc, #28]	; (ea6c <_sbrk_r+0x20>)
    ea50:	2300      	movs	r3, #0
    ea52:	1c05      	adds	r5, r0, #0
    ea54:	1c08      	adds	r0, r1, #0
    ea56:	6023      	str	r3, [r4, #0]
    ea58:	f7fa f902 	bl	8c60 <_sbrk>
    ea5c:	1c43      	adds	r3, r0, #1
    ea5e:	d103      	bne.n	ea68 <_sbrk_r+0x1c>
    ea60:	6823      	ldr	r3, [r4, #0]
    ea62:	2b00      	cmp	r3, #0
    ea64:	d000      	beq.n	ea68 <_sbrk_r+0x1c>
    ea66:	602b      	str	r3, [r5, #0]
    ea68:	bd38      	pop	{r3, r4, r5, pc}
    ea6a:	46c0      	nop			; (mov r8, r8)
    ea6c:	200010dc 	.word	0x200010dc

0000ea70 <__sread>:
    ea70:	b538      	push	{r3, r4, r5, lr}
    ea72:	1c0c      	adds	r4, r1, #0
    ea74:	250e      	movs	r5, #14
    ea76:	5f49      	ldrsh	r1, [r1, r5]
    ea78:	f000 fe6a 	bl	f750 <_read_r>
    ea7c:	2800      	cmp	r0, #0
    ea7e:	db03      	blt.n	ea88 <__sread+0x18>
    ea80:	6d22      	ldr	r2, [r4, #80]	; 0x50
    ea82:	1813      	adds	r3, r2, r0
    ea84:	6523      	str	r3, [r4, #80]	; 0x50
    ea86:	e003      	b.n	ea90 <__sread+0x20>
    ea88:	89a2      	ldrh	r2, [r4, #12]
    ea8a:	4b02      	ldr	r3, [pc, #8]	; (ea94 <__sread+0x24>)
    ea8c:	4013      	ands	r3, r2
    ea8e:	81a3      	strh	r3, [r4, #12]
    ea90:	bd38      	pop	{r3, r4, r5, pc}
    ea92:	46c0      	nop			; (mov r8, r8)
    ea94:	ffffefff 	.word	0xffffefff

0000ea98 <__seofread>:
    ea98:	2000      	movs	r0, #0
    ea9a:	4770      	bx	lr

0000ea9c <__swrite>:
    ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea9e:	1c1e      	adds	r6, r3, #0
    eaa0:	898b      	ldrh	r3, [r1, #12]
    eaa2:	1c05      	adds	r5, r0, #0
    eaa4:	1c0c      	adds	r4, r1, #0
    eaa6:	1c17      	adds	r7, r2, #0
    eaa8:	05da      	lsls	r2, r3, #23
    eaaa:	d505      	bpl.n	eab8 <__swrite+0x1c>
    eaac:	230e      	movs	r3, #14
    eaae:	5ec9      	ldrsh	r1, [r1, r3]
    eab0:	2200      	movs	r2, #0
    eab2:	2302      	movs	r3, #2
    eab4:	f000 fe38 	bl	f728 <_lseek_r>
    eab8:	89a2      	ldrh	r2, [r4, #12]
    eaba:	4b05      	ldr	r3, [pc, #20]	; (ead0 <__swrite+0x34>)
    eabc:	1c28      	adds	r0, r5, #0
    eabe:	4013      	ands	r3, r2
    eac0:	81a3      	strh	r3, [r4, #12]
    eac2:	220e      	movs	r2, #14
    eac4:	5ea1      	ldrsh	r1, [r4, r2]
    eac6:	1c33      	adds	r3, r6, #0
    eac8:	1c3a      	adds	r2, r7, #0
    eaca:	f000 fcaf 	bl	f42c <_write_r>
    eace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ead0:	ffffefff 	.word	0xffffefff

0000ead4 <__sseek>:
    ead4:	b538      	push	{r3, r4, r5, lr}
    ead6:	1c0c      	adds	r4, r1, #0
    ead8:	250e      	movs	r5, #14
    eada:	5f49      	ldrsh	r1, [r1, r5]
    eadc:	f000 fe24 	bl	f728 <_lseek_r>
    eae0:	89a3      	ldrh	r3, [r4, #12]
    eae2:	1c42      	adds	r2, r0, #1
    eae4:	d103      	bne.n	eaee <__sseek+0x1a>
    eae6:	4a05      	ldr	r2, [pc, #20]	; (eafc <__sseek+0x28>)
    eae8:	4013      	ands	r3, r2
    eaea:	81a3      	strh	r3, [r4, #12]
    eaec:	e004      	b.n	eaf8 <__sseek+0x24>
    eaee:	2280      	movs	r2, #128	; 0x80
    eaf0:	0152      	lsls	r2, r2, #5
    eaf2:	4313      	orrs	r3, r2
    eaf4:	81a3      	strh	r3, [r4, #12]
    eaf6:	6520      	str	r0, [r4, #80]	; 0x50
    eaf8:	bd38      	pop	{r3, r4, r5, pc}
    eafa:	46c0      	nop			; (mov r8, r8)
    eafc:	ffffefff 	.word	0xffffefff

0000eb00 <__sclose>:
    eb00:	b508      	push	{r3, lr}
    eb02:	230e      	movs	r3, #14
    eb04:	5ec9      	ldrsh	r1, [r1, r3]
    eb06:	f000 fd1f 	bl	f548 <_close_r>
    eb0a:	bd08      	pop	{r3, pc}

0000eb0c <__sprint_r>:
    eb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb0e:	b085      	sub	sp, #20
    eb10:	9002      	str	r0, [sp, #8]
    eb12:	6890      	ldr	r0, [r2, #8]
    eb14:	1c0e      	adds	r6, r1, #0
    eb16:	1c14      	adds	r4, r2, #0
    eb18:	2800      	cmp	r0, #0
    eb1a:	d101      	bne.n	eb20 <__sprint_r+0x14>
    eb1c:	6050      	str	r0, [r2, #4]
    eb1e:	e027      	b.n	eb70 <__sprint_r+0x64>
    eb20:	6e4a      	ldr	r2, [r1, #100]	; 0x64
    eb22:	0492      	lsls	r2, r2, #18
    eb24:	d51d      	bpl.n	eb62 <__sprint_r+0x56>
    eb26:	6825      	ldr	r5, [r4, #0]
    eb28:	68a0      	ldr	r0, [r4, #8]
    eb2a:	2800      	cmp	r0, #0
    eb2c:	d01d      	beq.n	eb6a <__sprint_r+0x5e>
    eb2e:	686a      	ldr	r2, [r5, #4]
    eb30:	682b      	ldr	r3, [r5, #0]
    eb32:	0892      	lsrs	r2, r2, #2
    eb34:	9303      	str	r3, [sp, #12]
    eb36:	9201      	str	r2, [sp, #4]
    eb38:	2700      	movs	r7, #0
    eb3a:	9a01      	ldr	r2, [sp, #4]
    eb3c:	4297      	cmp	r7, r2
    eb3e:	da0a      	bge.n	eb56 <__sprint_r+0x4a>
    eb40:	9a03      	ldr	r2, [sp, #12]
    eb42:	00bb      	lsls	r3, r7, #2
    eb44:	58d1      	ldr	r1, [r2, r3]
    eb46:	9802      	ldr	r0, [sp, #8]
    eb48:	1c32      	adds	r2, r6, #0
    eb4a:	f000 fd5b 	bl	f604 <_fputwc_r>
    eb4e:	1c43      	adds	r3, r0, #1
    eb50:	d00b      	beq.n	eb6a <__sprint_r+0x5e>
    eb52:	3701      	adds	r7, #1
    eb54:	e7f1      	b.n	eb3a <__sprint_r+0x2e>
    eb56:	0093      	lsls	r3, r2, #2
    eb58:	68a2      	ldr	r2, [r4, #8]
    eb5a:	3508      	adds	r5, #8
    eb5c:	1ad3      	subs	r3, r2, r3
    eb5e:	60a3      	str	r3, [r4, #8]
    eb60:	e7e2      	b.n	eb28 <__sprint_r+0x1c>
    eb62:	9802      	ldr	r0, [sp, #8]
    eb64:	1c22      	adds	r2, r4, #0
    eb66:	f7fe fd33 	bl	d5d0 <__sfvwrite_r>
    eb6a:	2300      	movs	r3, #0
    eb6c:	60a3      	str	r3, [r4, #8]
    eb6e:	6063      	str	r3, [r4, #4]
    eb70:	b005      	add	sp, #20
    eb72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000eb74 <_vfiprintf_r>:
    eb74:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb76:	b0b3      	sub	sp, #204	; 0xcc
    eb78:	9008      	str	r0, [sp, #32]
    eb7a:	9107      	str	r1, [sp, #28]
    eb7c:	920a      	str	r2, [sp, #40]	; 0x28
    eb7e:	1c1d      	adds	r5, r3, #0
    eb80:	1c1c      	adds	r4, r3, #0
    eb82:	2800      	cmp	r0, #0
    eb84:	d005      	beq.n	eb92 <_vfiprintf_r+0x1e>
    eb86:	6b80      	ldr	r0, [r0, #56]	; 0x38
    eb88:	2800      	cmp	r0, #0
    eb8a:	d102      	bne.n	eb92 <_vfiprintf_r+0x1e>
    eb8c:	9808      	ldr	r0, [sp, #32]
    eb8e:	f7fe fb31 	bl	d1f4 <__sinit>
    eb92:	9f07      	ldr	r7, [sp, #28]
    eb94:	2280      	movs	r2, #128	; 0x80
    eb96:	89bb      	ldrh	r3, [r7, #12]
    eb98:	0192      	lsls	r2, r2, #6
    eb9a:	4213      	tst	r3, r2
    eb9c:	d105      	bne.n	ebaa <_vfiprintf_r+0x36>
    eb9e:	4313      	orrs	r3, r2
    eba0:	6e78      	ldr	r0, [r7, #100]	; 0x64
    eba2:	81bb      	strh	r3, [r7, #12]
    eba4:	4bb3      	ldr	r3, [pc, #716]	; (ee74 <_vfiprintf_r+0x300>)
    eba6:	4003      	ands	r3, r0
    eba8:	667b      	str	r3, [r7, #100]	; 0x64
    ebaa:	9f07      	ldr	r7, [sp, #28]
    ebac:	89bb      	ldrh	r3, [r7, #12]
    ebae:	0718      	lsls	r0, r3, #28
    ebb0:	d509      	bpl.n	ebc6 <_vfiprintf_r+0x52>
    ebb2:	6939      	ldr	r1, [r7, #16]
    ebb4:	2900      	cmp	r1, #0
    ebb6:	d006      	beq.n	ebc6 <_vfiprintf_r+0x52>
    ebb8:	9f07      	ldr	r7, [sp, #28]
    ebba:	231a      	movs	r3, #26
    ebbc:	89ba      	ldrh	r2, [r7, #12]
    ebbe:	4013      	ands	r3, r2
    ebc0:	2b0a      	cmp	r3, #10
    ebc2:	d116      	bne.n	ebf2 <_vfiprintf_r+0x7e>
    ebc4:	e009      	b.n	ebda <_vfiprintf_r+0x66>
    ebc6:	9808      	ldr	r0, [sp, #32]
    ebc8:	9907      	ldr	r1, [sp, #28]
    ebca:	f7fd fb61 	bl	c290 <__swsetup_r>
    ebce:	2800      	cmp	r0, #0
    ebd0:	d0f2      	beq.n	ebb8 <_vfiprintf_r+0x44>
    ebd2:	2001      	movs	r0, #1
    ebd4:	4240      	negs	r0, r0
    ebd6:	f000 fbde 	bl	f396 <_vfiprintf_r+0x822>
    ebda:	9f07      	ldr	r7, [sp, #28]
    ebdc:	230e      	movs	r3, #14
    ebde:	5efb      	ldrsh	r3, [r7, r3]
    ebe0:	2b00      	cmp	r3, #0
    ebe2:	db06      	blt.n	ebf2 <_vfiprintf_r+0x7e>
    ebe4:	9808      	ldr	r0, [sp, #32]
    ebe6:	9907      	ldr	r1, [sp, #28]
    ebe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ebea:	1c2b      	adds	r3, r5, #0
    ebec:	f000 fbe6 	bl	f3bc <__sbprintf>
    ebf0:	e3d1      	b.n	f396 <_vfiprintf_r+0x822>
    ebf2:	2300      	movs	r3, #0
    ebf4:	ad22      	add	r5, sp, #136	; 0x88
    ebf6:	9515      	str	r5, [sp, #84]	; 0x54
    ebf8:	9317      	str	r3, [sp, #92]	; 0x5c
    ebfa:	9316      	str	r3, [sp, #88]	; 0x58
    ebfc:	9310      	str	r3, [sp, #64]	; 0x40
    ebfe:	930e      	str	r3, [sp, #56]	; 0x38
    ec00:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    ec02:	7833      	ldrb	r3, [r6, #0]
    ec04:	2b00      	cmp	r3, #0
    ec06:	d103      	bne.n	ec10 <_vfiprintf_r+0x9c>
    ec08:	980a      	ldr	r0, [sp, #40]	; 0x28
    ec0a:	1a37      	subs	r7, r6, r0
    ec0c:	d104      	bne.n	ec18 <_vfiprintf_r+0xa4>
    ec0e:	e01c      	b.n	ec4a <_vfiprintf_r+0xd6>
    ec10:	2b25      	cmp	r3, #37	; 0x25
    ec12:	d0f9      	beq.n	ec08 <_vfiprintf_r+0x94>
    ec14:	3601      	adds	r6, #1
    ec16:	e7f4      	b.n	ec02 <_vfiprintf_r+0x8e>
    ec18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    ec1a:	990a      	ldr	r1, [sp, #40]	; 0x28
    ec1c:	18bb      	adds	r3, r7, r2
    ec1e:	9317      	str	r3, [sp, #92]	; 0x5c
    ec20:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ec22:	6029      	str	r1, [r5, #0]
    ec24:	3301      	adds	r3, #1
    ec26:	606f      	str	r7, [r5, #4]
    ec28:	9316      	str	r3, [sp, #88]	; 0x58
    ec2a:	2b07      	cmp	r3, #7
    ec2c:	dc01      	bgt.n	ec32 <_vfiprintf_r+0xbe>
    ec2e:	3508      	adds	r5, #8
    ec30:	e008      	b.n	ec44 <_vfiprintf_r+0xd0>
    ec32:	9808      	ldr	r0, [sp, #32]
    ec34:	9907      	ldr	r1, [sp, #28]
    ec36:	aa15      	add	r2, sp, #84	; 0x54
    ec38:	f7ff ff68 	bl	eb0c <__sprint_r>
    ec3c:	2800      	cmp	r0, #0
    ec3e:	d000      	beq.n	ec42 <_vfiprintf_r+0xce>
    ec40:	e3a2      	b.n	f388 <_vfiprintf_r+0x814>
    ec42:	ad22      	add	r5, sp, #136	; 0x88
    ec44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ec46:	19db      	adds	r3, r3, r7
    ec48:	930e      	str	r3, [sp, #56]	; 0x38
    ec4a:	7833      	ldrb	r3, [r6, #0]
    ec4c:	2b00      	cmp	r3, #0
    ec4e:	d100      	bne.n	ec52 <_vfiprintf_r+0xde>
    ec50:	e392      	b.n	f378 <_vfiprintf_r+0x804>
    ec52:	4669      	mov	r1, sp
    ec54:	2200      	movs	r2, #0
    ec56:	314f      	adds	r1, #79	; 0x4f
    ec58:	700a      	strb	r2, [r1, #0]
    ec5a:	2101      	movs	r1, #1
    ec5c:	4249      	negs	r1, r1
    ec5e:	1c73      	adds	r3, r6, #1
    ec60:	9106      	str	r1, [sp, #24]
    ec62:	920d      	str	r2, [sp, #52]	; 0x34
    ec64:	1c16      	adds	r6, r2, #0
    ec66:	1c5f      	adds	r7, r3, #1
    ec68:	781b      	ldrb	r3, [r3, #0]
    ec6a:	970a      	str	r7, [sp, #40]	; 0x28
    ec6c:	2b58      	cmp	r3, #88	; 0x58
    ec6e:	d070      	beq.n	ed52 <_vfiprintf_r+0x1de>
    ec70:	dc38      	bgt.n	ece4 <_vfiprintf_r+0x170>
    ec72:	2b2e      	cmp	r3, #46	; 0x2e
    ec74:	d100      	bne.n	ec78 <_vfiprintf_r+0x104>
    ec76:	e07e      	b.n	ed76 <_vfiprintf_r+0x202>
    ec78:	dc1c      	bgt.n	ecb4 <_vfiprintf_r+0x140>
    ec7a:	2b2a      	cmp	r3, #42	; 0x2a
    ec7c:	d071      	beq.n	ed62 <_vfiprintf_r+0x1ee>
    ec7e:	dc06      	bgt.n	ec8e <_vfiprintf_r+0x11a>
    ec80:	2b20      	cmp	r3, #32
    ec82:	d06b      	beq.n	ed5c <_vfiprintf_r+0x1e8>
    ec84:	2b23      	cmp	r3, #35	; 0x23
    ec86:	d000      	beq.n	ec8a <_vfiprintf_r+0x116>
    ec88:	e216      	b.n	f0b8 <_vfiprintf_r+0x544>
    ec8a:	2301      	movs	r3, #1
    ec8c:	e071      	b.n	ed72 <_vfiprintf_r+0x1fe>
    ec8e:	2b2b      	cmp	r3, #43	; 0x2b
    ec90:	d10d      	bne.n	ecae <_vfiprintf_r+0x13a>
    ec92:	1c1a      	adds	r2, r3, #0
    ec94:	e009      	b.n	ecaa <_vfiprintf_r+0x136>
    ec96:	1d23      	adds	r3, r4, #4
    ec98:	6824      	ldr	r4, [r4, #0]
    ec9a:	9406      	str	r4, [sp, #24]
    ec9c:	2c00      	cmp	r4, #0
    ec9e:	da72      	bge.n	ed86 <_vfiprintf_r+0x212>
    eca0:	1c1c      	adds	r4, r3, #0
    eca2:	2301      	movs	r3, #1
    eca4:	425b      	negs	r3, r3
    eca6:	910a      	str	r1, [sp, #40]	; 0x28
    eca8:	9306      	str	r3, [sp, #24]
    ecaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ecac:	e7db      	b.n	ec66 <_vfiprintf_r+0xf2>
    ecae:	2b2d      	cmp	r3, #45	; 0x2d
    ecb0:	d05e      	beq.n	ed70 <_vfiprintf_r+0x1fc>
    ecb2:	e201      	b.n	f0b8 <_vfiprintf_r+0x544>
    ecb4:	2b39      	cmp	r3, #57	; 0x39
    ecb6:	dc06      	bgt.n	ecc6 <_vfiprintf_r+0x152>
    ecb8:	2b31      	cmp	r3, #49	; 0x31
    ecba:	da7a      	bge.n	edb2 <_vfiprintf_r+0x23e>
    ecbc:	2b30      	cmp	r3, #48	; 0x30
    ecbe:	d000      	beq.n	ecc2 <_vfiprintf_r+0x14e>
    ecc0:	e1fa      	b.n	f0b8 <_vfiprintf_r+0x544>
    ecc2:	2380      	movs	r3, #128	; 0x80
    ecc4:	e055      	b.n	ed72 <_vfiprintf_r+0x1fe>
    ecc6:	2b4f      	cmp	r3, #79	; 0x4f
    ecc8:	d100      	bne.n	eccc <_vfiprintf_r+0x158>
    ecca:	e0e6      	b.n	ee9a <_vfiprintf_r+0x326>
    eccc:	2b55      	cmp	r3, #85	; 0x55
    ecce:	d100      	bne.n	ecd2 <_vfiprintf_r+0x15e>
    ecd0:	e129      	b.n	ef26 <_vfiprintf_r+0x3b2>
    ecd2:	2b44      	cmp	r3, #68	; 0x44
    ecd4:	d000      	beq.n	ecd8 <_vfiprintf_r+0x164>
    ecd6:	e1ef      	b.n	f0b8 <_vfiprintf_r+0x544>
    ecd8:	466b      	mov	r3, sp
    ecda:	334f      	adds	r3, #79	; 0x4f
    ecdc:	701a      	strb	r2, [r3, #0]
    ecde:	2310      	movs	r3, #16
    ece0:	431e      	orrs	r6, r3
    ece2:	e093      	b.n	ee0c <_vfiprintf_r+0x298>
    ece4:	2b6e      	cmp	r3, #110	; 0x6e
    ece6:	d100      	bne.n	ecea <_vfiprintf_r+0x176>
    ece8:	e0b7      	b.n	ee5a <_vfiprintf_r+0x2e6>
    ecea:	dc0c      	bgt.n	ed06 <_vfiprintf_r+0x192>
    ecec:	2b68      	cmp	r3, #104	; 0x68
    ecee:	d073      	beq.n	edd8 <_vfiprintf_r+0x264>
    ecf0:	dc04      	bgt.n	ecfc <_vfiprintf_r+0x188>
    ecf2:	2b63      	cmp	r3, #99	; 0x63
    ecf4:	d07d      	beq.n	edf2 <_vfiprintf_r+0x27e>
    ecf6:	2b64      	cmp	r3, #100	; 0x64
    ecf8:	d027      	beq.n	ed4a <_vfiprintf_r+0x1d6>
    ecfa:	e1dd      	b.n	f0b8 <_vfiprintf_r+0x544>
    ecfc:	2b69      	cmp	r3, #105	; 0x69
    ecfe:	d024      	beq.n	ed4a <_vfiprintf_r+0x1d6>
    ed00:	2b6c      	cmp	r3, #108	; 0x6c
    ed02:	d06b      	beq.n	eddc <_vfiprintf_r+0x268>
    ed04:	e1d8      	b.n	f0b8 <_vfiprintf_r+0x544>
    ed06:	2b71      	cmp	r3, #113	; 0x71
    ed08:	d071      	beq.n	edee <_vfiprintf_r+0x27a>
    ed0a:	dc14      	bgt.n	ed36 <_vfiprintf_r+0x1c2>
    ed0c:	2b6f      	cmp	r3, #111	; 0x6f
    ed0e:	d100      	bne.n	ed12 <_vfiprintf_r+0x19e>
    ed10:	e0c5      	b.n	ee9e <_vfiprintf_r+0x32a>
    ed12:	2b70      	cmp	r3, #112	; 0x70
    ed14:	d000      	beq.n	ed18 <_vfiprintf_r+0x1a4>
    ed16:	e1cf      	b.n	f0b8 <_vfiprintf_r+0x544>
    ed18:	6821      	ldr	r1, [r4, #0]
    ed1a:	2200      	movs	r2, #0
    ed1c:	ab14      	add	r3, sp, #80	; 0x50
    ed1e:	9104      	str	r1, [sp, #16]
    ed20:	4f55      	ldr	r7, [pc, #340]	; (ee78 <_vfiprintf_r+0x304>)
    ed22:	2130      	movs	r1, #48	; 0x30
    ed24:	9205      	str	r2, [sp, #20]
    ed26:	7019      	strb	r1, [r3, #0]
    ed28:	2202      	movs	r2, #2
    ed2a:	2178      	movs	r1, #120	; 0x78
    ed2c:	4316      	orrs	r6, r2
    ed2e:	7059      	strb	r1, [r3, #1]
    ed30:	3404      	adds	r4, #4
    ed32:	9710      	str	r7, [sp, #64]	; 0x40
    ed34:	e146      	b.n	efc4 <_vfiprintf_r+0x450>
    ed36:	2b75      	cmp	r3, #117	; 0x75
    ed38:	d100      	bne.n	ed3c <_vfiprintf_r+0x1c8>
    ed3a:	e0f6      	b.n	ef2a <_vfiprintf_r+0x3b6>
    ed3c:	2b78      	cmp	r3, #120	; 0x78
    ed3e:	d100      	bne.n	ed42 <_vfiprintf_r+0x1ce>
    ed40:	e112      	b.n	ef68 <_vfiprintf_r+0x3f4>
    ed42:	2b73      	cmp	r3, #115	; 0x73
    ed44:	d000      	beq.n	ed48 <_vfiprintf_r+0x1d4>
    ed46:	e1b7      	b.n	f0b8 <_vfiprintf_r+0x544>
    ed48:	e0cd      	b.n	eee6 <_vfiprintf_r+0x372>
    ed4a:	466b      	mov	r3, sp
    ed4c:	334f      	adds	r3, #79	; 0x4f
    ed4e:	701a      	strb	r2, [r3, #0]
    ed50:	e05c      	b.n	ee0c <_vfiprintf_r+0x298>
    ed52:	4669      	mov	r1, sp
    ed54:	314f      	adds	r1, #79	; 0x4f
    ed56:	700a      	strb	r2, [r1, #0]
    ed58:	4f48      	ldr	r7, [pc, #288]	; (ee7c <_vfiprintf_r+0x308>)
    ed5a:	e109      	b.n	ef70 <_vfiprintf_r+0x3fc>
    ed5c:	2a00      	cmp	r2, #0
    ed5e:	d098      	beq.n	ec92 <_vfiprintf_r+0x11e>
    ed60:	e7a3      	b.n	ecaa <_vfiprintf_r+0x136>
    ed62:	6827      	ldr	r7, [r4, #0]
    ed64:	3404      	adds	r4, #4
    ed66:	970d      	str	r7, [sp, #52]	; 0x34
    ed68:	2f00      	cmp	r7, #0
    ed6a:	da9e      	bge.n	ecaa <_vfiprintf_r+0x136>
    ed6c:	427f      	negs	r7, r7
    ed6e:	970d      	str	r7, [sp, #52]	; 0x34
    ed70:	2304      	movs	r3, #4
    ed72:	431e      	orrs	r6, r3
    ed74:	e799      	b.n	ecaa <_vfiprintf_r+0x136>
    ed76:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    ed78:	990a      	ldr	r1, [sp, #40]	; 0x28
    ed7a:	783b      	ldrb	r3, [r7, #0]
    ed7c:	3101      	adds	r1, #1
    ed7e:	2b2a      	cmp	r3, #42	; 0x2a
    ed80:	d089      	beq.n	ec96 <_vfiprintf_r+0x122>
    ed82:	2000      	movs	r0, #0
    ed84:	e002      	b.n	ed8c <_vfiprintf_r+0x218>
    ed86:	1c1c      	adds	r4, r3, #0
    ed88:	910a      	str	r1, [sp, #40]	; 0x28
    ed8a:	e78e      	b.n	ecaa <_vfiprintf_r+0x136>
    ed8c:	1c1f      	adds	r7, r3, #0
    ed8e:	3f30      	subs	r7, #48	; 0x30
    ed90:	910a      	str	r1, [sp, #40]	; 0x28
    ed92:	2f09      	cmp	r7, #9
    ed94:	d805      	bhi.n	eda2 <_vfiprintf_r+0x22e>
    ed96:	230a      	movs	r3, #10
    ed98:	4358      	muls	r0, r3
    ed9a:	780b      	ldrb	r3, [r1, #0]
    ed9c:	19c0      	adds	r0, r0, r7
    ed9e:	3101      	adds	r1, #1
    eda0:	e7f4      	b.n	ed8c <_vfiprintf_r+0x218>
    eda2:	9006      	str	r0, [sp, #24]
    eda4:	2800      	cmp	r0, #0
    eda6:	db00      	blt.n	edaa <_vfiprintf_r+0x236>
    eda8:	e760      	b.n	ec6c <_vfiprintf_r+0xf8>
    edaa:	2101      	movs	r1, #1
    edac:	4249      	negs	r1, r1
    edae:	9106      	str	r1, [sp, #24]
    edb0:	e75c      	b.n	ec6c <_vfiprintf_r+0xf8>
    edb2:	2700      	movs	r7, #0
    edb4:	970d      	str	r7, [sp, #52]	; 0x34
    edb6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    edb8:	210a      	movs	r1, #10
    edba:	4379      	muls	r1, r7
    edbc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    edbe:	3b30      	subs	r3, #48	; 0x30
    edc0:	18cb      	adds	r3, r1, r3
    edc2:	3701      	adds	r7, #1
    edc4:	930d      	str	r3, [sp, #52]	; 0x34
    edc6:	1c3b      	adds	r3, r7, #0
    edc8:	3b01      	subs	r3, #1
    edca:	781b      	ldrb	r3, [r3, #0]
    edcc:	970a      	str	r7, [sp, #40]	; 0x28
    edce:	1c19      	adds	r1, r3, #0
    edd0:	3930      	subs	r1, #48	; 0x30
    edd2:	2909      	cmp	r1, #9
    edd4:	d9ef      	bls.n	edb6 <_vfiprintf_r+0x242>
    edd6:	e749      	b.n	ec6c <_vfiprintf_r+0xf8>
    edd8:	2340      	movs	r3, #64	; 0x40
    edda:	e7ca      	b.n	ed72 <_vfiprintf_r+0x1fe>
    eddc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    edde:	783b      	ldrb	r3, [r7, #0]
    ede0:	2b6c      	cmp	r3, #108	; 0x6c
    ede2:	d102      	bne.n	edea <_vfiprintf_r+0x276>
    ede4:	3701      	adds	r7, #1
    ede6:	970a      	str	r7, [sp, #40]	; 0x28
    ede8:	e001      	b.n	edee <_vfiprintf_r+0x27a>
    edea:	2310      	movs	r3, #16
    edec:	e7c1      	b.n	ed72 <_vfiprintf_r+0x1fe>
    edee:	2320      	movs	r3, #32
    edf0:	e7bf      	b.n	ed72 <_vfiprintf_r+0x1fe>
    edf2:	6820      	ldr	r0, [r4, #0]
    edf4:	466a      	mov	r2, sp
    edf6:	ab18      	add	r3, sp, #96	; 0x60
    edf8:	2700      	movs	r7, #0
    edfa:	324f      	adds	r2, #79	; 0x4f
    edfc:	2101      	movs	r1, #1
    edfe:	7018      	strb	r0, [r3, #0]
    ee00:	7017      	strb	r7, [r2, #0]
    ee02:	3404      	adds	r4, #4
    ee04:	9106      	str	r1, [sp, #24]
    ee06:	970b      	str	r7, [sp, #44]	; 0x2c
    ee08:	9309      	str	r3, [sp, #36]	; 0x24
    ee0a:	e165      	b.n	f0d8 <_vfiprintf_r+0x564>
    ee0c:	06b2      	lsls	r2, r6, #26
    ee0e:	d509      	bpl.n	ee24 <_vfiprintf_r+0x2b0>
    ee10:	1de3      	adds	r3, r4, #7
    ee12:	2207      	movs	r2, #7
    ee14:	4393      	bics	r3, r2
    ee16:	1c1c      	adds	r4, r3, #0
    ee18:	6818      	ldr	r0, [r3, #0]
    ee1a:	6859      	ldr	r1, [r3, #4]
    ee1c:	3408      	adds	r4, #8
    ee1e:	9004      	str	r0, [sp, #16]
    ee20:	9105      	str	r1, [sp, #20]
    ee22:	e00a      	b.n	ee3a <_vfiprintf_r+0x2c6>
    ee24:	1d23      	adds	r3, r4, #4
    ee26:	6822      	ldr	r2, [r4, #0]
    ee28:	06f1      	lsls	r1, r6, #27
    ee2a:	d402      	bmi.n	ee32 <_vfiprintf_r+0x2be>
    ee2c:	0677      	lsls	r7, r6, #25
    ee2e:	d500      	bpl.n	ee32 <_vfiprintf_r+0x2be>
    ee30:	b212      	sxth	r2, r2
    ee32:	9204      	str	r2, [sp, #16]
    ee34:	17d2      	asrs	r2, r2, #31
    ee36:	9205      	str	r2, [sp, #20]
    ee38:	1c1c      	adds	r4, r3, #0
    ee3a:	9805      	ldr	r0, [sp, #20]
    ee3c:	2800      	cmp	r0, #0
    ee3e:	db00      	blt.n	ee42 <_vfiprintf_r+0x2ce>
    ee40:	e0c5      	b.n	efce <_vfiprintf_r+0x45a>
    ee42:	9804      	ldr	r0, [sp, #16]
    ee44:	9905      	ldr	r1, [sp, #20]
    ee46:	2300      	movs	r3, #0
    ee48:	4242      	negs	r2, r0
    ee4a:	418b      	sbcs	r3, r1
    ee4c:	9204      	str	r2, [sp, #16]
    ee4e:	9305      	str	r3, [sp, #20]
    ee50:	466b      	mov	r3, sp
    ee52:	222d      	movs	r2, #45	; 0x2d
    ee54:	334f      	adds	r3, #79	; 0x4f
    ee56:	701a      	strb	r2, [r3, #0]
    ee58:	e0b9      	b.n	efce <_vfiprintf_r+0x45a>
    ee5a:	466b      	mov	r3, sp
    ee5c:	334f      	adds	r3, #79	; 0x4f
    ee5e:	701a      	strb	r2, [r3, #0]
    ee60:	1d23      	adds	r3, r4, #4
    ee62:	06b1      	lsls	r1, r6, #26
    ee64:	d50c      	bpl.n	ee80 <_vfiprintf_r+0x30c>
    ee66:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    ee68:	6822      	ldr	r2, [r4, #0]
    ee6a:	17f9      	asrs	r1, r7, #31
    ee6c:	6017      	str	r7, [r2, #0]
    ee6e:	6051      	str	r1, [r2, #4]
    ee70:	e011      	b.n	ee96 <_vfiprintf_r+0x322>
    ee72:	46c0      	nop			; (mov r8, r8)
    ee74:	ffffdfff 	.word	0xffffdfff
    ee78:	00010ac5 	.word	0x00010ac5
    ee7c:	00010ab4 	.word	0x00010ab4
    ee80:	06f0      	lsls	r0, r6, #27
    ee82:	d405      	bmi.n	ee90 <_vfiprintf_r+0x31c>
    ee84:	0670      	lsls	r0, r6, #25
    ee86:	d503      	bpl.n	ee90 <_vfiprintf_r+0x31c>
    ee88:	6822      	ldr	r2, [r4, #0]
    ee8a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    ee8c:	8017      	strh	r7, [r2, #0]
    ee8e:	e002      	b.n	ee96 <_vfiprintf_r+0x322>
    ee90:	6822      	ldr	r2, [r4, #0]
    ee92:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    ee94:	6017      	str	r7, [r2, #0]
    ee96:	1c1c      	adds	r4, r3, #0
    ee98:	e6b2      	b.n	ec00 <_vfiprintf_r+0x8c>
    ee9a:	2310      	movs	r3, #16
    ee9c:	431e      	orrs	r6, r3
    ee9e:	2220      	movs	r2, #32
    eea0:	4032      	ands	r2, r6
    eea2:	d00a      	beq.n	eeba <_vfiprintf_r+0x346>
    eea4:	1de3      	adds	r3, r4, #7
    eea6:	2207      	movs	r2, #7
    eea8:	4393      	bics	r3, r2
    eeaa:	6818      	ldr	r0, [r3, #0]
    eeac:	6859      	ldr	r1, [r3, #4]
    eeae:	9004      	str	r0, [sp, #16]
    eeb0:	9105      	str	r1, [sp, #20]
    eeb2:	1c1c      	adds	r4, r3, #0
    eeb4:	3408      	adds	r4, #8
    eeb6:	2200      	movs	r2, #0
    eeb8:	e084      	b.n	efc4 <_vfiprintf_r+0x450>
    eeba:	2010      	movs	r0, #16
    eebc:	4030      	ands	r0, r6
    eebe:	1d21      	adds	r1, r4, #4
    eec0:	2800      	cmp	r0, #0
    eec2:	d004      	beq.n	eece <_vfiprintf_r+0x35a>
    eec4:	6824      	ldr	r4, [r4, #0]
    eec6:	9205      	str	r2, [sp, #20]
    eec8:	9404      	str	r4, [sp, #16]
    eeca:	1c0c      	adds	r4, r1, #0
    eecc:	e07a      	b.n	efc4 <_vfiprintf_r+0x450>
    eece:	2340      	movs	r3, #64	; 0x40
    eed0:	4033      	ands	r3, r6
    eed2:	d003      	beq.n	eedc <_vfiprintf_r+0x368>
    eed4:	8824      	ldrh	r4, [r4, #0]
    eed6:	9005      	str	r0, [sp, #20]
    eed8:	9404      	str	r4, [sp, #16]
    eeda:	e002      	b.n	eee2 <_vfiprintf_r+0x36e>
    eedc:	6824      	ldr	r4, [r4, #0]
    eede:	9305      	str	r3, [sp, #20]
    eee0:	9404      	str	r4, [sp, #16]
    eee2:	1c0c      	adds	r4, r1, #0
    eee4:	e7e7      	b.n	eeb6 <_vfiprintf_r+0x342>
    eee6:	6823      	ldr	r3, [r4, #0]
    eee8:	9f06      	ldr	r7, [sp, #24]
    eeea:	9309      	str	r3, [sp, #36]	; 0x24
    eeec:	466b      	mov	r3, sp
    eeee:	2200      	movs	r2, #0
    eef0:	334f      	adds	r3, #79	; 0x4f
    eef2:	3404      	adds	r4, #4
    eef4:	701a      	strb	r2, [r3, #0]
    eef6:	4297      	cmp	r7, r2
    eef8:	db0e      	blt.n	ef18 <_vfiprintf_r+0x3a4>
    eefa:	1c11      	adds	r1, r2, #0
    eefc:	9809      	ldr	r0, [sp, #36]	; 0x24
    eefe:	1c3a      	adds	r2, r7, #0
    ef00:	f7fe ffc4 	bl	de8c <memchr>
    ef04:	2800      	cmp	r0, #0
    ef06:	d100      	bne.n	ef0a <_vfiprintf_r+0x396>
    ef08:	e0e5      	b.n	f0d6 <_vfiprintf_r+0x562>
    ef0a:	9909      	ldr	r1, [sp, #36]	; 0x24
    ef0c:	1a40      	subs	r0, r0, r1
    ef0e:	9006      	str	r0, [sp, #24]
    ef10:	42b8      	cmp	r0, r7
    ef12:	dd05      	ble.n	ef20 <_vfiprintf_r+0x3ac>
    ef14:	9706      	str	r7, [sp, #24]
    ef16:	e003      	b.n	ef20 <_vfiprintf_r+0x3ac>
    ef18:	9809      	ldr	r0, [sp, #36]	; 0x24
    ef1a:	f7fc f999 	bl	b250 <strlen>
    ef1e:	9006      	str	r0, [sp, #24]
    ef20:	2700      	movs	r7, #0
    ef22:	970b      	str	r7, [sp, #44]	; 0x2c
    ef24:	e0d8      	b.n	f0d8 <_vfiprintf_r+0x564>
    ef26:	2310      	movs	r3, #16
    ef28:	431e      	orrs	r6, r3
    ef2a:	2220      	movs	r2, #32
    ef2c:	4032      	ands	r2, r6
    ef2e:	d009      	beq.n	ef44 <_vfiprintf_r+0x3d0>
    ef30:	1de3      	adds	r3, r4, #7
    ef32:	2207      	movs	r2, #7
    ef34:	4393      	bics	r3, r2
    ef36:	1c1c      	adds	r4, r3, #0
    ef38:	6818      	ldr	r0, [r3, #0]
    ef3a:	6859      	ldr	r1, [r3, #4]
    ef3c:	3408      	adds	r4, #8
    ef3e:	9004      	str	r0, [sp, #16]
    ef40:	9105      	str	r1, [sp, #20]
    ef42:	e00f      	b.n	ef64 <_vfiprintf_r+0x3f0>
    ef44:	2110      	movs	r1, #16
    ef46:	4031      	ands	r1, r6
    ef48:	1d23      	adds	r3, r4, #4
    ef4a:	2900      	cmp	r1, #0
    ef4c:	d106      	bne.n	ef5c <_vfiprintf_r+0x3e8>
    ef4e:	2240      	movs	r2, #64	; 0x40
    ef50:	4032      	ands	r2, r6
    ef52:	d003      	beq.n	ef5c <_vfiprintf_r+0x3e8>
    ef54:	8824      	ldrh	r4, [r4, #0]
    ef56:	9105      	str	r1, [sp, #20]
    ef58:	9404      	str	r4, [sp, #16]
    ef5a:	e002      	b.n	ef62 <_vfiprintf_r+0x3ee>
    ef5c:	6824      	ldr	r4, [r4, #0]
    ef5e:	9205      	str	r2, [sp, #20]
    ef60:	9404      	str	r4, [sp, #16]
    ef62:	1c1c      	adds	r4, r3, #0
    ef64:	2201      	movs	r2, #1
    ef66:	e02d      	b.n	efc4 <_vfiprintf_r+0x450>
    ef68:	4669      	mov	r1, sp
    ef6a:	314f      	adds	r1, #79	; 0x4f
    ef6c:	4fc2      	ldr	r7, [pc, #776]	; (f278 <_vfiprintf_r+0x704>)
    ef6e:	700a      	strb	r2, [r1, #0]
    ef70:	2120      	movs	r1, #32
    ef72:	9710      	str	r7, [sp, #64]	; 0x40
    ef74:	4031      	ands	r1, r6
    ef76:	d009      	beq.n	ef8c <_vfiprintf_r+0x418>
    ef78:	1de2      	adds	r2, r4, #7
    ef7a:	2107      	movs	r1, #7
    ef7c:	438a      	bics	r2, r1
    ef7e:	1c14      	adds	r4, r2, #0
    ef80:	6810      	ldr	r0, [r2, #0]
    ef82:	6851      	ldr	r1, [r2, #4]
    ef84:	3408      	adds	r4, #8
    ef86:	9004      	str	r0, [sp, #16]
    ef88:	9105      	str	r1, [sp, #20]
    ef8a:	e00f      	b.n	efac <_vfiprintf_r+0x438>
    ef8c:	2010      	movs	r0, #16
    ef8e:	4030      	ands	r0, r6
    ef90:	1d22      	adds	r2, r4, #4
    ef92:	2800      	cmp	r0, #0
    ef94:	d106      	bne.n	efa4 <_vfiprintf_r+0x430>
    ef96:	2140      	movs	r1, #64	; 0x40
    ef98:	4031      	ands	r1, r6
    ef9a:	d003      	beq.n	efa4 <_vfiprintf_r+0x430>
    ef9c:	8824      	ldrh	r4, [r4, #0]
    ef9e:	9005      	str	r0, [sp, #20]
    efa0:	9404      	str	r4, [sp, #16]
    efa2:	e002      	b.n	efaa <_vfiprintf_r+0x436>
    efa4:	6824      	ldr	r4, [r4, #0]
    efa6:	9105      	str	r1, [sp, #20]
    efa8:	9404      	str	r4, [sp, #16]
    efaa:	1c14      	adds	r4, r2, #0
    efac:	2202      	movs	r2, #2
    efae:	07f1      	lsls	r1, r6, #31
    efb0:	d508      	bpl.n	efc4 <_vfiprintf_r+0x450>
    efb2:	9904      	ldr	r1, [sp, #16]
    efb4:	9f05      	ldr	r7, [sp, #20]
    efb6:	4339      	orrs	r1, r7
    efb8:	d004      	beq.n	efc4 <_vfiprintf_r+0x450>
    efba:	a914      	add	r1, sp, #80	; 0x50
    efbc:	2030      	movs	r0, #48	; 0x30
    efbe:	7008      	strb	r0, [r1, #0]
    efc0:	704b      	strb	r3, [r1, #1]
    efc2:	4316      	orrs	r6, r2
    efc4:	466b      	mov	r3, sp
    efc6:	2100      	movs	r1, #0
    efc8:	334f      	adds	r3, #79	; 0x4f
    efca:	7019      	strb	r1, [r3, #0]
    efcc:	e000      	b.n	efd0 <_vfiprintf_r+0x45c>
    efce:	2201      	movs	r2, #1
    efd0:	9f06      	ldr	r7, [sp, #24]
    efd2:	2f00      	cmp	r7, #0
    efd4:	db01      	blt.n	efda <_vfiprintf_r+0x466>
    efd6:	2380      	movs	r3, #128	; 0x80
    efd8:	439e      	bics	r6, r3
    efda:	9b04      	ldr	r3, [sp, #16]
    efdc:	9805      	ldr	r0, [sp, #20]
    efde:	4303      	orrs	r3, r0
    efe0:	d102      	bne.n	efe8 <_vfiprintf_r+0x474>
    efe2:	9f06      	ldr	r7, [sp, #24]
    efe4:	2f00      	cmp	r7, #0
    efe6:	d056      	beq.n	f096 <_vfiprintf_r+0x522>
    efe8:	466f      	mov	r7, sp
    efea:	3787      	adds	r7, #135	; 0x87
    efec:	2a01      	cmp	r2, #1
    efee:	d01e      	beq.n	f02e <_vfiprintf_r+0x4ba>
    eff0:	2a02      	cmp	r2, #2
    eff2:	d03a      	beq.n	f06a <_vfiprintf_r+0x4f6>
    eff4:	9804      	ldr	r0, [sp, #16]
    eff6:	2307      	movs	r3, #7
    eff8:	4003      	ands	r3, r0
    effa:	3330      	adds	r3, #48	; 0x30
    effc:	9905      	ldr	r1, [sp, #20]
    effe:	9a04      	ldr	r2, [sp, #16]
    f000:	9709      	str	r7, [sp, #36]	; 0x24
    f002:	703b      	strb	r3, [r7, #0]
    f004:	9f05      	ldr	r7, [sp, #20]
    f006:	0748      	lsls	r0, r1, #29
    f008:	08d1      	lsrs	r1, r2, #3
    f00a:	08fa      	lsrs	r2, r7, #3
    f00c:	4308      	orrs	r0, r1
    f00e:	9205      	str	r2, [sp, #20]
    f010:	9004      	str	r0, [sp, #16]
    f012:	1c02      	adds	r2, r0, #0
    f014:	9f09      	ldr	r7, [sp, #36]	; 0x24
    f016:	9805      	ldr	r0, [sp, #20]
    f018:	3f01      	subs	r7, #1
    f01a:	4302      	orrs	r2, r0
    f01c:	d1ea      	bne.n	eff4 <_vfiprintf_r+0x480>
    f01e:	07f1      	lsls	r1, r6, #31
    f020:	d543      	bpl.n	f0aa <_vfiprintf_r+0x536>
    f022:	2b30      	cmp	r3, #48	; 0x30
    f024:	d041      	beq.n	f0aa <_vfiprintf_r+0x536>
    f026:	2230      	movs	r2, #48	; 0x30
    f028:	9709      	str	r7, [sp, #36]	; 0x24
    f02a:	703a      	strb	r2, [r7, #0]
    f02c:	e03d      	b.n	f0aa <_vfiprintf_r+0x536>
    f02e:	9a05      	ldr	r2, [sp, #20]
    f030:	2a00      	cmp	r2, #0
    f032:	d104      	bne.n	f03e <_vfiprintf_r+0x4ca>
    f034:	9b04      	ldr	r3, [sp, #16]
    f036:	2b09      	cmp	r3, #9
    f038:	d801      	bhi.n	f03e <_vfiprintf_r+0x4ca>
    f03a:	3330      	adds	r3, #48	; 0x30
    f03c:	e033      	b.n	f0a6 <_vfiprintf_r+0x532>
    f03e:	9804      	ldr	r0, [sp, #16]
    f040:	9905      	ldr	r1, [sp, #20]
    f042:	220a      	movs	r2, #10
    f044:	2300      	movs	r3, #0
    f046:	9709      	str	r7, [sp, #36]	; 0x24
    f048:	f7fa fbe0 	bl	980c <__aeabi_uldivmod>
    f04c:	9804      	ldr	r0, [sp, #16]
    f04e:	9905      	ldr	r1, [sp, #20]
    f050:	3230      	adds	r2, #48	; 0x30
    f052:	703a      	strb	r2, [r7, #0]
    f054:	220a      	movs	r2, #10
    f056:	2300      	movs	r3, #0
    f058:	f7fa fbd8 	bl	980c <__aeabi_uldivmod>
    f05c:	1c03      	adds	r3, r0, #0
    f05e:	9004      	str	r0, [sp, #16]
    f060:	9105      	str	r1, [sp, #20]
    f062:	3f01      	subs	r7, #1
    f064:	430b      	orrs	r3, r1
    f066:	d1ea      	bne.n	f03e <_vfiprintf_r+0x4ca>
    f068:	e01f      	b.n	f0aa <_vfiprintf_r+0x536>
    f06a:	9804      	ldr	r0, [sp, #16]
    f06c:	9a05      	ldr	r2, [sp, #20]
    f06e:	9910      	ldr	r1, [sp, #64]	; 0x40
    f070:	230f      	movs	r3, #15
    f072:	4003      	ands	r3, r0
    f074:	5ccb      	ldrb	r3, [r1, r3]
    f076:	0711      	lsls	r1, r2, #28
    f078:	0902      	lsrs	r2, r0, #4
    f07a:	9805      	ldr	r0, [sp, #20]
    f07c:	703b      	strb	r3, [r7, #0]
    f07e:	0903      	lsrs	r3, r0, #4
    f080:	4311      	orrs	r1, r2
    f082:	9305      	str	r3, [sp, #20]
    f084:	9104      	str	r1, [sp, #16]
    f086:	1c0b      	adds	r3, r1, #0
    f088:	9905      	ldr	r1, [sp, #20]
    f08a:	9709      	str	r7, [sp, #36]	; 0x24
    f08c:	430b      	orrs	r3, r1
    f08e:	3f01      	subs	r7, #1
    f090:	2b00      	cmp	r3, #0
    f092:	d1ea      	bne.n	f06a <_vfiprintf_r+0x4f6>
    f094:	e009      	b.n	f0aa <_vfiprintf_r+0x536>
    f096:	af22      	add	r7, sp, #136	; 0x88
    f098:	9709      	str	r7, [sp, #36]	; 0x24
    f09a:	2a00      	cmp	r2, #0
    f09c:	d105      	bne.n	f0aa <_vfiprintf_r+0x536>
    f09e:	07f0      	lsls	r0, r6, #31
    f0a0:	d503      	bpl.n	f0aa <_vfiprintf_r+0x536>
    f0a2:	3f01      	subs	r7, #1
    f0a4:	2330      	movs	r3, #48	; 0x30
    f0a6:	703b      	strb	r3, [r7, #0]
    f0a8:	9709      	str	r7, [sp, #36]	; 0x24
    f0aa:	9f06      	ldr	r7, [sp, #24]
    f0ac:	ab22      	add	r3, sp, #136	; 0x88
    f0ae:	970b      	str	r7, [sp, #44]	; 0x2c
    f0b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    f0b2:	1bdb      	subs	r3, r3, r7
    f0b4:	9306      	str	r3, [sp, #24]
    f0b6:	e00f      	b.n	f0d8 <_vfiprintf_r+0x564>
    f0b8:	4669      	mov	r1, sp
    f0ba:	314f      	adds	r1, #79	; 0x4f
    f0bc:	700a      	strb	r2, [r1, #0]
    f0be:	2b00      	cmp	r3, #0
    f0c0:	d100      	bne.n	f0c4 <_vfiprintf_r+0x550>
    f0c2:	e159      	b.n	f378 <_vfiprintf_r+0x804>
    f0c4:	aa18      	add	r2, sp, #96	; 0x60
    f0c6:	2700      	movs	r7, #0
    f0c8:	2001      	movs	r0, #1
    f0ca:	7013      	strb	r3, [r2, #0]
    f0cc:	700f      	strb	r7, [r1, #0]
    f0ce:	9006      	str	r0, [sp, #24]
    f0d0:	970b      	str	r7, [sp, #44]	; 0x2c
    f0d2:	9209      	str	r2, [sp, #36]	; 0x24
    f0d4:	e000      	b.n	f0d8 <_vfiprintf_r+0x564>
    f0d6:	900b      	str	r0, [sp, #44]	; 0x2c
    f0d8:	9f06      	ldr	r7, [sp, #24]
    f0da:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f0dc:	970f      	str	r7, [sp, #60]	; 0x3c
    f0de:	4287      	cmp	r7, r0
    f0e0:	da00      	bge.n	f0e4 <_vfiprintf_r+0x570>
    f0e2:	900f      	str	r0, [sp, #60]	; 0x3c
    f0e4:	466b      	mov	r3, sp
    f0e6:	334f      	adds	r3, #79	; 0x4f
    f0e8:	781b      	ldrb	r3, [r3, #0]
    f0ea:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    f0ec:	1e5a      	subs	r2, r3, #1
    f0ee:	4193      	sbcs	r3, r2
    f0f0:	18ff      	adds	r7, r7, r3
    f0f2:	2302      	movs	r3, #2
    f0f4:	4033      	ands	r3, r6
    f0f6:	970f      	str	r7, [sp, #60]	; 0x3c
    f0f8:	930c      	str	r3, [sp, #48]	; 0x30
    f0fa:	d001      	beq.n	f100 <_vfiprintf_r+0x58c>
    f0fc:	3702      	adds	r7, #2
    f0fe:	970f      	str	r7, [sp, #60]	; 0x3c
    f100:	2384      	movs	r3, #132	; 0x84
    f102:	4033      	ands	r3, r6
    f104:	9311      	str	r3, [sp, #68]	; 0x44
    f106:	d133      	bne.n	f170 <_vfiprintf_r+0x5fc>
    f108:	980d      	ldr	r0, [sp, #52]	; 0x34
    f10a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f10c:	1a47      	subs	r7, r0, r1
    f10e:	2f00      	cmp	r7, #0
    f110:	dd2e      	ble.n	f170 <_vfiprintf_r+0x5fc>
    f112:	4b5a      	ldr	r3, [pc, #360]	; (f27c <_vfiprintf_r+0x708>)
    f114:	602b      	str	r3, [r5, #0]
    f116:	2f10      	cmp	r7, #16
    f118:	dd16      	ble.n	f148 <_vfiprintf_r+0x5d4>
    f11a:	2310      	movs	r3, #16
    f11c:	606b      	str	r3, [r5, #4]
    f11e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f120:	3310      	adds	r3, #16
    f122:	9317      	str	r3, [sp, #92]	; 0x5c
    f124:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f126:	3301      	adds	r3, #1
    f128:	9316      	str	r3, [sp, #88]	; 0x58
    f12a:	2b07      	cmp	r3, #7
    f12c:	dc01      	bgt.n	f132 <_vfiprintf_r+0x5be>
    f12e:	3508      	adds	r5, #8
    f130:	e008      	b.n	f144 <_vfiprintf_r+0x5d0>
    f132:	9808      	ldr	r0, [sp, #32]
    f134:	9907      	ldr	r1, [sp, #28]
    f136:	aa15      	add	r2, sp, #84	; 0x54
    f138:	f7ff fce8 	bl	eb0c <__sprint_r>
    f13c:	2800      	cmp	r0, #0
    f13e:	d000      	beq.n	f142 <_vfiprintf_r+0x5ce>
    f140:	e122      	b.n	f388 <_vfiprintf_r+0x814>
    f142:	ad22      	add	r5, sp, #136	; 0x88
    f144:	3f10      	subs	r7, #16
    f146:	e7e4      	b.n	f112 <_vfiprintf_r+0x59e>
    f148:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f14a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f14c:	606f      	str	r7, [r5, #4]
    f14e:	3301      	adds	r3, #1
    f150:	18bf      	adds	r7, r7, r2
    f152:	9717      	str	r7, [sp, #92]	; 0x5c
    f154:	9316      	str	r3, [sp, #88]	; 0x58
    f156:	2b07      	cmp	r3, #7
    f158:	dc01      	bgt.n	f15e <_vfiprintf_r+0x5ea>
    f15a:	3508      	adds	r5, #8
    f15c:	e008      	b.n	f170 <_vfiprintf_r+0x5fc>
    f15e:	9808      	ldr	r0, [sp, #32]
    f160:	9907      	ldr	r1, [sp, #28]
    f162:	aa15      	add	r2, sp, #84	; 0x54
    f164:	f7ff fcd2 	bl	eb0c <__sprint_r>
    f168:	2800      	cmp	r0, #0
    f16a:	d000      	beq.n	f16e <_vfiprintf_r+0x5fa>
    f16c:	e10c      	b.n	f388 <_vfiprintf_r+0x814>
    f16e:	ad22      	add	r5, sp, #136	; 0x88
    f170:	466b      	mov	r3, sp
    f172:	334f      	adds	r3, #79	; 0x4f
    f174:	781a      	ldrb	r2, [r3, #0]
    f176:	2a00      	cmp	r2, #0
    f178:	d015      	beq.n	f1a6 <_vfiprintf_r+0x632>
    f17a:	602b      	str	r3, [r5, #0]
    f17c:	2301      	movs	r3, #1
    f17e:	606b      	str	r3, [r5, #4]
    f180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f182:	3301      	adds	r3, #1
    f184:	9317      	str	r3, [sp, #92]	; 0x5c
    f186:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f188:	3301      	adds	r3, #1
    f18a:	9316      	str	r3, [sp, #88]	; 0x58
    f18c:	2b07      	cmp	r3, #7
    f18e:	dc01      	bgt.n	f194 <_vfiprintf_r+0x620>
    f190:	3508      	adds	r5, #8
    f192:	e008      	b.n	f1a6 <_vfiprintf_r+0x632>
    f194:	9808      	ldr	r0, [sp, #32]
    f196:	9907      	ldr	r1, [sp, #28]
    f198:	aa15      	add	r2, sp, #84	; 0x54
    f19a:	f7ff fcb7 	bl	eb0c <__sprint_r>
    f19e:	2800      	cmp	r0, #0
    f1a0:	d000      	beq.n	f1a4 <_vfiprintf_r+0x630>
    f1a2:	e0f1      	b.n	f388 <_vfiprintf_r+0x814>
    f1a4:	ad22      	add	r5, sp, #136	; 0x88
    f1a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    f1a8:	2f00      	cmp	r7, #0
    f1aa:	d016      	beq.n	f1da <_vfiprintf_r+0x666>
    f1ac:	ab14      	add	r3, sp, #80	; 0x50
    f1ae:	602b      	str	r3, [r5, #0]
    f1b0:	2302      	movs	r3, #2
    f1b2:	606b      	str	r3, [r5, #4]
    f1b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f1b6:	3302      	adds	r3, #2
    f1b8:	9317      	str	r3, [sp, #92]	; 0x5c
    f1ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f1bc:	3301      	adds	r3, #1
    f1be:	9316      	str	r3, [sp, #88]	; 0x58
    f1c0:	2b07      	cmp	r3, #7
    f1c2:	dc01      	bgt.n	f1c8 <_vfiprintf_r+0x654>
    f1c4:	3508      	adds	r5, #8
    f1c6:	e008      	b.n	f1da <_vfiprintf_r+0x666>
    f1c8:	9808      	ldr	r0, [sp, #32]
    f1ca:	9907      	ldr	r1, [sp, #28]
    f1cc:	aa15      	add	r2, sp, #84	; 0x54
    f1ce:	f7ff fc9d 	bl	eb0c <__sprint_r>
    f1d2:	2800      	cmp	r0, #0
    f1d4:	d000      	beq.n	f1d8 <_vfiprintf_r+0x664>
    f1d6:	e0d7      	b.n	f388 <_vfiprintf_r+0x814>
    f1d8:	ad22      	add	r5, sp, #136	; 0x88
    f1da:	9f11      	ldr	r7, [sp, #68]	; 0x44
    f1dc:	2f80      	cmp	r7, #128	; 0x80
    f1de:	d134      	bne.n	f24a <_vfiprintf_r+0x6d6>
    f1e0:	980d      	ldr	r0, [sp, #52]	; 0x34
    f1e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f1e4:	1a47      	subs	r7, r0, r1
    f1e6:	2f00      	cmp	r7, #0
    f1e8:	dd2f      	ble.n	f24a <_vfiprintf_r+0x6d6>
    f1ea:	4b24      	ldr	r3, [pc, #144]	; (f27c <_vfiprintf_r+0x708>)
    f1ec:	3310      	adds	r3, #16
    f1ee:	602b      	str	r3, [r5, #0]
    f1f0:	2f10      	cmp	r7, #16
    f1f2:	dd16      	ble.n	f222 <_vfiprintf_r+0x6ae>
    f1f4:	2310      	movs	r3, #16
    f1f6:	606b      	str	r3, [r5, #4]
    f1f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f1fa:	3310      	adds	r3, #16
    f1fc:	9317      	str	r3, [sp, #92]	; 0x5c
    f1fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f200:	3301      	adds	r3, #1
    f202:	9316      	str	r3, [sp, #88]	; 0x58
    f204:	2b07      	cmp	r3, #7
    f206:	dc01      	bgt.n	f20c <_vfiprintf_r+0x698>
    f208:	3508      	adds	r5, #8
    f20a:	e008      	b.n	f21e <_vfiprintf_r+0x6aa>
    f20c:	9808      	ldr	r0, [sp, #32]
    f20e:	9907      	ldr	r1, [sp, #28]
    f210:	aa15      	add	r2, sp, #84	; 0x54
    f212:	f7ff fc7b 	bl	eb0c <__sprint_r>
    f216:	2800      	cmp	r0, #0
    f218:	d000      	beq.n	f21c <_vfiprintf_r+0x6a8>
    f21a:	e0b5      	b.n	f388 <_vfiprintf_r+0x814>
    f21c:	ad22      	add	r5, sp, #136	; 0x88
    f21e:	3f10      	subs	r7, #16
    f220:	e7e3      	b.n	f1ea <_vfiprintf_r+0x676>
    f222:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f224:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f226:	606f      	str	r7, [r5, #4]
    f228:	3301      	adds	r3, #1
    f22a:	18bf      	adds	r7, r7, r2
    f22c:	9717      	str	r7, [sp, #92]	; 0x5c
    f22e:	9316      	str	r3, [sp, #88]	; 0x58
    f230:	2b07      	cmp	r3, #7
    f232:	dc01      	bgt.n	f238 <_vfiprintf_r+0x6c4>
    f234:	3508      	adds	r5, #8
    f236:	e008      	b.n	f24a <_vfiprintf_r+0x6d6>
    f238:	9808      	ldr	r0, [sp, #32]
    f23a:	9907      	ldr	r1, [sp, #28]
    f23c:	aa15      	add	r2, sp, #84	; 0x54
    f23e:	f7ff fc65 	bl	eb0c <__sprint_r>
    f242:	2800      	cmp	r0, #0
    f244:	d000      	beq.n	f248 <_vfiprintf_r+0x6d4>
    f246:	e09f      	b.n	f388 <_vfiprintf_r+0x814>
    f248:	ad22      	add	r5, sp, #136	; 0x88
    f24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f24c:	9806      	ldr	r0, [sp, #24]
    f24e:	1a1f      	subs	r7, r3, r0
    f250:	2f00      	cmp	r7, #0
    f252:	dd32      	ble.n	f2ba <_vfiprintf_r+0x746>
    f254:	4b09      	ldr	r3, [pc, #36]	; (f27c <_vfiprintf_r+0x708>)
    f256:	3310      	adds	r3, #16
    f258:	602b      	str	r3, [r5, #0]
    f25a:	2f10      	cmp	r7, #16
    f25c:	dd1a      	ble.n	f294 <_vfiprintf_r+0x720>
    f25e:	2310      	movs	r3, #16
    f260:	606b      	str	r3, [r5, #4]
    f262:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f264:	3310      	adds	r3, #16
    f266:	9317      	str	r3, [sp, #92]	; 0x5c
    f268:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f26a:	3301      	adds	r3, #1
    f26c:	9316      	str	r3, [sp, #88]	; 0x58
    f26e:	2b07      	cmp	r3, #7
    f270:	dc06      	bgt.n	f280 <_vfiprintf_r+0x70c>
    f272:	3508      	adds	r5, #8
    f274:	e00c      	b.n	f290 <_vfiprintf_r+0x71c>
    f276:	46c0      	nop			; (mov r8, r8)
    f278:	00010ac5 	.word	0x00010ac5
    f27c:	00010c18 	.word	0x00010c18
    f280:	9808      	ldr	r0, [sp, #32]
    f282:	9907      	ldr	r1, [sp, #28]
    f284:	aa15      	add	r2, sp, #84	; 0x54
    f286:	f7ff fc41 	bl	eb0c <__sprint_r>
    f28a:	2800      	cmp	r0, #0
    f28c:	d17c      	bne.n	f388 <_vfiprintf_r+0x814>
    f28e:	ad22      	add	r5, sp, #136	; 0x88
    f290:	3f10      	subs	r7, #16
    f292:	e7df      	b.n	f254 <_vfiprintf_r+0x6e0>
    f294:	9917      	ldr	r1, [sp, #92]	; 0x5c
    f296:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f298:	606f      	str	r7, [r5, #4]
    f29a:	3301      	adds	r3, #1
    f29c:	187f      	adds	r7, r7, r1
    f29e:	9717      	str	r7, [sp, #92]	; 0x5c
    f2a0:	9316      	str	r3, [sp, #88]	; 0x58
    f2a2:	2b07      	cmp	r3, #7
    f2a4:	dc01      	bgt.n	f2aa <_vfiprintf_r+0x736>
    f2a6:	3508      	adds	r5, #8
    f2a8:	e007      	b.n	f2ba <_vfiprintf_r+0x746>
    f2aa:	9808      	ldr	r0, [sp, #32]
    f2ac:	9907      	ldr	r1, [sp, #28]
    f2ae:	aa15      	add	r2, sp, #84	; 0x54
    f2b0:	f7ff fc2c 	bl	eb0c <__sprint_r>
    f2b4:	2800      	cmp	r0, #0
    f2b6:	d167      	bne.n	f388 <_vfiprintf_r+0x814>
    f2b8:	ad22      	add	r5, sp, #136	; 0x88
    f2ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
    f2bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
    f2be:	602f      	str	r7, [r5, #0]
    f2c0:	9f06      	ldr	r7, [sp, #24]
    f2c2:	183b      	adds	r3, r7, r0
    f2c4:	9317      	str	r3, [sp, #92]	; 0x5c
    f2c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f2c8:	606f      	str	r7, [r5, #4]
    f2ca:	3301      	adds	r3, #1
    f2cc:	9316      	str	r3, [sp, #88]	; 0x58
    f2ce:	2b07      	cmp	r3, #7
    f2d0:	dc01      	bgt.n	f2d6 <_vfiprintf_r+0x762>
    f2d2:	3508      	adds	r5, #8
    f2d4:	e007      	b.n	f2e6 <_vfiprintf_r+0x772>
    f2d6:	9808      	ldr	r0, [sp, #32]
    f2d8:	9907      	ldr	r1, [sp, #28]
    f2da:	aa15      	add	r2, sp, #84	; 0x54
    f2dc:	f7ff fc16 	bl	eb0c <__sprint_r>
    f2e0:	2800      	cmp	r0, #0
    f2e2:	d151      	bne.n	f388 <_vfiprintf_r+0x814>
    f2e4:	ad22      	add	r5, sp, #136	; 0x88
    f2e6:	0771      	lsls	r1, r6, #29
    f2e8:	d40b      	bmi.n	f302 <_vfiprintf_r+0x78e>
    f2ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f2ec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    f2ee:	42bb      	cmp	r3, r7
    f2f0:	da00      	bge.n	f2f4 <_vfiprintf_r+0x780>
    f2f2:	1c3b      	adds	r3, r7, #0
    f2f4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    f2f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    f2f8:	18ff      	adds	r7, r7, r3
    f2fa:	970e      	str	r7, [sp, #56]	; 0x38
    f2fc:	2800      	cmp	r0, #0
    f2fe:	d037      	beq.n	f370 <_vfiprintf_r+0x7fc>
    f300:	e02f      	b.n	f362 <_vfiprintf_r+0x7ee>
    f302:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    f304:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f306:	1a3e      	subs	r6, r7, r0
    f308:	2e00      	cmp	r6, #0
    f30a:	ddee      	ble.n	f2ea <_vfiprintf_r+0x776>
    f30c:	4b23      	ldr	r3, [pc, #140]	; (f39c <_vfiprintf_r+0x828>)
    f30e:	602b      	str	r3, [r5, #0]
    f310:	2e10      	cmp	r6, #16
    f312:	dd15      	ble.n	f340 <_vfiprintf_r+0x7cc>
    f314:	2310      	movs	r3, #16
    f316:	606b      	str	r3, [r5, #4]
    f318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f31a:	3310      	adds	r3, #16
    f31c:	9317      	str	r3, [sp, #92]	; 0x5c
    f31e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f320:	3301      	adds	r3, #1
    f322:	9316      	str	r3, [sp, #88]	; 0x58
    f324:	2b07      	cmp	r3, #7
    f326:	dc01      	bgt.n	f32c <_vfiprintf_r+0x7b8>
    f328:	3508      	adds	r5, #8
    f32a:	e007      	b.n	f33c <_vfiprintf_r+0x7c8>
    f32c:	9808      	ldr	r0, [sp, #32]
    f32e:	9907      	ldr	r1, [sp, #28]
    f330:	aa15      	add	r2, sp, #84	; 0x54
    f332:	f7ff fbeb 	bl	eb0c <__sprint_r>
    f336:	2800      	cmp	r0, #0
    f338:	d126      	bne.n	f388 <_vfiprintf_r+0x814>
    f33a:	ad22      	add	r5, sp, #136	; 0x88
    f33c:	3e10      	subs	r6, #16
    f33e:	e7e5      	b.n	f30c <_vfiprintf_r+0x798>
    f340:	9917      	ldr	r1, [sp, #92]	; 0x5c
    f342:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f344:	606e      	str	r6, [r5, #4]
    f346:	3301      	adds	r3, #1
    f348:	1876      	adds	r6, r6, r1
    f34a:	9617      	str	r6, [sp, #92]	; 0x5c
    f34c:	9316      	str	r3, [sp, #88]	; 0x58
    f34e:	2b07      	cmp	r3, #7
    f350:	ddcb      	ble.n	f2ea <_vfiprintf_r+0x776>
    f352:	9808      	ldr	r0, [sp, #32]
    f354:	9907      	ldr	r1, [sp, #28]
    f356:	aa15      	add	r2, sp, #84	; 0x54
    f358:	f7ff fbd8 	bl	eb0c <__sprint_r>
    f35c:	2800      	cmp	r0, #0
    f35e:	d0c4      	beq.n	f2ea <_vfiprintf_r+0x776>
    f360:	e012      	b.n	f388 <_vfiprintf_r+0x814>
    f362:	9808      	ldr	r0, [sp, #32]
    f364:	9907      	ldr	r1, [sp, #28]
    f366:	aa15      	add	r2, sp, #84	; 0x54
    f368:	f7ff fbd0 	bl	eb0c <__sprint_r>
    f36c:	2800      	cmp	r0, #0
    f36e:	d10b      	bne.n	f388 <_vfiprintf_r+0x814>
    f370:	2300      	movs	r3, #0
    f372:	9316      	str	r3, [sp, #88]	; 0x58
    f374:	ad22      	add	r5, sp, #136	; 0x88
    f376:	e443      	b.n	ec00 <_vfiprintf_r+0x8c>
    f378:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f37a:	2a00      	cmp	r2, #0
    f37c:	d004      	beq.n	f388 <_vfiprintf_r+0x814>
    f37e:	9808      	ldr	r0, [sp, #32]
    f380:	9907      	ldr	r1, [sp, #28]
    f382:	aa15      	add	r2, sp, #84	; 0x54
    f384:	f7ff fbc2 	bl	eb0c <__sprint_r>
    f388:	9f07      	ldr	r7, [sp, #28]
    f38a:	89bb      	ldrh	r3, [r7, #12]
    f38c:	0658      	lsls	r0, r3, #25
    f38e:	d501      	bpl.n	f394 <_vfiprintf_r+0x820>
    f390:	f7ff fc1f 	bl	ebd2 <_vfiprintf_r+0x5e>
    f394:	980e      	ldr	r0, [sp, #56]	; 0x38
    f396:	b033      	add	sp, #204	; 0xcc
    f398:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f39a:	46c0      	nop			; (mov r8, r8)
    f39c:	00010c18 	.word	0x00010c18

0000f3a0 <vfiprintf>:
    f3a0:	b538      	push	{r3, r4, r5, lr}
    f3a2:	1c13      	adds	r3, r2, #0
    f3a4:	4a04      	ldr	r2, [pc, #16]	; (f3b8 <vfiprintf+0x18>)
    f3a6:	1c05      	adds	r5, r0, #0
    f3a8:	1c0c      	adds	r4, r1, #0
    f3aa:	6810      	ldr	r0, [r2, #0]
    f3ac:	1c29      	adds	r1, r5, #0
    f3ae:	1c22      	adds	r2, r4, #0
    f3b0:	f7ff fbe0 	bl	eb74 <_vfiprintf_r>
    f3b4:	bd38      	pop	{r3, r4, r5, pc}
    f3b6:	46c0      	nop			; (mov r8, r8)
    f3b8:	20000040 	.word	0x20000040

0000f3bc <__sbprintf>:
    f3bc:	b570      	push	{r4, r5, r6, lr}
    f3be:	4c1a      	ldr	r4, [pc, #104]	; (f428 <__sbprintf+0x6c>)
    f3c0:	1c06      	adds	r6, r0, #0
    f3c2:	44a5      	add	sp, r4
    f3c4:	1c0c      	adds	r4, r1, #0
    f3c6:	8989      	ldrh	r1, [r1, #12]
    f3c8:	2002      	movs	r0, #2
    f3ca:	4381      	bics	r1, r0
    f3cc:	4668      	mov	r0, sp
    f3ce:	8181      	strh	r1, [r0, #12]
    f3d0:	6e61      	ldr	r1, [r4, #100]	; 0x64
    f3d2:	9119      	str	r1, [sp, #100]	; 0x64
    f3d4:	89e1      	ldrh	r1, [r4, #14]
    f3d6:	81c1      	strh	r1, [r0, #14]
    f3d8:	69e1      	ldr	r1, [r4, #28]
    f3da:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f3dc:	9107      	str	r1, [sp, #28]
    f3de:	a91a      	add	r1, sp, #104	; 0x68
    f3e0:	9100      	str	r1, [sp, #0]
    f3e2:	9104      	str	r1, [sp, #16]
    f3e4:	2180      	movs	r1, #128	; 0x80
    f3e6:	00c9      	lsls	r1, r1, #3
    f3e8:	9102      	str	r1, [sp, #8]
    f3ea:	9105      	str	r1, [sp, #20]
    f3ec:	2100      	movs	r1, #0
    f3ee:	9009      	str	r0, [sp, #36]	; 0x24
    f3f0:	9106      	str	r1, [sp, #24]
    f3f2:	1c30      	adds	r0, r6, #0
    f3f4:	4669      	mov	r1, sp
    f3f6:	f7ff fbbd 	bl	eb74 <_vfiprintf_r>
    f3fa:	1e05      	subs	r5, r0, #0
    f3fc:	db07      	blt.n	f40e <__sbprintf+0x52>
    f3fe:	1c30      	adds	r0, r6, #0
    f400:	4669      	mov	r1, sp
    f402:	f7fd fea5 	bl	d150 <_fflush_r>
    f406:	2800      	cmp	r0, #0
    f408:	d001      	beq.n	f40e <__sbprintf+0x52>
    f40a:	2501      	movs	r5, #1
    f40c:	426d      	negs	r5, r5
    f40e:	466b      	mov	r3, sp
    f410:	899a      	ldrh	r2, [r3, #12]
    f412:	2340      	movs	r3, #64	; 0x40
    f414:	421a      	tst	r2, r3
    f416:	d002      	beq.n	f41e <__sbprintf+0x62>
    f418:	89a2      	ldrh	r2, [r4, #12]
    f41a:	4313      	orrs	r3, r2
    f41c:	81a3      	strh	r3, [r4, #12]
    f41e:	1c28      	adds	r0, r5, #0
    f420:	238d      	movs	r3, #141	; 0x8d
    f422:	00db      	lsls	r3, r3, #3
    f424:	449d      	add	sp, r3
    f426:	bd70      	pop	{r4, r5, r6, pc}
    f428:	fffffb98 	.word	0xfffffb98

0000f42c <_write_r>:
    f42c:	b538      	push	{r3, r4, r5, lr}
    f42e:	4c08      	ldr	r4, [pc, #32]	; (f450 <_write_r+0x24>)
    f430:	1c05      	adds	r5, r0, #0
    f432:	2000      	movs	r0, #0
    f434:	6020      	str	r0, [r4, #0]
    f436:	1c08      	adds	r0, r1, #0
    f438:	1c11      	adds	r1, r2, #0
    f43a:	1c1a      	adds	r2, r3, #0
    f43c:	f7f9 fbd8 	bl	8bf0 <_write>
    f440:	1c43      	adds	r3, r0, #1
    f442:	d103      	bne.n	f44c <_write_r+0x20>
    f444:	6823      	ldr	r3, [r4, #0]
    f446:	2b00      	cmp	r3, #0
    f448:	d000      	beq.n	f44c <_write_r+0x20>
    f44a:	602b      	str	r3, [r5, #0]
    f44c:	bd38      	pop	{r3, r4, r5, pc}
    f44e:	46c0      	nop			; (mov r8, r8)
    f450:	200010dc 	.word	0x200010dc

0000f454 <__register_exitproc>:
    f454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f456:	1c1e      	adds	r6, r3, #0
    f458:	4b23      	ldr	r3, [pc, #140]	; (f4e8 <__register_exitproc+0x94>)
    f45a:	1c05      	adds	r5, r0, #0
    f45c:	681b      	ldr	r3, [r3, #0]
    f45e:	9101      	str	r1, [sp, #4]
    f460:	1c1c      	adds	r4, r3, #0
    f462:	34fc      	adds	r4, #252	; 0xfc
    f464:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    f466:	1c17      	adds	r7, r2, #0
    f468:	2800      	cmp	r0, #0
    f46a:	d103      	bne.n	f474 <__register_exitproc+0x20>
    f46c:	22a6      	movs	r2, #166	; 0xa6
    f46e:	0052      	lsls	r2, r2, #1
    f470:	1898      	adds	r0, r3, r2
    f472:	64e0      	str	r0, [r4, #76]	; 0x4c
    f474:	6843      	ldr	r3, [r0, #4]
    f476:	2b1f      	cmp	r3, #31
    f478:	dd16      	ble.n	f4a8 <__register_exitproc+0x54>
    f47a:	4b1c      	ldr	r3, [pc, #112]	; (f4ec <__register_exitproc+0x98>)
    f47c:	2b00      	cmp	r3, #0
    f47e:	d102      	bne.n	f486 <__register_exitproc+0x32>
    f480:	2001      	movs	r0, #1
    f482:	4240      	negs	r0, r0
    f484:	e02e      	b.n	f4e4 <__register_exitproc+0x90>
    f486:	20c8      	movs	r0, #200	; 0xc8
    f488:	0040      	lsls	r0, r0, #1
    f48a:	f7fe faf3 	bl	da74 <malloc>
    f48e:	2800      	cmp	r0, #0
    f490:	d0f6      	beq.n	f480 <__register_exitproc+0x2c>
    f492:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    f494:	2300      	movs	r3, #0
    f496:	6002      	str	r2, [r0, #0]
    f498:	22c4      	movs	r2, #196	; 0xc4
    f49a:	0052      	lsls	r2, r2, #1
    f49c:	6043      	str	r3, [r0, #4]
    f49e:	64e0      	str	r0, [r4, #76]	; 0x4c
    f4a0:	5083      	str	r3, [r0, r2]
    f4a2:	22c6      	movs	r2, #198	; 0xc6
    f4a4:	0052      	lsls	r2, r2, #1
    f4a6:	5083      	str	r3, [r0, r2]
    f4a8:	6843      	ldr	r3, [r0, #4]
    f4aa:	2d00      	cmp	r5, #0
    f4ac:	d013      	beq.n	f4d6 <__register_exitproc+0x82>
    f4ae:	009c      	lsls	r4, r3, #2
    f4b0:	1904      	adds	r4, r0, r4
    f4b2:	1c22      	adds	r2, r4, #0
    f4b4:	3288      	adds	r2, #136	; 0x88
    f4b6:	6017      	str	r7, [r2, #0]
    f4b8:	27c2      	movs	r7, #194	; 0xc2
    f4ba:	007f      	lsls	r7, r7, #1
    f4bc:	19c2      	adds	r2, r0, r7
    f4be:	6857      	ldr	r7, [r2, #4]
    f4c0:	2101      	movs	r1, #1
    f4c2:	4099      	lsls	r1, r3
    f4c4:	430f      	orrs	r7, r1
    f4c6:	34fc      	adds	r4, #252	; 0xfc
    f4c8:	6057      	str	r7, [r2, #4]
    f4ca:	60e6      	str	r6, [r4, #12]
    f4cc:	2d02      	cmp	r5, #2
    f4ce:	d102      	bne.n	f4d6 <__register_exitproc+0x82>
    f4d0:	6894      	ldr	r4, [r2, #8]
    f4d2:	4321      	orrs	r1, r4
    f4d4:	6091      	str	r1, [r2, #8]
    f4d6:	1c5a      	adds	r2, r3, #1
    f4d8:	9f01      	ldr	r7, [sp, #4]
    f4da:	3302      	adds	r3, #2
    f4dc:	009b      	lsls	r3, r3, #2
    f4de:	6042      	str	r2, [r0, #4]
    f4e0:	501f      	str	r7, [r3, r0]
    f4e2:	2000      	movs	r0, #0
    f4e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f4e6:	46c0      	nop			; (mov r8, r8)
    f4e8:	00010a7c 	.word	0x00010a7c
    f4ec:	0000da75 	.word	0x0000da75

0000f4f0 <_calloc_r>:
    f4f0:	b510      	push	{r4, lr}
    f4f2:	4351      	muls	r1, r2
    f4f4:	f7fe fad2 	bl	da9c <_malloc_r>
    f4f8:	1e04      	subs	r4, r0, #0
    f4fa:	d023      	beq.n	f544 <_calloc_r+0x54>
    f4fc:	1c03      	adds	r3, r0, #0
    f4fe:	3b08      	subs	r3, #8
    f500:	685a      	ldr	r2, [r3, #4]
    f502:	2303      	movs	r3, #3
    f504:	439a      	bics	r2, r3
    f506:	3a04      	subs	r2, #4
    f508:	2a24      	cmp	r2, #36	; 0x24
    f50a:	d818      	bhi.n	f53e <_calloc_r+0x4e>
    f50c:	1c03      	adds	r3, r0, #0
    f50e:	2a13      	cmp	r2, #19
    f510:	d910      	bls.n	f534 <_calloc_r+0x44>
    f512:	2100      	movs	r1, #0
    f514:	6001      	str	r1, [r0, #0]
    f516:	6041      	str	r1, [r0, #4]
    f518:	3308      	adds	r3, #8
    f51a:	2a1b      	cmp	r2, #27
    f51c:	d90a      	bls.n	f534 <_calloc_r+0x44>
    f51e:	6081      	str	r1, [r0, #8]
    f520:	60c1      	str	r1, [r0, #12]
    f522:	2a24      	cmp	r2, #36	; 0x24
    f524:	d002      	beq.n	f52c <_calloc_r+0x3c>
    f526:	1c03      	adds	r3, r0, #0
    f528:	3310      	adds	r3, #16
    f52a:	e003      	b.n	f534 <_calloc_r+0x44>
    f52c:	1c03      	adds	r3, r0, #0
    f52e:	6101      	str	r1, [r0, #16]
    f530:	3318      	adds	r3, #24
    f532:	6141      	str	r1, [r0, #20]
    f534:	2200      	movs	r2, #0
    f536:	601a      	str	r2, [r3, #0]
    f538:	605a      	str	r2, [r3, #4]
    f53a:	609a      	str	r2, [r3, #8]
    f53c:	e002      	b.n	f544 <_calloc_r+0x54>
    f53e:	2100      	movs	r1, #0
    f540:	f7fb fda1 	bl	b086 <memset>
    f544:	1c20      	adds	r0, r4, #0
    f546:	bd10      	pop	{r4, pc}

0000f548 <_close_r>:
    f548:	b538      	push	{r3, r4, r5, lr}
    f54a:	4c07      	ldr	r4, [pc, #28]	; (f568 <_close_r+0x20>)
    f54c:	2300      	movs	r3, #0
    f54e:	1c05      	adds	r5, r0, #0
    f550:	1c08      	adds	r0, r1, #0
    f552:	6023      	str	r3, [r4, #0]
    f554:	f7f9 fba2 	bl	8c9c <_close>
    f558:	1c43      	adds	r3, r0, #1
    f55a:	d103      	bne.n	f564 <_close_r+0x1c>
    f55c:	6823      	ldr	r3, [r4, #0]
    f55e:	2b00      	cmp	r3, #0
    f560:	d000      	beq.n	f564 <_close_r+0x1c>
    f562:	602b      	str	r3, [r5, #0]
    f564:	bd38      	pop	{r3, r4, r5, pc}
    f566:	46c0      	nop			; (mov r8, r8)
    f568:	200010dc 	.word	0x200010dc

0000f56c <_fclose_r>:
    f56c:	b570      	push	{r4, r5, r6, lr}
    f56e:	1c05      	adds	r5, r0, #0
    f570:	1e0c      	subs	r4, r1, #0
    f572:	d101      	bne.n	f578 <_fclose_r+0xc>
    f574:	2000      	movs	r0, #0
    f576:	e03b      	b.n	f5f0 <_fclose_r+0x84>
    f578:	2800      	cmp	r0, #0
    f57a:	d004      	beq.n	f586 <_fclose_r+0x1a>
    f57c:	6b82      	ldr	r2, [r0, #56]	; 0x38
    f57e:	2a00      	cmp	r2, #0
    f580:	d101      	bne.n	f586 <_fclose_r+0x1a>
    f582:	f7fd fe37 	bl	d1f4 <__sinit>
    f586:	220c      	movs	r2, #12
    f588:	5ea3      	ldrsh	r3, [r4, r2]
    f58a:	2b00      	cmp	r3, #0
    f58c:	d0f2      	beq.n	f574 <_fclose_r+0x8>
    f58e:	1c28      	adds	r0, r5, #0
    f590:	1c21      	adds	r1, r4, #0
    f592:	f7fd fddd 	bl	d150 <_fflush_r>
    f596:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f598:	1c06      	adds	r6, r0, #0
    f59a:	2b00      	cmp	r3, #0
    f59c:	d006      	beq.n	f5ac <_fclose_r+0x40>
    f59e:	1c28      	adds	r0, r5, #0
    f5a0:	69e1      	ldr	r1, [r4, #28]
    f5a2:	4798      	blx	r3
    f5a4:	2800      	cmp	r0, #0
    f5a6:	da01      	bge.n	f5ac <_fclose_r+0x40>
    f5a8:	2601      	movs	r6, #1
    f5aa:	4276      	negs	r6, r6
    f5ac:	89a3      	ldrh	r3, [r4, #12]
    f5ae:	061a      	lsls	r2, r3, #24
    f5b0:	d503      	bpl.n	f5ba <_fclose_r+0x4e>
    f5b2:	1c28      	adds	r0, r5, #0
    f5b4:	6921      	ldr	r1, [r4, #16]
    f5b6:	f7fd ff4d 	bl	d454 <_free_r>
    f5ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
    f5bc:	2900      	cmp	r1, #0
    f5be:	d008      	beq.n	f5d2 <_fclose_r+0x66>
    f5c0:	1c23      	adds	r3, r4, #0
    f5c2:	3340      	adds	r3, #64	; 0x40
    f5c4:	4299      	cmp	r1, r3
    f5c6:	d002      	beq.n	f5ce <_fclose_r+0x62>
    f5c8:	1c28      	adds	r0, r5, #0
    f5ca:	f7fd ff43 	bl	d454 <_free_r>
    f5ce:	2300      	movs	r3, #0
    f5d0:	6323      	str	r3, [r4, #48]	; 0x30
    f5d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
    f5d4:	2900      	cmp	r1, #0
    f5d6:	d004      	beq.n	f5e2 <_fclose_r+0x76>
    f5d8:	1c28      	adds	r0, r5, #0
    f5da:	f7fd ff3b 	bl	d454 <_free_r>
    f5de:	2300      	movs	r3, #0
    f5e0:	6463      	str	r3, [r4, #68]	; 0x44
    f5e2:	f7fd feb7 	bl	d354 <__sfp_lock_acquire>
    f5e6:	2300      	movs	r3, #0
    f5e8:	81a3      	strh	r3, [r4, #12]
    f5ea:	f7fd feb4 	bl	d356 <__sfp_lock_release>
    f5ee:	1c30      	adds	r0, r6, #0
    f5f0:	bd70      	pop	{r4, r5, r6, pc}

0000f5f2 <fclose>:
    f5f2:	b508      	push	{r3, lr}
    f5f4:	4b02      	ldr	r3, [pc, #8]	; (f600 <fclose+0xe>)
    f5f6:	1c01      	adds	r1, r0, #0
    f5f8:	6818      	ldr	r0, [r3, #0]
    f5fa:	f7ff ffb7 	bl	f56c <_fclose_r>
    f5fe:	bd08      	pop	{r3, pc}
    f600:	20000040 	.word	0x20000040

0000f604 <_fputwc_r>:
    f604:	b5f0      	push	{r4, r5, r6, r7, lr}
    f606:	2380      	movs	r3, #128	; 0x80
    f608:	1c14      	adds	r4, r2, #0
    f60a:	8992      	ldrh	r2, [r2, #12]
    f60c:	b085      	sub	sp, #20
    f60e:	019b      	lsls	r3, r3, #6
    f610:	9001      	str	r0, [sp, #4]
    f612:	1c0f      	adds	r7, r1, #0
    f614:	421a      	tst	r2, r3
    f616:	d104      	bne.n	f622 <_fputwc_r+0x1e>
    f618:	431a      	orrs	r2, r3
    f61a:	81a2      	strh	r2, [r4, #12]
    f61c:	6e62      	ldr	r2, [r4, #100]	; 0x64
    f61e:	4313      	orrs	r3, r2
    f620:	6663      	str	r3, [r4, #100]	; 0x64
    f622:	f7fe f995 	bl	d950 <__locale_mb_cur_max>
    f626:	ae03      	add	r6, sp, #12
    f628:	2801      	cmp	r0, #1
    f62a:	d105      	bne.n	f638 <_fputwc_r+0x34>
    f62c:	1e7b      	subs	r3, r7, #1
    f62e:	2bfe      	cmp	r3, #254	; 0xfe
    f630:	d802      	bhi.n	f638 <_fputwc_r+0x34>
    f632:	7037      	strb	r7, [r6, #0]
    f634:	9000      	str	r0, [sp, #0]
    f636:	e00f      	b.n	f658 <_fputwc_r+0x54>
    f638:	1c23      	adds	r3, r4, #0
    f63a:	335c      	adds	r3, #92	; 0x5c
    f63c:	9801      	ldr	r0, [sp, #4]
    f63e:	1c31      	adds	r1, r6, #0
    f640:	1c3a      	adds	r2, r7, #0
    f642:	f000 f8f5 	bl	f830 <_wcrtomb_r>
    f646:	1c03      	adds	r3, r0, #0
    f648:	9000      	str	r0, [sp, #0]
    f64a:	3301      	adds	r3, #1
    f64c:	d104      	bne.n	f658 <_fputwc_r+0x54>
    f64e:	89a3      	ldrh	r3, [r4, #12]
    f650:	2240      	movs	r2, #64	; 0x40
    f652:	4313      	orrs	r3, r2
    f654:	81a3      	strh	r3, [r4, #12]
    f656:	e02b      	b.n	f6b0 <_fputwc_r+0xac>
    f658:	2500      	movs	r5, #0
    f65a:	9b00      	ldr	r3, [sp, #0]
    f65c:	429d      	cmp	r5, r3
    f65e:	d023      	beq.n	f6a8 <_fputwc_r+0xa4>
    f660:	68a3      	ldr	r3, [r4, #8]
    f662:	3b01      	subs	r3, #1
    f664:	60a3      	str	r3, [r4, #8]
    f666:	2b00      	cmp	r3, #0
    f668:	da16      	bge.n	f698 <_fputwc_r+0x94>
    f66a:	69a2      	ldr	r2, [r4, #24]
    f66c:	4293      	cmp	r3, r2
    f66e:	db07      	blt.n	f680 <_fputwc_r+0x7c>
    f670:	5d73      	ldrb	r3, [r6, r5]
    f672:	6822      	ldr	r2, [r4, #0]
    f674:	7013      	strb	r3, [r2, #0]
    f676:	6823      	ldr	r3, [r4, #0]
    f678:	7819      	ldrb	r1, [r3, #0]
    f67a:	290a      	cmp	r1, #10
    f67c:	d110      	bne.n	f6a0 <_fputwc_r+0x9c>
    f67e:	e000      	b.n	f682 <_fputwc_r+0x7e>
    f680:	5d71      	ldrb	r1, [r6, r5]
    f682:	9801      	ldr	r0, [sp, #4]
    f684:	1c22      	adds	r2, r4, #0
    f686:	f000 f877 	bl	f778 <__swbuf_r>
    f68a:	3001      	adds	r0, #1
    f68c:	4243      	negs	r3, r0
    f68e:	4158      	adcs	r0, r3
    f690:	b2c0      	uxtb	r0, r0
    f692:	2800      	cmp	r0, #0
    f694:	d006      	beq.n	f6a4 <_fputwc_r+0xa0>
    f696:	e009      	b.n	f6ac <_fputwc_r+0xa8>
    f698:	5d73      	ldrb	r3, [r6, r5]
    f69a:	6822      	ldr	r2, [r4, #0]
    f69c:	7013      	strb	r3, [r2, #0]
    f69e:	6823      	ldr	r3, [r4, #0]
    f6a0:	3301      	adds	r3, #1
    f6a2:	6023      	str	r3, [r4, #0]
    f6a4:	3501      	adds	r5, #1
    f6a6:	e7d8      	b.n	f65a <_fputwc_r+0x56>
    f6a8:	1c38      	adds	r0, r7, #0
    f6aa:	e001      	b.n	f6b0 <_fputwc_r+0xac>
    f6ac:	2001      	movs	r0, #1
    f6ae:	4240      	negs	r0, r0
    f6b0:	b005      	add	sp, #20
    f6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f6b4 <fputwc>:
    f6b4:	4b09      	ldr	r3, [pc, #36]	; (f6dc <fputwc+0x28>)
    f6b6:	b570      	push	{r4, r5, r6, lr}
    f6b8:	681c      	ldr	r4, [r3, #0]
    f6ba:	1c06      	adds	r6, r0, #0
    f6bc:	1c0d      	adds	r5, r1, #0
    f6be:	2c00      	cmp	r4, #0
    f6c0:	d005      	beq.n	f6ce <fputwc+0x1a>
    f6c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f6c4:	2b00      	cmp	r3, #0
    f6c6:	d102      	bne.n	f6ce <fputwc+0x1a>
    f6c8:	1c20      	adds	r0, r4, #0
    f6ca:	f7fd fd93 	bl	d1f4 <__sinit>
    f6ce:	1c31      	adds	r1, r6, #0
    f6d0:	1c2a      	adds	r2, r5, #0
    f6d2:	1c20      	adds	r0, r4, #0
    f6d4:	f7ff ff96 	bl	f604 <_fputwc_r>
    f6d8:	bd70      	pop	{r4, r5, r6, pc}
    f6da:	46c0      	nop			; (mov r8, r8)
    f6dc:	20000040 	.word	0x20000040

0000f6e0 <_fstat_r>:
    f6e0:	b538      	push	{r3, r4, r5, lr}
    f6e2:	4c07      	ldr	r4, [pc, #28]	; (f700 <_fstat_r+0x20>)
    f6e4:	2300      	movs	r3, #0
    f6e6:	1c05      	adds	r5, r0, #0
    f6e8:	1c08      	adds	r0, r1, #0
    f6ea:	1c11      	adds	r1, r2, #0
    f6ec:	6023      	str	r3, [r4, #0]
    f6ee:	f7f9 fadf 	bl	8cb0 <_fstat>
    f6f2:	1c43      	adds	r3, r0, #1
    f6f4:	d103      	bne.n	f6fe <_fstat_r+0x1e>
    f6f6:	6823      	ldr	r3, [r4, #0]
    f6f8:	2b00      	cmp	r3, #0
    f6fa:	d000      	beq.n	f6fe <_fstat_r+0x1e>
    f6fc:	602b      	str	r3, [r5, #0]
    f6fe:	bd38      	pop	{r3, r4, r5, pc}
    f700:	200010dc 	.word	0x200010dc

0000f704 <_isatty_r>:
    f704:	b538      	push	{r3, r4, r5, lr}
    f706:	4c07      	ldr	r4, [pc, #28]	; (f724 <_isatty_r+0x20>)
    f708:	2300      	movs	r3, #0
    f70a:	1c05      	adds	r5, r0, #0
    f70c:	1c08      	adds	r0, r1, #0
    f70e:	6023      	str	r3, [r4, #0]
    f710:	f7f9 fadc 	bl	8ccc <_isatty>
    f714:	1c43      	adds	r3, r0, #1
    f716:	d103      	bne.n	f720 <_isatty_r+0x1c>
    f718:	6823      	ldr	r3, [r4, #0]
    f71a:	2b00      	cmp	r3, #0
    f71c:	d000      	beq.n	f720 <_isatty_r+0x1c>
    f71e:	602b      	str	r3, [r5, #0]
    f720:	bd38      	pop	{r3, r4, r5, pc}
    f722:	46c0      	nop			; (mov r8, r8)
    f724:	200010dc 	.word	0x200010dc

0000f728 <_lseek_r>:
    f728:	b538      	push	{r3, r4, r5, lr}
    f72a:	4c08      	ldr	r4, [pc, #32]	; (f74c <_lseek_r+0x24>)
    f72c:	1c05      	adds	r5, r0, #0
    f72e:	2000      	movs	r0, #0
    f730:	6020      	str	r0, [r4, #0]
    f732:	1c08      	adds	r0, r1, #0
    f734:	1c11      	adds	r1, r2, #0
    f736:	1c1a      	adds	r2, r3, #0
    f738:	f7f9 fad2 	bl	8ce0 <_lseek>
    f73c:	1c43      	adds	r3, r0, #1
    f73e:	d103      	bne.n	f748 <_lseek_r+0x20>
    f740:	6823      	ldr	r3, [r4, #0]
    f742:	2b00      	cmp	r3, #0
    f744:	d000      	beq.n	f748 <_lseek_r+0x20>
    f746:	602b      	str	r3, [r5, #0]
    f748:	bd38      	pop	{r3, r4, r5, pc}
    f74a:	46c0      	nop			; (mov r8, r8)
    f74c:	200010dc 	.word	0x200010dc

0000f750 <_read_r>:
    f750:	b538      	push	{r3, r4, r5, lr}
    f752:	4c08      	ldr	r4, [pc, #32]	; (f774 <_read_r+0x24>)
    f754:	1c05      	adds	r5, r0, #0
    f756:	2000      	movs	r0, #0
    f758:	6020      	str	r0, [r4, #0]
    f75a:	1c08      	adds	r0, r1, #0
    f75c:	1c11      	adds	r1, r2, #0
    f75e:	1c1a      	adds	r2, r3, #0
    f760:	f7f9 fa1a 	bl	8b98 <_read>
    f764:	1c43      	adds	r3, r0, #1
    f766:	d103      	bne.n	f770 <_read_r+0x20>
    f768:	6823      	ldr	r3, [r4, #0]
    f76a:	2b00      	cmp	r3, #0
    f76c:	d000      	beq.n	f770 <_read_r+0x20>
    f76e:	602b      	str	r3, [r5, #0]
    f770:	bd38      	pop	{r3, r4, r5, pc}
    f772:	46c0      	nop			; (mov r8, r8)
    f774:	200010dc 	.word	0x200010dc

0000f778 <__swbuf_r>:
    f778:	b570      	push	{r4, r5, r6, lr}
    f77a:	1c05      	adds	r5, r0, #0
    f77c:	1c0e      	adds	r6, r1, #0
    f77e:	1c14      	adds	r4, r2, #0
    f780:	2800      	cmp	r0, #0
    f782:	d004      	beq.n	f78e <__swbuf_r+0x16>
    f784:	6b82      	ldr	r2, [r0, #56]	; 0x38
    f786:	2a00      	cmp	r2, #0
    f788:	d101      	bne.n	f78e <__swbuf_r+0x16>
    f78a:	f7fd fd33 	bl	d1f4 <__sinit>
    f78e:	69a3      	ldr	r3, [r4, #24]
    f790:	60a3      	str	r3, [r4, #8]
    f792:	89a3      	ldrh	r3, [r4, #12]
    f794:	071a      	lsls	r2, r3, #28
    f796:	d50f      	bpl.n	f7b8 <__swbuf_r+0x40>
    f798:	6923      	ldr	r3, [r4, #16]
    f79a:	2b00      	cmp	r3, #0
    f79c:	d00c      	beq.n	f7b8 <__swbuf_r+0x40>
    f79e:	2280      	movs	r2, #128	; 0x80
    f7a0:	89a3      	ldrh	r3, [r4, #12]
    f7a2:	0192      	lsls	r2, r2, #6
    f7a4:	b2f6      	uxtb	r6, r6
    f7a6:	4213      	tst	r3, r2
    f7a8:	d10f      	bne.n	f7ca <__swbuf_r+0x52>
    f7aa:	4313      	orrs	r3, r2
    f7ac:	81a3      	strh	r3, [r4, #12]
    f7ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
    f7b0:	4b18      	ldr	r3, [pc, #96]	; (f814 <__swbuf_r+0x9c>)
    f7b2:	4013      	ands	r3, r2
    f7b4:	6663      	str	r3, [r4, #100]	; 0x64
    f7b6:	e008      	b.n	f7ca <__swbuf_r+0x52>
    f7b8:	1c28      	adds	r0, r5, #0
    f7ba:	1c21      	adds	r1, r4, #0
    f7bc:	f7fc fd68 	bl	c290 <__swsetup_r>
    f7c0:	2800      	cmp	r0, #0
    f7c2:	d0ec      	beq.n	f79e <__swbuf_r+0x26>
    f7c4:	2001      	movs	r0, #1
    f7c6:	4240      	negs	r0, r0
    f7c8:	e023      	b.n	f812 <__swbuf_r+0x9a>
    f7ca:	6823      	ldr	r3, [r4, #0]
    f7cc:	6922      	ldr	r2, [r4, #16]
    f7ce:	1a98      	subs	r0, r3, r2
    f7d0:	6963      	ldr	r3, [r4, #20]
    f7d2:	4298      	cmp	r0, r3
    f7d4:	db05      	blt.n	f7e2 <__swbuf_r+0x6a>
    f7d6:	1c28      	adds	r0, r5, #0
    f7d8:	1c21      	adds	r1, r4, #0
    f7da:	f7fd fcb9 	bl	d150 <_fflush_r>
    f7de:	2800      	cmp	r0, #0
    f7e0:	d1f0      	bne.n	f7c4 <__swbuf_r+0x4c>
    f7e2:	68a3      	ldr	r3, [r4, #8]
    f7e4:	3001      	adds	r0, #1
    f7e6:	3b01      	subs	r3, #1
    f7e8:	60a3      	str	r3, [r4, #8]
    f7ea:	6823      	ldr	r3, [r4, #0]
    f7ec:	1c5a      	adds	r2, r3, #1
    f7ee:	6022      	str	r2, [r4, #0]
    f7f0:	701e      	strb	r6, [r3, #0]
    f7f2:	6962      	ldr	r2, [r4, #20]
    f7f4:	4290      	cmp	r0, r2
    f7f6:	d005      	beq.n	f804 <__swbuf_r+0x8c>
    f7f8:	89a3      	ldrh	r3, [r4, #12]
    f7fa:	1c30      	adds	r0, r6, #0
    f7fc:	07da      	lsls	r2, r3, #31
    f7fe:	d508      	bpl.n	f812 <__swbuf_r+0x9a>
    f800:	2e0a      	cmp	r6, #10
    f802:	d106      	bne.n	f812 <__swbuf_r+0x9a>
    f804:	1c28      	adds	r0, r5, #0
    f806:	1c21      	adds	r1, r4, #0
    f808:	f7fd fca2 	bl	d150 <_fflush_r>
    f80c:	2800      	cmp	r0, #0
    f80e:	d1d9      	bne.n	f7c4 <__swbuf_r+0x4c>
    f810:	1c30      	adds	r0, r6, #0
    f812:	bd70      	pop	{r4, r5, r6, pc}
    f814:	ffffdfff 	.word	0xffffdfff

0000f818 <__swbuf>:
    f818:	b508      	push	{r3, lr}
    f81a:	1c0a      	adds	r2, r1, #0
    f81c:	4903      	ldr	r1, [pc, #12]	; (f82c <__swbuf+0x14>)
    f81e:	1c03      	adds	r3, r0, #0
    f820:	6808      	ldr	r0, [r1, #0]
    f822:	1c19      	adds	r1, r3, #0
    f824:	f7ff ffa8 	bl	f778 <__swbuf_r>
    f828:	bd08      	pop	{r3, pc}
    f82a:	46c0      	nop			; (mov r8, r8)
    f82c:	20000040 	.word	0x20000040

0000f830 <_wcrtomb_r>:
    f830:	b5f0      	push	{r4, r5, r6, r7, lr}
    f832:	1c1d      	adds	r5, r3, #0
    f834:	4b0f      	ldr	r3, [pc, #60]	; (f874 <_wcrtomb_r+0x44>)
    f836:	b089      	sub	sp, #36	; 0x24
    f838:	1c04      	adds	r4, r0, #0
    f83a:	1c0e      	adds	r6, r1, #0
    f83c:	9203      	str	r2, [sp, #12]
    f83e:	681f      	ldr	r7, [r3, #0]
    f840:	d107      	bne.n	f852 <_wcrtomb_r+0x22>
    f842:	f7fe f881 	bl	d948 <__locale_charset>
    f846:	9500      	str	r5, [sp, #0]
    f848:	1c03      	adds	r3, r0, #0
    f84a:	a905      	add	r1, sp, #20
    f84c:	1c20      	adds	r0, r4, #0
    f84e:	1c32      	adds	r2, r6, #0
    f850:	e006      	b.n	f860 <_wcrtomb_r+0x30>
    f852:	f7fe f879 	bl	d948 <__locale_charset>
    f856:	9a03      	ldr	r2, [sp, #12]
    f858:	1c03      	adds	r3, r0, #0
    f85a:	9500      	str	r5, [sp, #0]
    f85c:	1c20      	adds	r0, r4, #0
    f85e:	1c31      	adds	r1, r6, #0
    f860:	47b8      	blx	r7
    f862:	1c43      	adds	r3, r0, #1
    f864:	d103      	bne.n	f86e <_wcrtomb_r+0x3e>
    f866:	2300      	movs	r3, #0
    f868:	602b      	str	r3, [r5, #0]
    f86a:	238a      	movs	r3, #138	; 0x8a
    f86c:	6023      	str	r3, [r4, #0]
    f86e:	b009      	add	sp, #36	; 0x24
    f870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f872:	46c0      	nop			; (mov r8, r8)
    f874:	200008fc 	.word	0x200008fc

0000f878 <wcrtomb>:
    f878:	b538      	push	{r3, r4, r5, lr}
    f87a:	1c13      	adds	r3, r2, #0
    f87c:	4a04      	ldr	r2, [pc, #16]	; (f890 <wcrtomb+0x18>)
    f87e:	1c05      	adds	r5, r0, #0
    f880:	1c0c      	adds	r4, r1, #0
    f882:	6810      	ldr	r0, [r2, #0]
    f884:	1c29      	adds	r1, r5, #0
    f886:	1c22      	adds	r2, r4, #0
    f888:	f7ff ffd2 	bl	f830 <_wcrtomb_r>
    f88c:	bd38      	pop	{r3, r4, r5, pc}
    f88e:	46c0      	nop			; (mov r8, r8)
    f890:	20000040 	.word	0x20000040

0000f894 <__ascii_wctomb>:
    f894:	2900      	cmp	r1, #0
    f896:	d009      	beq.n	f8ac <__ascii_wctomb+0x18>
    f898:	2aff      	cmp	r2, #255	; 0xff
    f89a:	d904      	bls.n	f8a6 <__ascii_wctomb+0x12>
    f89c:	238a      	movs	r3, #138	; 0x8a
    f89e:	6003      	str	r3, [r0, #0]
    f8a0:	2001      	movs	r0, #1
    f8a2:	4240      	negs	r0, r0
    f8a4:	e003      	b.n	f8ae <__ascii_wctomb+0x1a>
    f8a6:	700a      	strb	r2, [r1, #0]
    f8a8:	2001      	movs	r0, #1
    f8aa:	e000      	b.n	f8ae <__ascii_wctomb+0x1a>
    f8ac:	1c08      	adds	r0, r1, #0
    f8ae:	4770      	bx	lr

0000f8b0 <_wctomb_r>:
    f8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8b2:	1c1f      	adds	r7, r3, #0
    f8b4:	4b07      	ldr	r3, [pc, #28]	; (f8d4 <_wctomb_r+0x24>)
    f8b6:	b085      	sub	sp, #20
    f8b8:	681c      	ldr	r4, [r3, #0]
    f8ba:	1c06      	adds	r6, r0, #0
    f8bc:	1c0d      	adds	r5, r1, #0
    f8be:	9203      	str	r2, [sp, #12]
    f8c0:	f7fe f842 	bl	d948 <__locale_charset>
    f8c4:	9700      	str	r7, [sp, #0]
    f8c6:	1c03      	adds	r3, r0, #0
    f8c8:	1c29      	adds	r1, r5, #0
    f8ca:	1c30      	adds	r0, r6, #0
    f8cc:	9a03      	ldr	r2, [sp, #12]
    f8ce:	47a0      	blx	r4
    f8d0:	b005      	add	sp, #20
    f8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8d4:	200008fc 	.word	0x200008fc

0000f8d8 <__gnu_thumb1_case_uqi>:
    f8d8:	b402      	push	{r1}
    f8da:	4671      	mov	r1, lr
    f8dc:	0849      	lsrs	r1, r1, #1
    f8de:	0049      	lsls	r1, r1, #1
    f8e0:	5c09      	ldrb	r1, [r1, r0]
    f8e2:	0049      	lsls	r1, r1, #1
    f8e4:	448e      	add	lr, r1
    f8e6:	bc02      	pop	{r1}
    f8e8:	4770      	bx	lr
    f8ea:	46c0      	nop			; (mov r8, r8)

0000f8ec <__gnu_thumb1_case_uhi>:
    f8ec:	b403      	push	{r0, r1}
    f8ee:	4671      	mov	r1, lr
    f8f0:	0849      	lsrs	r1, r1, #1
    f8f2:	0040      	lsls	r0, r0, #1
    f8f4:	0049      	lsls	r1, r1, #1
    f8f6:	5a09      	ldrh	r1, [r1, r0]
    f8f8:	0049      	lsls	r1, r1, #1
    f8fa:	448e      	add	lr, r1
    f8fc:	bc03      	pop	{r0, r1}
    f8fe:	4770      	bx	lr

0000f900 <__aeabi_idiv>:
    f900:	2900      	cmp	r1, #0
    f902:	d041      	beq.n	f988 <.divsi3_skip_div0_test+0x84>

0000f904 <.divsi3_skip_div0_test>:
    f904:	b410      	push	{r4}
    f906:	1c04      	adds	r4, r0, #0
    f908:	404c      	eors	r4, r1
    f90a:	46a4      	mov	ip, r4
    f90c:	2301      	movs	r3, #1
    f90e:	2200      	movs	r2, #0
    f910:	2900      	cmp	r1, #0
    f912:	d500      	bpl.n	f916 <.divsi3_skip_div0_test+0x12>
    f914:	4249      	negs	r1, r1
    f916:	2800      	cmp	r0, #0
    f918:	d500      	bpl.n	f91c <.divsi3_skip_div0_test+0x18>
    f91a:	4240      	negs	r0, r0
    f91c:	4288      	cmp	r0, r1
    f91e:	d32c      	bcc.n	f97a <.divsi3_skip_div0_test+0x76>
    f920:	2401      	movs	r4, #1
    f922:	0724      	lsls	r4, r4, #28
    f924:	42a1      	cmp	r1, r4
    f926:	d204      	bcs.n	f932 <.divsi3_skip_div0_test+0x2e>
    f928:	4281      	cmp	r1, r0
    f92a:	d202      	bcs.n	f932 <.divsi3_skip_div0_test+0x2e>
    f92c:	0109      	lsls	r1, r1, #4
    f92e:	011b      	lsls	r3, r3, #4
    f930:	e7f8      	b.n	f924 <.divsi3_skip_div0_test+0x20>
    f932:	00e4      	lsls	r4, r4, #3
    f934:	42a1      	cmp	r1, r4
    f936:	d204      	bcs.n	f942 <.divsi3_skip_div0_test+0x3e>
    f938:	4281      	cmp	r1, r0
    f93a:	d202      	bcs.n	f942 <.divsi3_skip_div0_test+0x3e>
    f93c:	0049      	lsls	r1, r1, #1
    f93e:	005b      	lsls	r3, r3, #1
    f940:	e7f8      	b.n	f934 <.divsi3_skip_div0_test+0x30>
    f942:	4288      	cmp	r0, r1
    f944:	d301      	bcc.n	f94a <.divsi3_skip_div0_test+0x46>
    f946:	1a40      	subs	r0, r0, r1
    f948:	431a      	orrs	r2, r3
    f94a:	084c      	lsrs	r4, r1, #1
    f94c:	42a0      	cmp	r0, r4
    f94e:	d302      	bcc.n	f956 <.divsi3_skip_div0_test+0x52>
    f950:	1b00      	subs	r0, r0, r4
    f952:	085c      	lsrs	r4, r3, #1
    f954:	4322      	orrs	r2, r4
    f956:	088c      	lsrs	r4, r1, #2
    f958:	42a0      	cmp	r0, r4
    f95a:	d302      	bcc.n	f962 <.divsi3_skip_div0_test+0x5e>
    f95c:	1b00      	subs	r0, r0, r4
    f95e:	089c      	lsrs	r4, r3, #2
    f960:	4322      	orrs	r2, r4
    f962:	08cc      	lsrs	r4, r1, #3
    f964:	42a0      	cmp	r0, r4
    f966:	d302      	bcc.n	f96e <.divsi3_skip_div0_test+0x6a>
    f968:	1b00      	subs	r0, r0, r4
    f96a:	08dc      	lsrs	r4, r3, #3
    f96c:	4322      	orrs	r2, r4
    f96e:	2800      	cmp	r0, #0
    f970:	d003      	beq.n	f97a <.divsi3_skip_div0_test+0x76>
    f972:	091b      	lsrs	r3, r3, #4
    f974:	d001      	beq.n	f97a <.divsi3_skip_div0_test+0x76>
    f976:	0909      	lsrs	r1, r1, #4
    f978:	e7e3      	b.n	f942 <.divsi3_skip_div0_test+0x3e>
    f97a:	1c10      	adds	r0, r2, #0
    f97c:	4664      	mov	r4, ip
    f97e:	2c00      	cmp	r4, #0
    f980:	d500      	bpl.n	f984 <.divsi3_skip_div0_test+0x80>
    f982:	4240      	negs	r0, r0
    f984:	bc10      	pop	{r4}
    f986:	4770      	bx	lr
    f988:	2800      	cmp	r0, #0
    f98a:	d006      	beq.n	f99a <.divsi3_skip_div0_test+0x96>
    f98c:	db03      	blt.n	f996 <.divsi3_skip_div0_test+0x92>
    f98e:	2000      	movs	r0, #0
    f990:	43c0      	mvns	r0, r0
    f992:	0840      	lsrs	r0, r0, #1
    f994:	e001      	b.n	f99a <.divsi3_skip_div0_test+0x96>
    f996:	2080      	movs	r0, #128	; 0x80
    f998:	0600      	lsls	r0, r0, #24
    f99a:	b407      	push	{r0, r1, r2}
    f99c:	4802      	ldr	r0, [pc, #8]	; (f9a8 <.divsi3_skip_div0_test+0xa4>)
    f99e:	a102      	add	r1, pc, #8	; (adr r1, f9a8 <.divsi3_skip_div0_test+0xa4>)
    f9a0:	1840      	adds	r0, r0, r1
    f9a2:	9002      	str	r0, [sp, #8]
    f9a4:	bd03      	pop	{r0, r1, pc}
    f9a6:	46c0      	nop			; (mov r8, r8)
    f9a8:	ffff9e61 	.word	0xffff9e61

0000f9ac <__aeabi_idivmod>:
    f9ac:	2900      	cmp	r1, #0
    f9ae:	d0eb      	beq.n	f988 <.divsi3_skip_div0_test+0x84>
    f9b0:	b503      	push	{r0, r1, lr}
    f9b2:	f7ff ffa7 	bl	f904 <.divsi3_skip_div0_test>
    f9b6:	bc0e      	pop	{r1, r2, r3}
    f9b8:	4342      	muls	r2, r0
    f9ba:	1a89      	subs	r1, r1, r2
    f9bc:	4718      	bx	r3
    f9be:	46c0      	nop			; (mov r8, r8)

0000f9c0 <__aeabi_dadd>:
    f9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9c2:	465f      	mov	r7, fp
    f9c4:	4656      	mov	r6, sl
    f9c6:	4644      	mov	r4, r8
    f9c8:	464d      	mov	r5, r9
    f9ca:	b4f0      	push	{r4, r5, r6, r7}
    f9cc:	030c      	lsls	r4, r1, #12
    f9ce:	004d      	lsls	r5, r1, #1
    f9d0:	0fce      	lsrs	r6, r1, #31
    f9d2:	0a61      	lsrs	r1, r4, #9
    f9d4:	0f44      	lsrs	r4, r0, #29
    f9d6:	4321      	orrs	r1, r4
    f9d8:	00c4      	lsls	r4, r0, #3
    f9da:	0318      	lsls	r0, r3, #12
    f9dc:	4680      	mov	r8, r0
    f9de:	0058      	lsls	r0, r3, #1
    f9e0:	0d40      	lsrs	r0, r0, #21
    f9e2:	4682      	mov	sl, r0
    f9e4:	0fd8      	lsrs	r0, r3, #31
    f9e6:	4684      	mov	ip, r0
    f9e8:	4640      	mov	r0, r8
    f9ea:	0a40      	lsrs	r0, r0, #9
    f9ec:	0f53      	lsrs	r3, r2, #29
    f9ee:	4303      	orrs	r3, r0
    f9f0:	00d0      	lsls	r0, r2, #3
    f9f2:	0d6d      	lsrs	r5, r5, #21
    f9f4:	1c37      	adds	r7, r6, #0
    f9f6:	4683      	mov	fp, r0
    f9f8:	4652      	mov	r2, sl
    f9fa:	4566      	cmp	r6, ip
    f9fc:	d100      	bne.n	fa00 <__aeabi_dadd+0x40>
    f9fe:	e0a4      	b.n	fb4a <__aeabi_dadd+0x18a>
    fa00:	1aaf      	subs	r7, r5, r2
    fa02:	2f00      	cmp	r7, #0
    fa04:	dc00      	bgt.n	fa08 <__aeabi_dadd+0x48>
    fa06:	e109      	b.n	fc1c <__aeabi_dadd+0x25c>
    fa08:	2a00      	cmp	r2, #0
    fa0a:	d13b      	bne.n	fa84 <__aeabi_dadd+0xc4>
    fa0c:	4318      	orrs	r0, r3
    fa0e:	d000      	beq.n	fa12 <__aeabi_dadd+0x52>
    fa10:	e0ea      	b.n	fbe8 <__aeabi_dadd+0x228>
    fa12:	0763      	lsls	r3, r4, #29
    fa14:	d100      	bne.n	fa18 <__aeabi_dadd+0x58>
    fa16:	e087      	b.n	fb28 <__aeabi_dadd+0x168>
    fa18:	230f      	movs	r3, #15
    fa1a:	4023      	ands	r3, r4
    fa1c:	2b04      	cmp	r3, #4
    fa1e:	d100      	bne.n	fa22 <__aeabi_dadd+0x62>
    fa20:	e082      	b.n	fb28 <__aeabi_dadd+0x168>
    fa22:	1d22      	adds	r2, r4, #4
    fa24:	42a2      	cmp	r2, r4
    fa26:	41a4      	sbcs	r4, r4
    fa28:	4264      	negs	r4, r4
    fa2a:	2380      	movs	r3, #128	; 0x80
    fa2c:	1909      	adds	r1, r1, r4
    fa2e:	041b      	lsls	r3, r3, #16
    fa30:	400b      	ands	r3, r1
    fa32:	1c37      	adds	r7, r6, #0
    fa34:	1c14      	adds	r4, r2, #0
    fa36:	2b00      	cmp	r3, #0
    fa38:	d100      	bne.n	fa3c <__aeabi_dadd+0x7c>
    fa3a:	e07c      	b.n	fb36 <__aeabi_dadd+0x176>
    fa3c:	4bce      	ldr	r3, [pc, #824]	; (fd78 <__aeabi_dadd+0x3b8>)
    fa3e:	3501      	adds	r5, #1
    fa40:	429d      	cmp	r5, r3
    fa42:	d100      	bne.n	fa46 <__aeabi_dadd+0x86>
    fa44:	e105      	b.n	fc52 <__aeabi_dadd+0x292>
    fa46:	4bcd      	ldr	r3, [pc, #820]	; (fd7c <__aeabi_dadd+0x3bc>)
    fa48:	08e4      	lsrs	r4, r4, #3
    fa4a:	4019      	ands	r1, r3
    fa4c:	0748      	lsls	r0, r1, #29
    fa4e:	0249      	lsls	r1, r1, #9
    fa50:	4304      	orrs	r4, r0
    fa52:	0b0b      	lsrs	r3, r1, #12
    fa54:	2000      	movs	r0, #0
    fa56:	2100      	movs	r1, #0
    fa58:	031b      	lsls	r3, r3, #12
    fa5a:	0b1a      	lsrs	r2, r3, #12
    fa5c:	0d0b      	lsrs	r3, r1, #20
    fa5e:	056d      	lsls	r5, r5, #21
    fa60:	051b      	lsls	r3, r3, #20
    fa62:	4313      	orrs	r3, r2
    fa64:	086a      	lsrs	r2, r5, #1
    fa66:	4dc6      	ldr	r5, [pc, #792]	; (fd80 <__aeabi_dadd+0x3c0>)
    fa68:	07ff      	lsls	r7, r7, #31
    fa6a:	401d      	ands	r5, r3
    fa6c:	4315      	orrs	r5, r2
    fa6e:	006d      	lsls	r5, r5, #1
    fa70:	086d      	lsrs	r5, r5, #1
    fa72:	1c29      	adds	r1, r5, #0
    fa74:	4339      	orrs	r1, r7
    fa76:	1c20      	adds	r0, r4, #0
    fa78:	bc3c      	pop	{r2, r3, r4, r5}
    fa7a:	4690      	mov	r8, r2
    fa7c:	4699      	mov	r9, r3
    fa7e:	46a2      	mov	sl, r4
    fa80:	46ab      	mov	fp, r5
    fa82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa84:	48bc      	ldr	r0, [pc, #752]	; (fd78 <__aeabi_dadd+0x3b8>)
    fa86:	4285      	cmp	r5, r0
    fa88:	d0c3      	beq.n	fa12 <__aeabi_dadd+0x52>
    fa8a:	2080      	movs	r0, #128	; 0x80
    fa8c:	0400      	lsls	r0, r0, #16
    fa8e:	4303      	orrs	r3, r0
    fa90:	2f38      	cmp	r7, #56	; 0x38
    fa92:	dd00      	ble.n	fa96 <__aeabi_dadd+0xd6>
    fa94:	e0f0      	b.n	fc78 <__aeabi_dadd+0x2b8>
    fa96:	2f1f      	cmp	r7, #31
    fa98:	dd00      	ble.n	fa9c <__aeabi_dadd+0xdc>
    fa9a:	e124      	b.n	fce6 <__aeabi_dadd+0x326>
    fa9c:	2020      	movs	r0, #32
    fa9e:	1bc0      	subs	r0, r0, r7
    faa0:	1c1a      	adds	r2, r3, #0
    faa2:	4681      	mov	r9, r0
    faa4:	4082      	lsls	r2, r0
    faa6:	4658      	mov	r0, fp
    faa8:	40f8      	lsrs	r0, r7
    faaa:	4302      	orrs	r2, r0
    faac:	4694      	mov	ip, r2
    faae:	4658      	mov	r0, fp
    fab0:	464a      	mov	r2, r9
    fab2:	4090      	lsls	r0, r2
    fab4:	1e42      	subs	r2, r0, #1
    fab6:	4190      	sbcs	r0, r2
    fab8:	40fb      	lsrs	r3, r7
    faba:	4662      	mov	r2, ip
    fabc:	4302      	orrs	r2, r0
    fabe:	1c1f      	adds	r7, r3, #0
    fac0:	1aa2      	subs	r2, r4, r2
    fac2:	4294      	cmp	r4, r2
    fac4:	41a4      	sbcs	r4, r4
    fac6:	4264      	negs	r4, r4
    fac8:	1bc9      	subs	r1, r1, r7
    faca:	1b09      	subs	r1, r1, r4
    facc:	1c14      	adds	r4, r2, #0
    face:	020b      	lsls	r3, r1, #8
    fad0:	d59f      	bpl.n	fa12 <__aeabi_dadd+0x52>
    fad2:	0249      	lsls	r1, r1, #9
    fad4:	0a4f      	lsrs	r7, r1, #9
    fad6:	2f00      	cmp	r7, #0
    fad8:	d100      	bne.n	fadc <__aeabi_dadd+0x11c>
    fada:	e0c8      	b.n	fc6e <__aeabi_dadd+0x2ae>
    fadc:	1c38      	adds	r0, r7, #0
    fade:	f7fa fda5 	bl	a62c <__clzsi2>
    fae2:	1c02      	adds	r2, r0, #0
    fae4:	3a08      	subs	r2, #8
    fae6:	2a1f      	cmp	r2, #31
    fae8:	dd00      	ble.n	faec <__aeabi_dadd+0x12c>
    faea:	e0b5      	b.n	fc58 <__aeabi_dadd+0x298>
    faec:	2128      	movs	r1, #40	; 0x28
    faee:	1a09      	subs	r1, r1, r0
    faf0:	1c20      	adds	r0, r4, #0
    faf2:	4097      	lsls	r7, r2
    faf4:	40c8      	lsrs	r0, r1
    faf6:	4307      	orrs	r7, r0
    faf8:	4094      	lsls	r4, r2
    fafa:	4295      	cmp	r5, r2
    fafc:	dd00      	ble.n	fb00 <__aeabi_dadd+0x140>
    fafe:	e0b2      	b.n	fc66 <__aeabi_dadd+0x2a6>
    fb00:	1b55      	subs	r5, r2, r5
    fb02:	1c69      	adds	r1, r5, #1
    fb04:	291f      	cmp	r1, #31
    fb06:	dd00      	ble.n	fb0a <__aeabi_dadd+0x14a>
    fb08:	e0dc      	b.n	fcc4 <__aeabi_dadd+0x304>
    fb0a:	221f      	movs	r2, #31
    fb0c:	1b55      	subs	r5, r2, r5
    fb0e:	1c3b      	adds	r3, r7, #0
    fb10:	1c22      	adds	r2, r4, #0
    fb12:	40ab      	lsls	r3, r5
    fb14:	40ca      	lsrs	r2, r1
    fb16:	40ac      	lsls	r4, r5
    fb18:	1e65      	subs	r5, r4, #1
    fb1a:	41ac      	sbcs	r4, r5
    fb1c:	4313      	orrs	r3, r2
    fb1e:	40cf      	lsrs	r7, r1
    fb20:	431c      	orrs	r4, r3
    fb22:	1c39      	adds	r1, r7, #0
    fb24:	2500      	movs	r5, #0
    fb26:	e774      	b.n	fa12 <__aeabi_dadd+0x52>
    fb28:	2380      	movs	r3, #128	; 0x80
    fb2a:	041b      	lsls	r3, r3, #16
    fb2c:	400b      	ands	r3, r1
    fb2e:	1c37      	adds	r7, r6, #0
    fb30:	2b00      	cmp	r3, #0
    fb32:	d000      	beq.n	fb36 <__aeabi_dadd+0x176>
    fb34:	e782      	b.n	fa3c <__aeabi_dadd+0x7c>
    fb36:	4b90      	ldr	r3, [pc, #576]	; (fd78 <__aeabi_dadd+0x3b8>)
    fb38:	0748      	lsls	r0, r1, #29
    fb3a:	08e4      	lsrs	r4, r4, #3
    fb3c:	4304      	orrs	r4, r0
    fb3e:	08c9      	lsrs	r1, r1, #3
    fb40:	429d      	cmp	r5, r3
    fb42:	d048      	beq.n	fbd6 <__aeabi_dadd+0x216>
    fb44:	0309      	lsls	r1, r1, #12
    fb46:	0b0b      	lsrs	r3, r1, #12
    fb48:	e784      	b.n	fa54 <__aeabi_dadd+0x94>
    fb4a:	1aaa      	subs	r2, r5, r2
    fb4c:	4694      	mov	ip, r2
    fb4e:	2a00      	cmp	r2, #0
    fb50:	dc00      	bgt.n	fb54 <__aeabi_dadd+0x194>
    fb52:	e098      	b.n	fc86 <__aeabi_dadd+0x2c6>
    fb54:	4650      	mov	r0, sl
    fb56:	2800      	cmp	r0, #0
    fb58:	d052      	beq.n	fc00 <__aeabi_dadd+0x240>
    fb5a:	4887      	ldr	r0, [pc, #540]	; (fd78 <__aeabi_dadd+0x3b8>)
    fb5c:	4285      	cmp	r5, r0
    fb5e:	d100      	bne.n	fb62 <__aeabi_dadd+0x1a2>
    fb60:	e757      	b.n	fa12 <__aeabi_dadd+0x52>
    fb62:	2080      	movs	r0, #128	; 0x80
    fb64:	0400      	lsls	r0, r0, #16
    fb66:	4303      	orrs	r3, r0
    fb68:	4662      	mov	r2, ip
    fb6a:	2a38      	cmp	r2, #56	; 0x38
    fb6c:	dd00      	ble.n	fb70 <__aeabi_dadd+0x1b0>
    fb6e:	e0fc      	b.n	fd6a <__aeabi_dadd+0x3aa>
    fb70:	2a1f      	cmp	r2, #31
    fb72:	dd00      	ble.n	fb76 <__aeabi_dadd+0x1b6>
    fb74:	e14a      	b.n	fe0c <__aeabi_dadd+0x44c>
    fb76:	2220      	movs	r2, #32
    fb78:	4660      	mov	r0, ip
    fb7a:	1a10      	subs	r0, r2, r0
    fb7c:	1c1a      	adds	r2, r3, #0
    fb7e:	4082      	lsls	r2, r0
    fb80:	4682      	mov	sl, r0
    fb82:	4691      	mov	r9, r2
    fb84:	4658      	mov	r0, fp
    fb86:	4662      	mov	r2, ip
    fb88:	40d0      	lsrs	r0, r2
    fb8a:	464a      	mov	r2, r9
    fb8c:	4302      	orrs	r2, r0
    fb8e:	4690      	mov	r8, r2
    fb90:	4658      	mov	r0, fp
    fb92:	4652      	mov	r2, sl
    fb94:	4090      	lsls	r0, r2
    fb96:	1e42      	subs	r2, r0, #1
    fb98:	4190      	sbcs	r0, r2
    fb9a:	4642      	mov	r2, r8
    fb9c:	4302      	orrs	r2, r0
    fb9e:	4660      	mov	r0, ip
    fba0:	40c3      	lsrs	r3, r0
    fba2:	1912      	adds	r2, r2, r4
    fba4:	42a2      	cmp	r2, r4
    fba6:	41a4      	sbcs	r4, r4
    fba8:	4264      	negs	r4, r4
    fbaa:	1859      	adds	r1, r3, r1
    fbac:	1909      	adds	r1, r1, r4
    fbae:	1c14      	adds	r4, r2, #0
    fbb0:	0208      	lsls	r0, r1, #8
    fbb2:	d400      	bmi.n	fbb6 <__aeabi_dadd+0x1f6>
    fbb4:	e72d      	b.n	fa12 <__aeabi_dadd+0x52>
    fbb6:	4b70      	ldr	r3, [pc, #448]	; (fd78 <__aeabi_dadd+0x3b8>)
    fbb8:	3501      	adds	r5, #1
    fbba:	429d      	cmp	r5, r3
    fbbc:	d100      	bne.n	fbc0 <__aeabi_dadd+0x200>
    fbbe:	e122      	b.n	fe06 <__aeabi_dadd+0x446>
    fbc0:	4b6e      	ldr	r3, [pc, #440]	; (fd7c <__aeabi_dadd+0x3bc>)
    fbc2:	0860      	lsrs	r0, r4, #1
    fbc4:	4019      	ands	r1, r3
    fbc6:	2301      	movs	r3, #1
    fbc8:	4023      	ands	r3, r4
    fbca:	1c1c      	adds	r4, r3, #0
    fbcc:	4304      	orrs	r4, r0
    fbce:	07cb      	lsls	r3, r1, #31
    fbd0:	431c      	orrs	r4, r3
    fbd2:	0849      	lsrs	r1, r1, #1
    fbd4:	e71d      	b.n	fa12 <__aeabi_dadd+0x52>
    fbd6:	1c23      	adds	r3, r4, #0
    fbd8:	430b      	orrs	r3, r1
    fbda:	d03a      	beq.n	fc52 <__aeabi_dadd+0x292>
    fbdc:	2380      	movs	r3, #128	; 0x80
    fbde:	031b      	lsls	r3, r3, #12
    fbe0:	430b      	orrs	r3, r1
    fbe2:	031b      	lsls	r3, r3, #12
    fbe4:	0b1b      	lsrs	r3, r3, #12
    fbe6:	e735      	b.n	fa54 <__aeabi_dadd+0x94>
    fbe8:	3f01      	subs	r7, #1
    fbea:	2f00      	cmp	r7, #0
    fbec:	d165      	bne.n	fcba <__aeabi_dadd+0x2fa>
    fbee:	4658      	mov	r0, fp
    fbf0:	1a22      	subs	r2, r4, r0
    fbf2:	4294      	cmp	r4, r2
    fbf4:	41a4      	sbcs	r4, r4
    fbf6:	4264      	negs	r4, r4
    fbf8:	1ac9      	subs	r1, r1, r3
    fbfa:	1b09      	subs	r1, r1, r4
    fbfc:	1c14      	adds	r4, r2, #0
    fbfe:	e766      	b.n	face <__aeabi_dadd+0x10e>
    fc00:	4658      	mov	r0, fp
    fc02:	4318      	orrs	r0, r3
    fc04:	d100      	bne.n	fc08 <__aeabi_dadd+0x248>
    fc06:	e704      	b.n	fa12 <__aeabi_dadd+0x52>
    fc08:	2201      	movs	r2, #1
    fc0a:	4252      	negs	r2, r2
    fc0c:	4494      	add	ip, r2
    fc0e:	4660      	mov	r0, ip
    fc10:	2800      	cmp	r0, #0
    fc12:	d000      	beq.n	fc16 <__aeabi_dadd+0x256>
    fc14:	e0c5      	b.n	fda2 <__aeabi_dadd+0x3e2>
    fc16:	4658      	mov	r0, fp
    fc18:	1902      	adds	r2, r0, r4
    fc1a:	e7c3      	b.n	fba4 <__aeabi_dadd+0x1e4>
    fc1c:	2f00      	cmp	r7, #0
    fc1e:	d173      	bne.n	fd08 <__aeabi_dadd+0x348>
    fc20:	1c68      	adds	r0, r5, #1
    fc22:	0540      	lsls	r0, r0, #21
    fc24:	0d40      	lsrs	r0, r0, #21
    fc26:	2801      	cmp	r0, #1
    fc28:	dc00      	bgt.n	fc2c <__aeabi_dadd+0x26c>
    fc2a:	e0de      	b.n	fdea <__aeabi_dadd+0x42a>
    fc2c:	465a      	mov	r2, fp
    fc2e:	1aa2      	subs	r2, r4, r2
    fc30:	4294      	cmp	r4, r2
    fc32:	41bf      	sbcs	r7, r7
    fc34:	1ac8      	subs	r0, r1, r3
    fc36:	427f      	negs	r7, r7
    fc38:	1bc7      	subs	r7, r0, r7
    fc3a:	0238      	lsls	r0, r7, #8
    fc3c:	d400      	bmi.n	fc40 <__aeabi_dadd+0x280>
    fc3e:	e089      	b.n	fd54 <__aeabi_dadd+0x394>
    fc40:	465a      	mov	r2, fp
    fc42:	1b14      	subs	r4, r2, r4
    fc44:	45a3      	cmp	fp, r4
    fc46:	4192      	sbcs	r2, r2
    fc48:	1a59      	subs	r1, r3, r1
    fc4a:	4252      	negs	r2, r2
    fc4c:	1a8f      	subs	r7, r1, r2
    fc4e:	4666      	mov	r6, ip
    fc50:	e741      	b.n	fad6 <__aeabi_dadd+0x116>
    fc52:	2300      	movs	r3, #0
    fc54:	2400      	movs	r4, #0
    fc56:	e6fd      	b.n	fa54 <__aeabi_dadd+0x94>
    fc58:	1c27      	adds	r7, r4, #0
    fc5a:	3828      	subs	r0, #40	; 0x28
    fc5c:	4087      	lsls	r7, r0
    fc5e:	2400      	movs	r4, #0
    fc60:	4295      	cmp	r5, r2
    fc62:	dc00      	bgt.n	fc66 <__aeabi_dadd+0x2a6>
    fc64:	e74c      	b.n	fb00 <__aeabi_dadd+0x140>
    fc66:	4945      	ldr	r1, [pc, #276]	; (fd7c <__aeabi_dadd+0x3bc>)
    fc68:	1aad      	subs	r5, r5, r2
    fc6a:	4039      	ands	r1, r7
    fc6c:	e6d1      	b.n	fa12 <__aeabi_dadd+0x52>
    fc6e:	1c20      	adds	r0, r4, #0
    fc70:	f7fa fcdc 	bl	a62c <__clzsi2>
    fc74:	3020      	adds	r0, #32
    fc76:	e734      	b.n	fae2 <__aeabi_dadd+0x122>
    fc78:	465a      	mov	r2, fp
    fc7a:	431a      	orrs	r2, r3
    fc7c:	1e53      	subs	r3, r2, #1
    fc7e:	419a      	sbcs	r2, r3
    fc80:	b2d2      	uxtb	r2, r2
    fc82:	2700      	movs	r7, #0
    fc84:	e71c      	b.n	fac0 <__aeabi_dadd+0x100>
    fc86:	2a00      	cmp	r2, #0
    fc88:	d000      	beq.n	fc8c <__aeabi_dadd+0x2cc>
    fc8a:	e0dc      	b.n	fe46 <__aeabi_dadd+0x486>
    fc8c:	1c68      	adds	r0, r5, #1
    fc8e:	0542      	lsls	r2, r0, #21
    fc90:	0d52      	lsrs	r2, r2, #21
    fc92:	2a01      	cmp	r2, #1
    fc94:	dc00      	bgt.n	fc98 <__aeabi_dadd+0x2d8>
    fc96:	e08d      	b.n	fdb4 <__aeabi_dadd+0x3f4>
    fc98:	4d37      	ldr	r5, [pc, #220]	; (fd78 <__aeabi_dadd+0x3b8>)
    fc9a:	42a8      	cmp	r0, r5
    fc9c:	d100      	bne.n	fca0 <__aeabi_dadd+0x2e0>
    fc9e:	e0f3      	b.n	fe88 <__aeabi_dadd+0x4c8>
    fca0:	465d      	mov	r5, fp
    fca2:	192a      	adds	r2, r5, r4
    fca4:	42a2      	cmp	r2, r4
    fca6:	41a4      	sbcs	r4, r4
    fca8:	4264      	negs	r4, r4
    fcaa:	1859      	adds	r1, r3, r1
    fcac:	1909      	adds	r1, r1, r4
    fcae:	07cc      	lsls	r4, r1, #31
    fcb0:	0852      	lsrs	r2, r2, #1
    fcb2:	4314      	orrs	r4, r2
    fcb4:	0849      	lsrs	r1, r1, #1
    fcb6:	1c05      	adds	r5, r0, #0
    fcb8:	e6ab      	b.n	fa12 <__aeabi_dadd+0x52>
    fcba:	482f      	ldr	r0, [pc, #188]	; (fd78 <__aeabi_dadd+0x3b8>)
    fcbc:	4285      	cmp	r5, r0
    fcbe:	d000      	beq.n	fcc2 <__aeabi_dadd+0x302>
    fcc0:	e6e6      	b.n	fa90 <__aeabi_dadd+0xd0>
    fcc2:	e6a6      	b.n	fa12 <__aeabi_dadd+0x52>
    fcc4:	1c2b      	adds	r3, r5, #0
    fcc6:	3b1f      	subs	r3, #31
    fcc8:	1c3a      	adds	r2, r7, #0
    fcca:	40da      	lsrs	r2, r3
    fccc:	1c13      	adds	r3, r2, #0
    fcce:	2920      	cmp	r1, #32
    fcd0:	d06c      	beq.n	fdac <__aeabi_dadd+0x3ec>
    fcd2:	223f      	movs	r2, #63	; 0x3f
    fcd4:	1b55      	subs	r5, r2, r5
    fcd6:	40af      	lsls	r7, r5
    fcd8:	433c      	orrs	r4, r7
    fcda:	1e60      	subs	r0, r4, #1
    fcdc:	4184      	sbcs	r4, r0
    fcde:	431c      	orrs	r4, r3
    fce0:	2100      	movs	r1, #0
    fce2:	2500      	movs	r5, #0
    fce4:	e695      	b.n	fa12 <__aeabi_dadd+0x52>
    fce6:	1c38      	adds	r0, r7, #0
    fce8:	3820      	subs	r0, #32
    fcea:	1c1a      	adds	r2, r3, #0
    fcec:	40c2      	lsrs	r2, r0
    fcee:	1c10      	adds	r0, r2, #0
    fcf0:	2f20      	cmp	r7, #32
    fcf2:	d05d      	beq.n	fdb0 <__aeabi_dadd+0x3f0>
    fcf4:	2240      	movs	r2, #64	; 0x40
    fcf6:	1bd7      	subs	r7, r2, r7
    fcf8:	40bb      	lsls	r3, r7
    fcfa:	465a      	mov	r2, fp
    fcfc:	431a      	orrs	r2, r3
    fcfe:	1e53      	subs	r3, r2, #1
    fd00:	419a      	sbcs	r2, r3
    fd02:	4302      	orrs	r2, r0
    fd04:	2700      	movs	r7, #0
    fd06:	e6db      	b.n	fac0 <__aeabi_dadd+0x100>
    fd08:	2d00      	cmp	r5, #0
    fd0a:	d03b      	beq.n	fd84 <__aeabi_dadd+0x3c4>
    fd0c:	4d1a      	ldr	r5, [pc, #104]	; (fd78 <__aeabi_dadd+0x3b8>)
    fd0e:	45aa      	cmp	sl, r5
    fd10:	d100      	bne.n	fd14 <__aeabi_dadd+0x354>
    fd12:	e093      	b.n	fe3c <__aeabi_dadd+0x47c>
    fd14:	2580      	movs	r5, #128	; 0x80
    fd16:	042d      	lsls	r5, r5, #16
    fd18:	427f      	negs	r7, r7
    fd1a:	4329      	orrs	r1, r5
    fd1c:	2f38      	cmp	r7, #56	; 0x38
    fd1e:	dd00      	ble.n	fd22 <__aeabi_dadd+0x362>
    fd20:	e0ac      	b.n	fe7c <__aeabi_dadd+0x4bc>
    fd22:	2f1f      	cmp	r7, #31
    fd24:	dd00      	ble.n	fd28 <__aeabi_dadd+0x368>
    fd26:	e129      	b.n	ff7c <__aeabi_dadd+0x5bc>
    fd28:	2520      	movs	r5, #32
    fd2a:	1bed      	subs	r5, r5, r7
    fd2c:	1c08      	adds	r0, r1, #0
    fd2e:	1c26      	adds	r6, r4, #0
    fd30:	40a8      	lsls	r0, r5
    fd32:	40fe      	lsrs	r6, r7
    fd34:	40ac      	lsls	r4, r5
    fd36:	4306      	orrs	r6, r0
    fd38:	1e65      	subs	r5, r4, #1
    fd3a:	41ac      	sbcs	r4, r5
    fd3c:	4334      	orrs	r4, r6
    fd3e:	40f9      	lsrs	r1, r7
    fd40:	465d      	mov	r5, fp
    fd42:	1b2c      	subs	r4, r5, r4
    fd44:	45a3      	cmp	fp, r4
    fd46:	4192      	sbcs	r2, r2
    fd48:	1a5b      	subs	r3, r3, r1
    fd4a:	4252      	negs	r2, r2
    fd4c:	1a99      	subs	r1, r3, r2
    fd4e:	4655      	mov	r5, sl
    fd50:	4666      	mov	r6, ip
    fd52:	e6bc      	b.n	face <__aeabi_dadd+0x10e>
    fd54:	1c13      	adds	r3, r2, #0
    fd56:	433b      	orrs	r3, r7
    fd58:	1c14      	adds	r4, r2, #0
    fd5a:	2b00      	cmp	r3, #0
    fd5c:	d000      	beq.n	fd60 <__aeabi_dadd+0x3a0>
    fd5e:	e6ba      	b.n	fad6 <__aeabi_dadd+0x116>
    fd60:	2700      	movs	r7, #0
    fd62:	2100      	movs	r1, #0
    fd64:	2400      	movs	r4, #0
    fd66:	2500      	movs	r5, #0
    fd68:	e6e5      	b.n	fb36 <__aeabi_dadd+0x176>
    fd6a:	465a      	mov	r2, fp
    fd6c:	431a      	orrs	r2, r3
    fd6e:	1e53      	subs	r3, r2, #1
    fd70:	419a      	sbcs	r2, r3
    fd72:	b2d2      	uxtb	r2, r2
    fd74:	2300      	movs	r3, #0
    fd76:	e714      	b.n	fba2 <__aeabi_dadd+0x1e2>
    fd78:	000007ff 	.word	0x000007ff
    fd7c:	ff7fffff 	.word	0xff7fffff
    fd80:	800fffff 	.word	0x800fffff
    fd84:	1c0d      	adds	r5, r1, #0
    fd86:	4325      	orrs	r5, r4
    fd88:	d058      	beq.n	fe3c <__aeabi_dadd+0x47c>
    fd8a:	43ff      	mvns	r7, r7
    fd8c:	2f00      	cmp	r7, #0
    fd8e:	d151      	bne.n	fe34 <__aeabi_dadd+0x474>
    fd90:	1b04      	subs	r4, r0, r4
    fd92:	45a3      	cmp	fp, r4
    fd94:	4192      	sbcs	r2, r2
    fd96:	1a59      	subs	r1, r3, r1
    fd98:	4252      	negs	r2, r2
    fd9a:	1a89      	subs	r1, r1, r2
    fd9c:	4655      	mov	r5, sl
    fd9e:	4666      	mov	r6, ip
    fda0:	e695      	b.n	face <__aeabi_dadd+0x10e>
    fda2:	4896      	ldr	r0, [pc, #600]	; (fffc <__aeabi_dadd+0x63c>)
    fda4:	4285      	cmp	r5, r0
    fda6:	d000      	beq.n	fdaa <__aeabi_dadd+0x3ea>
    fda8:	e6de      	b.n	fb68 <__aeabi_dadd+0x1a8>
    fdaa:	e632      	b.n	fa12 <__aeabi_dadd+0x52>
    fdac:	2700      	movs	r7, #0
    fdae:	e793      	b.n	fcd8 <__aeabi_dadd+0x318>
    fdb0:	2300      	movs	r3, #0
    fdb2:	e7a2      	b.n	fcfa <__aeabi_dadd+0x33a>
    fdb4:	1c08      	adds	r0, r1, #0
    fdb6:	4320      	orrs	r0, r4
    fdb8:	2d00      	cmp	r5, #0
    fdba:	d000      	beq.n	fdbe <__aeabi_dadd+0x3fe>
    fdbc:	e0c4      	b.n	ff48 <__aeabi_dadd+0x588>
    fdbe:	2800      	cmp	r0, #0
    fdc0:	d100      	bne.n	fdc4 <__aeabi_dadd+0x404>
    fdc2:	e0f7      	b.n	ffb4 <__aeabi_dadd+0x5f4>
    fdc4:	4658      	mov	r0, fp
    fdc6:	4318      	orrs	r0, r3
    fdc8:	d100      	bne.n	fdcc <__aeabi_dadd+0x40c>
    fdca:	e622      	b.n	fa12 <__aeabi_dadd+0x52>
    fdcc:	4658      	mov	r0, fp
    fdce:	1902      	adds	r2, r0, r4
    fdd0:	42a2      	cmp	r2, r4
    fdd2:	41a4      	sbcs	r4, r4
    fdd4:	4264      	negs	r4, r4
    fdd6:	1859      	adds	r1, r3, r1
    fdd8:	1909      	adds	r1, r1, r4
    fdda:	1c14      	adds	r4, r2, #0
    fddc:	020a      	lsls	r2, r1, #8
    fdde:	d400      	bmi.n	fde2 <__aeabi_dadd+0x422>
    fde0:	e617      	b.n	fa12 <__aeabi_dadd+0x52>
    fde2:	4b87      	ldr	r3, [pc, #540]	; (10000 <__aeabi_dadd+0x640>)
    fde4:	2501      	movs	r5, #1
    fde6:	4019      	ands	r1, r3
    fde8:	e613      	b.n	fa12 <__aeabi_dadd+0x52>
    fdea:	1c08      	adds	r0, r1, #0
    fdec:	4320      	orrs	r0, r4
    fdee:	2d00      	cmp	r5, #0
    fdf0:	d139      	bne.n	fe66 <__aeabi_dadd+0x4a6>
    fdf2:	2800      	cmp	r0, #0
    fdf4:	d171      	bne.n	feda <__aeabi_dadd+0x51a>
    fdf6:	4659      	mov	r1, fp
    fdf8:	4319      	orrs	r1, r3
    fdfa:	d003      	beq.n	fe04 <__aeabi_dadd+0x444>
    fdfc:	1c19      	adds	r1, r3, #0
    fdfe:	465c      	mov	r4, fp
    fe00:	4666      	mov	r6, ip
    fe02:	e606      	b.n	fa12 <__aeabi_dadd+0x52>
    fe04:	2700      	movs	r7, #0
    fe06:	2100      	movs	r1, #0
    fe08:	2400      	movs	r4, #0
    fe0a:	e694      	b.n	fb36 <__aeabi_dadd+0x176>
    fe0c:	4660      	mov	r0, ip
    fe0e:	3820      	subs	r0, #32
    fe10:	1c1a      	adds	r2, r3, #0
    fe12:	40c2      	lsrs	r2, r0
    fe14:	4660      	mov	r0, ip
    fe16:	4691      	mov	r9, r2
    fe18:	2820      	cmp	r0, #32
    fe1a:	d100      	bne.n	fe1e <__aeabi_dadd+0x45e>
    fe1c:	e0ac      	b.n	ff78 <__aeabi_dadd+0x5b8>
    fe1e:	2240      	movs	r2, #64	; 0x40
    fe20:	1a12      	subs	r2, r2, r0
    fe22:	4093      	lsls	r3, r2
    fe24:	465a      	mov	r2, fp
    fe26:	431a      	orrs	r2, r3
    fe28:	1e53      	subs	r3, r2, #1
    fe2a:	419a      	sbcs	r2, r3
    fe2c:	464b      	mov	r3, r9
    fe2e:	431a      	orrs	r2, r3
    fe30:	2300      	movs	r3, #0
    fe32:	e6b6      	b.n	fba2 <__aeabi_dadd+0x1e2>
    fe34:	4d71      	ldr	r5, [pc, #452]	; (fffc <__aeabi_dadd+0x63c>)
    fe36:	45aa      	cmp	sl, r5
    fe38:	d000      	beq.n	fe3c <__aeabi_dadd+0x47c>
    fe3a:	e76f      	b.n	fd1c <__aeabi_dadd+0x35c>
    fe3c:	1c19      	adds	r1, r3, #0
    fe3e:	465c      	mov	r4, fp
    fe40:	4655      	mov	r5, sl
    fe42:	4666      	mov	r6, ip
    fe44:	e5e5      	b.n	fa12 <__aeabi_dadd+0x52>
    fe46:	2d00      	cmp	r5, #0
    fe48:	d122      	bne.n	fe90 <__aeabi_dadd+0x4d0>
    fe4a:	1c0d      	adds	r5, r1, #0
    fe4c:	4325      	orrs	r5, r4
    fe4e:	d077      	beq.n	ff40 <__aeabi_dadd+0x580>
    fe50:	43d5      	mvns	r5, r2
    fe52:	2d00      	cmp	r5, #0
    fe54:	d171      	bne.n	ff3a <__aeabi_dadd+0x57a>
    fe56:	445c      	add	r4, fp
    fe58:	455c      	cmp	r4, fp
    fe5a:	4192      	sbcs	r2, r2
    fe5c:	1859      	adds	r1, r3, r1
    fe5e:	4252      	negs	r2, r2
    fe60:	1889      	adds	r1, r1, r2
    fe62:	4655      	mov	r5, sl
    fe64:	e6a4      	b.n	fbb0 <__aeabi_dadd+0x1f0>
    fe66:	2800      	cmp	r0, #0
    fe68:	d14d      	bne.n	ff06 <__aeabi_dadd+0x546>
    fe6a:	4659      	mov	r1, fp
    fe6c:	4319      	orrs	r1, r3
    fe6e:	d100      	bne.n	fe72 <__aeabi_dadd+0x4b2>
    fe70:	e094      	b.n	ff9c <__aeabi_dadd+0x5dc>
    fe72:	1c19      	adds	r1, r3, #0
    fe74:	465c      	mov	r4, fp
    fe76:	4666      	mov	r6, ip
    fe78:	4d60      	ldr	r5, [pc, #384]	; (fffc <__aeabi_dadd+0x63c>)
    fe7a:	e5ca      	b.n	fa12 <__aeabi_dadd+0x52>
    fe7c:	430c      	orrs	r4, r1
    fe7e:	1e61      	subs	r1, r4, #1
    fe80:	418c      	sbcs	r4, r1
    fe82:	b2e4      	uxtb	r4, r4
    fe84:	2100      	movs	r1, #0
    fe86:	e75b      	b.n	fd40 <__aeabi_dadd+0x380>
    fe88:	1c05      	adds	r5, r0, #0
    fe8a:	2100      	movs	r1, #0
    fe8c:	2400      	movs	r4, #0
    fe8e:	e652      	b.n	fb36 <__aeabi_dadd+0x176>
    fe90:	4d5a      	ldr	r5, [pc, #360]	; (fffc <__aeabi_dadd+0x63c>)
    fe92:	45aa      	cmp	sl, r5
    fe94:	d054      	beq.n	ff40 <__aeabi_dadd+0x580>
    fe96:	4255      	negs	r5, r2
    fe98:	2280      	movs	r2, #128	; 0x80
    fe9a:	0410      	lsls	r0, r2, #16
    fe9c:	4301      	orrs	r1, r0
    fe9e:	2d38      	cmp	r5, #56	; 0x38
    fea0:	dd00      	ble.n	fea4 <__aeabi_dadd+0x4e4>
    fea2:	e081      	b.n	ffa8 <__aeabi_dadd+0x5e8>
    fea4:	2d1f      	cmp	r5, #31
    fea6:	dd00      	ble.n	feaa <__aeabi_dadd+0x4ea>
    fea8:	e092      	b.n	ffd0 <__aeabi_dadd+0x610>
    feaa:	2220      	movs	r2, #32
    feac:	1b50      	subs	r0, r2, r5
    feae:	1c0a      	adds	r2, r1, #0
    feb0:	4684      	mov	ip, r0
    feb2:	4082      	lsls	r2, r0
    feb4:	1c20      	adds	r0, r4, #0
    feb6:	40e8      	lsrs	r0, r5
    feb8:	4302      	orrs	r2, r0
    feba:	4690      	mov	r8, r2
    febc:	4662      	mov	r2, ip
    febe:	4094      	lsls	r4, r2
    fec0:	1e60      	subs	r0, r4, #1
    fec2:	4184      	sbcs	r4, r0
    fec4:	4642      	mov	r2, r8
    fec6:	4314      	orrs	r4, r2
    fec8:	40e9      	lsrs	r1, r5
    feca:	445c      	add	r4, fp
    fecc:	455c      	cmp	r4, fp
    fece:	4192      	sbcs	r2, r2
    fed0:	18cb      	adds	r3, r1, r3
    fed2:	4252      	negs	r2, r2
    fed4:	1899      	adds	r1, r3, r2
    fed6:	4655      	mov	r5, sl
    fed8:	e66a      	b.n	fbb0 <__aeabi_dadd+0x1f0>
    feda:	4658      	mov	r0, fp
    fedc:	4318      	orrs	r0, r3
    fede:	d100      	bne.n	fee2 <__aeabi_dadd+0x522>
    fee0:	e597      	b.n	fa12 <__aeabi_dadd+0x52>
    fee2:	4658      	mov	r0, fp
    fee4:	1a27      	subs	r7, r4, r0
    fee6:	42bc      	cmp	r4, r7
    fee8:	4192      	sbcs	r2, r2
    feea:	1ac8      	subs	r0, r1, r3
    feec:	4252      	negs	r2, r2
    feee:	1a80      	subs	r0, r0, r2
    fef0:	0202      	lsls	r2, r0, #8
    fef2:	d566      	bpl.n	ffc2 <__aeabi_dadd+0x602>
    fef4:	4658      	mov	r0, fp
    fef6:	1b04      	subs	r4, r0, r4
    fef8:	45a3      	cmp	fp, r4
    fefa:	4192      	sbcs	r2, r2
    fefc:	1a59      	subs	r1, r3, r1
    fefe:	4252      	negs	r2, r2
    ff00:	1a89      	subs	r1, r1, r2
    ff02:	4666      	mov	r6, ip
    ff04:	e585      	b.n	fa12 <__aeabi_dadd+0x52>
    ff06:	4658      	mov	r0, fp
    ff08:	4318      	orrs	r0, r3
    ff0a:	d033      	beq.n	ff74 <__aeabi_dadd+0x5b4>
    ff0c:	0748      	lsls	r0, r1, #29
    ff0e:	08e4      	lsrs	r4, r4, #3
    ff10:	4304      	orrs	r4, r0
    ff12:	2080      	movs	r0, #128	; 0x80
    ff14:	08c9      	lsrs	r1, r1, #3
    ff16:	0300      	lsls	r0, r0, #12
    ff18:	4201      	tst	r1, r0
    ff1a:	d008      	beq.n	ff2e <__aeabi_dadd+0x56e>
    ff1c:	08dd      	lsrs	r5, r3, #3
    ff1e:	4205      	tst	r5, r0
    ff20:	d105      	bne.n	ff2e <__aeabi_dadd+0x56e>
    ff22:	4659      	mov	r1, fp
    ff24:	08ca      	lsrs	r2, r1, #3
    ff26:	075c      	lsls	r4, r3, #29
    ff28:	4314      	orrs	r4, r2
    ff2a:	1c29      	adds	r1, r5, #0
    ff2c:	4666      	mov	r6, ip
    ff2e:	0f63      	lsrs	r3, r4, #29
    ff30:	00c9      	lsls	r1, r1, #3
    ff32:	4319      	orrs	r1, r3
    ff34:	00e4      	lsls	r4, r4, #3
    ff36:	4d31      	ldr	r5, [pc, #196]	; (fffc <__aeabi_dadd+0x63c>)
    ff38:	e56b      	b.n	fa12 <__aeabi_dadd+0x52>
    ff3a:	4a30      	ldr	r2, [pc, #192]	; (fffc <__aeabi_dadd+0x63c>)
    ff3c:	4592      	cmp	sl, r2
    ff3e:	d1ae      	bne.n	fe9e <__aeabi_dadd+0x4de>
    ff40:	1c19      	adds	r1, r3, #0
    ff42:	465c      	mov	r4, fp
    ff44:	4655      	mov	r5, sl
    ff46:	e564      	b.n	fa12 <__aeabi_dadd+0x52>
    ff48:	2800      	cmp	r0, #0
    ff4a:	d036      	beq.n	ffba <__aeabi_dadd+0x5fa>
    ff4c:	4658      	mov	r0, fp
    ff4e:	4318      	orrs	r0, r3
    ff50:	d010      	beq.n	ff74 <__aeabi_dadd+0x5b4>
    ff52:	2580      	movs	r5, #128	; 0x80
    ff54:	0748      	lsls	r0, r1, #29
    ff56:	08e4      	lsrs	r4, r4, #3
    ff58:	08c9      	lsrs	r1, r1, #3
    ff5a:	032d      	lsls	r5, r5, #12
    ff5c:	4304      	orrs	r4, r0
    ff5e:	4229      	tst	r1, r5
    ff60:	d0e5      	beq.n	ff2e <__aeabi_dadd+0x56e>
    ff62:	08d8      	lsrs	r0, r3, #3
    ff64:	4228      	tst	r0, r5
    ff66:	d1e2      	bne.n	ff2e <__aeabi_dadd+0x56e>
    ff68:	465d      	mov	r5, fp
    ff6a:	08ea      	lsrs	r2, r5, #3
    ff6c:	075c      	lsls	r4, r3, #29
    ff6e:	4314      	orrs	r4, r2
    ff70:	1c01      	adds	r1, r0, #0
    ff72:	e7dc      	b.n	ff2e <__aeabi_dadd+0x56e>
    ff74:	4d21      	ldr	r5, [pc, #132]	; (fffc <__aeabi_dadd+0x63c>)
    ff76:	e54c      	b.n	fa12 <__aeabi_dadd+0x52>
    ff78:	2300      	movs	r3, #0
    ff7a:	e753      	b.n	fe24 <__aeabi_dadd+0x464>
    ff7c:	1c3d      	adds	r5, r7, #0
    ff7e:	3d20      	subs	r5, #32
    ff80:	1c0a      	adds	r2, r1, #0
    ff82:	40ea      	lsrs	r2, r5
    ff84:	1c15      	adds	r5, r2, #0
    ff86:	2f20      	cmp	r7, #32
    ff88:	d034      	beq.n	fff4 <__aeabi_dadd+0x634>
    ff8a:	2640      	movs	r6, #64	; 0x40
    ff8c:	1bf7      	subs	r7, r6, r7
    ff8e:	40b9      	lsls	r1, r7
    ff90:	430c      	orrs	r4, r1
    ff92:	1e61      	subs	r1, r4, #1
    ff94:	418c      	sbcs	r4, r1
    ff96:	432c      	orrs	r4, r5
    ff98:	2100      	movs	r1, #0
    ff9a:	e6d1      	b.n	fd40 <__aeabi_dadd+0x380>
    ff9c:	2408      	movs	r4, #8
    ff9e:	2700      	movs	r7, #0
    ffa0:	4918      	ldr	r1, [pc, #96]	; (10004 <__aeabi_dadd+0x644>)
    ffa2:	4264      	negs	r4, r4
    ffa4:	4d15      	ldr	r5, [pc, #84]	; (fffc <__aeabi_dadd+0x63c>)
    ffa6:	e5c6      	b.n	fb36 <__aeabi_dadd+0x176>
    ffa8:	430c      	orrs	r4, r1
    ffaa:	1e61      	subs	r1, r4, #1
    ffac:	418c      	sbcs	r4, r1
    ffae:	b2e4      	uxtb	r4, r4
    ffb0:	2100      	movs	r1, #0
    ffb2:	e78a      	b.n	feca <__aeabi_dadd+0x50a>
    ffb4:	1c19      	adds	r1, r3, #0
    ffb6:	465c      	mov	r4, fp
    ffb8:	e52b      	b.n	fa12 <__aeabi_dadd+0x52>
    ffba:	1c19      	adds	r1, r3, #0
    ffbc:	465c      	mov	r4, fp
    ffbe:	4d0f      	ldr	r5, [pc, #60]	; (fffc <__aeabi_dadd+0x63c>)
    ffc0:	e527      	b.n	fa12 <__aeabi_dadd+0x52>
    ffc2:	1c03      	adds	r3, r0, #0
    ffc4:	433b      	orrs	r3, r7
    ffc6:	d100      	bne.n	ffca <__aeabi_dadd+0x60a>
    ffc8:	e71c      	b.n	fe04 <__aeabi_dadd+0x444>
    ffca:	1c01      	adds	r1, r0, #0
    ffcc:	1c3c      	adds	r4, r7, #0
    ffce:	e520      	b.n	fa12 <__aeabi_dadd+0x52>
    ffd0:	2020      	movs	r0, #32
    ffd2:	4240      	negs	r0, r0
    ffd4:	1940      	adds	r0, r0, r5
    ffd6:	1c0a      	adds	r2, r1, #0
    ffd8:	40c2      	lsrs	r2, r0
    ffda:	4690      	mov	r8, r2
    ffdc:	2d20      	cmp	r5, #32
    ffde:	d00b      	beq.n	fff8 <__aeabi_dadd+0x638>
    ffe0:	2040      	movs	r0, #64	; 0x40
    ffe2:	1b45      	subs	r5, r0, r5
    ffe4:	40a9      	lsls	r1, r5
    ffe6:	430c      	orrs	r4, r1
    ffe8:	1e61      	subs	r1, r4, #1
    ffea:	418c      	sbcs	r4, r1
    ffec:	4645      	mov	r5, r8
    ffee:	432c      	orrs	r4, r5
    fff0:	2100      	movs	r1, #0
    fff2:	e76a      	b.n	feca <__aeabi_dadd+0x50a>
    fff4:	2100      	movs	r1, #0
    fff6:	e7cb      	b.n	ff90 <__aeabi_dadd+0x5d0>
    fff8:	2100      	movs	r1, #0
    fffa:	e7f4      	b.n	ffe6 <__aeabi_dadd+0x626>
    fffc:	000007ff 	.word	0x000007ff
   10000:	ff7fffff 	.word	0xff7fffff
   10004:	007fffff 	.word	0x007fffff

00010008 <__aeabi_ddiv>:
   10008:	b5f0      	push	{r4, r5, r6, r7, lr}
   1000a:	4656      	mov	r6, sl
   1000c:	4644      	mov	r4, r8
   1000e:	465f      	mov	r7, fp
   10010:	464d      	mov	r5, r9
   10012:	b4f0      	push	{r4, r5, r6, r7}
   10014:	1c1f      	adds	r7, r3, #0
   10016:	030b      	lsls	r3, r1, #12
   10018:	0b1b      	lsrs	r3, r3, #12
   1001a:	4698      	mov	r8, r3
   1001c:	004b      	lsls	r3, r1, #1
   1001e:	b087      	sub	sp, #28
   10020:	1c04      	adds	r4, r0, #0
   10022:	4681      	mov	r9, r0
   10024:	0d5b      	lsrs	r3, r3, #21
   10026:	0fc8      	lsrs	r0, r1, #31
   10028:	1c16      	adds	r6, r2, #0
   1002a:	469a      	mov	sl, r3
   1002c:	9000      	str	r0, [sp, #0]
   1002e:	2b00      	cmp	r3, #0
   10030:	d051      	beq.n	100d6 <__aeabi_ddiv+0xce>
   10032:	4b6b      	ldr	r3, [pc, #428]	; (101e0 <__aeabi_ddiv+0x1d8>)
   10034:	459a      	cmp	sl, r3
   10036:	d031      	beq.n	1009c <__aeabi_ddiv+0x94>
   10038:	2280      	movs	r2, #128	; 0x80
   1003a:	4641      	mov	r1, r8
   1003c:	0352      	lsls	r2, r2, #13
   1003e:	430a      	orrs	r2, r1
   10040:	0f63      	lsrs	r3, r4, #29
   10042:	00d2      	lsls	r2, r2, #3
   10044:	431a      	orrs	r2, r3
   10046:	4b67      	ldr	r3, [pc, #412]	; (101e4 <__aeabi_ddiv+0x1dc>)
   10048:	4690      	mov	r8, r2
   1004a:	2500      	movs	r5, #0
   1004c:	00e2      	lsls	r2, r4, #3
   1004e:	4691      	mov	r9, r2
   10050:	449a      	add	sl, r3
   10052:	2400      	movs	r4, #0
   10054:	9502      	str	r5, [sp, #8]
   10056:	033b      	lsls	r3, r7, #12
   10058:	0b1b      	lsrs	r3, r3, #12
   1005a:	469b      	mov	fp, r3
   1005c:	0ffd      	lsrs	r5, r7, #31
   1005e:	007b      	lsls	r3, r7, #1
   10060:	1c31      	adds	r1, r6, #0
   10062:	0d5b      	lsrs	r3, r3, #21
   10064:	9501      	str	r5, [sp, #4]
   10066:	d060      	beq.n	1012a <__aeabi_ddiv+0x122>
   10068:	4a5d      	ldr	r2, [pc, #372]	; (101e0 <__aeabi_ddiv+0x1d8>)
   1006a:	4293      	cmp	r3, r2
   1006c:	d054      	beq.n	10118 <__aeabi_ddiv+0x110>
   1006e:	2180      	movs	r1, #128	; 0x80
   10070:	4658      	mov	r0, fp
   10072:	0349      	lsls	r1, r1, #13
   10074:	4301      	orrs	r1, r0
   10076:	0f72      	lsrs	r2, r6, #29
   10078:	00c9      	lsls	r1, r1, #3
   1007a:	4311      	orrs	r1, r2
   1007c:	4a59      	ldr	r2, [pc, #356]	; (101e4 <__aeabi_ddiv+0x1dc>)
   1007e:	468b      	mov	fp, r1
   10080:	189b      	adds	r3, r3, r2
   10082:	00f1      	lsls	r1, r6, #3
   10084:	2000      	movs	r0, #0
   10086:	9a00      	ldr	r2, [sp, #0]
   10088:	4304      	orrs	r4, r0
   1008a:	406a      	eors	r2, r5
   1008c:	9203      	str	r2, [sp, #12]
   1008e:	2c0f      	cmp	r4, #15
   10090:	d900      	bls.n	10094 <__aeabi_ddiv+0x8c>
   10092:	e0b1      	b.n	101f8 <__aeabi_ddiv+0x1f0>
   10094:	4e54      	ldr	r6, [pc, #336]	; (101e8 <__aeabi_ddiv+0x1e0>)
   10096:	00a4      	lsls	r4, r4, #2
   10098:	5934      	ldr	r4, [r6, r4]
   1009a:	46a7      	mov	pc, r4
   1009c:	4640      	mov	r0, r8
   1009e:	4304      	orrs	r4, r0
   100a0:	d16e      	bne.n	10180 <__aeabi_ddiv+0x178>
   100a2:	2100      	movs	r1, #0
   100a4:	2502      	movs	r5, #2
   100a6:	2408      	movs	r4, #8
   100a8:	4688      	mov	r8, r1
   100aa:	4689      	mov	r9, r1
   100ac:	9502      	str	r5, [sp, #8]
   100ae:	e7d2      	b.n	10056 <__aeabi_ddiv+0x4e>
   100b0:	9c00      	ldr	r4, [sp, #0]
   100b2:	9802      	ldr	r0, [sp, #8]
   100b4:	46c3      	mov	fp, r8
   100b6:	4649      	mov	r1, r9
   100b8:	9401      	str	r4, [sp, #4]
   100ba:	2802      	cmp	r0, #2
   100bc:	d064      	beq.n	10188 <__aeabi_ddiv+0x180>
   100be:	2803      	cmp	r0, #3
   100c0:	d100      	bne.n	100c4 <__aeabi_ddiv+0xbc>
   100c2:	e2af      	b.n	10624 <__aeabi_ddiv+0x61c>
   100c4:	2801      	cmp	r0, #1
   100c6:	d000      	beq.n	100ca <__aeabi_ddiv+0xc2>
   100c8:	e23c      	b.n	10544 <__aeabi_ddiv+0x53c>
   100ca:	9a01      	ldr	r2, [sp, #4]
   100cc:	2400      	movs	r4, #0
   100ce:	4002      	ands	r2, r0
   100d0:	2500      	movs	r5, #0
   100d2:	46a1      	mov	r9, r4
   100d4:	e060      	b.n	10198 <__aeabi_ddiv+0x190>
   100d6:	4643      	mov	r3, r8
   100d8:	4323      	orrs	r3, r4
   100da:	d04a      	beq.n	10172 <__aeabi_ddiv+0x16a>
   100dc:	4640      	mov	r0, r8
   100de:	2800      	cmp	r0, #0
   100e0:	d100      	bne.n	100e4 <__aeabi_ddiv+0xdc>
   100e2:	e1c4      	b.n	1046e <__aeabi_ddiv+0x466>
   100e4:	f7fa faa2 	bl	a62c <__clzsi2>
   100e8:	1e03      	subs	r3, r0, #0
   100ea:	2b27      	cmp	r3, #39	; 0x27
   100ec:	dd00      	ble.n	100f0 <__aeabi_ddiv+0xe8>
   100ee:	e1b7      	b.n	10460 <__aeabi_ddiv+0x458>
   100f0:	2128      	movs	r1, #40	; 0x28
   100f2:	1a0d      	subs	r5, r1, r0
   100f4:	1c21      	adds	r1, r4, #0
   100f6:	3b08      	subs	r3, #8
   100f8:	4642      	mov	r2, r8
   100fa:	40e9      	lsrs	r1, r5
   100fc:	409a      	lsls	r2, r3
   100fe:	1c0d      	adds	r5, r1, #0
   10100:	4315      	orrs	r5, r2
   10102:	1c22      	adds	r2, r4, #0
   10104:	409a      	lsls	r2, r3
   10106:	46a8      	mov	r8, r5
   10108:	4691      	mov	r9, r2
   1010a:	4b38      	ldr	r3, [pc, #224]	; (101ec <__aeabi_ddiv+0x1e4>)
   1010c:	2500      	movs	r5, #0
   1010e:	1a1b      	subs	r3, r3, r0
   10110:	469a      	mov	sl, r3
   10112:	2400      	movs	r4, #0
   10114:	9502      	str	r5, [sp, #8]
   10116:	e79e      	b.n	10056 <__aeabi_ddiv+0x4e>
   10118:	465a      	mov	r2, fp
   1011a:	4316      	orrs	r6, r2
   1011c:	2003      	movs	r0, #3
   1011e:	2e00      	cmp	r6, #0
   10120:	d1b1      	bne.n	10086 <__aeabi_ddiv+0x7e>
   10122:	46b3      	mov	fp, r6
   10124:	2100      	movs	r1, #0
   10126:	2002      	movs	r0, #2
   10128:	e7ad      	b.n	10086 <__aeabi_ddiv+0x7e>
   1012a:	465a      	mov	r2, fp
   1012c:	4332      	orrs	r2, r6
   1012e:	d01b      	beq.n	10168 <__aeabi_ddiv+0x160>
   10130:	465b      	mov	r3, fp
   10132:	2b00      	cmp	r3, #0
   10134:	d100      	bne.n	10138 <__aeabi_ddiv+0x130>
   10136:	e18e      	b.n	10456 <__aeabi_ddiv+0x44e>
   10138:	4658      	mov	r0, fp
   1013a:	f7fa fa77 	bl	a62c <__clzsi2>
   1013e:	2827      	cmp	r0, #39	; 0x27
   10140:	dd00      	ble.n	10144 <__aeabi_ddiv+0x13c>
   10142:	e181      	b.n	10448 <__aeabi_ddiv+0x440>
   10144:	2228      	movs	r2, #40	; 0x28
   10146:	1a17      	subs	r7, r2, r0
   10148:	1c01      	adds	r1, r0, #0
   1014a:	1c32      	adds	r2, r6, #0
   1014c:	3908      	subs	r1, #8
   1014e:	465b      	mov	r3, fp
   10150:	40fa      	lsrs	r2, r7
   10152:	408b      	lsls	r3, r1
   10154:	1c17      	adds	r7, r2, #0
   10156:	431f      	orrs	r7, r3
   10158:	1c33      	adds	r3, r6, #0
   1015a:	408b      	lsls	r3, r1
   1015c:	46bb      	mov	fp, r7
   1015e:	1c19      	adds	r1, r3, #0
   10160:	4b22      	ldr	r3, [pc, #136]	; (101ec <__aeabi_ddiv+0x1e4>)
   10162:	1a1b      	subs	r3, r3, r0
   10164:	2000      	movs	r0, #0
   10166:	e78e      	b.n	10086 <__aeabi_ddiv+0x7e>
   10168:	2700      	movs	r7, #0
   1016a:	46bb      	mov	fp, r7
   1016c:	2100      	movs	r1, #0
   1016e:	2001      	movs	r0, #1
   10170:	e789      	b.n	10086 <__aeabi_ddiv+0x7e>
   10172:	2000      	movs	r0, #0
   10174:	2501      	movs	r5, #1
   10176:	2404      	movs	r4, #4
   10178:	4680      	mov	r8, r0
   1017a:	4681      	mov	r9, r0
   1017c:	9502      	str	r5, [sp, #8]
   1017e:	e76a      	b.n	10056 <__aeabi_ddiv+0x4e>
   10180:	2503      	movs	r5, #3
   10182:	240c      	movs	r4, #12
   10184:	9502      	str	r5, [sp, #8]
   10186:	e766      	b.n	10056 <__aeabi_ddiv+0x4e>
   10188:	9c01      	ldr	r4, [sp, #4]
   1018a:	9403      	str	r4, [sp, #12]
   1018c:	9d03      	ldr	r5, [sp, #12]
   1018e:	2201      	movs	r2, #1
   10190:	402a      	ands	r2, r5
   10192:	2400      	movs	r4, #0
   10194:	4d12      	ldr	r5, [pc, #72]	; (101e0 <__aeabi_ddiv+0x1d8>)
   10196:	46a1      	mov	r9, r4
   10198:	2000      	movs	r0, #0
   1019a:	2100      	movs	r1, #0
   1019c:	0324      	lsls	r4, r4, #12
   1019e:	0b26      	lsrs	r6, r4, #12
   101a0:	0d0c      	lsrs	r4, r1, #20
   101a2:	0524      	lsls	r4, r4, #20
   101a4:	4b12      	ldr	r3, [pc, #72]	; (101f0 <__aeabi_ddiv+0x1e8>)
   101a6:	4334      	orrs	r4, r6
   101a8:	052d      	lsls	r5, r5, #20
   101aa:	4023      	ands	r3, r4
   101ac:	432b      	orrs	r3, r5
   101ae:	005b      	lsls	r3, r3, #1
   101b0:	085b      	lsrs	r3, r3, #1
   101b2:	07d2      	lsls	r2, r2, #31
   101b4:	1c19      	adds	r1, r3, #0
   101b6:	4648      	mov	r0, r9
   101b8:	4311      	orrs	r1, r2
   101ba:	b007      	add	sp, #28
   101bc:	bc3c      	pop	{r2, r3, r4, r5}
   101be:	4690      	mov	r8, r2
   101c0:	4699      	mov	r9, r3
   101c2:	46a2      	mov	sl, r4
   101c4:	46ab      	mov	fp, r5
   101c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101c8:	2301      	movs	r3, #1
   101ca:	425b      	negs	r3, r3
   101cc:	2200      	movs	r2, #0
   101ce:	4c09      	ldr	r4, [pc, #36]	; (101f4 <__aeabi_ddiv+0x1ec>)
   101d0:	4699      	mov	r9, r3
   101d2:	4d03      	ldr	r5, [pc, #12]	; (101e0 <__aeabi_ddiv+0x1d8>)
   101d4:	e7e0      	b.n	10198 <__aeabi_ddiv+0x190>
   101d6:	2400      	movs	r4, #0
   101d8:	2500      	movs	r5, #0
   101da:	46a1      	mov	r9, r4
   101dc:	e7dc      	b.n	10198 <__aeabi_ddiv+0x190>
   101de:	46c0      	nop			; (mov r8, r8)
   101e0:	000007ff 	.word	0x000007ff
   101e4:	fffffc01 	.word	0xfffffc01
   101e8:	00010c38 	.word	0x00010c38
   101ec:	fffffc0d 	.word	0xfffffc0d
   101f0:	800fffff 	.word	0x800fffff
   101f4:	000fffff 	.word	0x000fffff
   101f8:	4655      	mov	r5, sl
   101fa:	1aed      	subs	r5, r5, r3
   101fc:	9504      	str	r5, [sp, #16]
   101fe:	45d8      	cmp	r8, fp
   10200:	d900      	bls.n	10204 <__aeabi_ddiv+0x1fc>
   10202:	e153      	b.n	104ac <__aeabi_ddiv+0x4a4>
   10204:	d100      	bne.n	10208 <__aeabi_ddiv+0x200>
   10206:	e14e      	b.n	104a6 <__aeabi_ddiv+0x49e>
   10208:	9c04      	ldr	r4, [sp, #16]
   1020a:	2500      	movs	r5, #0
   1020c:	3c01      	subs	r4, #1
   1020e:	464e      	mov	r6, r9
   10210:	9404      	str	r4, [sp, #16]
   10212:	4647      	mov	r7, r8
   10214:	46a9      	mov	r9, r5
   10216:	4658      	mov	r0, fp
   10218:	0203      	lsls	r3, r0, #8
   1021a:	0e0c      	lsrs	r4, r1, #24
   1021c:	431c      	orrs	r4, r3
   1021e:	0209      	lsls	r1, r1, #8
   10220:	0c25      	lsrs	r5, r4, #16
   10222:	0423      	lsls	r3, r4, #16
   10224:	0c1b      	lsrs	r3, r3, #16
   10226:	9100      	str	r1, [sp, #0]
   10228:	1c38      	adds	r0, r7, #0
   1022a:	1c29      	adds	r1, r5, #0
   1022c:	9301      	str	r3, [sp, #4]
   1022e:	f7f9 fa9d 	bl	976c <__aeabi_uidiv>
   10232:	9901      	ldr	r1, [sp, #4]
   10234:	4683      	mov	fp, r0
   10236:	4341      	muls	r1, r0
   10238:	1c38      	adds	r0, r7, #0
   1023a:	468a      	mov	sl, r1
   1023c:	1c29      	adds	r1, r5, #0
   1023e:	f7f9 fad9 	bl	97f4 <__aeabi_uidivmod>
   10242:	0c33      	lsrs	r3, r6, #16
   10244:	0409      	lsls	r1, r1, #16
   10246:	4319      	orrs	r1, r3
   10248:	458a      	cmp	sl, r1
   1024a:	d90c      	bls.n	10266 <__aeabi_ddiv+0x25e>
   1024c:	465b      	mov	r3, fp
   1024e:	1909      	adds	r1, r1, r4
   10250:	3b01      	subs	r3, #1
   10252:	428c      	cmp	r4, r1
   10254:	d900      	bls.n	10258 <__aeabi_ddiv+0x250>
   10256:	e147      	b.n	104e8 <__aeabi_ddiv+0x4e0>
   10258:	458a      	cmp	sl, r1
   1025a:	d800      	bhi.n	1025e <__aeabi_ddiv+0x256>
   1025c:	e144      	b.n	104e8 <__aeabi_ddiv+0x4e0>
   1025e:	2202      	movs	r2, #2
   10260:	4252      	negs	r2, r2
   10262:	4493      	add	fp, r2
   10264:	1909      	adds	r1, r1, r4
   10266:	4653      	mov	r3, sl
   10268:	1acb      	subs	r3, r1, r3
   1026a:	1c18      	adds	r0, r3, #0
   1026c:	1c29      	adds	r1, r5, #0
   1026e:	4698      	mov	r8, r3
   10270:	f7f9 fa7c 	bl	976c <__aeabi_uidiv>
   10274:	1c07      	adds	r7, r0, #0
   10276:	9801      	ldr	r0, [sp, #4]
   10278:	1c29      	adds	r1, r5, #0
   1027a:	4378      	muls	r0, r7
   1027c:	4682      	mov	sl, r0
   1027e:	4640      	mov	r0, r8
   10280:	f7f9 fab8 	bl	97f4 <__aeabi_uidivmod>
   10284:	0436      	lsls	r6, r6, #16
   10286:	040b      	lsls	r3, r1, #16
   10288:	0c36      	lsrs	r6, r6, #16
   1028a:	4333      	orrs	r3, r6
   1028c:	459a      	cmp	sl, r3
   1028e:	d909      	bls.n	102a4 <__aeabi_ddiv+0x29c>
   10290:	191b      	adds	r3, r3, r4
   10292:	1e7a      	subs	r2, r7, #1
   10294:	429c      	cmp	r4, r3
   10296:	d900      	bls.n	1029a <__aeabi_ddiv+0x292>
   10298:	e124      	b.n	104e4 <__aeabi_ddiv+0x4dc>
   1029a:	459a      	cmp	sl, r3
   1029c:	d800      	bhi.n	102a0 <__aeabi_ddiv+0x298>
   1029e:	e121      	b.n	104e4 <__aeabi_ddiv+0x4dc>
   102a0:	3f02      	subs	r7, #2
   102a2:	191b      	adds	r3, r3, r4
   102a4:	465e      	mov	r6, fp
   102a6:	0432      	lsls	r2, r6, #16
   102a8:	4317      	orrs	r7, r2
   102aa:	0c38      	lsrs	r0, r7, #16
   102ac:	46bb      	mov	fp, r7
   102ae:	9e00      	ldr	r6, [sp, #0]
   102b0:	9f00      	ldr	r7, [sp, #0]
   102b2:	4651      	mov	r1, sl
   102b4:	0c3f      	lsrs	r7, r7, #16
   102b6:	0432      	lsls	r2, r6, #16
   102b8:	1a5b      	subs	r3, r3, r1
   102ba:	4659      	mov	r1, fp
   102bc:	46ba      	mov	sl, r7
   102be:	0c12      	lsrs	r2, r2, #16
   102c0:	040f      	lsls	r7, r1, #16
   102c2:	0c3f      	lsrs	r7, r7, #16
   102c4:	4690      	mov	r8, r2
   102c6:	4651      	mov	r1, sl
   102c8:	437a      	muls	r2, r7
   102ca:	434f      	muls	r7, r1
   102cc:	4641      	mov	r1, r8
   102ce:	4341      	muls	r1, r0
   102d0:	4656      	mov	r6, sl
   102d2:	4370      	muls	r0, r6
   102d4:	19cf      	adds	r7, r1, r7
   102d6:	0c16      	lsrs	r6, r2, #16
   102d8:	19be      	adds	r6, r7, r6
   102da:	42b1      	cmp	r1, r6
   102dc:	d902      	bls.n	102e4 <__aeabi_ddiv+0x2dc>
   102de:	2780      	movs	r7, #128	; 0x80
   102e0:	027f      	lsls	r7, r7, #9
   102e2:	19c0      	adds	r0, r0, r7
   102e4:	0c31      	lsrs	r1, r6, #16
   102e6:	0412      	lsls	r2, r2, #16
   102e8:	0436      	lsls	r6, r6, #16
   102ea:	0c12      	lsrs	r2, r2, #16
   102ec:	1840      	adds	r0, r0, r1
   102ee:	18b6      	adds	r6, r6, r2
   102f0:	4283      	cmp	r3, r0
   102f2:	d200      	bcs.n	102f6 <__aeabi_ddiv+0x2ee>
   102f4:	e0c4      	b.n	10480 <__aeabi_ddiv+0x478>
   102f6:	d100      	bne.n	102fa <__aeabi_ddiv+0x2f2>
   102f8:	e0be      	b.n	10478 <__aeabi_ddiv+0x470>
   102fa:	1a19      	subs	r1, r3, r0
   102fc:	4648      	mov	r0, r9
   102fe:	1b86      	subs	r6, r0, r6
   10300:	45b1      	cmp	r9, r6
   10302:	41bf      	sbcs	r7, r7
   10304:	427f      	negs	r7, r7
   10306:	1bcf      	subs	r7, r1, r7
   10308:	42a7      	cmp	r7, r4
   1030a:	d100      	bne.n	1030e <__aeabi_ddiv+0x306>
   1030c:	e113      	b.n	10536 <__aeabi_ddiv+0x52e>
   1030e:	1c29      	adds	r1, r5, #0
   10310:	1c38      	adds	r0, r7, #0
   10312:	f7f9 fa2b 	bl	976c <__aeabi_uidiv>
   10316:	9901      	ldr	r1, [sp, #4]
   10318:	9002      	str	r0, [sp, #8]
   1031a:	4341      	muls	r1, r0
   1031c:	1c38      	adds	r0, r7, #0
   1031e:	4689      	mov	r9, r1
   10320:	1c29      	adds	r1, r5, #0
   10322:	f7f9 fa67 	bl	97f4 <__aeabi_uidivmod>
   10326:	0c33      	lsrs	r3, r6, #16
   10328:	0409      	lsls	r1, r1, #16
   1032a:	4319      	orrs	r1, r3
   1032c:	4589      	cmp	r9, r1
   1032e:	d90c      	bls.n	1034a <__aeabi_ddiv+0x342>
   10330:	9b02      	ldr	r3, [sp, #8]
   10332:	1909      	adds	r1, r1, r4
   10334:	3b01      	subs	r3, #1
   10336:	428c      	cmp	r4, r1
   10338:	d900      	bls.n	1033c <__aeabi_ddiv+0x334>
   1033a:	e0ff      	b.n	1053c <__aeabi_ddiv+0x534>
   1033c:	4589      	cmp	r9, r1
   1033e:	d800      	bhi.n	10342 <__aeabi_ddiv+0x33a>
   10340:	e0fc      	b.n	1053c <__aeabi_ddiv+0x534>
   10342:	9f02      	ldr	r7, [sp, #8]
   10344:	1909      	adds	r1, r1, r4
   10346:	3f02      	subs	r7, #2
   10348:	9702      	str	r7, [sp, #8]
   1034a:	464f      	mov	r7, r9
   1034c:	1bcf      	subs	r7, r1, r7
   1034e:	1c38      	adds	r0, r7, #0
   10350:	1c29      	adds	r1, r5, #0
   10352:	9705      	str	r7, [sp, #20]
   10354:	f7f9 fa0a 	bl	976c <__aeabi_uidiv>
   10358:	1c07      	adds	r7, r0, #0
   1035a:	9801      	ldr	r0, [sp, #4]
   1035c:	1c29      	adds	r1, r5, #0
   1035e:	4378      	muls	r0, r7
   10360:	4681      	mov	r9, r0
   10362:	9805      	ldr	r0, [sp, #20]
   10364:	f7f9 fa46 	bl	97f4 <__aeabi_uidivmod>
   10368:	0436      	lsls	r6, r6, #16
   1036a:	0409      	lsls	r1, r1, #16
   1036c:	0c36      	lsrs	r6, r6, #16
   1036e:	430e      	orrs	r6, r1
   10370:	45b1      	cmp	r9, r6
   10372:	d909      	bls.n	10388 <__aeabi_ddiv+0x380>
   10374:	1936      	adds	r6, r6, r4
   10376:	1e7b      	subs	r3, r7, #1
   10378:	42b4      	cmp	r4, r6
   1037a:	d900      	bls.n	1037e <__aeabi_ddiv+0x376>
   1037c:	e0e0      	b.n	10540 <__aeabi_ddiv+0x538>
   1037e:	45b1      	cmp	r9, r6
   10380:	d800      	bhi.n	10384 <__aeabi_ddiv+0x37c>
   10382:	e0dd      	b.n	10540 <__aeabi_ddiv+0x538>
   10384:	3f02      	subs	r7, #2
   10386:	1936      	adds	r6, r6, r4
   10388:	9d02      	ldr	r5, [sp, #8]
   1038a:	4649      	mov	r1, r9
   1038c:	1a76      	subs	r6, r6, r1
   1038e:	0429      	lsls	r1, r5, #16
   10390:	4339      	orrs	r1, r7
   10392:	040b      	lsls	r3, r1, #16
   10394:	4657      	mov	r7, sl
   10396:	0c0a      	lsrs	r2, r1, #16
   10398:	0c1b      	lsrs	r3, r3, #16
   1039a:	4640      	mov	r0, r8
   1039c:	4645      	mov	r5, r8
   1039e:	4358      	muls	r0, r3
   103a0:	4355      	muls	r5, r2
   103a2:	437b      	muls	r3, r7
   103a4:	437a      	muls	r2, r7
   103a6:	18eb      	adds	r3, r5, r3
   103a8:	0c07      	lsrs	r7, r0, #16
   103aa:	19db      	adds	r3, r3, r7
   103ac:	429d      	cmp	r5, r3
   103ae:	d902      	bls.n	103b6 <__aeabi_ddiv+0x3ae>
   103b0:	2580      	movs	r5, #128	; 0x80
   103b2:	026d      	lsls	r5, r5, #9
   103b4:	1952      	adds	r2, r2, r5
   103b6:	0c1d      	lsrs	r5, r3, #16
   103b8:	0400      	lsls	r0, r0, #16
   103ba:	041b      	lsls	r3, r3, #16
   103bc:	0c00      	lsrs	r0, r0, #16
   103be:	1952      	adds	r2, r2, r5
   103c0:	181b      	adds	r3, r3, r0
   103c2:	4296      	cmp	r6, r2
   103c4:	d335      	bcc.n	10432 <__aeabi_ddiv+0x42a>
   103c6:	d100      	bne.n	103ca <__aeabi_ddiv+0x3c2>
   103c8:	e0fc      	b.n	105c4 <__aeabi_ddiv+0x5bc>
   103ca:	2301      	movs	r3, #1
   103cc:	4319      	orrs	r1, r3
   103ce:	9e04      	ldr	r6, [sp, #16]
   103d0:	4f99      	ldr	r7, [pc, #612]	; (10638 <__aeabi_ddiv+0x630>)
   103d2:	19f5      	adds	r5, r6, r7
   103d4:	2d00      	cmp	r5, #0
   103d6:	dc00      	bgt.n	103da <__aeabi_ddiv+0x3d2>
   103d8:	e0a1      	b.n	1051e <__aeabi_ddiv+0x516>
   103da:	0748      	lsls	r0, r1, #29
   103dc:	d009      	beq.n	103f2 <__aeabi_ddiv+0x3ea>
   103de:	230f      	movs	r3, #15
   103e0:	400b      	ands	r3, r1
   103e2:	2b04      	cmp	r3, #4
   103e4:	d005      	beq.n	103f2 <__aeabi_ddiv+0x3ea>
   103e6:	1d0b      	adds	r3, r1, #4
   103e8:	428b      	cmp	r3, r1
   103ea:	4189      	sbcs	r1, r1
   103ec:	4249      	negs	r1, r1
   103ee:	448b      	add	fp, r1
   103f0:	1c19      	adds	r1, r3, #0
   103f2:	465a      	mov	r2, fp
   103f4:	01d2      	lsls	r2, r2, #7
   103f6:	d507      	bpl.n	10408 <__aeabi_ddiv+0x400>
   103f8:	4b90      	ldr	r3, [pc, #576]	; (1063c <__aeabi_ddiv+0x634>)
   103fa:	465c      	mov	r4, fp
   103fc:	9e04      	ldr	r6, [sp, #16]
   103fe:	2780      	movs	r7, #128	; 0x80
   10400:	401c      	ands	r4, r3
   10402:	00ff      	lsls	r7, r7, #3
   10404:	46a3      	mov	fp, r4
   10406:	19f5      	adds	r5, r6, r7
   10408:	4b8d      	ldr	r3, [pc, #564]	; (10640 <__aeabi_ddiv+0x638>)
   1040a:	429d      	cmp	r5, r3
   1040c:	dd7a      	ble.n	10504 <__aeabi_ddiv+0x4fc>
   1040e:	9c03      	ldr	r4, [sp, #12]
   10410:	2201      	movs	r2, #1
   10412:	4022      	ands	r2, r4
   10414:	2400      	movs	r4, #0
   10416:	4d8b      	ldr	r5, [pc, #556]	; (10644 <__aeabi_ddiv+0x63c>)
   10418:	46a1      	mov	r9, r4
   1041a:	e6bd      	b.n	10198 <__aeabi_ddiv+0x190>
   1041c:	2480      	movs	r4, #128	; 0x80
   1041e:	0324      	lsls	r4, r4, #12
   10420:	4647      	mov	r7, r8
   10422:	4227      	tst	r7, r4
   10424:	d14c      	bne.n	104c0 <__aeabi_ddiv+0x4b8>
   10426:	433c      	orrs	r4, r7
   10428:	0324      	lsls	r4, r4, #12
   1042a:	0b24      	lsrs	r4, r4, #12
   1042c:	9a00      	ldr	r2, [sp, #0]
   1042e:	4d85      	ldr	r5, [pc, #532]	; (10644 <__aeabi_ddiv+0x63c>)
   10430:	e6b2      	b.n	10198 <__aeabi_ddiv+0x190>
   10432:	1936      	adds	r6, r6, r4
   10434:	1e48      	subs	r0, r1, #1
   10436:	42b4      	cmp	r4, r6
   10438:	d95e      	bls.n	104f8 <__aeabi_ddiv+0x4f0>
   1043a:	1c01      	adds	r1, r0, #0
   1043c:	4296      	cmp	r6, r2
   1043e:	d1c4      	bne.n	103ca <__aeabi_ddiv+0x3c2>
   10440:	9e00      	ldr	r6, [sp, #0]
   10442:	429e      	cmp	r6, r3
   10444:	d1c1      	bne.n	103ca <__aeabi_ddiv+0x3c2>
   10446:	e7c2      	b.n	103ce <__aeabi_ddiv+0x3c6>
   10448:	1c03      	adds	r3, r0, #0
   1044a:	3b28      	subs	r3, #40	; 0x28
   1044c:	1c31      	adds	r1, r6, #0
   1044e:	4099      	lsls	r1, r3
   10450:	468b      	mov	fp, r1
   10452:	2100      	movs	r1, #0
   10454:	e684      	b.n	10160 <__aeabi_ddiv+0x158>
   10456:	1c30      	adds	r0, r6, #0
   10458:	f7fa f8e8 	bl	a62c <__clzsi2>
   1045c:	3020      	adds	r0, #32
   1045e:	e66e      	b.n	1013e <__aeabi_ddiv+0x136>
   10460:	3b28      	subs	r3, #40	; 0x28
   10462:	1c21      	adds	r1, r4, #0
   10464:	4099      	lsls	r1, r3
   10466:	2200      	movs	r2, #0
   10468:	4688      	mov	r8, r1
   1046a:	4691      	mov	r9, r2
   1046c:	e64d      	b.n	1010a <__aeabi_ddiv+0x102>
   1046e:	1c20      	adds	r0, r4, #0
   10470:	f7fa f8dc 	bl	a62c <__clzsi2>
   10474:	3020      	adds	r0, #32
   10476:	e637      	b.n	100e8 <__aeabi_ddiv+0xe0>
   10478:	2100      	movs	r1, #0
   1047a:	45b1      	cmp	r9, r6
   1047c:	d300      	bcc.n	10480 <__aeabi_ddiv+0x478>
   1047e:	e73d      	b.n	102fc <__aeabi_ddiv+0x2f4>
   10480:	9f00      	ldr	r7, [sp, #0]
   10482:	465a      	mov	r2, fp
   10484:	44b9      	add	r9, r7
   10486:	45b9      	cmp	r9, r7
   10488:	41bf      	sbcs	r7, r7
   1048a:	427f      	negs	r7, r7
   1048c:	193f      	adds	r7, r7, r4
   1048e:	18fb      	adds	r3, r7, r3
   10490:	3a01      	subs	r2, #1
   10492:	429c      	cmp	r4, r3
   10494:	d21e      	bcs.n	104d4 <__aeabi_ddiv+0x4cc>
   10496:	4298      	cmp	r0, r3
   10498:	d900      	bls.n	1049c <__aeabi_ddiv+0x494>
   1049a:	e07e      	b.n	1059a <__aeabi_ddiv+0x592>
   1049c:	d100      	bne.n	104a0 <__aeabi_ddiv+0x498>
   1049e:	e0b5      	b.n	1060c <__aeabi_ddiv+0x604>
   104a0:	1a19      	subs	r1, r3, r0
   104a2:	4693      	mov	fp, r2
   104a4:	e72a      	b.n	102fc <__aeabi_ddiv+0x2f4>
   104a6:	4589      	cmp	r9, r1
   104a8:	d800      	bhi.n	104ac <__aeabi_ddiv+0x4a4>
   104aa:	e6ad      	b.n	10208 <__aeabi_ddiv+0x200>
   104ac:	4648      	mov	r0, r9
   104ae:	4646      	mov	r6, r8
   104b0:	4642      	mov	r2, r8
   104b2:	0877      	lsrs	r7, r6, #1
   104b4:	07d3      	lsls	r3, r2, #31
   104b6:	0846      	lsrs	r6, r0, #1
   104b8:	07c0      	lsls	r0, r0, #31
   104ba:	431e      	orrs	r6, r3
   104bc:	4681      	mov	r9, r0
   104be:	e6aa      	b.n	10216 <__aeabi_ddiv+0x20e>
   104c0:	4658      	mov	r0, fp
   104c2:	4220      	tst	r0, r4
   104c4:	d112      	bne.n	104ec <__aeabi_ddiv+0x4e4>
   104c6:	4304      	orrs	r4, r0
   104c8:	0324      	lsls	r4, r4, #12
   104ca:	1c2a      	adds	r2, r5, #0
   104cc:	0b24      	lsrs	r4, r4, #12
   104ce:	4689      	mov	r9, r1
   104d0:	4d5c      	ldr	r5, [pc, #368]	; (10644 <__aeabi_ddiv+0x63c>)
   104d2:	e661      	b.n	10198 <__aeabi_ddiv+0x190>
   104d4:	42a3      	cmp	r3, r4
   104d6:	d1e3      	bne.n	104a0 <__aeabi_ddiv+0x498>
   104d8:	9f00      	ldr	r7, [sp, #0]
   104da:	454f      	cmp	r7, r9
   104dc:	d9db      	bls.n	10496 <__aeabi_ddiv+0x48e>
   104de:	1a21      	subs	r1, r4, r0
   104e0:	4693      	mov	fp, r2
   104e2:	e70b      	b.n	102fc <__aeabi_ddiv+0x2f4>
   104e4:	1c17      	adds	r7, r2, #0
   104e6:	e6dd      	b.n	102a4 <__aeabi_ddiv+0x29c>
   104e8:	469b      	mov	fp, r3
   104ea:	e6bc      	b.n	10266 <__aeabi_ddiv+0x25e>
   104ec:	433c      	orrs	r4, r7
   104ee:	0324      	lsls	r4, r4, #12
   104f0:	0b24      	lsrs	r4, r4, #12
   104f2:	9a00      	ldr	r2, [sp, #0]
   104f4:	4d53      	ldr	r5, [pc, #332]	; (10644 <__aeabi_ddiv+0x63c>)
   104f6:	e64f      	b.n	10198 <__aeabi_ddiv+0x190>
   104f8:	42b2      	cmp	r2, r6
   104fa:	d859      	bhi.n	105b0 <__aeabi_ddiv+0x5a8>
   104fc:	d100      	bne.n	10500 <__aeabi_ddiv+0x4f8>
   104fe:	e08a      	b.n	10616 <__aeabi_ddiv+0x60e>
   10500:	1c01      	adds	r1, r0, #0
   10502:	e762      	b.n	103ca <__aeabi_ddiv+0x3c2>
   10504:	465f      	mov	r7, fp
   10506:	08c9      	lsrs	r1, r1, #3
   10508:	077b      	lsls	r3, r7, #29
   1050a:	9e03      	ldr	r6, [sp, #12]
   1050c:	430b      	orrs	r3, r1
   1050e:	027c      	lsls	r4, r7, #9
   10510:	056d      	lsls	r5, r5, #21
   10512:	2201      	movs	r2, #1
   10514:	4699      	mov	r9, r3
   10516:	0b24      	lsrs	r4, r4, #12
   10518:	0d6d      	lsrs	r5, r5, #21
   1051a:	4032      	ands	r2, r6
   1051c:	e63c      	b.n	10198 <__aeabi_ddiv+0x190>
   1051e:	4b4a      	ldr	r3, [pc, #296]	; (10648 <__aeabi_ddiv+0x640>)
   10520:	9f04      	ldr	r7, [sp, #16]
   10522:	1bdb      	subs	r3, r3, r7
   10524:	2b38      	cmp	r3, #56	; 0x38
   10526:	dd10      	ble.n	1054a <__aeabi_ddiv+0x542>
   10528:	9c03      	ldr	r4, [sp, #12]
   1052a:	2201      	movs	r2, #1
   1052c:	4022      	ands	r2, r4
   1052e:	2400      	movs	r4, #0
   10530:	2500      	movs	r5, #0
   10532:	46a1      	mov	r9, r4
   10534:	e630      	b.n	10198 <__aeabi_ddiv+0x190>
   10536:	2101      	movs	r1, #1
   10538:	4249      	negs	r1, r1
   1053a:	e748      	b.n	103ce <__aeabi_ddiv+0x3c6>
   1053c:	9302      	str	r3, [sp, #8]
   1053e:	e704      	b.n	1034a <__aeabi_ddiv+0x342>
   10540:	1c1f      	adds	r7, r3, #0
   10542:	e721      	b.n	10388 <__aeabi_ddiv+0x380>
   10544:	9c01      	ldr	r4, [sp, #4]
   10546:	9403      	str	r4, [sp, #12]
   10548:	e741      	b.n	103ce <__aeabi_ddiv+0x3c6>
   1054a:	2b1f      	cmp	r3, #31
   1054c:	dc40      	bgt.n	105d0 <__aeabi_ddiv+0x5c8>
   1054e:	483f      	ldr	r0, [pc, #252]	; (1064c <__aeabi_ddiv+0x644>)
   10550:	9f04      	ldr	r7, [sp, #16]
   10552:	1c0c      	adds	r4, r1, #0
   10554:	183a      	adds	r2, r7, r0
   10556:	4658      	mov	r0, fp
   10558:	4091      	lsls	r1, r2
   1055a:	40dc      	lsrs	r4, r3
   1055c:	4090      	lsls	r0, r2
   1055e:	4320      	orrs	r0, r4
   10560:	1c0a      	adds	r2, r1, #0
   10562:	1e51      	subs	r1, r2, #1
   10564:	418a      	sbcs	r2, r1
   10566:	1c01      	adds	r1, r0, #0
   10568:	4311      	orrs	r1, r2
   1056a:	465a      	mov	r2, fp
   1056c:	40da      	lsrs	r2, r3
   1056e:	1c13      	adds	r3, r2, #0
   10570:	0748      	lsls	r0, r1, #29
   10572:	d009      	beq.n	10588 <__aeabi_ddiv+0x580>
   10574:	220f      	movs	r2, #15
   10576:	400a      	ands	r2, r1
   10578:	2a04      	cmp	r2, #4
   1057a:	d005      	beq.n	10588 <__aeabi_ddiv+0x580>
   1057c:	1d0a      	adds	r2, r1, #4
   1057e:	428a      	cmp	r2, r1
   10580:	4189      	sbcs	r1, r1
   10582:	4249      	negs	r1, r1
   10584:	185b      	adds	r3, r3, r1
   10586:	1c11      	adds	r1, r2, #0
   10588:	021a      	lsls	r2, r3, #8
   1058a:	d534      	bpl.n	105f6 <__aeabi_ddiv+0x5ee>
   1058c:	9c03      	ldr	r4, [sp, #12]
   1058e:	2201      	movs	r2, #1
   10590:	4022      	ands	r2, r4
   10592:	2400      	movs	r4, #0
   10594:	2501      	movs	r5, #1
   10596:	46a1      	mov	r9, r4
   10598:	e5fe      	b.n	10198 <__aeabi_ddiv+0x190>
   1059a:	9f00      	ldr	r7, [sp, #0]
   1059c:	2102      	movs	r1, #2
   1059e:	4249      	negs	r1, r1
   105a0:	44b9      	add	r9, r7
   105a2:	448b      	add	fp, r1
   105a4:	45b9      	cmp	r9, r7
   105a6:	4189      	sbcs	r1, r1
   105a8:	4249      	negs	r1, r1
   105aa:	1909      	adds	r1, r1, r4
   105ac:	18cb      	adds	r3, r1, r3
   105ae:	e6a4      	b.n	102fa <__aeabi_ddiv+0x2f2>
   105b0:	9d00      	ldr	r5, [sp, #0]
   105b2:	1e88      	subs	r0, r1, #2
   105b4:	0069      	lsls	r1, r5, #1
   105b6:	42a9      	cmp	r1, r5
   105b8:	41ad      	sbcs	r5, r5
   105ba:	426d      	negs	r5, r5
   105bc:	192c      	adds	r4, r5, r4
   105be:	1936      	adds	r6, r6, r4
   105c0:	9100      	str	r1, [sp, #0]
   105c2:	e73a      	b.n	1043a <__aeabi_ddiv+0x432>
   105c4:	2b00      	cmp	r3, #0
   105c6:	d000      	beq.n	105ca <__aeabi_ddiv+0x5c2>
   105c8:	e733      	b.n	10432 <__aeabi_ddiv+0x42a>
   105ca:	2400      	movs	r4, #0
   105cc:	9400      	str	r4, [sp, #0]
   105ce:	e737      	b.n	10440 <__aeabi_ddiv+0x438>
   105d0:	4a1f      	ldr	r2, [pc, #124]	; (10650 <__aeabi_ddiv+0x648>)
   105d2:	9c04      	ldr	r4, [sp, #16]
   105d4:	465d      	mov	r5, fp
   105d6:	1b12      	subs	r2, r2, r4
   105d8:	40d5      	lsrs	r5, r2
   105da:	1c2a      	adds	r2, r5, #0
   105dc:	2b20      	cmp	r3, #32
   105de:	d01f      	beq.n	10620 <__aeabi_ddiv+0x618>
   105e0:	4e1c      	ldr	r6, [pc, #112]	; (10654 <__aeabi_ddiv+0x64c>)
   105e2:	465f      	mov	r7, fp
   105e4:	19a3      	adds	r3, r4, r6
   105e6:	409f      	lsls	r7, r3
   105e8:	1c3b      	adds	r3, r7, #0
   105ea:	4319      	orrs	r1, r3
   105ec:	1e4b      	subs	r3, r1, #1
   105ee:	4199      	sbcs	r1, r3
   105f0:	4311      	orrs	r1, r2
   105f2:	2300      	movs	r3, #0
   105f4:	e7bc      	b.n	10570 <__aeabi_ddiv+0x568>
   105f6:	075a      	lsls	r2, r3, #29
   105f8:	08c9      	lsrs	r1, r1, #3
   105fa:	430a      	orrs	r2, r1
   105fc:	9f03      	ldr	r7, [sp, #12]
   105fe:	4691      	mov	r9, r2
   10600:	025b      	lsls	r3, r3, #9
   10602:	2201      	movs	r2, #1
   10604:	0b1c      	lsrs	r4, r3, #12
   10606:	403a      	ands	r2, r7
   10608:	2500      	movs	r5, #0
   1060a:	e5c5      	b.n	10198 <__aeabi_ddiv+0x190>
   1060c:	454e      	cmp	r6, r9
   1060e:	d8c4      	bhi.n	1059a <__aeabi_ddiv+0x592>
   10610:	4693      	mov	fp, r2
   10612:	2100      	movs	r1, #0
   10614:	e672      	b.n	102fc <__aeabi_ddiv+0x2f4>
   10616:	9f00      	ldr	r7, [sp, #0]
   10618:	429f      	cmp	r7, r3
   1061a:	d3c9      	bcc.n	105b0 <__aeabi_ddiv+0x5a8>
   1061c:	1c01      	adds	r1, r0, #0
   1061e:	e70f      	b.n	10440 <__aeabi_ddiv+0x438>
   10620:	2300      	movs	r3, #0
   10622:	e7e2      	b.n	105ea <__aeabi_ddiv+0x5e2>
   10624:	2480      	movs	r4, #128	; 0x80
   10626:	0324      	lsls	r4, r4, #12
   10628:	465f      	mov	r7, fp
   1062a:	433c      	orrs	r4, r7
   1062c:	0324      	lsls	r4, r4, #12
   1062e:	0b24      	lsrs	r4, r4, #12
   10630:	9a01      	ldr	r2, [sp, #4]
   10632:	4689      	mov	r9, r1
   10634:	4d03      	ldr	r5, [pc, #12]	; (10644 <__aeabi_ddiv+0x63c>)
   10636:	e5af      	b.n	10198 <__aeabi_ddiv+0x190>
   10638:	000003ff 	.word	0x000003ff
   1063c:	feffffff 	.word	0xfeffffff
   10640:	000007fe 	.word	0x000007fe
   10644:	000007ff 	.word	0x000007ff
   10648:	fffffc02 	.word	0xfffffc02
   1064c:	0000041e 	.word	0x0000041e
   10650:	fffffbe2 	.word	0xfffffbe2
   10654:	0000043e 	.word	0x0000043e

00010658 <__aeabi_ui2d>:
   10658:	b510      	push	{r4, lr}
   1065a:	1e04      	subs	r4, r0, #0
   1065c:	d028      	beq.n	106b0 <__aeabi_ui2d+0x58>
   1065e:	f7f9 ffe5 	bl	a62c <__clzsi2>
   10662:	4a15      	ldr	r2, [pc, #84]	; (106b8 <__aeabi_ui2d+0x60>)
   10664:	1a12      	subs	r2, r2, r0
   10666:	280a      	cmp	r0, #10
   10668:	dd15      	ble.n	10696 <__aeabi_ui2d+0x3e>
   1066a:	380b      	subs	r0, #11
   1066c:	4084      	lsls	r4, r0
   1066e:	0324      	lsls	r4, r4, #12
   10670:	0552      	lsls	r2, r2, #21
   10672:	0b24      	lsrs	r4, r4, #12
   10674:	0d52      	lsrs	r2, r2, #21
   10676:	2300      	movs	r3, #0
   10678:	2000      	movs	r0, #0
   1067a:	2100      	movs	r1, #0
   1067c:	0324      	lsls	r4, r4, #12
   1067e:	1c18      	adds	r0, r3, #0
   10680:	0d0b      	lsrs	r3, r1, #20
   10682:	0b24      	lsrs	r4, r4, #12
   10684:	051b      	lsls	r3, r3, #20
   10686:	4323      	orrs	r3, r4
   10688:	4c0c      	ldr	r4, [pc, #48]	; (106bc <__aeabi_ui2d+0x64>)
   1068a:	0512      	lsls	r2, r2, #20
   1068c:	401c      	ands	r4, r3
   1068e:	4314      	orrs	r4, r2
   10690:	0064      	lsls	r4, r4, #1
   10692:	0861      	lsrs	r1, r4, #1
   10694:	bd10      	pop	{r4, pc}
   10696:	1c03      	adds	r3, r0, #0
   10698:	3315      	adds	r3, #21
   1069a:	1c21      	adds	r1, r4, #0
   1069c:	4099      	lsls	r1, r3
   1069e:	1c0b      	adds	r3, r1, #0
   106a0:	210b      	movs	r1, #11
   106a2:	1a08      	subs	r0, r1, r0
   106a4:	40c4      	lsrs	r4, r0
   106a6:	0324      	lsls	r4, r4, #12
   106a8:	0552      	lsls	r2, r2, #21
   106aa:	0b24      	lsrs	r4, r4, #12
   106ac:	0d52      	lsrs	r2, r2, #21
   106ae:	e7e3      	b.n	10678 <__aeabi_ui2d+0x20>
   106b0:	2200      	movs	r2, #0
   106b2:	2400      	movs	r4, #0
   106b4:	2300      	movs	r3, #0
   106b6:	e7df      	b.n	10678 <__aeabi_ui2d+0x20>
   106b8:	0000041e 	.word	0x0000041e
   106bc:	800fffff 	.word	0x800fffff
   106c0:	0000496c 	.word	0x0000496c
   106c4:	0000496c 	.word	0x0000496c
   106c8:	000049fc 	.word	0x000049fc
   106cc:	000048c0 	.word	0x000048c0
   106d0:	00004906 	.word	0x00004906
   106d4:	00004928 	.word	0x00004928
   106d8:	000049ae 	.word	0x000049ae
   106dc:	000049ae 	.word	0x000049ae
   106e0:	00004a68 	.word	0x00004a68
   106e4:	00004894 	.word	0x00004894
   106e8:	00004ac2 	.word	0x00004ac2
   106ec:	00004ac2 	.word	0x00004ac2
   106f0:	00004ac2 	.word	0x00004ac2
   106f4:	00004ac2 	.word	0x00004ac2
   106f8:	0000494a 	.word	0x0000494a
   106fc:	42000800 	.word	0x42000800
   10700:	42000c00 	.word	0x42000c00
   10704:	42001000 	.word	0x42001000
   10708:	42001400 	.word	0x42001400
   1070c:	42001800 	.word	0x42001800
   10710:	42001c00 	.word	0x42001c00
   10714:	0c0b0a09 	.word	0x0c0b0a09
   10718:	00000e0d 	.word	0x00000e0d
   1071c:	00007a96 	.word	0x00007a96
   10720:	00007b0e 	.word	0x00007b0e
   10724:	00007b0e 	.word	0x00007b0e
   10728:	00007ab6 	.word	0x00007ab6
   1072c:	00007ab0 	.word	0x00007ab0
   10730:	00007abc 	.word	0x00007abc
   10734:	00007a9c 	.word	0x00007a9c
   10738:	00007ac2 	.word	0x00007ac2
   1073c:	00007af6 	.word	0x00007af6
   10740:	00007bd8 	.word	0x00007bd8
   10744:	00007c26 	.word	0x00007c26
   10748:	00007c26 	.word	0x00007c26
   1074c:	00007c22 	.word	0x00007c22
   10750:	00007bca 	.word	0x00007bca
   10754:	00007bea 	.word	0x00007bea
   10758:	00007bba 	.word	0x00007bba
   1075c:	00007bfc 	.word	0x00007bfc
   10760:	00007c0e 	.word	0x00007c0e
   10764:	42002c00 	.word	0x42002c00
   10768:	42003000 	.word	0x42003000
   1076c:	42003400 	.word	0x42003400
   10770:	42003800 	.word	0x42003800
   10774:	42003c00 	.word	0x42003c00
   10778:	1d1c1c1b 	.word	0x1d1c1c1b
   1077c:	0000001d 	.word	0x0000001d
   10780:	10000800 	.word	0x10000800
   10784:	40002000 	.word	0x40002000
   10788:	00008000 	.word	0x00008000
   1078c:	5f6d326d 	.word	0x5f6d326d
   10790:	69666977 	.word	0x69666977
   10794:	636f735f 	.word	0x636f735f
   10798:	5f74656b 	.word	0x5f74656b
   1079c:	646e6168 	.word	0x646e6168
   107a0:	3a72656c 	.word	0x3a72656c
   107a4:	6e696220 	.word	0x6e696220
   107a8:	72652064 	.word	0x72652064
   107ac:	21726f72 	.word	0x21726f72
   107b0:	00000000 	.word	0x00000000
   107b4:	726f6f44 	.word	0x726f6f44
   107b8:	006e616d 	.word	0x006e616d
   107bc:	69666977 	.word	0x69666977
   107c0:	5f636e5f 	.word	0x5f636e5f
   107c4:	61746164 	.word	0x61746164
   107c8:	6c61635f 	.word	0x6c61635f
   107cc:	6361626c 	.word	0x6361626c
   107d0:	72203a6b 	.word	0x72203a6b
   107d4:	69656365 	.word	0x69656365
   107d8:	20646576 	.word	0x20646576
   107dc:	20707061 	.word	0x20707061
   107e0:	7373656d 	.word	0x7373656d
   107e4:	00656761 	.word	0x00656761
   107e8:	5f6d326d 	.word	0x5f6d326d
   107ec:	69666977 	.word	0x69666977
   107f0:	6174735f 	.word	0x6174735f
   107f4:	203a6574 	.word	0x203a6574
   107f8:	5f4d324d 	.word	0x5f4d324d
   107fc:	49464957 	.word	0x49464957
   10800:	5345525f 	.word	0x5345525f
   10804:	4f435f50 	.word	0x4f435f50
   10808:	54535f4e 	.word	0x54535f4e
   1080c:	5f455441 	.word	0x5f455441
   10810:	4e414843 	.word	0x4e414843
   10814:	3a444547 	.word	0x3a444547
   10818:	4e4f4320 	.word	0x4e4f4320
   1081c:	5443454e 	.word	0x5443454e
   10820:	00004445 	.word	0x00004445
   10824:	5f6d326d 	.word	0x5f6d326d
   10828:	69666977 	.word	0x69666977
   1082c:	6174735f 	.word	0x6174735f
   10830:	203a6574 	.word	0x203a6574
   10834:	5f4d324d 	.word	0x5f4d324d
   10838:	49464957 	.word	0x49464957
   1083c:	5345525f 	.word	0x5345525f
   10840:	4f435f50 	.word	0x4f435f50
   10844:	54535f4e 	.word	0x54535f4e
   10848:	5f455441 	.word	0x5f455441
   1084c:	4e414843 	.word	0x4e414843
   10850:	3a444547 	.word	0x3a444547
   10854:	53494420 	.word	0x53494420
   10858:	4e4e4f43 	.word	0x4e4e4f43
   1085c:	45544345 	.word	0x45544345
   10860:	00000044 	.word	0x00000044
   10864:	636f7250 	.word	0x636f7250
   10868:	74736172 	.word	0x74736172
   1086c:	74616e69 	.word	0x74616e69
   10870:	006e6f69 	.word	0x006e6f69
   10874:	7265737a 	.word	0x7265737a
   10878:	69757974 	.word	0x69757974
   1087c:	3231706f 	.word	0x3231706f
   10880:	00000033 	.word	0x00000033
   10884:	5f6d326d 	.word	0x5f6d326d
   10888:	69666977 	.word	0x69666977
   1088c:	6174735f 	.word	0x6174735f
   10890:	203a6574 	.word	0x203a6574
   10894:	5f4d324d 	.word	0x5f4d324d
   10898:	49464957 	.word	0x49464957
   1089c:	5145525f 	.word	0x5145525f
   108a0:	4348445f 	.word	0x4348445f
   108a4:	4f435f50 	.word	0x4f435f50
   108a8:	203a464e 	.word	0x203a464e
   108ac:	69205049 	.word	0x69205049
   108b0:	75252073 	.word	0x75252073
   108b4:	2e75252e 	.word	0x2e75252e
   108b8:	252e7525 	.word	0x252e7525
   108bc:	00000a75 	.word	0x00000a75
   108c0:	6f6d6564 	.word	0x6f6d6564
   108c4:	6174735f 	.word	0x6174735f
   108c8:	203a7472 	.word	0x203a7472
   108cc:	645f6d6e 	.word	0x645f6d6e
   108d0:	695f7672 	.word	0x695f7672
   108d4:	2074696e 	.word	0x2074696e
   108d8:	6c6c6163 	.word	0x6c6c6163
   108dc:	72726520 	.word	0x72726520
   108e0:	0021726f 	.word	0x0021726f
   108e4:	6f6d6564 	.word	0x6f6d6564
   108e8:	6174735f 	.word	0x6174735f
   108ec:	203a7472 	.word	0x203a7472
   108f0:	6c696166 	.word	0x6c696166
   108f4:	74206465 	.word	0x74206465
   108f8:	7263206f 	.word	0x7263206f
   108fc:	65746165 	.word	0x65746165
   10900:	20585220 	.word	0x20585220
   10904:	20504455 	.word	0x20504455
   10908:	65696c63 	.word	0x65696c63
   1090c:	7320746e 	.word	0x7320746e
   10910:	656b636f 	.word	0x656b636f
   10914:	72652074 	.word	0x72652074
   10918:	21726f72 	.word	0x21726f72
   1091c:	00000000 	.word	0x00000000
   10920:	6f6d6564 	.word	0x6f6d6564
   10924:	6174735f 	.word	0x6174735f
   10928:	203a7472 	.word	0x203a7472
   1092c:	6c696166 	.word	0x6c696166
   10930:	74206465 	.word	0x74206465
   10934:	7263206f 	.word	0x7263206f
   10938:	65746165 	.word	0x65746165
   1093c:	20585420 	.word	0x20585420
   10940:	20504455 	.word	0x20504455
   10944:	65696c63 	.word	0x65696c63
   10948:	7320746e 	.word	0x7320746e
   1094c:	656b636f 	.word	0x656b636f
   10950:	72652074 	.word	0x72652074
   10954:	21726f72 	.word	0x21726f72
   10958:	00000000 	.word	0x00000000
   1095c:	6f6d6564 	.word	0x6f6d6564
   10960:	6174735f 	.word	0x6174735f
   10964:	203a7472 	.word	0x203a7472
   10968:	736e6573 	.word	0x736e6573
   1096c:	7220726f 	.word	0x7220726f
   10970:	726f7065 	.word	0x726f7065
   10974:	65732074 	.word	0x65732074
   10978:	0000746e 	.word	0x0000746e
   1097c:	6f6d6564 	.word	0x6f6d6564
   10980:	6174735f 	.word	0x6174735f
   10984:	203a7472 	.word	0x203a7472
   10988:	6c696166 	.word	0x6c696166
   1098c:	74206465 	.word	0x74206465
   10990:	6573206f 	.word	0x6573206f
   10994:	7320646e 	.word	0x7320646e
   10998:	75746174 	.word	0x75746174
   1099c:	65722073 	.word	0x65722073
   109a0:	74726f70 	.word	0x74726f70
   109a4:	72726520 	.word	0x72726520
   109a8:	0021726f 	.word	0x0021726f
   109ac:	6e69616d 	.word	0x6e69616d
   109b0:	7953203a 	.word	0x7953203a
   109b4:	63695473 	.word	0x63695473
   109b8:	6f63206b 	.word	0x6f63206b
   109bc:	6769666e 	.word	0x6769666e
   109c0:	74617275 	.word	0x74617275
   109c4:	206e6f69 	.word	0x206e6f69
   109c8:	6f727265 	.word	0x6f727265
   109cc:	00002172 	.word	0x00002172
   109d0:	57202d2d 	.word	0x57202d2d
   109d4:	20696669 	.word	0x20696669
   109d8:	20494d4e 	.word	0x20494d4e
   109dc:	706d6574 	.word	0x706d6574
   109e0:	74617265 	.word	0x74617265
   109e4:	20657275 	.word	0x20657275
   109e8:	736e6573 	.word	0x736e6573
   109ec:	6420726f 	.word	0x6420726f
   109f0:	206f6d65 	.word	0x206f6d65
   109f4:	0a0d2d2d 	.word	0x0a0d2d2d
   109f8:	53202d2d 	.word	0x53202d2d
   109fc:	32444d41 	.word	0x32444d41
   10a00:	50585f31 	.word	0x50585f31
   10a04:	4e49414c 	.word	0x4e49414c
   10a08:	505f4445 	.word	0x505f4445
   10a0c:	2d204f52 	.word	0x2d204f52
   10a10:	2d0a0d2d 	.word	0x2d0a0d2d
   10a14:	6f43202d 	.word	0x6f43202d
   10a18:	6c69706d 	.word	0x6c69706d
   10a1c:	203a6465 	.word	0x203a6465
   10a20:	206e614a 	.word	0x206e614a
   10a24:	32203432 	.word	0x32203432
   10a28:	20353130 	.word	0x20353130
   10a2c:	353a3031 	.word	0x353a3031
   10a30:	34333a30 	.word	0x34333a30
   10a34:	0d2d2d20 	.word	0x0d2d2d20
   10a38:	0000000a 	.word	0x0000000a
   10a3c:	00009b24 	.word	0x00009b24
   10a40:	00009d12 	.word	0x00009d12
   10a44:	00009d12 	.word	0x00009d12
   10a48:	00009b02 	.word	0x00009b02
   10a4c:	000099ea 	.word	0x000099ea
   10a50:	000099ea 	.word	0x000099ea
   10a54:	00009af2 	.word	0x00009af2
   10a58:	00009b02 	.word	0x00009b02
   10a5c:	000099ea 	.word	0x000099ea
   10a60:	00009af2 	.word	0x00009af2
   10a64:	000099ea 	.word	0x000099ea
   10a68:	00009b02 	.word	0x00009b02
   10a6c:	000099e8 	.word	0x000099e8
   10a70:	000099e8 	.word	0x000099e8
   10a74:	000099e8 	.word	0x000099e8
   10a78:	00009d1a 	.word	0x00009d1a

00010a7c <_global_impure_ptr>:
   10a7c:	20000048 000a0043                       H.. C...

00010a84 <blanks.6758>:
   10a84:	20202020 20202020 20202020 20202020                     

00010a94 <zeroes.6759>:
   10a94:	30303030 30303030 30303030 30303030     0000000000000000
   10aa4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   10ab4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   10ac4:	32313000 36353433 61393837 65646362     .0123456789abcde
   10ad4:	00300066 69666e49 7974696e 4e614e00     f.0.Infinity.NaN
   10ae4:	534f5000 2e005849 00000000              .POSIX......

00010af0 <p05.5289>:
   10af0:	00000005 00000019 0000007d 00000000     ........}.......

00010b00 <__mprec_tens>:
   10b00:	00000000 3ff00000 00000000 40240000     .......?......$@
   10b10:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   10b20:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   10b30:	00000000 412e8480 00000000 416312d0     .......A......cA
   10b40:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   10b50:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   10b60:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   10b70:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   10b80:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   10b90:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   10ba0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   10bb0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   10bc0:	79d99db4 44ea7843                       ...yCx.D

00010bc8 <__mprec_tinytens>:
   10bc8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   10bd8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   10be8:	64ac6f43 0ac80628                       Co.d(...

00010bf0 <__mprec_bigtens>:
   10bf0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   10c00:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   10c10:	7f73bf3c 75154fdd                       <.s..O.u

00010c18 <blanks.6701>:
   10c18:	20202020 20202020 20202020 20202020                     

00010c28 <zeroes.6702>:
   10c28:	30303030 30303030 30303030 30303030     0000000000000000
   10c38:	000101f8 0001018c 000101d6 000100ba     ................
   10c48:	000101d6 000101c8 000101d6 000100ba     ................
   10c58:	0001018c 0001018c 000101c8 000100ba     ................
   10c68:	000100b0 000100b0 000100b0 0001041c     ................

00010c78 <_init>:
   10c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c7a:	46c0      	nop			; (mov r8, r8)
   10c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10c7e:	bc08      	pop	{r3}
   10c80:	469e      	mov	lr, r3
   10c82:	4770      	bx	lr

00010c84 <__init_array_start>:
   10c84:	0000c34d 	.word	0x0000c34d

00010c88 <__frame_dummy_init_array_entry>:
   10c88:	00000131                                1...

00010c8c <_fini>:
   10c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c8e:	46c0      	nop			; (mov r8, r8)
   10c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10c92:	bc08      	pop	{r3}
   10c94:	469e      	mov	lr, r3
   10c96:	4770      	bx	lr

00010c98 <__fini_array_start>:
   10c98:	00000105 	.word	0x00000105
